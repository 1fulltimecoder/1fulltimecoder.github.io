<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on Samir Paul</title>
    <link>https://samirpaulb.github.io/posts/</link>
    <description>Recent content in Blog Posts on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real-Time VoiceüéôÔ∏è Translatorüîä</title>
      <link>https://samirpaulb.github.io/posts/real-time-voice-translator/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/real-time-voice-translator/</guid>
      <description>Real-Time Voice Translator</description>
      <content:encoded><![CDATA[<p><b>Repository Link: <a href="https://github.com/SamirPaulb/real-time-voice-translator">github.com/SamirPaulb/real-time-voice-translator</a></b></p>
<h2 id="abstract">Abstract</h2>
<p><em>Cross-lingual communication is a challenging task that requires accurate translation and natural and expressive speech. Existing solutions often rely on intermediate text representations, which introduce latency and lose the prosodic features of the original speech. In this paper, we present Real-Time Voice Translator, a machine learning project that aims to overcome these limitations by using deep neural networks to directly translate voice from one language to another in real-time. Our project is a desktop application that supports Windows, Linux, and Mac operating systems. It allows users to select the languages they want to translate between and start speaking. The application listens to the user&rsquo;s voice and provides instant translations in real time while preserving the tone and emotion of the speaker. The application can also translate conversations between two or more people, enabling natural and fluent cross-lingual interactions. We evaluate our project on various metrics, such as translation quality, speech quality, latency, and user satisfaction. We demonstrate that our project achieves high performance and provides a seamless and natural experience of cross-lingual communication. We also discuss the future perspectives of our project, such as using voice cloning features to mimic the speaker&rsquo;s voice in the target language and enhancing the emotional preservation of the translated speech. We believe that our project has the potential to revolutionize the field of cross-lingual communication and open new possibilities for cross-cultural exchange and collaboration.</em></p>
<p><strong>Index Terms</strong>: <code>Real-Time Voice Translation</code>, <code>Deep Learning</code>, <code>Voice Tone and Emotion Preservation</code>, <code>Desktop Application</code>.</p>
<h2 id="introduction">Introduction</h2>
<p>Imagine bridging language barriers in real time, preserving emotional nuances and fostering genuine cross-cultural understanding. Real-Time Voice Translator (RTVT) unlocks this possibility, utilizing deep learning to translate spoken words instantly, while faithfully mirroring the speaker&rsquo;s tone and intent. This open-source, desktop application empowers seamless communication across languages, fostering empathy, collaboration, and a more connected world. This research unveils the technical backbone and transformative potential of RTVT, a tool poised to redefine how we interact and collaborate beyond linguistic borders.</p>
<h2 id="studies-and-findings">Studies and Findings</h2>
<p>The allure of instantaneous, seamless speech-to-speech translation across languages is undeniable. Research in end-to-end models like Google&rsquo;s Translatotron, directly mapping speech spectrograms, offers a glimpse into this future. However, the realities of limited language compatibility and lingering technical hurdles made such an approach unsuitable for this real-time voice translator project.</p>
<p>Drawing inspiration from established technologies, we embraced a hybrid approach, meticulously dissecting the translation process into speech-to-text, text-to-text translation, and finally, text-to-speech synthesis. This multi-step journey, while potentially a tad slower than its end-to-end counterparts, unlocked several key advantages. Firstly, it provided access to a vast pool of existing text translation models, vastly expanding the supported language pairs. Secondly, it paved the way for incorporating transliteration features, a valuable tool for bridging the gap between written and spoken forms of a language.</p>
<p>This decision wasn&rsquo;t merely a practical compromise; it was a deliberate move towards a more robust and adaptable framework. While sacrificing the immediacy of spectrogram-based models, we gained a translation engine capable of tackling a wider range of languages and scenarios. As the field of speech-to-speech translation continues to evolve, this hybrid approach offers a stable platform for ongoing development, promising to bring the dream of real-time, cross-lingual communication ever closer to reality.</p>
<h2 id="speech-translation-model">Speech Translation Model</h2>
<p>The Speech Translation Model (STM) orchestrates a series of interconnected processes to achieve real-time, cross-lingual voice communication. Here&rsquo;s a breakdown of its core steps:</p>
<ol>
<li><strong>Voice Input and Automatic Speech Recognition (ASR)</strong>:</li>
</ol>
<ul>
<li>
<p>The journey begins with capturing the user&rsquo;s spoken utterance in the source language.</p>
</li>
<li>
<p>ASR technology meticulously analyzes the audio signal, mapping its acoustic features to linguistic units.</p>
</li>
<li>
<p>The intricate task of identifying phonemes, words, and their boundaries within continuous speech is performed with remarkable accuracy.</p>
</li>
</ul>
<ol start="2">
<li><strong>Input Voice to Text Conversion</strong>:</li>
</ol>
<ul>
<li>
<p>The ASR process culminates in a textual representation of the spoken input, ready for further linguistic transformations.</p>
</li>
<li>
<p>This stage ensures that the model has a structured foundation for subsequent translation and transliteration operations.</p>
</li>
</ul>
<ol start="3">
<li><strong>Transliteration for Textual Adaptation</strong>:</li>
</ol>
<ul>
<li>
<p>To bridge the gap between different writing systems and enhance translation accuracy, transliteration steps in.</p>
</li>
<li>
<p>It meticulously maps the characters of the source language text to their closest equivalents in the target language.</p>
</li>
<li>
<p>This process seamlessly adapts language-specific nuances, ensuring a smooth transition between written forms.</p>
</li>
</ul>
<ol start="4">
<li><strong>Translation of Transliterated Text</strong>:</li>
</ol>
<ul>
<li>
<p>With the text carefully adapted for the target language, the translation engine takes centre stage.</p>
</li>
<li>
<p>Leveraging sophisticated machine translation algorithms, it deciphers the meaning of the source text and artfully reconstructs it in the target language.</p>
</li>
<li>
<p>The model navigates the complexities of grammar, syntax, and semantics, striving for fluency and accuracy in the translated output.</p>
</li>
</ul>
<ol start="5">
<li><strong>Text-to-Speech Synthesis</strong>:</li>
</ol>
<ul>
<li>
<p>The translated text now embarks on a journey back into the auditory realm.</p>
</li>
<li>
<p>Text-to-Speech (TTS) technology meticulously transforms written words into a natural-sounding speech signal.</p>
</li>
<li>
<p>This stage meticulously recreates the nuances of human intonation, rhythm, and pronunciation, breathing life into the translated message.</p>
</li>
</ul>
<ol start="6">
<li><strong>Voice Output</strong>:</li>
</ol>
<ul>
<li>
<p>The final step unveils the translated utterance in the target language, spoken aloud for the listener.</p>
</li>
<li>
<p>The model gracefully renders the translated text as intelligible speech, completing the cross-lingual communication loop.</p>
</li>
<li>
<p>solid foundation for subsequent translation.</p>
</li>
<li>
<p>deep-translator: This versatile library offers a comprehensive suite of translation capabilities, ensuring linguistic accuracy and fluency across a diverse range of language pairs.</p>
</li>
<li>
<p>google-transliteration-api: This API elegantly handled the task of transliteration, adapting text between different writing systems, fostering a seamless transition between languages.</p>
</li>
<li>
<p>cx-Freeze: This tool enabled the packaging of the STM into standalone executable applications for Windows, Linux, and macOS, significantly broadening its accessibility and potential user base.</p>
</li>
</ul>
<p><strong>Program Flow:</strong>
<img loading="lazy" src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/73dd62d6-798d-4129-aff3-16d6d932a817" alt="Program Flow"  />
</p>
<ul>
<li>
<p><strong>Voice Input</strong>: The journey begins with capturing the user&rsquo;s spoken utterance in the source language, meticulously handled by pyaudio.</p>
</li>
<li>
<p><strong>Automatic Speech Recognition</strong>: SpeechRecognition diligently analyzes the audio signal, converting it into text for further processing.</p>
</li>
<li>
<p><strong>Transliteration</strong>: The google-transliteration-api gracefully adapts the text to the target language&rsquo;s writing system, ensuring optimal translation accuracy.</p>
</li>
<li>
<p><strong>Translation</strong>: deep-translator leverages sophisticated translation algorithms to decipher the meaning of the source text and reconstruct it in the target language, preserving linguistic nuances.</p>
</li>
<li>
<p><strong>Text-to-Speech Synthesis</strong>: gTTS meticulously transforms the translated text into a natural-sounding speech signal, breathing life into the translated message.</p>
</li>
<li>
<p><strong>Voice Output</strong>: playsound delivers the translated utterance in the target language, completing the cross-lingual communication loop.</p>
</li>
</ul>
<h2 id="installation-and-usage">Installation and Usage</h2>
<h3 id="dependencies">Dependencies</h3>
<pre><code>&lt;=Python3.11, gTTS, pyaudio, playsound==1.2.2, deep-translator, SpeechRecognition, google-transliteration-api, cx-Freeze
</code></pre>
<h3 id="getting-started">Getting started</h3>
<ol>
<li>
<p>Clone <a href="https://github.com/SamirPaulb/real-time-voice-translator">this project</a> and create virtualenv (recommended) and activate virtualenv.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Create virtualenv
</span></span><span class="line"><span class="cl">python -m venv env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Linux/MacOS
</span></span><span class="line"><span class="cl">source env/bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Windows
</span></span><span class="line"><span class="cl">env\Scripts\activate
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Install require dependencies.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install --upgrade wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Run code and speech (have fun).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="install-windowslinuxmac-application">Install Windows/Linux/Mac Application</h3>
<p><a href="https://github.com/SamirPaulb/real-time-voice-translator/releases/latest"><img src="https://user-images.githubusercontent.com/132539454/278971282-8d676023-a03a-463c-8e55-3f0afe6e3e58.svg" alt="DOWNLOAD"></a></p>
<p>I am using <a href="https://github.com/marcelotduarte/cx_Freeze/tree/main">cx_Freeze</a> to build executable file of this app. The build settings can be changed by modifying the <a href="https://github.com/SamirPaulb/real-time-voice-translator/blob/main/setup.py">setup.py</a> file.</p>
<h5 id="build-installer-containing-all-the-files">Build installer containing all the files:</h5>
<ul>
<li>Windows: <code>python setup.py bdist_msi</code></li>
<li>Linux: <code>python setup.py bdist_rpm</code></li>
<li>Mac: <code>python setup.py bdist_mac</code></li>
</ul>
<h3 id="gui">GUI</h3>
<p><a href="#"><img src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/f96a4115-a88f-4096-9a00-954b8527d872" alt="App GUI"></a></p>
<h2 id="conclusion">Conclusion</h2>
<p>Real-Time Voice Translator shatters language barriers with its deep learning-powered hybrid approach. Beyond accurate translations, it captures the essence of human speech, fostering genuine cross-cultural understanding. This research unveils its robust framework, adaptable design, and potential for future advancements like voice cloning and emotion preservation. Real-Time Voice Translator intuitive interface and cross-platform compatibility empower diverse users to navigate the world with ease. More than just a tool, it&rsquo;s a bridge of empathy and collaboration, one voice at a time. By embracing Real-Time Voice Translator, we step closer to a world where communication transcends borders, uniting cultures and shaping a more connected future.</p>
<h2 id="future-work">Future Work</h2>
<p>While this project currently delivers impressive real-time translations, the future holds even greater potential for capturing the full spectrum of human communication. Sentiment and emotion analysis models like EmoNet and SyntaxNet offer exciting possibilities for preserving the speaker&rsquo;s intended meaning beyond mere words. Integrating these tools could allow Real-Time Voice Translator to translate expressions of joy, anger, or sarcasm with nuanced accuracy, fostering deeper cross-cultural understanding.</p>
<p>Open-source toolkits like PaddleSpeech and espnet, known for their advanced speech-processing capabilities, could further enhance the translation process. Their deep learning frameworks offer the potential for improvements in speech recognition, natural language understanding, and text-to-speech synthesis. Additionally, incorporating SoftVC VITS Singing Voice Conversion technology could unlock fascinating avenues for translating emotional melodies and vocal inflections, adding a truly human touch to translated speech.</p>
<p>We&rsquo;re actively exploring the integration of OpenAI&rsquo;s Whisper ASR model, renowned for its speech recognition accuracy, and ElevenLabs&rsquo; natural-sounding speech APIs. These advancements promise to elevate the user experience, delivering translated speech that seamlessly captures the speaker&rsquo;s original voice quality and emotional tone. Finally, accent softening models like Tomato.ai could be implemented to reduce speaker-specific characteristics in the translated speech, ensuring clearer and more universal comprehension.</p>
<p>By embracing these cutting-edge technologies and pursuing continuous research, Real-Time Voice Translator aims to transcend the limitations of traditional translation. Our vision is to create a tool that not only bridges languages but also bridges hearts, fostering a world where emotions and intentions resonate across all barriers.</p>
<h2 id="references">References</h2>
<ol>
<li>
<p>Cambria, Erik, and Jamin Shi. &ldquo;Semantic sentiment analysis.&rdquo; IEEE Transactions on Affective Computing 7.4 (2015): 266-279.</p>
</li>
<li>
<p>Socher, Richard, et al. &ldquo;Recursive deep learning for sentiment analysis.&rdquo; Proceedings of the 28th International Conference on Machine Learning. ACM, 2013.</p>
</li>
<li>
<p><a href="https://github.com/PaddlePaddle/PaddleSpeech">PaddlePaddle Team</a>. paddlepaddle speech recognition ON PaddlePaddle paddlepaddle.org.cn.</p>
</li>
<li>
<p>ESPNet Working Group. &ldquo;ESPnet.&rdquo; GitHub Pages, github.com.</p>
</li>
<li>
<p>Hsu, Wei-Ning, et al. &ldquo;SoftVC: High-fidelity TTS with Mel-Style Transfer.&rdquo; arXiv preprint arXiv:2301.04765 (2023).</p>
</li>
<li>
<p>OpenAI <a href="https://github.com/openai/whisper">Whisper</a>: Open-Source Speech Recognition.</p>
</li>
<li>
<p>ElevenLabs. &ldquo;ElevenLabs.&rdquo; eleventlabs.io.</p>
</li>
<li>
<p>Tomato.ai. &ldquo;Tomato.ai&rdquo;.</p>
</li>
<li>
<p>Mohri, Mehryar, et al. &ldquo;Foundations of machine learning.&rdquo; MIT press, 2018.</p>
</li>
</ol>
<hr>
<p>This post is licensed under a <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>. Distribution and adaptation are permitted under the terms of the license, with appropriate attribution required. All rights not expressly granted are reserved. For further information, please visit <a href="https://www.dmca.com/r/jkzgz6y">dmca.com/r/jkzgz6y</a>.</p>
<p><a href="https://www.dmca.com/r/jkzgz6y"><img loading="lazy" src="https://www.dmca.com/Badges/dmca-badge-w250-5x1-06.png" alt="DMCA.com Protection Status"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Data Structures and Algorithms for Coding Interview</title>
      <link>https://samirpaulb.github.io/posts/data-structures-and-algorithms-for-coding-interview/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/data-structures-and-algorithms-for-coding-interview/</guid>
      <description>Data Structures and Algorithms for Coding Interview</description>
      <content:encoded><![CDATA[<p><b>Repository Link: <a href="https://github.com/SamirPaulb/DSAlgo">https://github.com/SamirPaulb/DSAlgo</a></b></p>
<blockquote>
<p>In this repository, I have stored solutions to various problems and concepts of Data Structures and Algorithms in Python in a structured manner.</p>
</blockquote>
<!-- <img alt="Stars" src="https://img.shields.io/github/stars/SamirPaulb/DSAlgo"> 
<img alt="Forks" src="https://img.shields.io/github/forks/SamirPaulb/DSAlgo"> 
<img alt="Size" src="https://img.shields.io/github/repo-size/SamirPaulb/DSAlgo"> 
<img alt="Hits" src="https://hitsofcode.com/github/SamirPaulb/DSAlgo?branch=main">
<img alt="language" src="https://user-images.githubusercontent.com/77569653/227633223-43014974-ac8f-4cf9-8605-93d08cb2d5fd.svg"> -->
<p><a href="https://github.com/SamirPaulb/DSAlgo"><img loading="lazy" src="https://github-readme-stats.vercel.app/api/pin/?username=SamirPaulb&amp;repo=DSAlgo&amp;show_owner=true" alt="Readme Card"  />
</a></p>
<h3 id="topics-covered"><em><strong>Topics Covered</strong></em>:</h3>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/02_Dynamic-Programming"><strong>Dynamic Programming</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/03_Sorting-Algorithms"><strong>Sorting Algorithms</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/04_LinkedList"><strong>LinkedList</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/05_Object-Oriented-Programming"><strong>Object-Oriented Programming</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/06_Binary-Trees"><strong>Binary Trees</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/07_Graph"><strong>Graph Algorithms</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/08_Heap"><strong>Heap</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/09_Matrix"><strong>Matrix</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/10_Trie"><strong>Trie</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/11_Binary-Search"><strong>Binary Search</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/12_Backtracking"><strong>Backtracking</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/13_Stack"><strong>Stack</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/14_Queue"><strong>Queue</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/15_Greedy"><strong>Greedy</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/16_String"><strong>String</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/17_Bit-Manipulation"><strong>Bit Manipulation</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/18_Array"><strong>Array</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/19_HashMap"><strong>HashMap</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/20_DFS-BFS"><strong>DFS BFS</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/21_Two-Pointers"><strong>Two Pointers</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/22_Math"><strong>Math</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/23_Recursion"><strong>Recursion</strong></a></li>
</ul>
<p>In various folders of the above topics, you can find questions and concepts related to that topic.</p>
<ul>
<li>
<p>In the <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/02_Dynamic-Programming">Dynamic Programming</a> section, you can find all the questions covered and not covered in <a href="https://www.youtube.com/c/AdityaVermaTheProgrammingLord">Aditya Verma&rsquo;s</a> <a href="https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go">dynamic programming playlist</a> folder-wise with my <a href="https://raw.githubusercontent.com/SamirPaulb/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf">handwritten notes</a>.‚úçÔ∏è</p>
</li>
<li>
<p>If you are preparing for an interview from <a href="https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/">Striver‚Äôs SDE Sheet</a> then the <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice"><strong>30-Days-SDE-Sheet-Practice</strong></a> will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.üéØ</p>
</li>
<li>
<p>In the  <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/Questions-Sheet"><strong>Questions-Sheet</strong></a> directory, you can find questions asked by top product-based companies.</p>
</li>
<li>
<p>There is a collection of books and pdfs on various important computer science fundamentals in the <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/BOOKS-and-PDFs"><strong>BOOKS-and-PDFs</strong></a> directory.üìö</p>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/repository-image-dsalgo-samirpaul1-leetcode-post.jpeg" alt="DSAlgo repo"  title="DSAlgo repository"  />
</p>
<hr>
<p align="center">
<b>View this repository in online VS Code: <a href="https://samirpaulb.github.io/DSAlgo">  https://samirpaul.in/DSAlgo.  <img alt="DSAlgo"  loading="lazy" src="https://github.com/SamirPaulb/DSAlgo/actions/workflows/pages/pages-build-deployment/badge.svg">
</a></b>
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/samirpaul.in-DSAlgo-demo.png" alt="DSA Online VSCode"  title="DSA Online VSCode"  />
</p>
<hr>
<p>I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.üíª</p>
<p><strong>Things you can contribute to:</strong></p>
<ul>
<li>Update the existing solution with a better one (better complexity).</li>
<li>Add new questions and solutions in <code>Python3</code> to the respective directory.</li>
<li>Add new resources to <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/BOOKS-and-PDFs">BOOKS-and-PDFs</a> &amp; <a href="https://github.com/SamirPaulb/DSAlgo/tree/main/Questions-Sheet">Questions-Sheet</a>.</li>
<li>Solve issues raised by other people or yourself.</li>
<li>Provide well-documented source code with detailed explanations.</li>
</ul>
<hr>
<h3 id="stargazers-over-time">Stargazers over time</h3>
<p><a href="https://github.com/SamirPaulb/DSAlgo"><img alt="Star History" loading="lazy"  src="https://api.star-history.com/svg?repos=SamirPaulb/DSAlgo&type=Date"></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Online PDF Compression Tool</title>
      <link>https://samirpaulb.github.io/posts/online-pdf-compression-tool/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/online-pdf-compression-tool/</guid>
      <description>Online PDF Compression Tool</description>
      <content:encoded><![CDATA[<h3 id="about-the-project">About The Project:</h3>
<p>An online PDF file compression tool to reduce the size of a .pdf file. Python Flask is used to upload the file to a temporary location on the server.
In the backend, using the <code>PDFNetPython</code> library that file gets reduced and saved to its final location. After download, the files are automatically deleted from the server after 1 hour. Technologies used in this project: <code>Python3</code>, <code>Flask</code>, <code>C</code>, <code>Shell</code>, <code>Nix</code>, <code>Replit</code>, <code>Git</code>, <code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>.</p>
<ul>
<li><a href="https://filecompressor.samirpaul.repl.co">Live Demo üöÄ </a></li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172896703-9e4998c1-40da-46ae-810e-780e47a391f9.mp4" loading="lazy" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li>Landing Page:
<img loading="lazy" src="https://spcdn.pages.dev/assets/img/filecompressor-samirpaul1-repl-co-landing-page.webp" alt="Landing Page"  />
</li>
</ul>
<h3 id="flask-file-uploading">Flask File Uploading:</h3>
<p>In HTML form, the enctype property is set to <code>&quot;multipart/form-data&quot;</code> to publish the file to the URL.The URL handler extracts the file from the <code>request.files []</code> object and saves it to the required location. The path to the upload folder is defined as <code>app.config['UPLOAD_FOLDER']</code> and maximum size (in bytes) as
<code>maximum size (in bytes)</code>.
The server-side flask script fetches the file from the request object using <code>name = request.files['file'].filename</code>.
On successfully uploading the file, it is saved to the desired location on the server.
Here‚Äôs the Python code for the Flask application.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug</span> <span class="kn">import</span> <span class="n">secure_filename</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;upload.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/uploader&#39;</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">secure_filename</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s1">&#39;file uploaded successfully&#39;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-pdf-is-compressed-in-backend">How PDF is compressed in backend:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PDFNetPython3.PDFNetPython</span> <span class="kn">import</span> <span class="n">PDFDoc</span><span class="p">,</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="p">,</span> <span class="n">PDFNet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">output_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">output_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_file</span> <span class="o">=</span> <span class="n">input_file</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PDFNet</span><span class="o">.</span><span class="n">Initialize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span> <span class="o">=</span> <span class="n">PDFDoc</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">InitSecurityHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">Optimizer</span><span class="o">.</span><span class="n">Optimize</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="o">.</span><span class="n">e_linearized</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">input_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="file-download">File Download:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fname</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;static/resource/&#34;</span> <span class="o">+</span> <span class="nx">fname</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">blob</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">blob</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	      <span class="kr">const</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">fname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	  <span class="p">})</span>
</span></span><span class="line"><span class="cl">	  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="-how-to-contribute">ü§î How to contribute</h2>
<ul>
<li><input checked="" disabled="" type="checkbox"> Fork this repository;</li>
<li><input checked="" disabled="" type="checkbox"> Create a branch with your feature: <code>git checkout -b my-feature</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Commit your changes: <code>git commit -m &quot;feat: my new feature&quot;</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Push to your branch: <code>git push origin my-feature</code>.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>System Design Course</title>
      <link>https://samirpaulb.github.io/posts/system-design-course/</link>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/system-design-course/</guid>
      <description>System Design Course</description>
      <content:encoded><![CDATA[<blockquote>
<p>Learn how to design systems at scale and prepare for system design interviews.</p>
</blockquote>
<p align="center">
<a class="btn-lang" href="https://spcdn.pages.dev/system-design.pdf" target = "_blank">Download PDF</a>
</p>
<h1 id="what-is-system-design">What is system design?</h1>
<p>Before we start this course, let&rsquo;s talk about what even is system design.</p>
<p>System design is the process of defining the architecture, interfaces, and data
for a system that satisfies specific requirements. System design meets the needs
of your business or organization through coherent and efficient systems. It requires
a systematic approach to building and engineering systems. A good system design requires
us to think about everything, from infrastructure all the way down to the data and how it&rsquo;s stored.</p>
<h2 id="why-is-system-design-so-important">Why is System Design so important?</h2>
<p>System design helps us define a solution that meets the business requirements. It is
one of the earliest decisions we can make when building a system. Often it is essential
to think from a high level as these decisions are very difficult to correct later. It
also makes it easier to reason about and manage architectural changes as the system evolves.</p>
<h1 id="ip">IP</h1>
<p>An IP address is a unique address that identifies a device on the internet or a local network. IP stands for <em>&ldquo;Internet Protocol&rdquo;</em>, which is the set of rules governing the format of data sent via the internet or local network.</p>
<p>In essence, IP addresses are the identifier that allows information to be sent between devices on a network. They contain location information and make devices accessible for communication. The internet needs a way to differentiate between different computers, routers, and websites. IP addresses provide a way of doing so and form an essential part of how the internet works.</p>
<h2 id="versions">Versions</h2>
<p>Now, let&rsquo;s learn about the different versions of IP addresses:</p>
<h3 id="ipv4">IPv4</h3>
<p>The original Internet Protocol is IPv4 which uses a 32-bit numeric dot-decimal notation that only allows for around 4 billion IP addresses. Initially, it was more than enough but as internet adoption grew we needed something better.</p>
<p><em>Example: <code>102.22.192.181</code></em></p>
<h3 id="ipv6">IPv6</h3>
<p>IPv6 is a new protocol that was introduced in 1998. Deployment commenced in the mid-2000s and since the internet users have grown exponentially, it is still ongoing.</p>
<p>This new protocol uses 128-bit alphanumeric hexadecimal notation. This means that IPv6 can provide about ~340e+36 IP addresses. That&rsquo;s more than enough to meet the growing demand for years to come.</p>
<p><em>Example: <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></em></p>
<h2 id="types">Types</h2>
<p>Let&rsquo;s discuss types of IP addresses:</p>
<h3 id="public">Public</h3>
<p>A public IP address is an address where one primary address is associated with your whole network. In this type of IP address, each of the connected devices has the same IP address.</p>
<p><em>Example: IP address provided to your router by the ISP.</em></p>
<h3 id="private">Private</h3>
<p>A private IP address is a unique IP number assigned to every device that connects to your internet network, which includes devices like computers, tablets, and smartphones, which are used in your household.</p>
<p><em>Example: IP addresses generated by your home router for your devices.</em></p>
<h3 id="static">Static</h3>
<p>A static IP address does not change and is one that was manually created, as opposed to having been assigned. These addresses are usually more expensive but are more reliable.</p>
<p><em>Example: They are usually used for important things like reliable geo-location services, remote access, server hosting, etc.</em></p>
<h3 id="dynamic">Dynamic</h3>
<p>A dynamic IP address changes from time to time and is not always the same. It has been assigned by a <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">Dynamic Host Configuration Protocol (DHCP)</a> server. Dynamic IP addresses are the most common type of internet protocol addresses. They are cheaper to deploy and allow us to reuse IP addresses within a network as needed.</p>
<p><em>Example: They are more commonly used for consumer equipment and personal use.</em></p>
<h1 id="osi-model">OSI Model</h1>
<p>The OSI Model is a logical and conceptual model that defines network communication used by systems open to interconnection and communication with other systems. The Open System Interconnection (OSI Model) also defines a logical network and effectively describes computer packet transfer by using various layers of protocols.</p>
<p>The OSI Model can be seen as a universal language for computer networking. It&rsquo;s based on the concept of splitting up a communication system into seven abstract layers, each one stacked upon the last.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/osi-model.jpg" alt="osi-model"  />
</p>
<h2 id="why-does-the-osi-model-matter">Why does the OSI model matter?</h2>
<p>The Open System Interconnection (OSI) model has defined the common terminology used in networking discussions and documentation. This allows us to take a very complex communications process apart and evaluate its components.</p>
<p>While this model is not directly implemented in the TCP/IP networks that are most common today, it can still help us do so much more, such as:</p>
<ul>
<li>Make troubleshooting easier and help identify threats across the entire stack.</li>
<li>Encourage hardware manufacturers to create networking products that can communicate with each other over the network.</li>
<li>Essential for developing a security-first mindset.</li>
<li>Separate a complex function into simpler components.</li>
</ul>
<h2 id="layers">Layers</h2>
<p>The seven abstraction layers of the OSI model can be defined as follows, from top to bottom:</p>
<h3 id="application">Application</h3>
<p>This is the only layer that directly interacts with data from the user. Software applications like web browsers and email clients rely on the application layer to initiate communication. But it should be made clear that client software applications are not part of the application layer, rather the application layer is responsible for the protocols and data manipulation that the software relies on to present meaningful data to the user. Application layer protocols include HTTP as well as SMTP.</p>
<h3 id="presentation">Presentation</h3>
<p>The presentation layer is also called the Translation layer. The data from the application layer is extracted here and manipulated as per the required format to transmit over the network. The functions of the presentation layer are translation, encryption/decryption, and compression.</p>
<h3 id="session">Session</h3>
<p>This is the layer responsible for opening and closing communication between the two devices. The time between when the communication is opened and closed is known as the session. The session layer ensures that the session stays open long enough to transfer all the data being exchanged, and then promptly closes the session in order to avoid wasting resources. The session layer also synchronizes data transfer with checkpoints.</p>
<h3 id="transport">Transport</h3>
<p>The transport layer (also known as layer 4) is responsible for end-to-end communication between the two devices. This includes taking data from the session layer and breaking it up into chunks called segments before sending it to the Network layer (layer 3). It is also responsible for reassembling the segments on the receiving device into data the session layer can consume.</p>
<h3 id="network">Network</h3>
<p>The network layer is responsible for facilitating data transfer between two different networks. The network layer breaks up segments from the transport layer into smaller units, called packets, on the sender&rsquo;s device, and reassembles these packets on the receiving device. The network layer also finds the best physical path for the data to reach its destination this is known as routing. <strong>If the two devices communicating are on the same network, then the network layer is unnecessary.</strong></p>
<h3 id="data-link">Data Link</h3>
<p>The data link layer is very similar to the network layer, except the <strong>data link layer facilitates data transfer between two devices on the same network.</strong> The data link layer takes packets from the network layer and breaks them into smaller pieces called frames.</p>
<h3 id="physical">Physical</h3>
<p>This layer includes the physical equipment involved in the data transfer, such as the cables and switches. This is also the layer where the data gets converted into a bit stream, which is a string of 1s and 0s. The physical layer of both devices must also agree on a signal convention so that the 1s can be distinguished from the 0s on both devices.</p>
<h1 id="tcp-and-udp">TCP and UDP</h1>
<h2 id="tcp">TCP</h2>
<p>Transmission Control Protocol (TCP) is connection-oriented, meaning once a connection has been established, data can be transmitted in both directions. TCP has built-in systems to check for errors and to guarantee data will be delivered in the order it was sent, making it the perfect protocol for transferring information like still images, data files, and web pages.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/tcp.jpg" alt="tcp"  />
</p>
<p>But while TCP is instinctively reliable, its feedback mechanisms also result in a larger overhead, translating to greater use of the available bandwidth on the network.</p>
<h2 id="udp">UDP</h2>
<p>User Datagram Protocol (UDP) is a simpler, connectionless internet protocol in which error-checking and recovery services are not required. With UDP, there is no overhead for opening a connection, maintaining a connection, or terminating a connection. Data is continuously sent to the recipient, whether or not they receive it.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/udp.jpg" alt="udp"  />
</p>
<p>It is largely preferred for real-time communications like broadcast or multicast network transmission. We should use UDP over TCP when we need the lowest latency and late data is worse than the loss of data.</p>
<h2 id="tcp-vs-udp">TCP vs UDP</h2>
<p>TCP is a connection-oriented protocol, whereas UDP is a connectionless protocol. A key difference between TCP and UDP is speed, as TCP is comparatively slower than UDP. Overall, UDP is a much faster, simpler, and more efficient protocol, however, retransmission of lost data packets is only possible with TCP.</p>
<p>TCP provides ordered delivery of data from user to server (and vice versa), whereas UDP is not dedicated to end-to-end communications, nor does it check the readiness of the receiver.</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>Connection</td>
<td>Requires an established connection</td>
<td>Connectionless protocol</td>
</tr>
<tr>
<td>Guaranteed delivery</td>
<td>Can guarantee delivery of data</td>
<td>Cannot guarantee delivery of data</td>
</tr>
<tr>
<td>Re-transmission</td>
<td>Re-transmission of lost packets is possible</td>
<td>No re-transmission of lost packets</td>
</tr>
<tr>
<td>Speed</td>
<td>Slower than UDP</td>
<td>Faster than TCP</td>
</tr>
<tr>
<td>Broadcasting</td>
<td>Does not support broadcasting</td>
<td>Supports broadcasting</td>
</tr>
<tr>
<td>Use cases</td>
<td>HTTPS, HTTP, SMTP, POP, FTP, etc</td>
<td>Video streaming, DNS, VoIP, etc</td>
</tr>
</tbody>
</table>
<h1 id="domain-name-system-dns">Domain Name System (DNS)</h1>
<p>Earlier we learned about IP addresses that enable every machine to connect with other machines. But as we know humans are more comfortable with names than numbers. It&rsquo;s easier to remember a name like <code>google.com</code> than something like <code>122.250.192.232</code>.</p>
<p>This brings us to Domain Name System (DNS) which is a hierarchical and decentralized naming system used for translating human-readable domain names to IP addresses.</p>
<h2 id="how-dns-workshttpsyoutubevhfrart11jc"><a href="https://youtu.be/vhfRArT11jc">How DNS works</a></h2>
<p>Video: <strong><a href="https://youtu.be/vhfRArT11jc">https://youtu.be/vhfRArT11jc</a></strong></p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/how-dns-works.jpg" alt="how-dns-works"  />
</p>
<p>DNS lookup involves the following eight steps:</p>
<ol>
<li>A client types <a href="https://example.com">example.com</a> into a web browser, the query travels to the internet and is received by a DNS resolver.</li>
<li>The resolver then recursively queries a DNS root nameserver.</li>
<li>The root server responds to the resolver with the address of a Top Level Domain (TLD).</li>
<li>The resolver then makes a request to the <code>.com</code> TLD.</li>
<li>The TLD server then responds with the IP address of the domain&rsquo;s nameserver, <a href="https://example.com">example.com</a>.</li>
<li>Lastly, the recursive resolver sends a query to the domain&rsquo;s nameserver.</li>
<li>The IP address for <a href="https://example.com">example.com</a> is then returned to the resolver from the nameserver.</li>
<li>The DNS resolver then responds to the web browser with the IP address of the domain requested initially.</li>
</ol>
<p>Once the IP address has been resolved, the client should be able to request content from the resolved IP address. For example, the resolved IP may return a webpage to be rendered in the browser</p>
<h2 id="server-types">Server types</h2>
<p>Now, let&rsquo;s look at the four key groups of servers that make up the DNS infrastructure.</p>
<h3 id="dns-resolver">DNS Resolver</h3>
<p>A DNS resolver (also known as a DNS recursive resolver) is the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver. After receiving a DNS query from a web client, a recursive resolver will either respond with cached data, or send a request to a root nameserver, followed by another request to a TLD nameserver, and then one last request to an authoritative nameserver. After receiving a response from the authoritative nameserver containing the requested IP address, the recursive resolver then sends a response to the client.</p>
<h3 id="dns-root-server">DNS root server</h3>
<p>A root server accepts a recursive resolver&rsquo;s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (<code>.com</code>, <code>.net</code>, <code>.org</code>, etc.). The root nameservers are overseen by a nonprofit called the <a href="https://www.icann.org">Internet Corporation for Assigned Names and Numbers (ICANN)</a>.</p>
<p>There are 13 DNS root nameservers known to every recursive resolver. Note that while there are 13 root nameservers, that doesn&rsquo;t mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world, which use <a href="https://en.wikipedia.org/wiki/Anycast">Anycast routing</a> to provide speedy responses.</p>
<h3 id="tld-nameserver">TLD nameserver</h3>
<p>A TLD nameserver maintains information for all the domain names that share a common domain extension, such as <code>.com</code>, <code>.net</code>, or whatever comes after the last dot in a URL.</p>
<p>Management of TLD nameservers is handled by the <a href="https://www.iana.org">Internet Assigned Numbers Authority (IANA)</a>, which is a branch of <a href="https://www.icann.org">ICANN</a>. The IANA breaks up the TLD servers into two main groups:</p>
<ul>
<li><strong>Generic top-level domains</strong>: These are domains like <code>.com</code>, <code>.org</code>, <code>.net</code>, <code>.edu</code>, and <code>.gov</code>.</li>
<li><strong>Country code top-level domains</strong>: These include any domains that are specific to a country or state. Examples include <code>.uk</code>, <code>.us</code>, <code>.ru</code>, and <code>.jp</code>.</li>
</ul>
<h3 id="authoritative-dns-server">Authoritative DNS server</h3>
<p>The authoritative nameserver is usually the resolver&rsquo;s last step in the journey for an IP address. The authoritative nameserver contains information specific to the domain name it serves (e.g. <a href="https://google.com">google.com</a>) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address). If it cannot find the domain, returns the NXDOMAIN message.</p>
<h2 id="query-typeshttpsyoutubebzisxpdl4lq"><a href="https://youtu.be/BZISxpdl4lQ">Query Types</a></h2>
<p><strong>Video:</strong>  <a href="https://youtu.be/BZISxpdl4lQ">https://youtu.be/BZISxpdl4lQ</a></p>
<p>There are three types of queries in a DNS system:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/Iterative-and-recursive-dns-query-diagram.jpg" alt="dns-query-types"  />
</p>
<h3 id="recursive">Recursive</h3>
<p>In a recursive query, a DNS client requires that a DNS server (typically a DNS recursive resolver) will respond to the client with either the requested resource record or an error message if the resolver can&rsquo;t find the record.</p>
<h3 id="iterative">Iterative</h3>
<p>In an iterative query, a DNS client provides a hostname, and the DNS Resolver returns the best answer it can. If the DNS resolver has the relevant DNS records in its cache, it returns them. If not, it refers the DNS client to the Root Server or another Authoritative Name Server that is nearest to the required DNS zone. The DNS client must then repeat the query directly against the DNS server it was referred.</p>
<h3 id="non-recursive">Non-recursive</h3>
<p>A non-recursive query is a query in which the DNS Resolver already knows the answer. It either immediately returns a DNS record because it already stores it in a local cache, or queries a DNS Name Server which is authoritative for the record, meaning it definitely holds the correct IP for that hostname. In both cases, there is no need for additional rounds of queries (like in recursive or iterative queries). Rather, a response is immediately returned to the client.</p>
<h2 id="records-types">Records Types</h2>
<p>DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain.</p>
<p>These records consist of a series of text files written in what is known as <em>DNS syntax</em>. DNS syntax is just a string of characters used as commands that tell the DNS server what to do. All DNS records also have a <em>&ldquo;TTL&rdquo;</em>, which stands for time-to-live, and indicates how often a DNS server will refresh that record.</p>
<p>There are more record types but for now, let&rsquo;s look at some of the most commonly used ones:</p>
<ul>
<li><strong>A (Address record)</strong>: This is the record that holds the IP address of a domain.</li>
<li><strong>AAAA (IP Version 6 Address record)</strong>: The record that contains the IPv6 address for a domain (as opposed to A records, which stores the IPv4 address).</li>
<li><strong>CNAME (Canonical Name record)</strong>: Forwards one domain or subdomain to another domain, does NOT provide an IP address.</li>
<li><strong>MX (Mail exchanger record)</strong>: Directs mail to an email server.</li>
<li><strong>TXT (Text Record)</strong>: This record lets an admin store text notes in the record. These records are often used for email security.</li>
<li><strong>NS (Name Server records)</strong>: Stores the name server for a DNS entry.</li>
<li><strong>SOA (Start of Authority)</strong>: Stores admin information about a domain.</li>
<li><strong>SRV (Service Location record)</strong>: Specifies a port for specific services.</li>
<li><strong>PTR (Reverse-lookup Pointer records)</strong>: Provides a domain name in reverse lookups.</li>
<li><strong>CERT (Certificate record)</strong>: Stores public key certificates.</li>
</ul>
<h2 id="subdomains">Subdomains</h2>
<p>A subdomain is an additional part of our main domain name. It is commonly used to logically separate a website into sections. We can create multiple subdomains or child domains on the main domain.</p>
<p>For example, <code>blog.example.com</code> where <code>blog</code> is the subdomain, <code>example</code> is the primary domain and <code>.com</code> is the top-level domain (TLD). Similar examples can be <code>support.example.com</code> or <code>careers.example.com</code>.</p>
<h2 id="dns-zones">DNS Zones</h2>
<p>A DNS zone is a distinct part of the domain namespace which is delegated to a legal entity like a person, organization, or company, who is responsible for maintaining the DNS zone. A DNS zone is also an administrative function, allowing for granular control of DNS components, such as authoritative name servers.</p>
<h2 id="dns-caching">DNS Caching</h2>
<p>A DNS cache (sometimes called a DNS resolver cache) is a temporary database, maintained by a computer&rsquo;s operating system, that contains records of all the recent visits and attempted visits to websites and other internet domains. In other words, a DNS cache is just a memory of recent DNS lookups that our computer can quickly refer to when it&rsquo;s trying to figure out how to load a website.</p>
<p>The Domain Name System implements a time-to-live (TTL) on every DNS record. TTL specifies the number of seconds the record can be cached by a DNS client or server. When the record is stored in a cache, whatever TTL value came with it gets stored as well. The server continues to update the TTL of the record stored in the cache, counting down every second. When it hits zero, the record is deleted or purged from the cache. At that point, if a query for that record is received, the DNS server has to start the resolution process.</p>
<h2 id="reverse-dns">Reverse DNS</h2>
<p>A reverse DNS lookup is a DNS query for the domain name associated with a given IP address. This accomplishes the opposite of the more commonly used forward DNS lookup, in which the DNS system is queried to return an IP address. The process of reverse resolving an IP address uses PTR records. If the server does not have a PTR record, it cannot resolve a reverse lookup.</p>
<p>Reverse lookups are commonly used by email servers. Email servers check and see if an email message came from a valid server before bringing it onto their network. Many email servers will reject messages from any server that does not support reverse lookups or from a server that is highly unlikely to be legitimate.</p>
<p><em>Note: Reverse DNS lookups are not universally adopted as they are not critical to the normal function of the internet.</em></p>
<h2 id="examples">Examples</h2>
<p>These are some widely used managed DNS solutions:</p>
<ul>
<li><a href="https://aws.amazon.com/route53">Route53</a></li>
<li><a href="https://www.cloudflare.com/dns">Cloudflare DNS</a></li>
<li><a href="https://cloud.google.com/dns">Google Cloud DNS</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/dns">Azure DNS</a></li>
<li><a href="https://ns1.com/products/managed-dns">NS1</a></li>
</ul>
<h1 id="load-balancing">Load Balancing</h1>
<p>Load balancing lets us distribute incoming network traffic across multiple resources ensuring high availability and reliability by sending requests only to resources that are online. This provides the flexibility to add or subtract resources as demand dictates.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/load-balancer.jpg" alt="load-balancing"  />
</p>
<p>For additional scalability and redundancy, we can try to load balance at each layer of our system:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/load-balancer-layers.jpg" alt="load-balancing-layers"  />
</p>
<h2 id="but-why">But why?</h2>
<p>Modern high-traffic websites must serve hundreds of thousands, if not millions, of concurrent requests from users or clients. To cost-effectively scale to meet these high volumes, modern computing best practice generally requires adding more servers.</p>
<p>A load balancer can sit in front of the servers and route client requests across all servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization. This ensures that no single server is overworked, which could degrade performance. If a single server goes down, the load balancer redirects traffic to the remaining online servers. When a new server is added to the server group, the load balancer automatically starts sending requests to it.</p>
<h2 id="workload-distribution">Workload distribution</h2>
<p>This is the core functionality provided by a load balancer and has several common variations:</p>
<ul>
<li><strong>Host-based</strong>: Distributes requests based on the requested hostname.</li>
<li><strong>Path-based</strong>: Using the entire URL to distribute requests as opposed to just the hostname.</li>
<li><strong>Content-based</strong>: Inspects the message content of a request. This allows distribution based on content such as the value of a parameter.</li>
</ul>
<h2 id="layers-1">Layers</h2>
<p>Generally speaking, load balancers operate at one of the two levels:</p>
<h3 id="network-layer">Network layer</h3>
<p>This is the load balancer that works at the network&rsquo;s transport layer, also known as layer 4. This performs routing based on networking information such as IP addresses and is not able to perform content-based routing. These are often dedicated hardware devices that can operate at high speed.</p>
<h3 id="application-layer">Application layer</h3>
<p>This is the load balancer that operates at the application layer, also known as layer 7. Load balancers can read requests in their entirety and perform content-based routing. This allows the management of load based on a full understanding of traffic.</p>
<h2 id="types-1">Types</h2>
<p>Let&rsquo;s look at different types of load balancers:</p>
<h3 id="software">Software</h3>
<p>Software load balancers usually are easier to deploy than hardware versions. They also tend to be more cost-effective and flexible, and they are used in conjunction with software development environments. The software approach gives us the flexibility of configuring the load balancer to our environment&rsquo;s specific needs. The boost in flexibility may come at the cost of having to do more work to set up the load balancer. Compared to hardware versions, which offer more of a closed-box approach, software balancers give us more freedom to make changes and upgrades.</p>
<p>Software load balancers are widely used and are available either as installable solutions that require configuration and management or as a managed cloud service.</p>
<h3 id="hardware">Hardware</h3>
<p>As the name implies, a hardware load balancer relies on physical, on-premises hardware to distribute application and network traffic. These devices can handle a large volume of traffic but often carry a hefty price tag and are fairly limited in terms of flexibility.</p>
<p>Hardware load balancers include proprietary firmware that requires maintenance and updates as new versions and security patches are released.</p>
<h3 id="dns">DNS</h3>
<p>DNS load balancing is the practice of configuring a domain in the Domain Name System (DNS) such that client requests to the domain are distributed across a group of server machines.</p>
<p>Unfortunately, DNS load balancing has inherent problems limiting its reliability and efficiency. Most significantly, DNS does not check for server and network outages, or errors. It always returns the same set of IP addresses for a domain even if servers are down or inaccessible.</p>
<h2 id="routing-algorithms">Routing Algorithms</h2>
<p>Now, let&rsquo;s discuss commonly used routing algorithms:</p>
<ul>
<li><strong>Round-robin</strong>: Requests are distributed to application servers in rotation.</li>
<li><strong>Weighted Round-robin</strong>: Builds on the simple Round-robin technique to account for differing server characteristics such as compute and traffic handling capacity using weights that can be assigned via DNS records by the administrator.</li>
<li><strong>Least Connections</strong>: A new request is sent to the server with the fewest current connections to clients. The relative computing capacity of each server is factored into determining which one has the least connections.</li>
<li><strong>Least Response Time</strong>: Sends requests to the server selected by a formula that combines the fastest response time and fewest active connections.</li>
<li><strong>Least Bandwidth</strong>: This method measures traffic in megabits per second (Mbps), sending client requests to the server with the least Mbps of traffic.</li>
<li><strong>Hashing</strong>: Distributes requests based on a key we define, such as the client IP address or the request URL.</li>
</ul>
<h2 id="advantages">Advantages</h2>
<p>Load balancing also plays a key role in preventing downtime, other advantages of load balancing include the following:</p>
<ul>
<li>Scalability</li>
<li>Redundancy</li>
<li>Flexibility</li>
<li>Efficiency</li>
</ul>
<h2 id="redundant-load-balancers">Redundant load balancers</h2>
<p>As you must&rsquo;ve already guessed, the load balancer itself can be a single point of failure. To overcome this, a second or <code>N</code> number of load balancers can be used in a cluster mode.</p>
<p>And, if there&rsquo;s a failure detection and the <em>active</em> load balancer fails, another <em>passive</em> load balancer can take over which will make our system more fault-tolerant.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/redundant-load-balancer.jpg" alt="redundant-load-balancing"  />
</p>
<h2 id="features">Features</h2>
<p>Here are some commonly desired features of load balancers:</p>
<ul>
<li><strong>Autoscaling</strong>: Starting up and shutting down resources in response to demand conditions.</li>
<li><strong>Sticky sessions</strong>: The ability to assign the same user or device to the same resource in order to maintain the session state on the resource.</li>
<li><strong>Healthchecks</strong>: The ability to determine if a resource is down or performing poorly in order to remove the resource from the load balancing pool.</li>
<li><strong>Persistence connections</strong>: Allowing a server to open a persistent connection with a client such as a WebSocket.</li>
<li><strong>Encryption</strong>: Handling encrypted connections such as TLS and SSL.</li>
<li><strong>Certificates</strong>: Presenting certificates to a client and authentication of client certificates.</li>
<li><strong>Compression</strong>: Compression of responses.</li>
<li><strong>Caching</strong>: An application-layer load balancer may offer the ability to cache responses.</li>
<li><strong>Logging</strong>: Logging of request and response metadata can serve as an important audit trail or source for analytics data.</li>
<li><strong>Request tracing</strong>: Assigning each request a unique id for the purposes of logging, monitoring, and troubleshooting.</li>
<li><strong>Redirects</strong>: The ability to redirect an incoming request based on factors such as the requested path.</li>
<li><strong>Fixed response</strong>: Returning a static response for a request such as an error message.</li>
</ul>
<h2 id="examples-1">Examples</h2>
<p>Following are some of the load balancing solutions commonly used in the industry:</p>
<ul>
<li><a href="https://aws.amazon.com/elasticloadbalancing">Amazon Elastic Load Balancing</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/load-balancer">Azure Load Balancing</a></li>
<li><a href="https://cloud.google.com/load-balancing">GCP Load Balancing</a></li>
<li><a href="https://www.digitalocean.com/products/load-balancer">DigitalOcean Load Balancer</a></li>
<li><a href="https://www.nginx.com">Nginx</a></li>
<li><a href="https://www.haproxy.org">HAProxy</a></li>
</ul>
<h1 id="clustering">Clustering</h1>
<p>At a high level, a computer cluster is a group of two or more computers, or nodes, that run in parallel to achieve a common goal. This allows workloads consisting of a high number of individual, parallelizable tasks to be distributed among the nodes in the cluster. As a result, these tasks can leverage the combined memory and processing power of each computer to increase overall performance.</p>
<p>To build a computer cluster, the individual nodes should be connected to a network to enable internode communication. The software can then be used to join the nodes together and form a cluster. It may have a shared storage device and/or local storage on each node.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/cluster.jpg" alt="cluster"  />
</p>
<p>Typically, at least one node is designated as the leader node and acts as the entry point to the cluster. The leader node may be responsible for delegating incoming work to the other nodes and, if necessary, aggregating the results and returning a response to the user.</p>
<p>Ideally, a cluster functions as if it were a single system. A user accessing the cluster should not need to know whether the system is a cluster or an individual machine. Furthermore, a cluster should be designed to minimize latency and prevent bottlenecks in node-to-node communication.</p>
<h2 id="types-2">Types</h2>
<p>Computer clusters can generally be categorized into three types:</p>
<ul>
<li>Highly available or fail-over</li>
<li>Load balancing</li>
<li>High-performance computing</li>
</ul>
<h2 id="configurations">Configurations</h2>
<p>The two most commonly used high availability (HA) clustering configurations are active-active and active-passive.</p>
<h3 id="active-active">Active-Active</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/active-active.jpg" alt="active-active"  />
</p>
<p>An active-active cluster is typically made up of at least two nodes, both actively running the same kind of service simultaneously. The main purpose of an active-active cluster is to achieve load balancing. A load balancer distributes workloads across all nodes to prevent any single node from getting overloaded. Because there are more nodes available to serve, there will also be an improvement in throughput and response times.</p>
<h3 id="active-passive">Active-Passive</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/active-passive.jpg" alt="active-passive"  />
</p>
<p>Like the active-active cluster configuration, an active-passive cluster also consists of at least two nodes. However, as the name <em>active-passive</em> implies, not all nodes are going to be active. For example, in the case of two nodes, if the first node is already active, then the second node must be passive or on standby.</p>
<h2 id="advantages-1">Advantages</h2>
<p>Four key advantages of cluster computing are as follows:</p>
<ul>
<li>High availability</li>
<li>Scalability</li>
<li>Performance</li>
<li>Cost-effective</li>
</ul>
<h2 id="load-balancing-vs-clustering">Load balancing vs Clustering</h2>
<p>Load balancing shares some common traits with clustering, but they are different processes. Clustering provides redundancy and boosts capacity and availability. Servers in a cluster are aware of each other and work together toward a common purpose. But with load balancing, servers are not aware of each other. Instead, they react to the requests they receive from the load balancer.</p>
<p>We can employ load balancing in conjunction with clustering but it also is applicable in cases involving independent servers that share a common purpose such as to run a website, business application, web service, or some other IT resource.</p>
<h2 id="challenges">Challenges</h2>
<p>The most obvious challenge clustering presents is the increased complexity of installation and maintenance. An operating system, the application, and its dependencies must each be installed and updated on every node.</p>
<p>This becomes even more complicated if the nodes in the cluster are not homogeneous. Resource utilization for each node must also be closely monitored, and logs should be aggregated to ensure that the software is behaving correctly.</p>
<p>Additionally, storage becomes more difficult to manage, a shared storage device must prevent nodes from overwriting one another and distributed data stores have to be kept in sync.</p>
<h2 id="examples-2">Examples</h2>
<p>Clustering is commonly used in the industry, and often many technologies offer some sort of clustering mode. For example:</p>
<ul>
<li>Containers (eg. <a href="https://kubernetes.io">Kubernetes</a>, <a href="https://aws.amazon.com/ecs">Amazon ECS</a>)</li>
<li>Databases (eg. <a href="https://cassandra.apache.org/_/index.html">Cassandra</a>, <a href="https://www.mongodb.com">MongoDB</a>)</li>
<li>Cache (eg. <a href="https://redis.io/docs/manual/scaling">Redis</a>)</li>
</ul>
<h1 id="caching">Caching</h1>
<p><em>&ldquo;There are only two hard things in Computer Science: cache invalidation and naming things.&rdquo; - Phil Karlton</em></p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/caching.jpg" alt="caching"  />
</p>
<p>A cache&rsquo;s primary purpose is to increase data retrieval performance by reducing the need to access the underlying slower storage layer. Trading off capacity for speed, a cache typically stores a subset of data transiently, in contrast to databases whose data is usually complete and durable.</p>
<p>Caches take advantage of the locality of reference principle <em>&ldquo;recently requested data is likely to be requested again&rdquo;.</em></p>
<h2 id="caching-and-memory">Caching and Memory</h2>
<p>Similar to a computer&rsquo;s memory, a cache is a compact, fast-performing memory that stores data in a hierarchy of levels, starting at level one, and progressing from there sequentially. They are labeled as L1, L2, L3, and so on. A cache also gets written if requested, such as when there has been an update and new content needs to be saved to the cache, replacing the older content that was saved.</p>
<p>No matter whether the cache is read or written, it&rsquo;s done one block at a time. Each block also has a tag that includes the location where the data was stored in the cache. When data is requested from the cache, a search occurs through the tags to find the specific content that&rsquo;s needed in level one (L1) of the memory. If the correct data isn&rsquo;t found, more searches are conducted in L2.</p>
<p>If the data isn&rsquo;t found there, searches are continued in L3, then L4, and so on until it has been found, then, it&rsquo;s read and loaded. If the data isn&rsquo;t found in the cache at all, then it&rsquo;s written into it for quick retrieval the next time.</p>
<h2 id="cache-hit-and-cache-miss">Cache hit and Cache miss</h2>
<h3 id="cache-hit">Cache hit</h3>
<p>A cache hit describes the situation where content is successfully served from the cache. The tags are searched in the memory rapidly, and when the data is found and read, it&rsquo;s considered a cache hit.</p>
<p><strong>Cold, Warm, and Hot Caches</strong></p>
<p>A cache hit can also be described as cold, warm, or hot. In each of these, the speed at which the data is read is described.</p>
<p>A hot cache is an instance where data was read from the memory at the <em>fastest</em> possible rate. This happens when the data is retrieved from L1.</p>
<p>A cold cache is the <em>slowest</em> possible rate for data to be read, though, it&rsquo;s still successful so it&rsquo;s still considered a cache hit. The data is just found lower in the memory hierarchy such as in L3, or lower.</p>
<p>A warm cache is used to describe data that&rsquo;s found in L2 or L3. It&rsquo;s not as fast as a hot cache, but it&rsquo;s still faster than a cold cache. Generally, calling a cache warm is used to express that it&rsquo;s slower and closer to a cold cache than a hot one.</p>
<h3 id="cache-miss">Cache miss</h3>
<p>A cache miss refers to the instance when the memory is searched and the data isn&rsquo;t found. When this happens, the content is transferred and written into the cache.</p>
<h2 id="cache-invalidation">Cache Invalidation</h2>
<p>Cache invalidation is a process where the computer system declares the cache entries as invalid and removes or replaces them. If the data is modified, it should be invalidated in the cache, if not, this can cause inconsistent application behavior. There are three kinds of caching systems:</p>
<h3 id="write-through-cache">Write-through cache</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/write-through-cache.jpg" alt="write-through-cache"  />
</p>
<p>Data is written into the cache and the corresponding database simultaneously.</p>
<p><strong>Pro</strong>: Fast retrieval, complete data consistency between cache and storage.</p>
<p><strong>Con</strong>: Higher latency for write operations.</p>
<h3 id="write-around-cache">Write-around cache</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/write-around-cache.jpg" alt="write-around-cache"  />
</p>
<p>Where write directly goes to the database or permanent storage, bypassing the cache.</p>
<p><strong>Pro</strong>: This may reduce latency.</p>
<p><strong>Con</strong>: It increases cache misses because the cache system has to read the information from the database in case of a cache miss. As a result, this can lead to higher read latency in the case of applications that write and re-read the information quickly. Read happen from slower back-end storage and experiences higher latency.</p>
<h3 id="write-back-cache">Write-back cache</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/write-back-cache.jpg" alt="write-back-cache"  />
</p>
<p>Where the write is only done to the caching layer and the write is confirmed as soon as the write to the cache completes. The cache then asynchronously syncs this write to the database.</p>
<p><strong>Pro</strong>: This would lead to reduced latency and high throughput for write-intensive applications.</p>
<p><strong>Con</strong>: There is a risk of data loss in case the caching layer crashes. We can improve this by having more than one replica acknowledging the write in the cache.</p>
<h2 id="eviction-policies">Eviction policies</h2>
<p>Following are some of the most common cache eviction policies:</p>
<ul>
<li><strong>First In First Out (FIFO)</strong>: The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before.</li>
<li><strong>Last In First Out (LIFO)</strong>: The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before.</li>
<li><strong>Least Recently Used (LRU)</strong>: Discards the least recently used items first.</li>
<li><strong>Most Recently Used (MRU)</strong>: Discards, in contrast to LRU, the most recently used items first.</li>
<li><strong>Least Frequently Used (LFU)</strong>: Counts how often an item is needed. Those that are used least often are discarded first.</li>
<li><strong>Random Replacement (RR)</strong>: Randomly selects a candidate item and discards it to make space when necessary.</li>
</ul>
<h2 id="distributed-cache">Distributed Cache</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/distributed-cache.jpg" alt="distributed-cache"  />
</p>
<p>A distributed cache is a system that pools together the random-access memory (RAM) of multiple networked computers into a single in-memory data store used as a data cache to provide fast access to data. While most caches are traditionally in one physical server or hardware component, a distributed cache can grow beyond the memory limits of a single computer by linking together multiple computers.</p>
<h2 id="global-cache">Global Cache</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/global-cache.jpg" alt="global-cache"  />
</p>
<p>As the name suggests, we will have a single shared cache that all the application nodes will use. When the requested data is not found in the global cache, it&rsquo;s the responsibility of the cache to find out the missing piece of data from the underlying data store.</p>
<h2 id="use-cases">Use cases</h2>
<p>Caching can have many real-world use cases such as:</p>
<ul>
<li>Database Caching</li>
<li>Content Delivery Network (CDN)</li>
<li>Domain Name System (DNS) Caching</li>
<li>API Caching</li>
</ul>
<p><strong>When not to use caching?</strong></p>
<p>Let&rsquo;s also look at some scenarios where we should not use cache:</p>
<ul>
<li>Caching isn&rsquo;t helpful when it takes just as long to access the cache as it does to access the primary data store.</li>
<li>Caching doesn&rsquo;t work as well when requests have low repetition (higher randomness), because caching performance comes from repeated memory access patterns.</li>
<li>Caching isn&rsquo;t helpful when the data changes frequently, as the cached version gets out of sync, and the primary data store must be accessed every time.</li>
</ul>
<p><em>It&rsquo;s important to note that a cache should not be used as permanent data storage. They are almost always implemented in volatile memory because it is faster, and thus should be considered transient.</em></p>
<h2 id="advantages-2">Advantages</h2>
<p>Below are some advantages of caching:</p>
<ul>
<li>Improves performance</li>
<li>Reduce latency</li>
<li>Reduce load on the database</li>
<li>Reduce network cost</li>
<li>Increase Read Throughput</li>
</ul>
<h2 id="examples-3">Examples</h2>
<p>Here are some commonly used technologies for caching:</p>
<ul>
<li><a href="https://redis.io">Redis</a></li>
<li><a href="https://memcached.org">Memcached</a></li>
<li><a href="https://aws.amazon.com/elasticache">Amazon Elasticache</a></li>
<li><a href="https://aerospike.com">Aerospike</a></li>
</ul>
<h1 id="content-delivery-network-cdn">Content Delivery Network (CDN)</h1>
<p>A content delivery network (CDN) is a geographically distributed group of servers that work together to provide fast delivery of internet content. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/cdn-map.jpg" alt="cdn-map"  />
</p>
<h2 id="why-use-a-cdn">Why use a CDN?</h2>
<p>Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs and improving security. Serving content from CDNs can significantly improve performance as users receive content from data centers close to them and our servers do not have to serve requests that the CDN fulfills.</p>
<h2 id="how-does-a-cdn-work">How does a CDN work?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/cdn.jpg" alt="cdn"  />
</p>
<p>In a CDN, the origin server contains the original versions of the content while the edge servers are numerous and distributed across various locations around the world.</p>
<p>To minimize the distance between the visitors and the website&rsquo;s server, a CDN stores a cached version of its content in multiple geographical locations known as edge locations. Each edge location contains a number of caching servers responsible for content delivery to visitors within its proximity.</p>
<p>Once the static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin, thus reducing origin load and improving scalability.</p>
<p>For example, when someone in the UK requests our website which might be hosted in the USA, they will be served from the closest edge location such as the London edge location. This is much quicker than having the visitor make a complete request to the origin server which will increase the latency.</p>
<h2 id="types-3">Types</h2>
<p>CDNs are generally divided into two types:</p>
<h3 id="push-cdns">Push CDNs</h3>
<p>Push CDNs receive new content whenever changes occur on the server. We take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. We can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.</p>
<p>Sites with a small amount of traffic or sites with content that isn&rsquo;t often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals.</p>
<h3 id="pull-cdns">Pull CDNs</h3>
<p>In a Pull CDN situation, the cache is updated based on request. When the client sends a request that requires static assets to be fetched from the CDN if the CDN doesn&rsquo;t have it, then it will fetch the newly updated assets from the origin server and populate its cache with this new asset, and then send this new cached asset to the user.</p>
<p>Contrary to the Push CDN, this requires less maintenance because cache updates on CDN nodes are performed based on requests from the client to the origin server. Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.</p>
<h2 id="disadvantages">Disadvantages</h2>
<p>As we all know good things come with extra costs, so let&rsquo;s discuss some disadvantages of CDNs:</p>
<ul>
<li><strong>Extra charges</strong>: It can be expensive to use a CDN, especially for high-traffic services.</li>
<li><strong>Restrictions</strong>: Some organizations and countries have blocked the domains or IP addresses of popular CDNs.</li>
<li><strong>Location</strong>: If most of our audience is located in a country where the CDN has no servers, the data on our website may have to travel further than without using any CDN.</li>
</ul>
<h2 id="examples-4">Examples</h2>
<p>Here are some widely used CDNs:</p>
<ul>
<li><a href="https://aws.amazon.com/cloudfront">Amazon CloudFront</a></li>
<li><a href="https://cloud.google.com/cdn">Google Cloud CDN</a></li>
<li><a href="https://www.cloudflare.com/cdn">Cloudflare CDN</a></li>
<li><a href="https://www.fastly.com/products/cdn">Fastly</a></li>
</ul>
<h1 id="proxy">Proxy</h1>
<p>A proxy server is an intermediary piece of hardware/software sitting between the client and the backend server. It receives requests from clients and relays them to the origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compression).</p>
<h2 id="types-4">Types</h2>
<p>There are two types of proxies:</p>
<h3 id="forward-proxy">Forward Proxy</h3>
<p>A forward proxy, often called a proxy, proxy server, or web proxy is a server that sits in front of a group of client machines. When those computers make requests to sites and services on the internet, the proxy server intercepts those requests and then communicates with web servers on behalf of those clients, like a middleman.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/forward-proxy.jpg" alt="forward-proxy"  />
</p>
<p><strong>Advantages</strong></p>
<p>Here are some advantages of a forward proxy:</p>
<ul>
<li>Block access to certain content</li>
<li>Allows access to <a href="https://en.wikipedia.org/wiki/Geo-blocking">geo-restricted</a> content</li>
<li>Provides anonymity</li>
<li>Avoid other browsing restrictions</li>
</ul>
<p>Although proxies provide the benefits of anonymity, they can still track our personal information. Setup and maintenance of a proxy server can be costly and requires configurations.</p>
<h3 id="reverse-proxy">Reverse Proxy</h3>
<p>A reverse proxy is a server that sits in front of one or more web servers, intercepting requests from clients. When clients send requests to the origin server of a website, those requests are intercepted by the reverse proxy server.</p>
<p>The difference between a forward and reverse proxy is subtle but important. A simplified way to sum it up would be to say that a forward proxy sits in front of a client and ensures that no origin server ever communicates directly with that specific client. On the other hand, a reverse proxy sits in front of an origin server and ensures that no client ever communicates directly with that origin server.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/reverse-proxy.jpg" alt="reverse-proxy"  />
</p>
<p>Introducing reverse proxy results in increased complexity. A single reverse proxy is a single point of failure, configuring multiple reverse proxies (i.e. a failover) further increases complexity.</p>
<p><strong>Advantages</strong></p>
<p>Here are some advantages of using a reverse proxy:</p>
<ul>
<li>Improved security</li>
<li>Caching</li>
<li>SSL encryption</li>
<li>Load balancing</li>
<li>Scalability and flexibility</li>
</ul>
<h2 id="load-balancer-vs-reverse-proxy">Load balancer vs Reverse Proxy</h2>
<p>Wait, isn&rsquo;t reverse proxy similar to a load balancer? Well, no as a load balancer is useful when we have multiple servers. Often, load balancers route traffic to a set of servers serving the same function, while, reverse proxies can be useful even with just one web server or application server. A reverse proxy can also act as a load balancer but not the other way around.</p>
<h2 id="examples-5">Examples</h2>
<p>Below are some commonly used proxy technologies:</p>
<ul>
<li><a href="https://www.nginx.com">Nginx</a></li>
<li><a href="https://www.haproxy.org">HAProxy</a></li>
<li><a href="https://doc.traefik.io/traefik">Traefik</a></li>
<li><a href="https://www.envoyproxy.io">Envoy</a></li>
</ul>
<h1 id="availability">Availability</h1>
<p>Availability is the time a system remains operational to perform its required function in a specific period. It is a simple measure of the percentage of time that a system, service, or machine remains operational under normal conditions.</p>
<h2 id="the-nines-of-availability">The Nine&rsquo;s of availability</h2>
<p>Availability is often quantified by uptime (or downtime) as a percentage of time the service is available. It is generally measured in the number of 9s.</p>
<p>$$
Availability = \frac{Uptime}{(Uptime + Downtime)}
$$</p>
<p>If availability is 99.00% available, it is said to have &ldquo;2 nines&rdquo; of availability, and if it is 99.9%, it is called &ldquo;3 nines&rdquo;, and so on.</p>
<table>
<thead>
<tr>
<th>Availability (Percent)</th>
<th>Downtime (Year)</th>
<th>Downtime (Month)</th>
<th>Downtime (Week)</th>
</tr>
</thead>
<tbody>
<tr>
<td>90% (one nine)</td>
<td>36.53 days</td>
<td>72 hours</td>
<td>16.8 hours</td>
</tr>
<tr>
<td>99% (two nines)</td>
<td>3.65 days</td>
<td>7.20 hours</td>
<td>1.68 hours</td>
</tr>
<tr>
<td>99.9% (three nines)</td>
<td>8.77 hours</td>
<td>43.8 minutes</td>
<td>10.1 minutes</td>
</tr>
<tr>
<td>99.99% (four nines)</td>
<td>52.6 minutes</td>
<td>4.32 minutes</td>
<td>1.01 minutes</td>
</tr>
<tr>
<td>99.999% (five nines)</td>
<td>5.25 minutes</td>
<td>25.9 seconds</td>
<td>6.05 seconds</td>
</tr>
<tr>
<td>99.9999% (six nines)</td>
<td>31.56 seconds</td>
<td>2.59 seconds</td>
<td>604.8 milliseconds</td>
</tr>
<tr>
<td>99.99999% (seven nines)</td>
<td>3.15 seconds</td>
<td>263 milliseconds</td>
<td>60.5 milliseconds</td>
</tr>
<tr>
<td>99.999999% (eight nines)</td>
<td>315.6 milliseconds</td>
<td>26.3 milliseconds</td>
<td>6 milliseconds</td>
</tr>
<tr>
<td>99.9999999% (nine nines)</td>
<td>31.6 milliseconds</td>
<td>2.6 milliseconds</td>
<td>0.6 milliseconds</td>
</tr>
</tbody>
</table>
<h2 id="availability-in-sequence-vs-parallel">Availability in Sequence vs Parallel</h2>
<p>If a service consists of multiple components prone to failure, the service&rsquo;s overall availability depends on whether the components are in sequence or in parallel.</p>
<h3 id="sequence">Sequence</h3>
<p>Overall availability decreases when two components are in sequence.</p>
<p><img loading="lazy" src="https://github.com/SamirPaul1/assets/assets/77569653/2020264a-b819-412b-b040-63a7bfc18f43" alt="image"  />
</p>
<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in sequence would be 99.8%.</p>
<h3 id="parallel">Parallel</h3>
<p>Overall availability increases when two components are in parallel.</p>
<p><img loading="lazy" src="https://github.com/SamirPaul1/assets/assets/77569653/09685b33-6656-4403-86c4-b7467ab28481" alt="image"  />
</p>
<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in parallel would be 99.9999%.</p>
<h2 id="availability-vs-reliability">Availability vs Reliability</h2>
<p>If a system is reliable, it is available. However, if it is available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve high availability even with an unreliable system.</p>
<h2 id="high-availability-vs-fault-tolerance">High availability vs Fault Tolerance</h2>
<p>Both high availability and fault tolerance apply to methods for providing high uptime levels. However, they accomplish the objective differently.</p>
<p>A fault-tolerant system has no service interruption but a significantly higher cost, while a highly available system has minimal service interruption. Fault-tolerance requires full hardware redundancy as if the main system fails, with no loss in uptime, another system should take over.</p>
<h1 id="scalability">Scalability</h1>
<p>Scalability is the measure of how well a system responds to changes by adding or removing resources to meet demands.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/scalability.jpg" alt="scalability"  />
</p>
<p>Let&rsquo;s discuss different types of scaling:</p>
<h2 id="vertical-scaling">Vertical scaling</h2>
<p>Vertical scaling (also known as scaling up) expands a system&rsquo;s scalability by adding more power to an existing machine. In other words, vertical scaling refers to improving an application&rsquo;s capability via increasing hardware capacity.</p>
<h3 id="advantages-3">Advantages</h3>
<ul>
<li>Simple to implement</li>
<li>Easier to manage</li>
<li>Data consistent</li>
</ul>
<h3 id="disadvantages-1">Disadvantages</h3>
<ul>
<li>Risk of high downtime</li>
<li>Harder to upgrade</li>
<li>Can be a single point of failure</li>
</ul>
<h2 id="horizontal-scaling">Horizontal scaling</h2>
<p>Horizontal scaling (also known as scaling out) expands a system&rsquo;s scale by adding more machines. It improves the performance of the server by adding more instances to the existing pool of servers, allowing the load to be distributed more evenly.</p>
<h3 id="advantages-4">Advantages</h3>
<ul>
<li>Increased redundancy</li>
<li>Better fault tolerance</li>
<li>Flexible and efficient</li>
<li>Easier to upgrade</li>
</ul>
<h3 id="disadvantages-2">Disadvantages</h3>
<ul>
<li>Increased complexity</li>
<li>Data inconsistency</li>
<li>Increased load on downstream services</li>
</ul>
<h1 id="storage">Storage</h1>
<p>Storage is a mechanism that enables a system to retain data, either temporarily or permanently. This topic is mostly skipped over in the context of system design, however, it is important to have a basic understanding of some common types of storage techniques that can help us fine-tune our storage components. Let&rsquo;s discuss some important storage concepts:</p>
<h2 id="raid">RAID</h2>
<p>RAID (Redundant Array of Independent Disks) is a way of storing the same data on multiple hard disks or solid-state drives (SSDs) to protect data in the case of a drive failure.</p>
<p>There are different RAID levels, however, and not all have the goal of providing redundancy. Let&rsquo;s discuss some commonly used RAID levels:</p>
<ul>
<li><strong>RAID 0</strong>: Also known as striping, data is split evenly across all the drives in the array.</li>
<li><strong>RAID 1</strong>: Also known as mirroring, at least two drives contains the exact copy of a set of data. If a drive fails, others will still work.</li>
<li><strong>RAID 5</strong>: Striping with parity. Requires the use of at least 3 drives, striping the data across multiple drives like RAID 0, but also has a parity distributed across the drives.</li>
<li><strong>RAID 6</strong>: Striping with double parity. RAID 6 is like RAID 5, but the parity data are written to two drives.</li>
<li><strong>RAID 10</strong>: Combines striping plus mirroring from RAID 0 and RAID 1. It provides security by mirroring all data on secondary drives while using striping across each set of drives to speed up data transfers.</li>
</ul>
<h3 id="comparison">Comparison</h3>
<p>Let&rsquo;s compare all the features of different RAID levels:</p>
<table>
<thead>
<tr>
<th>Features</th>
<th>RAID 0</th>
<th>RAID 1</th>
<th>RAID 5</th>
<th>RAID 6</th>
<th>RAID 10</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>Striping</td>
<td>Mirroring</td>
<td>Striping with Parity</td>
<td>Striping with double parity</td>
<td>Striping and Mirroring</td>
</tr>
<tr>
<td>Minimum Disks</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>Read Performance</td>
<td>High</td>
<td>High</td>
<td>High</td>
<td>High</td>
<td>High</td>
</tr>
<tr>
<td>Write Performance</td>
<td>High</td>
<td>Medium</td>
<td>High</td>
<td>High</td>
<td>Medium</td>
</tr>
<tr>
<td>Cost</td>
<td>Low</td>
<td>High</td>
<td>Low</td>
<td>Low</td>
<td>High</td>
</tr>
<tr>
<td>Fault Tolerance</td>
<td>None</td>
<td>Single-drive failure</td>
<td>Single-drive failure</td>
<td>Two-drive failure</td>
<td>Up to one disk failure in each sub-array</td>
</tr>
<tr>
<td>Capacity Utilization</td>
<td>100%</td>
<td>50%</td>
<td>67%-94%</td>
<td>50%-80%</td>
<td>50%</td>
</tr>
</tbody>
</table>
<h2 id="volumes">Volumes</h2>
<p>Volume is a fixed amount of storage on a disk or tape. The term volume is often used as a synonym for the storage itself, but it is possible for a single disk to contain more than one volume or a volume to span more than one disk.</p>
<h2 id="file-storage">File storage</h2>
<p>File storage is a solution to store data as files and present it to its final users as a hierarchical directories structure. The main advantage is to provide a user-friendly solution to store and retrieve files. To locate a file in file storage, the complete path of the file is required. It is economical and easily structured and is usually found on hard drives, which means that they appear exactly the same for the user and on the hard drive.</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/efs">Amazon EFS</a>, <a href="https://azure.microsoft.com/en-in/services/storage/files">Azure files</a>, <a href="https://cloud.google.com/filestore">Google Cloud Filestore</a>, etc.</p>
<h2 id="block-storage">Block storage</h2>
<p>Block storage divides data into blocks (chunks) and stores them as separate pieces. Each block of data is given a unique identifier, which allows a storage system to place the smaller pieces of data wherever it is most convenient.</p>
<p>Block storage also decouples data from user environments, allowing that data to be spread across multiple environments. This creates multiple paths to the data and allows the user to retrieve it quickly. When a user or application requests data from a block storage system, the underlying storage system reassembles the data blocks and presents the data to the user or application</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/ebs">Amazon EBS</a>.</p>
<h2 id="object-storage">Object Storage</h2>
<p>Object storage, which is also known as object-based storage, breaks data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems.</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/s3">Amazon S3</a>, <a href="https://azure.microsoft.com/en-in/services/storage/blobs">Azure Blob Storage</a>, <a href="https://cloud.google.com/storage">Google Cloud Storage</a>, etc.</p>
<h2 id="nas">NAS</h2>
<p>A NAS (Network Attached Storage) is a storage device connected to a network that allows storage and retrieval of data from a central location for authorized network users. NAS devices are flexible, meaning that as we need additional storage, we can add to what we have. It&rsquo;s faster, less expensive, and provides all the benefits of a public cloud on-site, giving us complete control.</p>
<h2 id="hdfs">HDFS</h2>
<p>The Hadoop Distributed File System (HDFS) is a distributed file system designed to run on commodity hardware. HDFS is highly fault-tolerant and is designed to be deployed on low-cost hardware. HDFS provides high throughput access to application data and is suitable for applications that have large data sets. It has many similarities with existing distributed file systems.</p>
<p>HDFS is designed to reliably store very large files across machines in a large cluster. It stores each file as a sequence of blocks, all blocks in a file except the last block are the same size. The blocks of a file are replicated for fault tolerance.</p>
<h1 id="databases-and-dbms">Databases and DBMS</h1>
<h2 id="what-is-a-database">What is a Database?</h2>
<p>A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a Database Management System (DBMS). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.</p>
<h2 id="what-is-dbms">What is DBMS?</h2>
<p>A database typically requires a comprehensive database software program known as a Database Management System (DBMS). A DBMS serves as an interface between the database and its end-users or programs, allowing users to retrieve, update, and manage how the information is organized and optimized. A DBMS also facilitates oversight and control of databases, enabling a variety of administrative operations such as performance monitoring, tuning, and backup and recovery.</p>
<h2 id="components">Components</h2>
<p>Here are some common components found across different databases:</p>
<h3 id="schema">Schema</h3>
<p>The role of a schema is to define the shape of a data structure, and specify what kinds of data can go where. Schemas can be strictly enforced across the entire database, loosely enforced on part of the database, or they might not exist at all.</p>
<h3 id="table">Table</h3>
<p>Each table contains various columns just like in a spreadsheet. A table can have as meager as two columns and upwards of a hundred or more columns, depending upon the kind of information being put in the table.</p>
<h3 id="column">Column</h3>
<p>A column contains a set of data values of a particular type, one value for each row of the database. A column may contain text values, numbers, enums, timestamps, etc.</p>
<h3 id="row">Row</h3>
<p>Data in a table is recorded in rows. There can be thousands or millions of rows in a table having any particular information.</p>
<h2 id="types-5">Types</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/database-types.jpg" alt="database-types"  />
</p>
<p>Below are different types of databases:</p>
<ul>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/sql-databases">SQL</a></strong></li>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/nosql-databases">NoSQL</a></strong>
<ul>
<li>Document</li>
<li>Key-value</li>
<li>Graph</li>
<li>Timeseries</li>
<li>Wide column</li>
<li>Multi-model</li>
</ul>
</li>
</ul>
<p>SQL and NoSQL databases are broad topics and will be discussed separately in <a href="https://karanpratapsingh.com/courses/system-design/sql-databases">SQL databases</a> and <a href="https://karanpratapsingh.com/courses/system-design/nosql-databases">NoSQL databases</a>. Learn how they compare to each other in <a href="https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases">SQL vs NoSQL databases</a>.</p>
<h2 id="challenges-1">Challenges</h2>
<p>Some common challenges faced while running databases at scale:</p>
<ul>
<li><strong>Absorbing significant increases in data volume</strong>: The explosion of data coming in from sensors, connected machines, and dozens of other sources.</li>
<li><strong>Ensuring data security</strong>: Data breaches are happening everywhere these days, it&rsquo;s more important than ever to ensure that data is secure but also easily accessible to users.</li>
<li><strong>Keeping up with demand</strong>: Companies need real-time access to their data to support timely decision-making and to take advantage of new opportunities.</li>
<li><strong>Managing and maintaining the database and infrastructure</strong>: As databases become more complex and data volumes grow, companies are faced with the expense of hiring additional talent to manage their databases.</li>
<li><strong>Removing limits on scalability</strong>: A business needs to grow if it&rsquo;s going to survive, and its data management must grow along with it. But it&rsquo;s very difficult to predict how much capacity the company will need, particularly with on-premises databases.</li>
<li><strong>Ensuring data residency, data sovereignty, or latency requirements</strong>: Some organizations have use cases that are better suited to run on-premises. In those cases, engineered systems that are pre-configured and pre-optimized for running the database are ideal.</li>
</ul>
<h1 id="sql-databases">SQL databases</h1>
<p>A SQL (or relational) database is a collection of data items with pre-defined relationships between them. These items are organized as a set of tables with columns and rows. Tables are used to hold information about the objects to be represented in the database. Each column in a table holds a certain kind of data and a field stores the actual value of an attribute. The rows in the table represent a collection of related values of one object or entity.</p>
<p>Each row in a table could be marked with a unique identifier called a primary key, and rows among multiple tables can be made related using foreign keys. This data can be accessed in many different ways without re-organizing the database tables themselves. SQL databases usually follow the <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#acid">ACID consistency model</a>.</p>
<h2 id="materialized-views">Materialized views</h2>
<p>A materialized view is a pre-computed data set derived from a query specification and stored for later use. Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view. This performance difference can be significant when a query is run frequently or is sufficiently complex.</p>
<p>It also enables data subsetting and improves the performance of complex queries that run on large data sets which reduces network loads. There are other uses of materialized views, but they are mostly used for performance and replication.</p>
<h2 id="n1-query-problem">N+1 query problem</h2>
<p>The N+1 query problem happens when the data access layer executes N additional SQL statements to fetch the same data that could have been retrieved when executing the primary SQL query. The larger the value of N, the more queries will be executed, the larger the performance impact.</p>
<p>This is commonly seen in GraphQL and ORM (Object-Relational Mapping) tools and can be addressed by optimizing the SQL query or using a dataloader that batches consecutive requests and makes a single data request under the hood.</p>
<h2 id="advantages-5">Advantages</h2>
<p>Let&rsquo;s look at some advantages of using relational databases:</p>
<ul>
<li>Simple and accurate</li>
<li>Accessibility</li>
<li>Data consistency</li>
<li>Flexibility</li>
</ul>
<h2 id="disadvantages-3">Disadvantages</h2>
<p>Below are the disadvantages of relational databases:</p>
<ul>
<li>Expensive to maintain</li>
<li>Difficult schema evolution</li>
<li>Performance hits (join, denormalization, etc.)</li>
<li>Difficult to scale due to poor horizontal scalability</li>
</ul>
<h2 id="examples-6">Examples</h2>
<p>Here are some commonly used relational databases:</p>
<ul>
<li><a href="https://www.postgresql.org">PostgreSQL</a></li>
<li><a href="https://www.mysql.com">MySQL</a></li>
<li><a href="https://mariadb.org">MariaDB</a></li>
<li><a href="https://aws.amazon.com/rds/aurora">Amazon Aurora</a></li>
</ul>
<h1 id="nosql-databases">NoSQL databases</h1>
<p>NoSQL is a broad category that includes any database that doesn&rsquo;t use SQL as its primary data access language. These types of databases are also sometimes referred to as non-relational databases. Unlike in relational databases, data in a NoSQL database doesn&rsquo;t have to conform to a pre-defined schema. NoSQL databases follow <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#base">BASE consistency model</a>.</p>
<p>Below are different types of NoSQL databases:</p>
<h3 id="document">Document</h3>
<p>A document database (also known as a document-oriented database or a document store) is a database that stores information in documents. They are general-purpose databases that serve a variety of use cases for both transactional and analytical applications.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Intuitive and flexible</li>
<li>Easy horizontal scaling</li>
<li>Schemaless</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Schemaless</li>
<li>Non-relational</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.mongodb.com">MongoDB</a></li>
<li><a href="https://aws.amazon.com/documentdb">Amazon DocumentDB</a></li>
<li><a href="https://couchdb.apache.org">CouchDB</a></li>
</ul>
<h3 id="key-value">Key-value</h3>
<p>One of the simplest types of NoSQL databases, key-value databases save data as a group of key-value pairs made up of two data items each. They&rsquo;re also sometimes referred to as a key-value store.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Simple and performant</li>
<li>Highly scalable for high volumes of traffic</li>
<li>Session management</li>
<li>Optimized lookups</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Basic CRUD</li>
<li>Values can&rsquo;t be filtered</li>
<li>Lacks indexing and scanning capabilities</li>
<li>Not optimized for complex queries</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://redis.io">Redis</a></li>
<li><a href="https://memcached.org">Memcached</a></li>
<li><a href="https://aws.amazon.com/dynamodb">Amazon DynamoDB</a></li>
<li><a href="https://aerospike.com">Aerospike</a></li>
</ul>
<h3 id="graph">Graph</h3>
<p>A graph database is a NoSQL database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data instead of tables or documents.</p>
<p>The graph relates the data items in the store to a collection of nodes and edges, the edges representing the relationships between the nodes. The relationships allow data in the store to be linked together directly and, in many cases, retrieved with one operation.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Query speed</li>
<li>Agile and flexible</li>
<li>Explicit data representation</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Complex</li>
<li>No standardized query language</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>Fraud detection</li>
<li>Recommendation engines</li>
<li>Social networks</li>
<li>Network mapping</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://neo4j.com">Neo4j</a></li>
<li><a href="https://www.arangodb.com">ArangoDB</a></li>
<li><a href="https://aws.amazon.com/neptune">Amazon Neptune</a></li>
<li><a href="https://janusgraph.org">JanusGraph</a></li>
</ul>
<h3 id="time-series">Time series</h3>
<p>A time-series database is a database optimized for time-stamped, or time series, data.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Fast insertion and retrieval</li>
<li>Efficient data storage</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>IoT data</li>
<li>Metrics analysis</li>
<li>Application monitoring</li>
<li>Understand financial trends</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.influxdata.com">InfluxDB</a></li>
<li><a href="https://druid.apache.org">Apache Druid</a></li>
</ul>
<h3 id="wide-column">Wide column</h3>
<p>Wide column databases, also known as wide column stores, are schema-agnostic. Data is stored in column families, rather than in rows and columns.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Highly scalable, can handle petabytes of data</li>
<li>Ideal for real-time big data applications</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Expensive</li>
<li>Increased write time</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>Business analytics</li>
<li>Attribute-based data storage</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://cloud.google.com/bigtable">BigTable</a></li>
<li><a href="https://cassandra.apache.org">Apache Cassandra</a></li>
<li><a href="https://www.scylladb.com">ScyllaDB</a></li>
</ul>
<h3 id="multi-model">Multi-model</h3>
<p>Multi-model databases combine different database models (i.e. relational, graph, key-value, document, etc.) into a single, integrated backend. This means they can accommodate various data types, indexes, queries, and store data in more than one model.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Flexibility</li>
<li>Suitable for complex projects</li>
<li>Data consistent</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Complex</li>
<li>Less mature</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.arangodb.com">ArangoDB</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/cosmos-db">Azure Cosmos DB</a></li>
<li><a href="https://www.couchbase.com">Couchbase</a></li>
</ul>
<h1 id="sql-vs-nosql-databases">SQL vs NoSQL databases</h1>
<p>In the world of databases, there are two main types of solutions, SQL (relational) and NoSQL (non-relational) databases. Both of them differ in the way they were built, the kind of information they store, and how they store it. Relational databases are structured and have predefined schemas while non-relational databases are unstructured, distributed, and have a dynamic schema.</p>
<h2 id="high-level-differences">High-level differences</h2>
<p>Here are some high-level differences between SQL and NoSQL:</p>
<h3 id="storage-1">Storage</h3>
<p>SQL stores data in tables, where each row represents an entity and each column represents a data point about that entity.</p>
<p>NoSQL databases have different data storage models such as key-value, graph, document, etc.</p>
<h3 id="schema-1">Schema</h3>
<p>In SQL, each record conforms to a fixed schema, meaning the columns must be decided and chosen before data entry and each row must have data for each column. The schema can be altered later, but it involves modifying the database using migrations.</p>
<p>Whereas in NoSQL, schemas are dynamic. Fields can be added on the fly, and each <em>record</em> (or equivalent) doesn&rsquo;t have to contain data for each <em>field</em>.</p>
<h3 id="querying">Querying</h3>
<p>SQL databases use SQL (structured query language) for defining and manipulating the data, which is very powerful.</p>
<p>In a NoSQL database, queries are focused on a collection of documents. Different databases have different syntax for querying.</p>
<h3 id="scalability-1">Scalability</h3>
<p>In most common situations, SQL databases are vertically scalable, which can get very expensive. It is possible to scale a relational database across multiple servers, but this is a challenging and time-consuming process.</p>
<p>On the other hand, NoSQL databases are horizontally scalable, meaning we can add more servers easily to our NoSQL database infrastructure to handle large traffic. Any cheap commodity hardware or cloud instances can host NoSQL databases, thus making it a lot more cost-effective than vertical scaling. A lot of NoSQL technologies also distribute data across servers automatically.</p>
<h3 id="reliability">Reliability</h3>
<p>The vast majority of relational databases are ACID compliant. So, when it comes to data reliability and a safe guarantee of performing transactions, SQL databases are still the better bet.</p>
<p>Most of the NoSQL solutions sacrifice ACID compliance for performance and scalability.</p>
<h2 id="reasons">Reasons</h2>
<p>As always we should always pick the technology that fits the requirements better. So, let&rsquo;s look at some reasons for picking SQL or NoSQL based database:</p>
<p><strong>For SQL</strong></p>
<ul>
<li>Structured data with strict schema</li>
<li>Relational data</li>
<li>Need for complex joins</li>
<li>Transactions</li>
<li>Lookups by index are very fast</li>
</ul>
<p><strong>For NoSQL</strong></p>
<ul>
<li>Dynamic or flexible schema</li>
<li>Non-relational data</li>
<li>No need for complex joins</li>
<li>Very data-intensive workload</li>
<li>Very high throughput for IOPS</li>
</ul>
<h1 id="database-replication">Database Replication</h1>
<p>Replication is a process that involves sharing information to ensure consistency between redundant resources such as multiple databases, to improve reliability, fault-tolerance, or accessibility.</p>
<h2 id="master-slave-replication">Master-Slave Replication</h2>
<p>The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/master-slave-replication.jpg" alt="master-slave-replication"  />
</p>
<h3 id="advantages-6">Advantages</h3>
<ul>
<li>Backups of the entire database of relatively no impact on the master.</li>
<li>Applications can read from the slave(s) without impacting the master.</li>
<li>Slaves can be taken offline and synced back to the master without any downtime.</li>
</ul>
<h3 id="disadvantages-4">Disadvantages</h3>
<ul>
<li>Replication adds more hardware and additional complexity.</li>
<li>Downtime and possibly loss of data when a master fails.</li>
<li>All writes also have to be made to the master in a master-slave architecture.</li>
<li>The more read slaves, the more we have to replicate, which will increase replication lag.</li>
</ul>
<h2 id="master-master-replication">Master-Master Replication</h2>
<p>Both masters serve reads/writes and coordinate with each other. If either master goes down, the system can continue to operate with both reads and writes.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/master-master-replication.jpg" alt="master-master-replication"  />
</p>
<h3 id="advantages-7">Advantages</h3>
<ul>
<li>Applications can read from both masters.</li>
<li>Distributes write load across both master nodes.</li>
<li>Simple, automatic, and quick failover.</li>
</ul>
<h3 id="disadvantages-5">Disadvantages</h3>
<ul>
<li>Not as simple as master-slave to configure and deploy.</li>
<li>Either loosely consistent or have increased write latency due to synchronization.</li>
<li>Conflict resolution comes into play as more write nodes are added and as latency increases.</li>
</ul>
<h2 id="synchronous-vs-asynchronous-replication">Synchronous vs Asynchronous replication</h2>
<p>The primary difference between synchronous and asynchronous replication is how the data is written to the replica. In synchronous replication, data is written to primary storage and the replica simultaneously. As such, the primary copy and the replica should always remain synchronized.</p>
<p>In contrast, asynchronous replication copies the data to the replica after the data is already written to the primary storage. Although the replication process may occur in near-real-time, it is more common for replication to occur on a scheduled basis and it is more cost-effective.</p>
<h1 id="indexes">Indexes</h1>
<p>Indexes are well known when it comes to databases, they are used to improve the speed of data retrieval operations on the data store. An index makes the trade-offs of increased storage overhead, and slower writes (since we not only have to write the data but also have to update the index) for the benefit of faster reads. Indexes are used to quickly locate data without having to examine every row in a database table. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access to ordered records.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/indexes.jpg" alt="indexes"  />
</p>
<p>An index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives. So when we create an index on a column of a table, we store that column and a pointer to the whole row in the index. Indexes are also used to create different views of the same data. For large data sets, this is an excellent way to specify different filters or sorting schemes without resorting to creating multiple additional copies of the data.</p>
<p>One quality that database indexes can have is that they can be <strong>dense</strong> or <strong>sparse</strong>. Each of these index qualities comes with its own trade-offs. Let&rsquo;s look at how each index type would work:</p>
<h2 id="dense-index">Dense Index</h2>
<p>In a dense index, an index record is created for every row of the table. Records can be located directly as each record of the index holds the search key value and the pointer to the actual record.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/dense-index.jpg" alt="dense-index"  />
</p>
<p>Dense indexes require more maintenance than sparse indexes at write-time. Since every row must have an entry, the database must maintain the index on inserts, updates, and deletes. Having an entry for every row also means that dense indexes will require more memory. The benefit of a dense index is that values can be quickly found with just a binary search. Dense indexes also do not impose any ordering requirements on the data.</p>
<h2 id="sparse-index">Sparse Index</h2>
<p>In a sparse index, records are created only for some of the records.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/sparse-index.jpg" alt="sparse-index"  />
</p>
<p>Sparse indexes require less maintenance than dense indexes at write-time since they only contain a subset of the values. This lighter maintenance burden means that inserts, updates, and deletes will be faster. Having fewer entries also means that the index will use less memory. Finding data is slower since a scan across the page typically follows the binary search. Sparse indexes are also optional when working with ordered data.</p>
<h1 id="normalization-and-denormalization">Normalization and Denormalization</h1>
<h2 id="terms">Terms</h2>
<p>Before we go any further, let&rsquo;s look at some commonly used terms in normalization and denormalization.</p>
<h3 id="keys">Keys</h3>
<p><strong>Primary key</strong>: Column or group of columns that can be used to uniquely identify every row of the table.</p>
<p><strong>Composite key</strong>: A primary key made up of multiple columns.</p>
<p><strong>Super key</strong>: Set of all keys that can uniquely identify all the rows present in a table.</p>
<p><strong>Candidate key</strong>: Attributes that identify rows uniquely in a table.</p>
<p><strong>Foreign key</strong>: It is a reference to a primary key of another table.</p>
<p><strong>Alternate key</strong>: Keys that are not primary keys are known as alternate keys.</p>
<p><strong>Surrogate key</strong>: A system-generated value that uniquely identifies each entry in a table when no other column was able to hold properties of a primary key.</p>
<h3 id="dependencies">Dependencies</h3>
<p><strong>Partial dependency</strong>: Occurs when the primary key determines some other attributes.</p>
<p><strong>Functional dependency</strong>: It is a relationship that exists between two attributes, typically between the primary key and non-key attribute within a table.</p>
<p><strong>Transitive functional dependency</strong>: Occurs when some non-key attribute determines some other attribute.</p>
<h3 id="anomalies">Anomalies</h3>
<p>Database anomaly happens when there is a flaw in the database due to incorrect planning or storing everything in a flat database. This is generally addressed by the process of normalization.</p>
<p>There are three types of database anomalies:</p>
<p><strong>Insertion anomaly</strong>: Occurs when we are not able to insert certain attributes in the database without the presence of other attributes.</p>
<p><strong>Update anomaly</strong>: Occurs in case of data redundancy and partial update. In other words, a correct update of the database needs other actions such as addition, deletion, or both.</p>
<p><strong>Deletion anomaly</strong>: Occurs where deletion of some data requires deletion of other data.</p>
<p><strong>Example</strong></p>
<p>Let&rsquo;s consider the following table which is not normalized:</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Role</th>
<th>Team</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Peter</td>
<td>Software Engineer</td>
<td>A</td>
</tr>
<tr>
<td>2</td>
<td>Brian</td>
<td>DevOps Engineer</td>
<td>B</td>
</tr>
<tr>
<td>3</td>
<td>Hailey</td>
<td>Product Manager</td>
<td>C</td>
</tr>
<tr>
<td>4</td>
<td>Hailey</td>
<td>Product Manager</td>
<td>C</td>
</tr>
<tr>
<td>5</td>
<td>Steve</td>
<td>Frontend Engineer</td>
<td>D</td>
</tr>
</tbody>
</table>
<p>Let&rsquo;s imagine, we hired a new person &ldquo;John&rdquo; but they might not be assigned a team immediately. This will cause an <em>insertion anomaly</em> as the team attribute is not yet present.</p>
<p>Next, let&rsquo;s say Hailey from Team C got promoted, to reflect that change in the database, we will need to update 2 rows to maintain consistency which can cause an <em>update anomaly</em>.</p>
<p>Finally, we would like to remove Team B but to do that we will also need to remove additional information such as name and role, this is an example of a <em>deletion anomaly</em>.</p>
<h2 id="normalization">Normalization</h2>
<p>Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.</p>
<h3 id="why-do-we-need-normalization">Why do we need normalization?</h3>
<p>The goal of normalization is to eliminate redundant data and ensure data is consistent. A fully normalized database allows its structure to be extended to accommodate new types of data without changing the existing structure too much. As a result, applications interacting with the database are minimally affected.</p>
<h3 id="normal-forms">Normal forms</h3>
<p>Normal forms are a series of guidelines to ensure that the database is normalized. Let&rsquo;s discuss some essential normal forms:</p>
<p><strong>1NF</strong></p>
<p>For a table to be in the first normal form (1NF), it should follow the following rules:</p>
<ul>
<li>Repeating groups are not permitted.</li>
<li>Identify each set of related data with a primary key.</li>
<li>Set of related data should have a separate table.</li>
<li>Mixing data types in the same column is not permitted.</li>
</ul>
<p><strong>2NF</strong></p>
<p>For a table to be in the second normal form (2NF), it should follow the following rules:</p>
<ul>
<li>Satisfies the first normal form (1NF).</li>
<li>Should not have any partial dependency.</li>
</ul>
<p><strong>3NF</strong></p>
<p>For a table to be in the third normal form (3NF), it should follow the following rules:</p>
<ul>
<li>Satisfies the second normal form (2NF).</li>
<li>Transitive functional dependencies are not permitted.</li>
</ul>
<p><strong>BCNF</strong></p>
<p>Boyce-Codd normal form (or BCNF) is a slightly stronger version of the third normal form (3NF) used to address certain types of anomalies not dealt with by 3NF as originally defined. Sometimes it is also known as the 3.5 normal form (3.5NF).</p>
<p>For a table to be in the Boyce-Codd normal form (BCNF), it should follow the following rules:</p>
<ul>
<li>Satisfied the third normal form (3NF).</li>
<li>For every functional dependency X ‚Üí Y, X should be the super key.</li>
</ul>
<p><em>There are more normal forms such as 4NF, 5NF, and 6NF but we won&rsquo;t discuss them here. Check out this <a href="https://www.youtube.com/watch?v=GFQaEYEc8_8">amazing video</a> that goes into detail.</em></p>
<p>In a relational database, a relation is often described as <em>&ldquo;normalized&rdquo;</em> if it meets the third normal form. Most 3NF relations are free of insertion, update, and deletion anomalies.</p>
<p>As with many formal rules and specifications, real-world scenarios do not always allow for perfect compliance. If you decide to violate one of the first three rules of normalization, make sure that your application anticipates any problems that could occur, such as redundant data and inconsistent dependencies.</p>
<h3 id="advantages-8">Advantages</h3>
<p>Here are some advantages of normalization:</p>
<ul>
<li>Reduces data redundancy.</li>
<li>Better data design.</li>
<li>Increases data consistency.</li>
<li>Enforces referential integrity.</li>
</ul>
<h3 id="disadvantages-6">Disadvantages</h3>
<p>Let&rsquo;s look at some disadvantages of normalization:</p>
<ul>
<li>Data design is complex.</li>
<li>Slower performance.</li>
<li>Maintenance overhead.</li>
<li>Require more joins.</li>
</ul>
<h2 id="denormalization">Denormalization</h2>
<p>Denormalization is a database optimization technique in which we add redundant data to one or more tables. This can help us avoid costly joins in a relational database. It attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins.</p>
<p>Once data becomes distributed with techniques such as federation and sharding, managing joins across the network further increases complexity. Denormalization might circumvent the need for such complex joins.</p>
<p><em>Note: Denormalization does not mean reversing normalization.</em></p>
<h3 id="advantages-9">Advantages</h3>
<p>Let&rsquo;s look at some advantages of denormalization:</p>
<ul>
<li>Retrieving data is faster.</li>
<li>Writing queries is easier.</li>
<li>Reduction in number of tables.</li>
<li>Convenient to manage.</li>
</ul>
<h3 id="disadvantages-7">Disadvantages</h3>
<p>Below are some disadvantages of denormalization:</p>
<ul>
<li>Expensive inserts and updates.</li>
<li>Increases complexity of database design.</li>
<li>Increases data redundancy.</li>
<li>More chances of data inconsistency.</li>
</ul>
<h1 id="acid-and-base-consistency-models">ACID and BASE consistency models</h1>
<p>Let&rsquo;s discuss the ACID and BASE consistency models.</p>
<h2 id="acid">ACID</h2>
<p>The term ACID stands for Atomicity, Consistency, Isolation, and Durability. ACID properties are used for maintaining data integrity during transaction processing.</p>
<p>In order to maintain consistency before and after a transaction relational databases follow ACID properties. Let us understand these terms:</p>
<h3 id="atomic">Atomic</h3>
<p>All operations in a transaction succeed or every operation is rolled back.</p>
<h3 id="consistent">Consistent</h3>
<p>On the completion of a transaction, the database is structurally sound.</p>
<h3 id="isolated">Isolated</h3>
<p>Transactions do not contend with one another. Contentious access to data is moderated by the database so that transactions appear to run sequentially.</p>
<h3 id="durable">Durable</h3>
<p>Once the transaction has been completed and the writes and updates have been written to the disk, it will remain in the system even if a system failure occurs.</p>
<h2 id="base">BASE</h2>
<p>With the increasing amount of data and high availability requirements, the approach to database design has also changed dramatically. To increase the ability to scale and at the same time be highly available, we move the logic from the database to separate servers. In this way, the database becomes more independent and focused on the actual process of storing data.</p>
<p>In the NoSQL database world, ACID transactions are less common as some databases have loosened the requirements for immediate consistency, data freshness, and accuracy in order to gain other benefits, like scale and resilience.</p>
<p>BASE properties are much looser than ACID guarantees, but there isn&rsquo;t a direct one-for-one mapping between the two consistency models. Let us understand these terms:</p>
<h3 id="basic-availability">Basic Availability</h3>
<p>The database appears to work most of the time.</p>
<h3 id="soft-state">Soft-state</h3>
<p>Stores don&rsquo;t have to be write-consistent, nor do different replicas have to be mutually consistent all the time.</p>
<h3 id="eventual-consistency">Eventual consistency</h3>
<p>The data might not be consistent immediately but eventually, it becomes consistent. Reads in the system are still possible even though they may not give the correct response due to inconsistency.</p>
<h2 id="acid-vs-base-trade-offs">ACID vs BASE Trade-offs</h2>
<p>There&rsquo;s no right answer to whether our application needs an ACID or a BASE consistency model. Both the models have been designed to satisfy different requirements. While choosing a database we need to keep the properties of both the models and the requirements of our application in mind.</p>
<p>Given BASE&rsquo;s loose consistency, developers need to be more knowledgeable and rigorous about consistent data if they choose a BASE store for their application. It&rsquo;s essential to be familiar with the BASE behavior of the chosen database and work within those constraints.</p>
<p>On the other hand, planning around BASE limitations can sometimes be a major disadvantage when compared to the simplicity of ACID transactions. A fully ACID database is the perfect fit for use cases where data reliability and consistency are essential.</p>
<h1 id="cap-theorem">CAP Theorem</h1>
<p><em>Video</em>: <a href="https://youtu.be/8UryASGBiR4">https://youtu.be/8UryASGBiR4</a></p>
<p>CAP theorem states that a distributed system can deliver only two of the three desired characteristics Consistency, Availability, and Partition tolerance (CAP).</p>
 <p align="center">
    <img src="https://spcdn.pages.dev/img/system-design/cap-theorem-key-65.jpg" alt="CPA">
 </p>
<h3 id="consistency">Consistency</h3>
<p>In a consistent system, <strong>all nodes see the same data</strong> simultaneously. If we perform a read operation on a consistent system, it should return the value of the most recent write operation. The read should cause all nodes to return the same data. All users see the same data at the same time, regardless of the node they connect to. When data is written to a single node, it is then replicated across the other nodes in the system. For this to happen, whenever data is written to one node, it must be instantly forwarded or replicated across all the nodes in the system before the write is deemed &ldquo;successful&rdquo;.</p>
<p>Financial data is a good example. When a user logs in to their banking institution, they do not want to see an error that no data is returned, or that the value is higher or lower than it actually is. Banking apps should return the exact value of a user‚Äôs account information. In this case, banks would rely on consistent databases.</p>
<p>Examples of a consistent database include:</p>
<ul>
<li>Bank account balances</li>
<li>Text messages</li>
</ul>
<p>Database options for consistency:</p>
<ul>
<li>MongoDB</li>
<li>Redis</li>
<li>HBase</li>
</ul>
<h3 id="availability-1">Availability</h3>
<p>When availability is present in a distributed system, it means that the <strong>system remains operational all of the time</strong>. Every request will get a response regardless of the individual state of the nodes. This means that the system will operate even if there are multiple nodes down. Unlike a consistent system, there‚Äôs <strong>no guarantee that the response will be the most recent write operation</strong>.</p>
<p>Example of a highly available database:</p>
<ul>
<li>On <strong>YouTube</strong> and <strong>social media</strong> like Facebook and Instagram, we can ignore consistency in views or likes count but the <strong>availability of videos and posts is essential</strong>.</li>
<li>In <strong>e-commerce businesses</strong>. Online stores want to make their store and the functions of the shopping cart available 24/7 so shoppers can make purchases exactly when they need.</li>
</ul>
<p>Database options for availability:</p>
<ul>
<li>Cassandra</li>
<li>DynamoDB</li>
<li>Cosmos DB</li>
</ul>
<h3 id="partition-tolerance">Partition tolerance</h3>
<p>When a distributed system encounters a partition, it means that there‚Äôs a <strong>break in communication between nodes</strong>. If a system is partition-tolerant, the system does not fail, regardless of whether messages are dropped or delayed between nodes within the system. To have partition tolerance, the system must replicate records across combinations of nodes and networks.</p>
<h3 id="cap-theorem-nosql-databases">CAP theorem NoSQL databases</h3>
<p>NoSQL databases can be classified based on whether they support high availability or high consistency.
NoSQL databases are great for distributed networks. They allow for <strong>horizontal scaling</strong>, and they can quickly scale across multiple nodes. When deciding which NoSQL database to use, it‚Äôs important to keep the CAP theorem in mind. NoSQL databases can be classified based on the two CAP features they support.</p>
 <p align="center">
    <img src="https://spcdn.pages.dev/img/system-design/cap_theorem-system-design-samirpaul1.jpg" alt="cap-theorem">
 </p>
<h2 id="consistency-availability-tradeoff">Consistency-Availability Tradeoff</h2>
<p>We live in a physical world and can&rsquo;t guarantee the stability of a network, so distributed databases must choose Partition Tolerance (P). This implies a tradeoff between Consistency (C) and Availability (A).</p>
<h3 id="ca-database">CA database</h3>
<p><strong>Relational databases</strong>, such as PostgreSQL, allow for consistency and availability if the systems are <strong>vertically scale</strong> on a <strong>single machine</strong>, we can avoid fault tolerance.
A CA database delivers consistency and availability across all nodes. It can&rsquo;t do this if there is a partition between any two nodes in the system, and therefore can&rsquo;t deliver fault tolerance.</p>
<p><strong>Example</strong>: <a href="https://www.postgresql.org">PostgreSQL</a>, <a href="https://mariadb.org">MariaDB</a>.</p>
<h3 id="cp-database">CP database</h3>
<p>CP databases enable consistency and partition tolerance, but not availability. When a partition occurs, the system has to <strong>turn off inconsistent nodes until the partition can be fixed</strong>. That&rsquo;s why they are not 100% available.
MongoDB is an example of a CP database. It‚Äôs a NoSQL database management system (DBMS) that uses documents for data storage. It‚Äôs considered schema-less, which means that it doesn‚Äôt require a defined database schema. It‚Äôs commonly used in big data and applications running in different locations. The CP system is structured so that there‚Äôs only one primary node that receives all of the write requests in a given replica set. Secondary nodes replicate the data in the primary nodes, so if the primary node fails, a secondary node can stand-in.
<strong>Example</strong>: <a href="https://www.mongodb.com">MongoDB</a>, <a href="https://hbase.apache.org">Apache HBase</a>.</p>
<h3 id="ap-database">AP database</h3>
<p>AP databases enable availability and partition tolerance, but not consistency. In the event of a partition, all nodes are available, but they‚Äôre not all updated. For example, if a user tries to access data from a bad node, they <strong>won‚Äôt receive the most up-to-date version of the data</strong>. When the partition is eventually resolved, most AP databases will sync the nodes to ensure consistency across them. Apache Cassandra is an example of an AP database. It‚Äôs a NoSQL database with no primary node, meaning that all of the nodes remain available. Cassandra allows for eventual consistency because users can resync their data right after a partition is resolved.</p>
<p><strong>Example</strong>: <a href="https://cassandra.apache.org">Apache Cassandra</a>, <a href="https://couchdb.apache.org">CouchDB</a>.</p>
<h3 id="cap-theorem-and-microservices">CAP theorem and microservices</h3>
<p>Microservices are defined as loosely coupled services that can be independently developed, deployed, and maintained. They include their own stack, database, and database model, and communicate with each other through a network. Microservices have become especially popular in <strong>hybrid cloud and <a href="https://www.educative.io/blog/what-is-multi-cloud">multi-cloud</a> environments</strong>, and they are also widely used in on-premises data centers. If you want to create a microservices application, you can use the CAP theorem to help you determine a database that will best fit your needs.</p>
<h1 id="pacelc-theorem">PACELC Theorem</h1>
<p>The PACELC theorem is an extension of the CAP theorem. The CAP theorem states that in the case of network partitioning (P) in a distributed system, one has to choose between Availability (A) and Consistency (C).</p>
<p>PACELC extends the CAP theorem by introducing latency (L) as an additional attribute of a distributed system. The theorem states that else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and consistency (C).</p>
<p><em>The PACELC theorem was first described by <a href="https://scholar.google.com/citations?user=zxeEF2gAAAAJ">Daniel J. Abadi</a>.</em></p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/pacelc-theorem.jpg" alt="pacelc-theorem"  />
</p>
<p>PACELC theorem was developed to address a key limitation of the CAP theorem as it makes no provision for performance or latency.</p>
<p>For example, according to the CAP theorem, a database can be considered Available if a query returns a response after 30 days. Obviously, such latency would be unacceptable for any real-world application.</p>
<h1 id="transactions">Transactions</h1>
<p>A transaction is a series of database operations that are considered to be a <em>&ldquo;single unit of work&rdquo;</em>. The operations in a transaction either all succeed, or they all fail. In this way, the notion of a transaction supports data integrity when part of a system fails. Not all databases choose to support ACID transactions, usually because they are prioritizing other optimizations that are hard or theoretically impossible to implement together.</p>
<p><em>Usually, relational databases support ACID transactions, and non-relational databases don&rsquo;t (there are exceptions).</em></p>
<h2 id="states">States</h2>
<p>A transaction in a database can be in one of the following states:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/transaction-states.jpg" alt="transaction-states"  />
</p>
<h3 id="active">Active</h3>
<p>In this state, the transaction is being executed. This is the initial state of every transaction.</p>
<h3 id="partially-committed">Partially Committed</h3>
<p>When a transaction executes its final operation, it is said to be in a partially committed state.</p>
<h3 id="committed">Committed</h3>
<p>If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the database system.</p>
<h3 id="failed">Failed</h3>
<p>The transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer proceed further.</p>
<h3 id="aborted">Aborted</h3>
<p>If any of the checks fail and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state are aborted.</p>
<p>The database recovery module can select one of the two operations after a transaction aborts:</p>
<ul>
<li>Restart the transaction</li>
<li>Kill the transaction</li>
</ul>
<h3 id="terminated">Terminated</h3>
<p>If there isn&rsquo;t any roll-back or the transaction comes from the <em>committed state</em>, then the system is consistent and ready for a new transaction and the old transaction is terminated.</p>
<h1 id="distributed-transactions">Distributed Transactions</h1>
<p>A distributed transaction is a set of operations on data that is performed across two or more databases. It is typically coordinated across separate nodes connected by a network, but may also span multiple databases on a single server.</p>
<h2 id="why-do-we-need-distributed-transactions">Why do we need distributed transactions?</h2>
<p>Unlike an ACID transaction on a single database, a distributed transaction involves altering data on multiple databases. Consequently, distributed transaction processing is more complicated, because the database must coordinate the committing or rollback of the changes in a transaction as a self-contained unit.</p>
<p>In other words, all the nodes must commit, or all must abort and the entire transaction rolls back. This is why we need distributed transactions.</p>
<p>Now, let&rsquo;s look at some popular solutions for distributed transactions:</p>
<h2 id="two-phase-commit">Two-Phase commit</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/two-phase-commit.jpg" alt="two-phase-commit"  />
</p>
<p>The two-phase commit (2PC) protocol is a distributed algorithm that coordinates all the processes that participate in a distributed transaction on whether to commit or abort (roll back) the transaction.</p>
<p>This protocol achieves its goal even in many cases of temporary system failure and is thus widely used. However, it is not resilient to all possible failure configurations, and in rare cases, manual intervention is needed to remedy an outcome.</p>
<p>This protocol requires a coordinator node, which basically coordinates and oversees the transaction across different nodes. The coordinator tries to establish the consensus among a set of processes in two phases, hence the name.</p>
<h3 id="phases">Phases</h3>
<p>Two-phase commit consists of the following phases:</p>
<p><strong>Prepare phase</strong></p>
<p>The prepare phase involves the coordinator node collecting consensus from each of the participant nodes. The transaction will be aborted unless each of the nodes responds that they&rsquo;re <em>prepared</em>.</p>
<p><strong>Commit phase</strong></p>
<p>If all participants respond to the coordinator that they are <em>prepared</em>, then the coordinator asks all the nodes to commit the transaction. If a failure occurs, the transaction will be rolled back.</p>
<h3 id="problems">Problems</h3>
<p>Following problems may arise in the two-phase commit protocol:</p>
<ul>
<li>What if one of the nodes crashes?</li>
<li>What if the coordinator itself crashes?</li>
<li>It is a blocking protocol.</li>
</ul>
<h2 id="three-phase-commit">Three-phase commit</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/three-phase-commit.jpg" alt="three-phase-commit"  />
</p>
<p>Three-phase commit (3PC) is an extension of the two-phase commit where the commit phase is split into two phases. This helps with the blocking problem that occurs in the two-phase commit protocol.</p>
<h3 id="phases-1">Phases</h3>
<p>Three-phase commit consists of the following phases:</p>
<p><strong>Prepare phase</strong></p>
<p>This phase is the same as the two-phase commit.</p>
<p><strong>Pre-commit phase</strong></p>
<p>Coordinator issues the pre-commit message and all the participating nodes must acknowledge it. If a participant fails to receive this message in time, then the transaction is aborted.</p>
<p><strong>Commit phase</strong></p>
<p>This step is also similar to the two-phase commit protocol.</p>
<h3 id="why-is-the-pre-commit-phase-helpful">Why is the Pre-commit phase helpful?</h3>
<p>The pre-commit phase accomplishes the following:</p>
<ul>
<li>If the participant nodes are found in this phase, that means that <em>every</em> participant has completed the first phase. The completion of prepare phase is guaranteed.</li>
<li>Every phase can now time out and avoid indefinite waits.</li>
</ul>
<h2 id="sagas">Sagas</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/sagas.jpg" alt="sagas"  />
</p>
<p>A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.</p>
<h3 id="coordination">Coordination</h3>
<p>There are two common implementation approaches:</p>
<ul>
<li><strong>Choreography</strong>: Each local transaction publishes domain events that trigger local transactions in other services.</li>
<li><strong>Orchestration</strong>: An orchestrator tells the participants what local transactions to execute.</li>
</ul>
<h3 id="problems-1">Problems</h3>
<ul>
<li>The Saga pattern is particularly hard to debug.</li>
<li>There&rsquo;s a risk of cyclic dependency between saga participants.</li>
<li>Lack of participant data isolation imposes durability challenges.</li>
<li>Testing is difficult because all services must be running to simulate a transaction.</li>
</ul>
<h1 id="sharding">Sharding</h1>
<p>Before we discuss sharding, let&rsquo;s talk about data partitioning:</p>
<h2 id="data-partitioning">Data Partitioning</h2>
<p>Data partitioning is a technique to break up a database into many smaller parts. It is the process of splitting up a database or a table across multiple machines to improve the manageability, performance, and availability of a database.</p>
<h3 id="methods">Methods</h3>
<p>There are many different ways one could use to decide how to break up an application database into multiple smaller DBs. Below are three of the most popular methods used by various large-scale applications:</p>
<p><strong>Horizontal Partitioning (or Sharding)</strong></p>
<p>In this strategy, we split the table data horizontally based on the range of values defined by the <em>partition key</em>. It is also referred to as <strong><em>database sharding</em></strong>.</p>
<p><strong>Vertical Partitioning</strong></p>
<p>In vertical partitioning, we partition the data vertically based on columns. We divide tables into relatively smaller tables with few elements, and each part is present in a separate partition.</p>
<p>In this tutorial, we will specifically focus on sharding.</p>
<h2 id="what-is-sharding">What is sharding?</h2>
<p>Sharding is a database architecture pattern related to <em>horizontal partitioning</em>, which is the practice of separating one table&rsquo;s rows into multiple different tables, known as <em>partitions</em> or <em>shards</em>. Each partition has the same schema and columns, but also a subset of the shared data. Likewise, the data held in each is unique and independent of the data held in other partitions.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/sharding.jpg" alt="sharding"  />
</p>
<p>The justification for data sharding is that, after a certain point, it is cheaper and more feasible to scale horizontally by adding more machines than to scale it vertically by adding powerful servers. Sharding can be implemented at both application or the database level.</p>
<h2 id="partitioning-criteria">Partitioning criteria</h2>
<p>There are a large number of criteria available for data partitioning. Some most commonly used criteria are:</p>
<h3 id="hash-based">Hash-Based</h3>
<p>This strategy divides the rows into different partitions based on a hashing algorithm rather than grouping database rows based on continuous indexes.</p>
<p>The disadvantage of this method is that dynamically adding/removing database servers becomes expensive.</p>
<h3 id="list-based">List-Based</h3>
<p>In list-based partitioning, each partition is defined and selected based on the list of values on a column rather than a set of contiguous ranges of values.</p>
<h3 id="range-based">Range Based</h3>
<p>Range partitioning maps data to various partitions based on ranges of values of the partitioning key. In other words, we partition the table in such a way that each partition contains rows within a given range defined by the partition key.</p>
<p>Ranges should be contiguous but not overlapping, where each range specifies a non-inclusive lower and upper bound for a partition. Any partitioning key values equal to or higher than the upper bound of the range are added to the next partition.</p>
<h3 id="composite">Composite</h3>
<p>As the name suggests, composite partitioning partitions the data based on two or more partitioning techniques. Here we first partition the data using one technique, and then each partition is further subdivided into sub-partitions using the same or some other method.</p>
<h2 id="advantages-10">Advantages</h2>
<p>But why do we need sharding? Here are some advantages:</p>
<ul>
<li><strong>Availability</strong>: Provides logical independence to the partitioned database, ensuring the high availability of our application. Here individual partitions can be managed independently.</li>
<li><strong>Scalability</strong>: Proves to increase scalability by distributing the data across multiple partitions.</li>
<li><strong>Security</strong>: Helps improve the system&rsquo;s security by storing sensitive and non-sensitive data in different partitions. This could provide better manageability and security to sensitive data.</li>
<li><strong>Query Performance</strong>: Improves the performance of the system. Instead of querying the whole database, now the system has to query only a smaller partition.</li>
<li><strong>Data Manageability</strong>: Divides tables and indexes into smaller and more manageable units.</li>
</ul>
<h2 id="disadvantages-8">Disadvantages</h2>
<ul>
<li><strong>Complexity</strong>: Sharding increases the complexity of the system in general.</li>
<li><strong>Joins across shards</strong>: Once a database is partitioned and spread across multiple machines it is often not feasible to perform joins that span multiple database shards. Such joins will not be performance efficient since data has to be retrieved from multiple servers.</li>
<li><strong>Rebalancing</strong>: If the data distribution is not uniform or there is a lot of load on a single shard, in such cases we have to rebalance our shards so that the requests are as equally distributed among the shards as possible.</li>
</ul>
<h2 id="when-to-use-sharding">When to use sharding?</h2>
<p>Here are some reasons where sharding might be the right choice:</p>
<ul>
<li>Leveraging existing hardware instead of high-end machines.</li>
<li>Maintain data in distinct geographic regions.</li>
<li>Quickly scale by adding more shards.</li>
<li>Better performance as each machine is under less load.</li>
<li>When more concurrent connections are required.</li>
</ul>
<h1 id="consistent-hashing">Consistent Hashing</h1>
<p>Let&rsquo;s first understand the problem we&rsquo;re trying to solve.</p>
<h2 id="why-do-we-need-this">Why do we need this?</h2>
<p>In traditional hashing-based distribution methods, we use a hash function to hash our partition keys (i.e. request ID or IP). Then if we use the modulo against the total number of nodes (server or databases). This will give us the node where we want to route our request.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/simple-hashing.jpg" alt="simple-hashing"  />
</p>
<p><img loading="lazy" src="https://github.com/SamirPaul1/assets/assets/77569653/994ad536-f4d5-4575-95a5-77a049583dd1" alt="hashing"  />
</p>
<p>Where,</p>
<p><code>key</code>: Request ID or IP.</p>
<p><code>H</code>: Hash function result.</p>
<p><code>N</code>: Total number of nodes.</p>
<p><code>Node</code>: The node where the request will be routed.</p>
<p>The problem with this is if we add or remove a node, it will cause <code>N</code> to change, meaning our mapping strategy will break as the same requests will now map to a different server. As a consequence, the majority of requests will need to be redistributed which is very inefficient.</p>
<p>We want to uniformly distribute requests among different nodes such that we should be able to add or remove nodes with minimal effort. Hence, we need a distribution scheme that does not depend directly on the number of nodes (or servers), so that, when adding or removing nodes, the number of keys that need to be relocated is minimized.</p>
<p>Consistent hashing solves this horizontal scalability problem by ensuring that every time we scale up or down, we do not have to re-arrange all the keys or touch all the servers.</p>
<p>Now that we understand the problem, let&rsquo;s discuss consistent hashing in detail.</p>
<h2 id="how-does-it-work">How does it work</h2>
<p>Consistent Hashing is a distributed hashing scheme that operates independently of the number of nodes in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/consistent-hashing.jpg" alt="consistent-hashing"  />
</p>
<p>Using consistent hashing, only <code>K/N</code> data would require re-distributing.</p>
<p>$$
R = K/N
$$</p>
<p>Where,</p>
<p><code>R</code>: Data that would require re-distribution.</p>
<p><code>K</code>: Number of partition keys.</p>
<p><code>N</code>: Number of nodes.</p>
<p>The output of the hash function is a range let&rsquo;s say <code>0...m-1</code> which we can represent on our hash ring. We hash the requests and distribute them on the ring depending on what the output was. Similarly, we also hash the node and distribute them on the same ring as well.</p>
<p><img loading="lazy" src="https://github.com/SamirPaul1/assets/assets/77569653/d479b60a-4001-4e84-b452-721cf782cd58" alt="image"  />
</p>
<p>Where,</p>
<p><code>key</code>: Request/Node ID or IP.</p>
<p><code>P</code>: Position on the hash ring.</p>
<p><code>m</code>: Total range of the hash ring.</p>
<p>Now, when the request comes in we can simply route it to the closest node in a clockwise (can be counterclockwise as well) manner. This means that if a new node is added or removed, we can use the nearest node and only a <em>fraction</em> of the requests need to be re-routed.</p>
<p>In theory, consistent hashing should distribute the load evenly however it doesn&rsquo;t happen in practice. Usually, the load distribution is uneven and one server may end up handling the majority of the request becoming a <em>hotspot</em>, essentially a bottleneck for the system. We can fix this by adding extra nodes but that can be expensive.</p>
<p>Let&rsquo;s see how we can address these issues.</p>
<h2 id="virtual-nodes">Virtual Nodes</h2>
<p>In order to ensure a more evenly distributed load, we can introduce the idea of a virtual node, sometimes also referred to as a VNode.</p>
<p>Instead of assigning a single position to a node, the hash range is divided into multiple smaller ranges, and each physical node is assigned several of these smaller ranges. Each of these subranges is considered a VNode. Hence, virtual nodes are basically existing physical nodes mapped multiple times across the hash ring to minimize changes to a node&rsquo;s assigned range.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/virtual-nodes.jpg" alt="virtual-nodes"  />
</p>
<p>For this, we can use <code>k</code> number of hash functions.</p>
<p><img loading="lazy" src="https://github.com/SamirPaul1/assets/assets/77569653/3a73152c-7da9-4e9b-bfe1-ace8950c24fe" alt="image"  />
</p>
<p>Where,</p>
<p><code>key</code>: Request/Node ID or IP.</p>
<p><code>k</code>: Number of hash functions.</p>
<p><code>P</code>: Position on the hash ring.</p>
<p><code>m</code>: Total range of the hash ring.</p>
<p>As VNodes help spread the load more evenly across the physical nodes on the cluster by diving the hash ranges into smaller subranges, this speeds up the re-balancing process after adding or removing nodes. This also helps us reduce the probability of hotspots.</p>
<h2 id="data-replication">Data replication</h2>
<p>To ensure high availability and durability, consistent hashing replicates each data item on multiple <code>N</code> nodes in the system where the value <code>N</code> is equivalent to the <em>replication factor</em>.</p>
<p>The replication factor is the number of nodes that will receive the copy of the same data. In eventually consistent systems, this is done asynchronously.</p>
<h2 id="advantages-11">Advantages</h2>
<p>Let&rsquo;s look at some advantages of consistent hashing:</p>
<ul>
<li>Makes rapid scaling up and down more predictable.</li>
<li>Facilitates partitioning and replication across nodes.</li>
<li>Enables scalability and availability.</li>
<li>Reduces hotspots.</li>
</ul>
<h2 id="disadvantages-9">Disadvantages</h2>
<p>Below are some disadvantages of consistent hashing:</p>
<ul>
<li>Increases complexity.</li>
<li>Cascading failures.</li>
<li>Load distribution can still be uneven.</li>
<li>Key management can be expensive when nodes transiently fail.</li>
</ul>
<h2 id="examples-7">Examples</h2>
<p>Let&rsquo;s look at some examples where consistent hashing is used:</p>
<ul>
<li>Data partitioning in <a href="https://cassandra.apache.org">Apache Cassandra</a>.</li>
<li>Load distribution across multiple storage hosts in <a href="https://aws.amazon.com/dynamodb">Amazon DynamoDB</a>.</li>
</ul>
<h1 id="database-federation">Database Federation</h1>
<p>Federation (or functional partitioning) splits up databases by function. The federation architecture makes several distinct physical databases appear as one logical database to end-users.</p>
<p>All of the components in a federation are tied together by one or more federal schemas that express the commonality of data throughout the federation. These federated schemas are used to specify the information that can be shared by the federation components and to provide a common basis for communication among them.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/database-federation.jpg" alt="database-federation"  />
</p>
<p>Federation also provides a cohesive, unified view of data derived from multiple sources. The data sources for federated systems can include databases and various other forms of structured and unstructured data.</p>
<h2 id="characteristics">Characteristics</h2>
<p>Let&rsquo;s look at some key characteristics of a federated database:</p>
<ul>
<li><strong>Transparency</strong>: Federated database masks user differences and implementations of underlying data sources. Therefore, the users do not need to be aware of where the data is stored.</li>
<li><strong>Heterogeneity</strong>: Data sources can differ in many ways. A federated database system can handle different hardware, network protocols, data models, etc.</li>
<li><strong>Extensibility</strong>: New sources may be needed to meet the changing needs of the business. A good federated database system needs to make it easy to add new sources.</li>
<li><strong>Autonomy</strong>: A Federated database does not change existing data sources, interfaces should remain the same.</li>
<li><strong>Data integration</strong>: A federated database can integrate data from different protocols, database management systems, etc.</li>
</ul>
<h2 id="advantages-12">Advantages</h2>
<p>Here are some advantages of federated databases:</p>
<ul>
<li>Flexible data sharing.</li>
<li>Autonomy among the database components.</li>
<li>Access heterogeneous data in a unified way.</li>
<li>No tight coupling of applications with legacy databases.</li>
</ul>
<h2 id="disadvantages-10">Disadvantages</h2>
<p>Below are some disadvantages of federated databases:</p>
<ul>
<li>Adds more hardware and additional complexity.</li>
<li>Joining data from two databases is complex.</li>
<li>Dependence on autonomous data sources.</li>
<li>Query performance and scalability.</li>
</ul>
<h1 id="n-tier-architecture">N-tier architecture</h1>
<p>N-tier architecture divides an application into logical layers and physical tiers. Layers are a way to separate responsibilities and manage dependencies. Each layer has a specific responsibility. A higher layer can use services in a lower layer, but not the other way around.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/n-tier-architecture.jpg" alt="n-tier-architecture"  />
</p>
<p>Tiers are physically separated, running on separate machines. A tier can call to another tier directly, or use asynchronous messaging. Although each layer might be hosted in its own tier, that&rsquo;s not required. Several layers might be hosted on the same tier. Physically separating the tiers improves scalability and resiliency and adds latency from the additional network communication.</p>
<p>An N-tier architecture can be of two types:</p>
<ul>
<li>In a closed layer architecture, a layer can only call the next layer immediately down.</li>
<li>In an open layer architecture, a layer can call any of the layers below it.</li>
</ul>
<p>A closed-layer architecture limits the dependencies between layers. However, it might create unnecessary network traffic, if one layer simply passes requests along to the next layer.</p>
<h2 id="types-of-n-tier-architectures">Types of N-Tier architectures</h2>
<p>Let&rsquo;s look at some examples of N-Tier architecture:</p>
<h3 id="3-tier-architecture">3-Tier architecture</h3>
<p>3-Tier is widely used and consists of the following different layers:</p>
<ul>
<li><strong>Presentation layer</strong>: Handles user interactions with the application.</li>
<li><strong>Business Logic layer</strong>: Accepts the data from the application layer, validates it as per business logic and passes it to the data layer.</li>
<li><strong>Data Access layer</strong>: Receives the data from the business layer and performs the necessary operation on the database.</li>
</ul>
<h3 id="2-tier-architecture">2-Tier architecture</h3>
<p>In this architecture, the presentation layer runs on the client and communicates with a data store. There is no business logic layer or immediate layer between client and server.</p>
<h3 id="single-tier-or-1-tier-architecture">Single Tier or 1-Tier architecture</h3>
<p>It is the simplest one as it is equivalent to running the application on a personal computer. All of the required components for an application to run are on a single application or server.</p>
<h2 id="advantages-13">Advantages</h2>
<p>Here are some advantages of using N-tier architecture:</p>
<ul>
<li>Can improve availability.</li>
<li>Better security as layers can behave like a firewall.</li>
<li>Separate tiers allow us to scale them as needed.</li>
<li>Improve maintenance as different people can manage different tiers.</li>
</ul>
<h2 id="disadvantages-11">Disadvantages</h2>
<p>Below are some disadvantages of N-tier architecture:</p>
<ul>
<li>Increased complexity of the system as a whole.</li>
<li>Increased network latency as the number of tiers increases.</li>
<li>Expensive as every tier will have its own hardware cost.</li>
<li>Difficult to manage network security.</li>
</ul>
<h1 id="message-brokers">Message Brokers</h1>
<p>A message broker is a software that enables applications, systems, and services to communicate with each other and exchange information. The message broker does this by translating messages between formal messaging protocols. This allows interdependent services to <em>&ldquo;talk&rdquo;</em> with one another directly, even if they were written in different languages or implemented on different platforms.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/message-broker.jpg" alt="message-broker"  />
</p>
<p>Message brokers can validate, store, route, and deliver messages to the appropriate destinations. They serve as intermediaries between other applications, allowing senders to issue messages without knowing where the receivers are, whether or not they are active, or how many of them there are. This facilitates the decoupling of processes and services within systems.</p>
<h2 id="models">Models</h2>
<p>Message brokers offer two basic message distribution patterns or messaging styles:</p>
<ul>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/message-queues">Point-to-Point messaging</a></strong>: This is the distribution pattern utilized in message queues with a one-to-one relationship between the message&rsquo;s sender and receiver.</li>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe">Publish-subscribe messaging</a></strong>: In this message distribution pattern, often referred to as <em>&ldquo;pub/sub&rdquo;</em>, the producer of each message publishes it to a topic, and multiple message consumers subscribe to topics from which they want to receive messages.</li>
</ul>
<p><em>We will discuss these messaging patterns in detail in the later tutorials.</em></p>
<h2 id="message-brokers-vs-event-streaming">Message brokers vs Event streaming</h2>
<p>Message brokers can support two or more messaging patterns, including message queues and pub/sub, while event streaming platforms only offer pub/sub-style distribution patterns. Designed for use with high volumes of messages, event streaming platforms are readily scalable. They&rsquo;re capable of ordering streams of records into categories called <em>topics</em> and storing them for a predetermined amount of time. Unlike message brokers, however, event streaming platforms cannot guarantee message delivery or track which consumers have received the messages.</p>
<p>Event streaming platforms offer more scalability than message brokers but fewer features that ensure fault tolerance like message resending, as well as more limited message routing and queueing capabilities.</p>
<h2 id="message-brokers-vs-enterprise-service-bus-esb">Message brokers vs Enterprise Service Bus (ESB)</h2>
<p><a href="https://karanpratapsingh.com/courses/system-design/enterprise-service-bus">Enterprise Service Bus (ESB)</a> infrastructure is complex and can be challenging to integrate and expensive to maintain. It&rsquo;s difficult to troubleshoot them when problems occur in production environments, they&rsquo;re not easy to scale, and updating is tedious.</p>
<p>Whereas message brokers are a <em>&ldquo;lightweight&rdquo;</em> alternative to ESBs that provide similar functionality, a mechanism for inter-service communication, at a lower cost. They&rsquo;re well-suited for use in the <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices">microservices architectures</a> that have become more prevalent as ESBs have fallen out of favor.</p>
<h2 id="examples-8">Examples</h2>
<p>Here are some commonly used message brokers:</p>
<ul>
<li><a href="https://nats.io">NATS</a></li>
<li><a href="https://kafka.apache.org">Apache Kafka</a></li>
<li><a href="https://www.rabbitmq.com">RabbitMQ</a></li>
<li><a href="https://activemq.apache.org">ActiveMQ</a></li>
</ul>
<h1 id="message-queues">Message Queues</h1>
<p>A message queue is a form of service-to-service communication that facilitates asynchronous communication. It asynchronously receives messages from producers and sends them to consumers.</p>
<p>Queues are used to effectively manage requests in large-scale distributed systems. In small systems with minimal processing loads and small databases, writes can be predictably fast. However, in more complex and large systems writes can take an almost non-deterministic amount of time.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/message-queue.jpg" alt="message-queue"  />
</p>
<h2 id="working">Working</h2>
<p>Messages are stored in the queue until they are processed and deleted. Each message is processed only once by a single consumer. Here&rsquo;s how it works:</p>
<ul>
<li>A producer publishes a job to the queue, then notifies the user of the job status.</li>
<li>A consumer picks up the job from the queue, processes it, then signals that the job is complete.</li>
</ul>
<h2 id="advantages-14">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using a message queue:</p>
<ul>
<li><strong>Scalability</strong>: Message queues make it possible to scale precisely where we need to. When workloads peak, multiple instances of our application can all add requests to the queue without the risk of collision</li>
<li><strong>Decoupling</strong>: Message queues remove dependencies between components and significantly simplify the implementation of decoupled applications.</li>
<li><strong>Performance</strong>: Message queues enable asynchronous communication, which means that the endpoints that are producing and consuming messages interact with the queue, not each other. Producers can add requests to the queue without waiting for them to be processed.</li>
<li><strong>Reliability</strong>: Queues make our data persistent, and reduce the errors that happen when different parts of our system go offline.</li>
</ul>
<h2 id="features-1">Features</h2>
<p>Now, let&rsquo;s discuss some desired features of message queues:</p>
<h3 id="push-or-pull-delivery">Push or Pull Delivery</h3>
<p>Most message queues provide both push and pull options for retrieving messages. Pull means continuously querying the queue for new messages. Push means that a consumer is notified when a message is available. We can also use long-polling to allow pulls to wait a specified amount of time for new messages to arrive.</p>
<h3 id="fifo-first-in-first-out-queues">FIFO (First-In-First-Out) Queues</h3>
<p>In these queues, the oldest (or first) entry, sometimes called the <em>&ldquo;head&rdquo;</em> of the queue, is processed first.</p>
<h3 id="schedule-or-delay-delivery">Schedule or Delay Delivery</h3>
<p>Many message queues support setting a specific delivery time for a message. If we need to have a common delay for all messages, we can set up a delay queue.</p>
<h3 id="at-least-once-delivery">At-Least-Once Delivery</h3>
<p>Message queues may store multiple copies of messages for redundancy and high availability, and resend messages in the event of communication failures or errors to ensure they are delivered at least once.</p>
<h3 id="exactly-once-delivery">Exactly-Once Delivery</h3>
<p>When duplicates can&rsquo;t be tolerated, FIFO (first-in-first-out) message queues will make sure that each message is delivered exactly once (and only once) by filtering out duplicates automatically.</p>
<h3 id="dead-letter-queues">Dead-letter Queues</h3>
<p>A dead-letter queue is a queue to which other queues can send messages that can&rsquo;t be processed successfully. This makes it easy to set them aside for further inspection without blocking the queue processing or spending CPU cycles on a message that might never be consumed successfully.</p>
<h3 id="ordering">Ordering</h3>
<p>Most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they&rsquo;re sent and that a message is delivered at least once.</p>
<h3 id="poison-pill-messages">Poison-pill Messages</h3>
<p>Poison pills are special messages that can be received, but not processed. They are a mechanism used in order to signal a consumer to end its work so it is no longer waiting for new inputs, and are similar to closing a socket in a client/server model.</p>
<h3 id="security">Security</h3>
<p>Message queues will authenticate applications that try to access the queue, this allows us to encrypt messages over the network as well as in the queue itself.</p>
<h3 id="task-queues">Task Queues</h3>
<p>Tasks queues receive tasks and their related data, run them, then deliver their results. They can support scheduling and can be used to run computationally-intensive jobs in the background.</p>
<h2 id="backpressure">Backpressure</h2>
<p>If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance. Backpressure can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue. Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later. Clients can retry the request at a later time, perhaps with <a href="https://en.wikipedia.org/wiki/Exponential_backoff">exponential backoff</a> strategy.</p>
<h2 id="examples-9">Examples</h2>
<p>Following are some widely used message queues:</p>
<ul>
<li><a href="https://aws.amazon.com/sqs">Amazon SQS</a></li>
<li><a href="https://www.rabbitmq.com">RabbitMQ</a></li>
<li><a href="https://activemq.apache.org">ActiveMQ</a></li>
<li><a href="https://zeromq.org">ZeroMQ</a></li>
</ul>
<h1 id="publish-subscribe">Publish-Subscribe</h1>
<p>Similar to a message queue, publish-subscribe is also a form of service-to-service communication that facilitates asynchronous communication. In a pub/sub model, any message published to a topic is pushed immediately to all the subscribers of the topic.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/publish-subscribe.jpg" alt="publish-subscribe"  />
</p>
<p>The subscribers to the message topic often perform different functions, and can each do something different with the message in parallel. The publisher doesn&rsquo;t need to know who is using the information that it is broadcasting, and the subscribers don&rsquo;t need to know where the message comes from. This style of messaging is a bit different than message queues, where the component that sends the message often knows the destination it is sending to.</p>
<h2 id="working-1">Working</h2>
<p>Unlike message queues, which batch messages until they are retrieved, message topics transfer messages with little or no queuing and push them out immediately to all subscribers. Here&rsquo;s how it works:</p>
<ul>
<li>A message topic provides a lightweight mechanism to broadcast asynchronous event notifications and endpoints that allow software components to connect to the topic in order to send and receive those messages.</li>
<li>To broadcast a message, a component called a <em>publisher</em> simply pushes a message to the topic.</li>
<li>All components that subscribe to the topic (known as <em>subscribers</em>) will receive every message that was broadcasted.</li>
</ul>
<h2 id="advantages-15">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using publish-subscribe:</p>
<ul>
<li><strong>Eliminate Polling</strong>: Message topics allow instantaneous, push-based delivery, eliminating the need for message consumers to periodically check or <em>&ldquo;poll&rdquo;</em> for new information and updates. This promotes faster response time and reduces the delivery latency which can be particularly problematic in systems where delays cannot be tolerated.</li>
<li><strong>Dynamic Targeting</strong>: Pub/Sub makes the discovery of services easier, more natural, and less error-prone. Instead of maintaining a roster of peers where an application can send messages, a publisher will simply post messages to a topic. Then, any interested party will subscribe its endpoint to the topic, and start receiving these messages. Subscribers can change, upgrade, multiply or disappear and the system dynamically adjusts.</li>
<li><strong>Decoupled and Independent Scaling</strong>: Publishers and subscribers are decoupled and work independently from each other, which allows us to develop and scale them independently.</li>
<li><strong>Simplify Communication</strong>: The Publish-Subscribe model reduces complexity by removing all the point-to-point connections with a single connection to a message topic, which will manage subscriptions and decide what messages should be delivered to which endpoints.</li>
</ul>
<h2 id="features-2">Features</h2>
<p>Now, let&rsquo;s discuss some desired features of publish-subscribe:</p>
<h3 id="push-delivery">Push Delivery</h3>
<p>Pub/Sub messaging instantly pushes asynchronous event notifications when messages are published to the message topic. Subscribers are notified when a message is available.</p>
<h3 id="multiple-delivery-protocols">Multiple Delivery Protocols</h3>
<p>In the Publish-Subscribe model, topics can typically connect to multiple types of endpoints, such as message queues, serverless functions, HTTP servers, etc.</p>
<h3 id="fanout">Fanout</h3>
<p>This scenario happens when a message is sent to a topic and then replicated and pushed to multiple endpoints. Fanout provides asynchronous event notifications which in turn allows for parallel processing.</p>
<h3 id="filtering">Filtering</h3>
<p>This feature empowers the subscriber to create a message filtering policy so that it will only get the notifications it is interested in, as opposed to receiving every single message posted to the topic.</p>
<h3 id="durability">Durability</h3>
<p>Pub/Sub messaging services often provide very high durability, and at least once delivery, by storing copies of the same message on multiple servers.</p>
<h3 id="security-1">Security</h3>
<p>Message topics authenticate applications that try to publish content, this allows us to use encrypted endpoints and encrypt messages in transit over the network.</p>
<h2 id="examples-10">Examples</h2>
<p>Here are some technologies commonly used for publish-subscribe:</p>
<ul>
<li><a href="https://aws.amazon.com/sns">Amazon SNS</a></li>
<li><a href="https://cloud.google.com/pubsub">Google Pub/Sub</a></li>
</ul>
<h1 id="enterprise-service-bus-esb">Enterprise Service Bus (ESB)</h1>
<p>An Enterprise Service Bus (ESB) is an architectural pattern whereby a centralized software component performs integrations between applications. It performs transformations of data models, handles connectivity, performs message routing, converts communication protocols, and potentially manages the composition of multiple requests. The ESB can make these integrations and transformations available as a service interface for reuse by new applications.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/enterprise-service-bus.jpg" alt="enterprise-service-bus"  />
</p>
<h2 id="advantages-16">Advantages</h2>
<p>In theory, a centralized ESB offers the potential to standardize and dramatically simplify communication, messaging, and integration between services across the enterprise. Here are some advantages of using an ESB:</p>
<ul>
<li><strong>Improved developer productivity</strong>: Enables developers to incorporate new technologies into one part of an application without touching the rest of the application.</li>
<li><strong>Simpler, more cost-effective scalability</strong>: Components can be scaled independently of others.</li>
<li><strong>Greater resilience</strong>: Failure of one component does not impact the others, and each microservice can adhere to its own availability requirements without risking the availability of other components in the system.</li>
</ul>
<h2 id="disadvantages-12">Disadvantages</h2>
<p>While ESBs were deployed successfully in many organizations, in many other organizations the ESB came to be seen as a bottleneck. Here are some disadvantages of using an ESB:</p>
<ul>
<li>Making changes or enhancements to one integration could destabilize others who use that same integration.</li>
<li>A single point of failure can bring down all communications.</li>
<li>Updates to the ESB often impact existing integrations, so there is significant testing required to perform any update.</li>
<li>ESB is centrally managed which makes cross-team collaboration challenging.</li>
<li>High configuration and maintenance complexity.</li>
</ul>
<h2 id="examples-11">Examples</h2>
<p>Below are some widely used Enterprise Service Bus (ESB) technologies:</p>
<ul>
<li><a href="https://azure.microsoft.com/en-in/services/service-bus">Azure Service Bus</a></li>
<li><a href="https://www.ibm.com/in-en/cloud/app-connect">IBM App Connect</a></li>
<li><a href="https://camel.apache.org">Apache Camel</a></li>
<li><a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse">Fuse ESB</a></li>
</ul>
<h1 id="monoliths-and-microservices">Monoliths and Microservices</h1>
<h2 id="monoliths">Monoliths</h2>
<p>A monolith is a self-contained and independent application. It is built as a single unit and is responsible for not just a particular task, but can perform every step needed to satisfy a business need.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/monolith.jpg" alt="monolith"  />
</p>
<h3 id="advantages-17">Advantages</h3>
<p>Following are some advantages of monoliths:</p>
<ul>
<li>Simple to develop or debug.</li>
<li>Fast and reliable communication.</li>
<li>Easy monitoring and testing.</li>
<li>Supports ACID transactions.</li>
</ul>
<h3 id="disadvantages-13">Disadvantages</h3>
<p>Some common disadvantages of monoliths are:</p>
<ul>
<li>Maintenance becomes hard as the codebase grows.</li>
<li>Tightly coupled application, hard to extend.</li>
<li>Requires commitment to a particular technology stack.</li>
<li>On each update, the entire application is redeployed.</li>
<li>Reduced reliability as a single bug can bring down the entire system.</li>
<li>Difficult to scale or adopt technologies new technologies.</li>
</ul>
<h2 id="modular-monoliths">Modular monoliths</h2>
<p>A Modular Monolith is an approach where we build and deploy a single application (that&rsquo;s the <em>Monolith</em> part), but we build it in a way that breaks up the code into independent modules for each of the features needed in our application.</p>
<p>This approach reduces the dependencies of a module in such as way that we can enhance or change a module without affecting other modules. When done right, this can be really beneficial in the long term as it reduces the complexity that comes with maintaining a monolith as the system grows.</p>
<h2 id="microservices">Microservices</h2>
<p>A microservices architecture consists of a collection of small, autonomous services where each service is self-contained and should implement a single business capability within a bounded context. A bounded context is a natural division of business logic that provides an explicit boundary within which a domain model exists.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/microservices.jpg" alt="microservices"  />
</p>
<p>Each service has a separate codebase, which can be managed by a small development team. Services can be deployed independently and a team can update an existing service without rebuilding and redeploying the entire application.</p>
<p>Services are responsible for persisting their own data or external state (database per service). This differs from the traditional model, where a separate data layer handles data persistence.</p>
<h3 id="characteristics-1">Characteristics</h3>
<p>The microservices architecture style has the following characteristics:</p>
<ul>
<li><strong>Loosely coupled</strong>: Services should be loosely coupled so that they can be independently deployed and scaled. This will lead to the decentralization of development teams and thus, enabling them to develop and deploy faster with minimal constraints and operational dependencies.</li>
<li><strong>Small but focused</strong>: It&rsquo;s about scope and responsibilities and not size, a service should be focused on a specific problem. Basically, <em>&ldquo;It does one thing and does it well&rdquo;</em>. Ideally, they can be independent of the underlying architecture.</li>
<li><strong>Built for businesses</strong>: The microservices architecture is usually organized around business capabilities and priorities.</li>
<li><strong>Resilience &amp; Fault tolerance</strong>: Services should be designed in such a way that they still function in case of failure or errors. In environments with independently deployable services, failure tolerance is of the highest importance.</li>
<li><strong>Highly maintainable</strong>: Service should be easy to maintainable and test because services that cannot be maintained will be re-written.</li>
</ul>
<h3 id="advantages-18">Advantages</h3>
<p>Here are some advantages of microservices architecture:</p>
<ul>
<li>Loosely coupled services.</li>
<li>Services can be deployed independently.</li>
<li>Highly agile for multiple development teams.</li>
<li>Improves fault tolerance and data isolation.</li>
<li>Better scalability as each service can be scaled independently.</li>
<li>Eliminates any long-term commitment to a particular technology stack.</li>
</ul>
<h3 id="disadvantages-14">Disadvantages</h3>
<p>Microservices architecture brings its own set of challenges:</p>
<ul>
<li>Complexity of a distributed system.</li>
<li>Testing is more difficult.</li>
<li>Expensive to maintain (individual servers, databases, etc.).</li>
<li>Inter-service communication has its own challenges.</li>
<li>Data integrity and consistency.</li>
<li>Network congestion and latency.</li>
</ul>
<h3 id="best-practices">Best practices</h3>
<p>Let&rsquo;s discuss some microservices best practices:</p>
<ul>
<li>Model services around the business domain.</li>
<li>Services should have loose coupling and high functional cohesion.</li>
<li>Isolate failures and use resiliency strategies to prevent failures within a service from cascading.</li>
<li>Services should only communicate through well-designed APIs. Avoid leaking implementation details.</li>
<li>Data storage should be private to the service that owns the data</li>
<li>Avoid coupling between services. Causes of coupling include shared database schemas and rigid communication protocols.</li>
<li>Decentralize everything. Individual teams are responsible for designing and building services. Avoid sharing code or data schemas.</li>
<li>Fail fast by using a <a href="https://karanpratapsingh.com/courses/system-design/circuit-breaker">circuit breaker</a> to achieve fault tolerance.</li>
<li>Ensure that the API changes are backward compatible.</li>
</ul>
<h3 id="pitfalls">Pitfalls</h3>
<p>Below are some common pitfalls of microservices architecture:</p>
<ul>
<li>Service boundaries are not based on the business domain.</li>
<li>Underestimating how hard is to build a distributed system.</li>
<li>Shared database or common dependencies between services.</li>
<li>Lack of Business Alignment.</li>
<li>Lack of clear ownership.</li>
<li>Lack of idempotency.</li>
<li>Trying to do everything <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models">ACID instead of BASE</a>.</li>
<li>Lack of design for fault tolerance may result in cascading failures.</li>
</ul>
<h2 id="beware-of-the-distributed-monolith">Beware of the distributed monolith</h2>
<p>Distributed Monolith is a system that resembles the microservices architecture but is tightly coupled within itself like a monolithic application. Adopting microservices architecture comes with a lot of advantages. But while making one, there are good chances that we might end up with a distributed monolith.</p>
<p>Our microservices are just a distributed monolith if any of these apply to it:</p>
<ul>
<li>Requires low latency communication.</li>
<li>Services don&rsquo;t scale easily.</li>
<li>Dependency between services.</li>
<li>Sharing the same resources such as databases.</li>
<li>Tightly coupled systems.</li>
</ul>
<p>One of the primary reasons to build an application using microservices architecture is to have scalability. Therefore, microservices should have loosely coupled services which enable every service to be independent. The distributed monolith architecture takes this away and causes most components to depend on one another, increasing design complexity.</p>
<h2 id="microservices-vs-service-oriented-architecture-soa">Microservices vs Service-oriented architecture (SOA)</h2>
<p>You might have seen <em>Service-oriented architecture (SOA)</em> mentioned around the internet, sometimes even interchangeably with microservices, but they are different from each other and the main distinction between the two approaches comes down to <em>scope</em>.</p>
<p>Service-oriented architecture (SOA) defines a way to make software components reusable via service interfaces. These interfaces utilize common communication standards and focus on maximizing application service reusability whereas microservices are built as a collection of various smallest independent service units focused on team autonomy and decoupling.</p>
<h2 id="why-you-dont-need-microservices">Why you don&rsquo;t need microservices</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/architecture-range.jpg" alt="architecture-range"  />
</p>
<p>So, you might be wondering, monoliths seem like a bad idea to begin with, why would anyone use that?</p>
<p>Well, it depends. While each approach has its own advantages and disadvantages, it is advised to start with a monolith when building a new system. It is important to understand, that microservices are not a silver bullet instead they solve an organizational problem. Microservices architecture is about your organizational priorities and team as much as it&rsquo;s about technology.</p>
<p>Before making the decision to move to microservices architecture, you need to ask yourself questions like:</p>
<ul>
<li><em>&ldquo;Is the team too large to work effectively on a shared codebase?&rdquo;</em></li>
<li><em>&ldquo;Are teams blocked on other teams?&rdquo;</em></li>
<li><em>&ldquo;Does microservices deliver clear business value for us?&rdquo;</em></li>
<li><em>&ldquo;Is my business mature enough to use microservices?&rdquo;</em></li>
<li><em>&ldquo;Is our current architecture limiting us with communication overhead?&rdquo;</em></li>
</ul>
<p>If your application does not require to be broken down into microservices, you don&rsquo;t need this. There is no absolute necessity that all applications should be broken down into microservices.</p>
<p>We frequently draw inspiration from companies such as Netflix and their use of microservices, but we overlook the fact that we are not Netflix. They went through a lot of iterations and models before they had a market-ready solution, and this architecture became acceptable for them when they identified and solved the problem they were trying to tackle.</p>
<p>That&rsquo;s why it&rsquo;s essential to understand in-depth if your business <em>actually</em> needs microservices. What I&rsquo;m trying to say is microservices are solutions to complex concerns and if your business doesn&rsquo;t have complex issues, you don&rsquo;t need them.</p>
<h1 id="event-driven-architecture-eda">Event-Driven Architecture (EDA)</h1>
<p>Event-Driven Architecture (EDA) is about using events as a way to communicate within a system. Generally, leveraging a message broker to publish and consume events asynchronously. The publisher is unaware of who is consuming an event and the consumers are unaware of each other. Event-Driven Architecture is simply a way of achieving loose coupling between services within a system.</p>
<h2 id="what-is-an-event">What is an event?</h2>
<p>An event is a data point that represents state changes in a system. It doesn&rsquo;t specify what should happen and how the change should modify the system, it only notifies the system of a particular state change. When a user makes an action, they trigger an event.</p>
<h2 id="components-1">Components</h2>
<p>Event-driven architectures have three key components:</p>
<ul>
<li><strong>Event producers</strong>: Publishes an event to the router.</li>
<li><strong>Event routers</strong>: Filters and pushes the events to consumers.</li>
<li><strong>Event consumers</strong>: Uses events to reflect changes in the system.</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/event-driven-architecture.jpg" alt="event-driven-architecture"  />
</p>
<p><em>Note: Dots in the diagram represents different events in the system.</em></p>
<h2 id="patterns">Patterns</h2>
<p>There are several ways to implement the event-driven architecture, and which method we use depends on the use case but here are some common examples:</p>
<ul>
<li><a href="https://karanpratapsingh.com/courses/system-design/distributed-transactions#sagas">Sagas</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe">Publish-Subscribe</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/event-sourcing">Event Sourcing</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/command-and-query-responsibility-segregation">Command and Query Responsibility Segregation (CQRS)</a></li>
</ul>
<p><em>Note: Each of these methods is discussed separately.</em></p>
<h2 id="advantages-19">Advantages</h2>
<p>Let&rsquo;s discuss some advantages:</p>
<ul>
<li>Decoupled producers and consumers.</li>
<li>Highly scalable and distributed.</li>
<li>Easy to add new consumers.</li>
<li>Improves agility.</li>
</ul>
<h2 id="challenges-2">Challenges</h2>
<p>Here are some challenges of event-drive architecture:</p>
<ul>
<li>Guaranteed delivery.</li>
<li>Error handling is difficult.</li>
<li>Event-driven systems are complex in general.</li>
<li>Exactly once, in-order processing of events.</li>
</ul>
<h2 id="use-cases-1">Use cases</h2>
<p>Below are some common use cases where event-driven architectures are beneficial:</p>
<ul>
<li>Metadata and metrics.</li>
<li>Server and security logs.</li>
<li>Integrating heterogeneous systems.</li>
<li>Fanout and parallel processing.</li>
</ul>
<h2 id="examples-12">Examples</h2>
<p>Here are some widely used technologies for implementing event-driven architectures:</p>
<ul>
<li><a href="https://nats.io">NATS</a></li>
<li><a href="https://kafka.apache.org">Apache Kafka</a></li>
<li><a href="https://aws.amazon.com/eventbridge">Amazon EventBridge</a></li>
<li><a href="https://aws.amazon.com/sns">Amazon SNS</a></li>
<li><a href="https://cloud.google.com/pubsub">Google PubSub</a></li>
</ul>
<h1 id="event-sourcing">Event Sourcing</h1>
<p>Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/event-sourcing.jpg" alt="event-sourcing"  />
</p>
<p>This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and responsiveness. It can also provide consistency for transactional data, and maintain full audit trails and history that can enable compensating actions.</p>
<h2 id="event-sourcing-vs-event-driven-architecture-eda">Event sourcing vs Event-Driven Architecture (EDA)</h2>
<p>Event sourcing is seemingly constantly being confused with <a href="https://karanpratapsingh.com/courses/system-design/event-driven-architecture">Event-driven Architecture (EDA)</a>. Event-driven architecture is about using events to communicate between service boundaries. Generally, leveraging a message broker to publish and consume events asynchronously within other boundaries.</p>
<p>Whereas, event sourcing is about using events as a state, which is a different approach to storing data. Rather than storing the current state, we&rsquo;re instead going to be storing events. Also, event sourcing is one of the several patterns to implement an event-driven architecture.</p>
<h2 id="advantages-20">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using event sourcing:</p>
<ul>
<li>Excellent for real-time data reporting.</li>
<li>Great for fail-safety, data can be reconstituted from the event store.</li>
<li>Extremely flexible, any type of message can be stored.</li>
<li>Preferred way of achieving audit logs functionality for high compliance systems.</li>
</ul>
<h2 id="disadvantages-15">Disadvantages</h2>
<p>Following are the disadvantages of event sourcing:</p>
<ul>
<li>Requires an extremely efficient network infrastructure.</li>
<li>Requires a reliable way to control message formats, such as a schema registry.</li>
<li>Different events will contain different payloads.</li>
</ul>
<h1 id="command-and-query-responsibility-segregation-cqrs">Command and Query Responsibility Segregation (CQRS)</h1>
<p>Command Query Responsibility Segregation (CQRS) is an architectural pattern that divides a system&rsquo;s actions into commands and queries. It was first described by <a href="https://twitter.com/gregyoung">Greg Young</a>.</p>
<p>In CQRS, a <em>command</em> is an instruction, a directive to perform a specific task. It is an intention to change something and doesn&rsquo;t return a value, only an indication of success or failure. And, a <em>query</em> is a request for information that doesn&rsquo;t change the system&rsquo;s state or cause any side effects.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/command-and-query-responsibility-segregation.jpg" alt="command-and-query-responsibility-segregation"  />
</p>
<p>The core principle of CQRS is the separation of commands and queries. They perform fundamentally different roles within a system, and separating them means that each can be optimized as needed, which distributed systems can really benefit from.</p>
<h2 id="cqrs-with-event-sourcing">CQRS with Event Sourcing</h2>
<p>The CQRS pattern is often used along with the Event Sourcing pattern. CQRS-based systems use separate read and write data models, each tailored to relevant tasks and often located in physically separate stores.</p>
<p>When used with the Event Sourcing pattern, the store of events is the write model and is the official source of information. The read model of a CQRS-based system provides materialized views of the data, typically as highly denormalized views.</p>
<h2 id="advantages-21">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of CQRS:</p>
<ul>
<li>Allows independent scaling of read and write workloads.</li>
<li>Easier scaling, optimizations, and architectural changes.</li>
<li>Closer to business logic with loose coupling.</li>
<li>The application can avoid complex joins when querying.</li>
<li>Clear boundaries between the system behavior.</li>
</ul>
<h2 id="disadvantages-16">Disadvantages</h2>
<p>Below are some disadvantages of CQRS:</p>
<ul>
<li>More complex application design.</li>
<li>Message failures or duplicate messages can occur.</li>
<li>Dealing with eventual consistency is a challenge.</li>
<li>Increased system maintenance efforts.</li>
</ul>
<h2 id="use-cases-2">Use cases</h2>
<p>Here are some scenarios where CQRS will be helpful:</p>
<ul>
<li>The performance of data reads must be fine-tuned separately from the performance of data writes.</li>
<li>The system is expected to evolve over time and might contain multiple versions of the model, or where business rules change regularly.</li>
<li>Integration with other systems, especially in combination with event sourcing, where the temporal failure of one subsystem shouldn&rsquo;t affect the availability of the others.</li>
<li>Better security to ensure that only the right domain entities are performing writes on the data.</li>
</ul>
<h1 id="api-gateway">API Gateway</h1>
<p>The API Gateway is an API management tool that sits between a client and a collection of backend services. It is a single entry point into a system that encapsulates the internal system architecture and provides an API that is tailored to each client. It also has other responsibilities such as authentication, monitoring, load balancing, caching, throttling, logging, etc.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/api-gateway.jpg" alt="api-gateway"  />
</p>
<h2 id="why-do-we-need-an-api-gateway">Why do we need an API Gateway?</h2>
<p>The granularity of APIs provided by microservices is often different than what a client needs. Microservices typically provide fine-grained APIs, which means that clients need to interact with multiple services. Hence, an API gateway can provide a single entry point for all clients with some additional features and better management.</p>
<h2 id="features-3">Features</h2>
<p>Below are some desired features of an API Gateway:</p>
<ul>
<li>Authentication and Authorization</li>
<li><a href="https://karanpratapsingh.com/courses/system-design/service-discovery">Service discovery</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/proxy#reverse-proxy">Reverse Proxy</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/caching">Caching</a></li>
<li>Security</li>
<li>Retry and <a href="https://karanpratapsingh.com/courses/system-design/circuit-breaker">Circuit breaking</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/load-balancing">Load balancing</a></li>
<li>Logging, Tracing</li>
<li>API composition</li>
<li><a href="https://karanpratapsingh.com/courses/system-design/rate-limiting">Rate limiting</a> and throttling</li>
<li>Versioning</li>
<li>Routing</li>
<li>IP whitelisting or blacklisting</li>
</ul>
<h2 id="advantages-22">Advantages</h2>
<p>Let&rsquo;s look at some advantages of using an API Gateway:</p>
<ul>
<li>Encapsulates the internal structure of an API.</li>
<li>Provides a centralized view of the API.</li>
<li>Simplifies the client code.</li>
<li>Monitoring, analytics, tracing, and other such features.</li>
</ul>
<h2 id="disadvantages-17">Disadvantages</h2>
<p>Here are some possible disadvantages of an API Gateway:</p>
<ul>
<li>Possible single point of failure.</li>
<li>Might impact performance.</li>
<li>Can become a bottleneck if not scaled properly.</li>
<li>Configuration can be challenging.</li>
</ul>
<h2 id="backend-for-frontend-bff-pattern">Backend For Frontend (BFF) pattern</h2>
<p>In the Backend For Frontend (BFF) pattern, we create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when we want to avoid customizing a single backend for multiple interfaces. This pattern was first described by <a href="https://samnewman.io">Sam Newman</a>.</p>
<p>Also, sometimes the output of data returned by the microservices to the front end is not in the exact format or filtered as needed by the front end. To solve this issue, the frontend should have some logic to reformat the data, and therefore, we can use BFF to shift some of this logic to the intermediate layer.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/backend-for-frontend.jpg" alt="backend-for-frontend"  />
</p>
<p>The primary function of the backend for the frontend pattern is to get the required data from the appropriate service, format the data, and sent it to the frontend.</p>
<p><em><a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#graphql">GraphQL</a> performs really well as a backend for frontend (BFF).</em></p>
<h3 id="when-to-use-this-pattern">When to use this pattern?</h3>
<p>We should consider using a Backend For Frontend (BFF) pattern when:</p>
<ul>
<li>A shared or general purpose backend service must be maintained with significant development overhead.</li>
<li>We want to optimize the backend for the requirements of a specific client.</li>
<li>Customizations are made to a general-purpose backend to accommodate multiple interfaces.</li>
</ul>
<h2 id="examples-13">Examples</h2>
<p>Following are some widely used gateways technologies:</p>
<ul>
<li><a href="https://aws.amazon.com/api-gateway">Amazon API Gateway</a></li>
<li><a href="https://cloud.google.com/apigee">Apigee API Gateway</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/api-management">Azure API Gateway</a></li>
<li><a href="https://konghq.com/kong">Kong API Gateway</a></li>
</ul>
<h1 id="rest-graphql-grpc">REST, GraphQL, gRPC</h1>
<p>A good API design is always a crucial part of any system. But it is also important to pick the right API technology. So, in this tutorial, we will briefly discuss different API technologies such as REST, GraphQL, and gRPC.</p>
<h2 id="whats-an-api">What&rsquo;s an API?</h2>
<p>Before we even get into API technologies, let&rsquo;s first understand what is an API.</p>
<p>An API is a set of definitions and protocols for building and integrating application software. It&rsquo;s sometimes referred to as a contract between an information provider and an information user establishing the content required from the producer and the content required by the consumer.</p>
<p>In other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and complete the request.</p>
<h2 id="rest">REST</h2>
<p>A <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">REST API</a> (also known as RESTful API) is an application programming interface that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for Representational State Transfer and it was first introduced by <a href="https://roy.gbiv.com">Roy Fielding</a> in the year 2000.</p>
<p><em>In REST API, the fundamental unit is a resource.</em></p>
<h3 id="concepts">Concepts</h3>
<p>Let&rsquo;s discuss some concepts of a RESTful API.</p>
<p><strong>Constraints</strong></p>
<p>In order for an API to be considered <em>RESTful</em>, it has to conform to these architectural constraints:</p>
<ul>
<li><strong>Uniform Interface</strong>: There should be a uniform way of interacting with a given server.</li>
<li><strong>Client-Server</strong>: A client-server architecture managed through HTTP.</li>
<li><strong>Stateless</strong>: No client context shall be stored on the server between requests.</li>
<li><strong>Cacheable</strong>: Every response should include whether the response is cacheable or not and for how much duration responses can be cached at the client-side.</li>
<li><strong>Layered system</strong>: An application architecture needs to be composed of multiple layers.</li>
<li><strong>Code on demand</strong>: Return executable code to support a part of your application. <em>(optional)</em></li>
</ul>
<p><strong>HTTP Verbs</strong></p>
<p>HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. Although they can also be nouns, these request methods are sometimes referred to as <em>HTTP verbs</em>. Each of them implements a different semantic, but some common features are shared by a group of them.</p>
<p>Below are some commonly used HTTP verbs:</p>
<ul>
<li><strong>GET</strong>: Request a representation of the specified resource.</li>
<li><strong>HEAD</strong>: Response is identical to a <code>GET</code> request, but without the response body.</li>
<li><strong>POST</strong>: Submits an entity to the specified resource, often causing a change in state or side effects on the server.</li>
<li><strong>PUT</strong>: Replaces all current representations of the target resource with the request payload.</li>
<li><strong>DELETE</strong>: Deletes the specified resource.</li>
<li><strong>PATCH</strong>: Applies partial modifications to a resource.</li>
</ul>
<p><strong>HTTP response codes</strong></p>
<p><a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP response status codes</a> indicate whether a specific HTTP request has been successfully completed.</p>
<p>There are five classes defined by the standard:</p>
<ul>
<li>1xx - Informational responses.</li>
<li>2xx - Successful responses.</li>
<li>3xx - Redirection responses.</li>
<li>4xx - Client error responses.</li>
<li>5xx - Server error responses.</li>
</ul>
<p>For example, HTTP 200 means that the request was successful.</p>
<h3 id="advantages-23">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of REST API:</p>
<ul>
<li>Simple and easy to understand.</li>
<li>Flexible and portable.</li>
<li>Good caching support.</li>
<li>Client and server are decoupled.</li>
</ul>
<h3 id="disadvantages-18">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of REST API:</p>
<ul>
<li>Over-fetching of data.</li>
<li>Sometimes multiple round trips to the server are required.</li>
</ul>
<h3 id="use-cases-3">Use cases</h3>
<p>REST APIs are pretty much used universally and are the default standard for designing APIs. Overall REST APIs are quite flexible and can fit almost all scenarios.</p>
<h3 id="example">Example</h3>
<p>Here&rsquo;s an example usage of a REST API that operates on a <strong>users</strong> resource.</p>
<table>
<thead>
<tr>
<th>URI</th>
<th>HTTP verb</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/users</td>
<td>GET</td>
<td>Get all users</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>GET</td>
<td>Get a user by id</td>
</tr>
<tr>
<td>/users</td>
<td>POST</td>
<td>Add a new user</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>PATCH</td>
<td>Update a user by id</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>DELETE</td>
<td>Delete a user by id</td>
</tr>
</tbody>
</table>
<p><em>There is so much more to learn when it comes to REST APIs, I will highly recommend looking into <a href="https://en.wikipedia.org/wiki/HATEOAS">Hypermedia as the Engine of Application State (HATEOAS)</a>.</em></p>
<h2 id="graphql">GraphQL</h2>
<p><a href="https://graphql.org">GraphQL</a> is a query language and server-side runtime for APIs that prioritizes giving clients exactly the data they request and no more. It was developed by <a href="https://engineering.fb.com">Facebook</a> and later open-sourced in 2015.</p>
<p>GraphQL is designed to make APIs fast, flexible, and developer-friendly. Additionally, GraphQL gives API maintainers the flexibility to add or deprecate fields without impacting existing queries. Developers can build APIs with whatever methods they prefer, and the GraphQL specification will ensure they function in predictable ways to clients.</p>
<p><em>In GraphQL, the fundamental unit is a query.</em></p>
<h3 id="concepts-1">Concepts</h3>
<p>Let&rsquo;s briefly discuss some key concepts in GraphQL:</p>
<p><strong>Schema</strong></p>
<p>A GraphQL schema describes the functionality clients can utilize once they connect to the GraphQL server.</p>
<p><strong>Queries</strong></p>
<p>A query is a request made by the client. It can consist of fields and arguments for the query. The operation type of a query can also be a <a href="https://graphql.org/learn/queries/#mutations">mutation</a> which provides a way to modify server-side data.</p>
<p><strong>Resolvers</strong></p>
<p>Resolver is a collection of functions that generate responses for a GraphQL query. In simple terms, a resolver acts as a GraphQL query handler.</p>
<h3 id="advantages-24">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of GraphQL:</p>
<ul>
<li>Eliminates over-fetching of data.</li>
<li>Strongly defined schema.</li>
<li>Code generation support.</li>
<li>Payload optimization.</li>
</ul>
<h3 id="disadvantages-19">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of GraphQL:</p>
<ul>
<li>Shifts complexity to server-side.</li>
<li>Caching becomes hard.</li>
<li>Versioning is ambiguous.</li>
<li>N+1 problem.</li>
</ul>
<h3 id="use-cases-4">Use cases</h3>
<p>GraphQL proves to be essential in the following scenarios:</p>
<ul>
<li>Reducing app bandwidth usage as we can query multiple resources in a single query.</li>
<li>Rapid prototyping for complex systems.</li>
<li>When we are working with a graph-like data model.</li>
</ul>
<h3 id="example-1">Example</h3>
<p>Here&rsquo;s a GraphQL schema that defines a <code>User</code> type and a <code>Query</code> type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="kd">type</span><span class="w"> </span><span class="nc">Query</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">getUser</span><span class="p">:</span><span class="w"> </span><span class="nc">User</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">type</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">id</span><span class="p">:</span><span class="w"> </span><span class="nc">ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">city</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">state</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using the above schema, the client can request the required fields easily without having to fetch the entire resource or guess what the API might return.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">getUser</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">city</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This will give the following response to the client.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6">6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;getUser&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Karan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;San Francisco&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Learn more about GraphQL at <a href="https://graphql.org">graphql.org</a>.</em></p>
<h2 id="grpc">gRPC</h2>
<p><a href="https://grpc.io">gRPC</a> is a modern open-source high-performance <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">Remote Procedure Call (RPC)</a> framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking, authentication and much more.</p>
<h3 id="concepts-2">Concepts</h3>
<p>Let&rsquo;s discuss some key concepts of gRPC.</p>
<p><strong>Protocol buffers</strong></p>
<p>Protocol buffers provide a language and platform-neutral extensible mechanism for serializing structured data in a forward and backward-compatible way. It&rsquo;s like JSON, except it&rsquo;s smaller and faster, and it generates native language bindings.</p>
<p><strong>Service definition</strong></p>
<p>Like many RPC systems, gRPC is based on the idea of defining a service and specifying the methods that can be called remotely with their parameters and return types. gRPC uses protocol buffers as the <a href="https://en.wikipedia.org/wiki/Interface_description_language">Interface Definition Language (IDL)</a> for describing both the service interface and the structure of the payload messages.</p>
<h3 id="advantages-25">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of gRPC:</p>
<ul>
<li>Lightweight and efficient.</li>
<li>High performance.</li>
<li>Built-in code generation support.</li>
<li>Bi-directional streaming.</li>
</ul>
<h3 id="disadvantages-20">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of gRPC:</p>
<ul>
<li>Relatively new compared to REST and GraphQL.</li>
<li>Limited browser support.</li>
<li>Steeper learning curve.</li>
<li>Not human readable.</li>
</ul>
<h3 id="use-cases-5">Use cases</h3>
<p>Below are some good use cases for gRPC:</p>
<ul>
<li>Real-time communication via bi-directional streaming.</li>
<li>Efficient inter-service communication in microservices.</li>
<li>Low latency and high throughput communication.</li>
<li>Polyglot environments.</li>
</ul>
<h3 id="example-2">Example</h3>
<p>Here&rsquo;s a basic example of a gRPC service defined in a <code>*.proto</code> file. Using this definition, we can easily code generate the <code>HelloService</code> service in the programming language of our choice.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="line"><span class="cl"><span class="kd">service</span> <span class="n">HelloService</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloResponse</span><span class="p">);</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="kd">message</span> <span class="nc">HelloRequest</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="kt">string</span> <span class="n">greeting</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="kd">message</span> <span class="nc">HelloResponse</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="kt">string</span> <span class="n">reply</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rest-vs-graphql-vs-grpc">REST vs GraphQL vs gRPC</h2>
<p>Now that we know how these API designing techniques work, let&rsquo;s compare them based on the following parameters:</p>
<ul>
<li>Will it cause tight coupling?</li>
<li>How <em>chatty</em> (distinct API calls to get needed information) are the APIs?</li>
<li>What&rsquo;s the performance like?</li>
<li>How complex is it to integrate?</li>
<li>How well does the caching work?</li>
<li>Built-in tooling and code generation?</li>
<li>What&rsquo;s API discoverability like?</li>
<li>How easy is it to version APIs?</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>Coupling</th>
<th>Chattiness</th>
<th>Performance</th>
<th>Complexity</th>
<th>Caching</th>
<th>Codegen</th>
<th>Discoverability</th>
<th>Versioning</th>
</tr>
</thead>
<tbody>
<tr>
<td>REST</td>
<td>Low</td>
<td>High</td>
<td>Good</td>
<td>Medium</td>
<td>Great</td>
<td>Bad</td>
<td>Good</td>
<td>Easy</td>
</tr>
<tr>
<td>GraphQL</td>
<td>Medium</td>
<td>Low</td>
<td>Good</td>
<td>High</td>
<td>Custom</td>
<td>Good</td>
<td>Good</td>
<td>Custom</td>
</tr>
<tr>
<td>gRPC</td>
<td>High</td>
<td>Medium</td>
<td>Great</td>
<td>Low</td>
<td>Custom</td>
<td>Great</td>
<td>Bad</td>
<td>Hard</td>
</tr>
</tbody>
</table>
<h3 id="which-api-technology-is-better">Which API technology is better?</h3>
<p>Well, the answer is none of them. There is no silver bullet as each of these technologies has its own advantages and disadvantages. Users only care about using our APIs in a consistent way, so make sure to focus on your domain and requirements when designing your API.</p>
<h1 id="long-polling-websockets-server-sent-events-sse">Long polling, WebSockets, Server-Sent Events (SSE)</h1>
<p>Web applications were initially developed around a client-server model, where the web client is always the initiator of transactions like requesting data from the server. Thus, there was no mechanism for the server to independently send, or push, data to the client without the client first making a request. Let&rsquo;s discuss some approaches to overcome this problem.</p>
<h2 id="long-polling">Long polling</h2>
<p>HTTP Long polling is a technique used to push information to a client as soon as possible from the server. As a result, the server does not have to wait for the client to send a request.</p>
<p>In Long polling, the server does not close the connection once it receives a request from the client. Instead, the server responds only if any new message is available or a timeout threshold is reached.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/long-polling.jpg" alt="long-polling"  />
</p>
<p>Once the client receives a response, it immediately sends a new request to the server to have a new pending connection to send data to the client, and the operation is repeated. With this approach, the server emulates a real-time server push feature.</p>
<h3 id="working-2">Working</h3>
<p>Let&rsquo;s understand how long polling works:</p>
<ol>
<li>The client makes an initial request and waits for a response.</li>
<li>The server receives the request and delays sending anything until an update is available.</li>
<li>Once an update is available, the response is sent to the client.</li>
<li>The client receives the response and makes a new request immediately or after some defined interval to establish a connection again.</li>
</ol>
<h3 id="advantages-26">Advantages</h3>
<p>Here are some advantages of long polling:</p>
<ul>
<li>Easy to implement, good for small-scale projects.</li>
<li>Nearly universally supported.</li>
</ul>
<h3 id="disadvantages-21">Disadvantages</h3>
<p>A major downside of long polling is that it is usually not scalable. Below are some of the other reasons:</p>
<ul>
<li>Creates a new connection each time, which can be intensive on the server.</li>
<li>Reliable message ordering can be an issue for multiple requests.</li>
<li>Increased latency as the server needs to wait for a new request.</li>
</ul>
<h2 id="websockets">WebSockets</h2>
<p>WebSocket provides full-duplex communication channels over a single TCP connection. It is a persistent connection between a client and a server that both parties can use to start sending data at any time.</p>
<p>The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables the communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/websockets.jpg" alt="websockets"  />
</p>
<p>This is made possible by providing a standardized way for the server to send content to the client without being asked and allowing for messages to be passed back and forth while keeping the connection open.</p>
<h3 id="working-3">Working</h3>
<p>Let&rsquo;s understand how WebSockets work:</p>
<ol>
<li>The client initiates a WebSocket handshake process by sending a request.</li>
<li>The request also contains an <a href="https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header">HTTP Upgrade</a> header that allows the request to switch to the WebSocket protocol (<code>ws://</code>).</li>
<li>The server sends a response to the client, acknowledging the WebSocket handshake request.</li>
<li>A WebSocket connection will be opened once the client receives a successful handshake response.</li>
<li>Now the client and server can start sending data in both directions allowing real-time communication.</li>
<li>The connection is closed once the server or the client decides to close the connection.</li>
</ol>
<h3 id="advantages-27">Advantages</h3>
<p>Below are some advantages of WebSockets:</p>
<ul>
<li>Full-duplex asynchronous messaging.</li>
<li>Better origin-based security model.</li>
<li>Lightweight for both client and server.</li>
</ul>
<h3 id="disadvantages-22">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of WebSockets:</p>
<ul>
<li>Terminated connections aren&rsquo;t automatically recovered.</li>
<li>Older browsers don&rsquo;t support WebSockets (becoming less relevant).</li>
</ul>
<h2 id="server-sent-events-sse">Server-Sent Events (SSE)</h2>
<p>Server-Sent Events (SSE) is a way of establishing long-term communication between client and server that enables the server to proactively push data to the client.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/server-sent-events.jpg" alt="server-sent-events"  />
</p>
<p>It is unidirectional, meaning once the client sends the request it can only receive the responses without the ability to send new requests over the same connection.</p>
<h3 id="working-4">Working</h3>
<p>Let&rsquo;s understand how server-sent events work:</p>
<ol>
<li>The client makes a request to the server.</li>
<li>The connection between client and server is established and it remains open.</li>
<li>The server sends responses or events to the client when new data is available.</li>
</ol>
<h3 id="advantages-28">Advantages</h3>
<ul>
<li>Simple to implement and use for both client and server.</li>
<li>Supported by most browsers.</li>
<li>No trouble with firewalls.</li>
</ul>
<h3 id="disadvantages-23">Disadvantages</h3>
<ul>
<li>Unidirectional nature can be limiting.</li>
<li>Limitation for the maximum number of open connections.</li>
<li>Does not support binary data.</li>
</ul>
<h1 id="geohashing-and-quadtrees">Geohashing and Quadtrees</h1>
<h2 id="geohashing">Geohashing</h2>
<p>Geohashing is a <a href="https://en.wikipedia.org/wiki/Address_geocoding">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href="https://twitter.com/gniemeyer">Gustavo Niemeyer</a> in 2008.</p>
<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>
<h3 id="how-does-geohashing-work">How does Geohashing work?</h3>
<p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/geohashing.jpg" alt="geohashing"  />
</p>
<p>Geohashing guarantees that points are spatially closer if their Geohashes share a longer prefix which means the more characters in the string, the more precise the location. For example, geohashes <code>9q8yy9mf</code> and <code>9q8yy9vx</code> are spatially closer as they share the prefix <code>9q8yy9</code>.</p>
<p>Geohashing can also be used to provide a degree of anonymity as we don&rsquo;t need to expose the exact location of the user because depending on the length of the geohash we just know they are somewhere within an area.</p>
<p>The cell sizes of the geohashes of different lengths are as follows:</p>
<table>
<thead>
<tr>
<th>Geohash length</th>
<th>Cell width</th>
<th>Cell height</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>5000 km</td>
<td>5000 km</td>
</tr>
<tr>
<td>2</td>
<td>1250 km</td>
<td>1250 km</td>
</tr>
<tr>
<td>3</td>
<td>156 km</td>
<td>156 km</td>
</tr>
<tr>
<td>4</td>
<td>39.1 km</td>
<td>19.5 km</td>
</tr>
<tr>
<td>5</td>
<td>4.89 km</td>
<td>4.89 km</td>
</tr>
<tr>
<td>6</td>
<td>1.22 km</td>
<td>0.61 km</td>
</tr>
<tr>
<td>7</td>
<td>153 m</td>
<td>153 m</td>
</tr>
<tr>
<td>8</td>
<td>38.2 m</td>
<td>19.1 m</td>
</tr>
<tr>
<td>9</td>
<td>4.77 m</td>
<td>4.77 m</td>
</tr>
<tr>
<td>10</td>
<td>1.19 m</td>
<td>0.596 m</td>
</tr>
<tr>
<td>11</td>
<td>149 mm</td>
<td>149 mm</td>
</tr>
<tr>
<td>12</td>
<td>37.2 mm</td>
<td>18.6 mm</td>
</tr>
</tbody>
</table>
<h3 id="use-cases-6">Use cases</h3>
<p>Here are some common use cases for Geohashing:</p>
<ul>
<li>It is a simple way to represent and store a location in a database.</li>
<li>It can also be shared on social media as URLs since it is easier to share, and remember than latitudes and longitudes.</li>
<li>We can efficiently find the nearest neighbors of a point through very simple string comparisons and efficient searching of indexes.</li>
</ul>
<h3 id="examples-14">Examples</h3>
<p>Geohashing is widely used and it is supported by popular databases.</p>
<ul>
<li><a href="https://www.mysql.com">MySQL</a></li>
<li><a href="https://redis.io">Redis</a></li>
<li><a href="https://aws.amazon.com/dynamodb">Amazon DynamoDB</a></li>
<li><a href="https://cloud.google.com/firestore">Google Cloud Firestore</a></li>
</ul>
<h2 id="quadtrees">Quadtrees</h2>
<p>A quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href="https://en.wikipedia.org/wiki/Octree">Octrees</a> which are used to partition three-dimensional space.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/quadtree.jpg" alt="quadtree"  />
</p>
<h3 id="types-of-quadtrees">Types of Quadtrees</h3>
<p>Quadtrees may be classified according to the type of data they represent, including areas, points, lines, and curves. The following are common types of quadtrees:</p>
<ul>
<li>Point quadtrees</li>
<li>Point-region (PR) quadtrees</li>
<li>Polygonal map (PM) quadtrees</li>
<li>Compressed quadtrees</li>
<li>Edge quadtrees</li>
</ul>
<h3 id="why-do-we-need-quadtrees">Why do we need Quadtrees?</h3>
<p>Aren&rsquo;t latitude and longitude enough? Why do we need quadtrees? While in theory using latitude and longitude we can determine things such as how close points are to each other using <a href="https://en.wikipedia.org/wiki/Euclidean_distance">euclidean distance</a>, for practical use cases it is simply not scalable because of its CPU-intensive nature with large data sets.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/quadtree-subdivision.jpg" alt="quadtree-subdivision"  />
</p>
<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates. Additionally, we can save further computation by only subdividing a node after a certain threshold. And with the application of mapping algorithms such as the <a href="https://en.wikipedia.org/wiki/Hilbert_curve">Hilbert curve</a>, we can easily improve range query performance.</p>
<h3 id="use-cases-7">Use cases</h3>
<p>Below are some common uses of quadtrees:</p>
<ul>
<li>Image representation, processing, and compression.</li>
<li>Spacial indexing and range queries.</li>
<li>Location-based services like Google Maps, Uber, etc.</li>
<li>Mesh generation and computer graphics.</li>
<li>Sparse data storage.</li>
</ul>
<h1 id="circuit-breaker">Circuit breaker</h1>
<p>The circuit breaker is a design pattern used to detect failures and encapsulates the logic of preventing a failure from constantly recurring during maintenance, temporary external system failure, or unexpected system difficulties.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/circuit-breaker.jpg" alt="circuit-breaker"  />
</p>
<p>The basic idea behind the circuit breaker is very simple. We wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually, we&rsquo;ll also want some kind of monitor alert if the circuit breaker trips.</p>
<h2 id="why-do-we-need-circuit-breaking">Why do we need circuit breaking?</h2>
<p>It&rsquo;s common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What&rsquo;s worse if we have many callers on an unresponsive supplier, then we can run out of critical resources leading to cascading failures across multiple systems.</p>
<h2 id="states-1">States</h2>
<p>Let&rsquo;s discuss circuit breaker states:</p>
<h3 id="closed">Closed</h3>
<p>When everything is normal, the circuit breakers remain closed, and all the request passes through to the services as normal. If the number of failures increases beyond the threshold, the circuit breaker trips and goes into an open state.</p>
<h3 id="open">Open</h3>
<p>In this state circuit breaker returns an error immediately without even invoking the services. The Circuit breakers move into the half-open state after a certain timeout period elapses. Usually, it will have a monitoring system where the timeout will be specified.</p>
<h3 id="half-open">Half-open</h3>
<p>In this state, the circuit breaker allows a limited number of requests from the service to pass through and invoke the operation. If the requests are successful, then the circuit breaker will go to the closed state. However, if the requests continue to fail, then it goes back to the open state.</p>
<h1 id="rate-limiting">Rate Limiting</h1>
<p>Rate limiting refers to preventing the frequency of an operation from exceeding a defined limit. In large-scale systems, rate limiting is commonly used to protect underlying services and resources. Rate limiting is generally used as a defensive mechanism in distributed systems, so that shared resources can maintain availability. It also protects our APIs from unintended or malicious overuse by limiting the number of requests that can reach our API in a given period of time.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/rate-limiting.jpg" alt="rate-limiting"  />
</p>
<h2 id="why-do-we-need-rate-limiting">Why do we need Rate Limiting?</h2>
<p>Rate limiting is a very important part of any large-scale system and it can be used to accomplish the following:</p>
<ul>
<li>Avoid resource starvation as a result of Denial of Service (DoS) attacks.</li>
<li>Rate Limiting helps in controlling operational costs by putting a virtual cap on the auto-scaling of resources which if not monitored might lead to exponential bills.</li>
<li>Rate limiting can be used as defense or mitigation against some common attacks.</li>
<li>For APIs that process massive amounts of data, rate limiting can be used to control the flow of that data.</li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<p>There are various algorithms for API rate limiting, each with its advantages and disadvantages. Let&rsquo;s briefly discuss some of these algorithms:</p>
<h3 id="leaky-bucket">Leaky Bucket</h3>
<p>Leaky Bucket is an algorithm that provides a simple, intuitive approach to rate limiting via a queue. When registering a request, the system appends it to the end of the queue. Processing for the first item on the queue occurs at a regular interval or first-in, first-out (FIFO). If the queue is full, then additional requests are discarded (or leaked).</p>
<h3 id="token-bucket">Token Bucket</h3>
<p>Here we use a concept of a <em>bucket</em>. When a request comes in, a token from the bucket must be taken and processed. The request will be refused if no token is available in the bucket, and the requester will have to try again later. As a result, the token bucket gets refreshed after a certain time period.</p>
<h3 id="fixed-window">Fixed Window</h3>
<p>The system uses a window size of <code>n</code> seconds to track the fixed window algorithm rate. Each incoming request increments the counter for the window. It discards the request if the counter exceeds a threshold.</p>
<h3 id="sliding-log">Sliding Log</h3>
<p>Sliding Log rate-limiting involves tracking a time-stamped log for each request. The system stores these logs in a time-sorted hash set or table. It also discards logs with timestamps beyond a threshold. When a new request comes in, we calculate the sum of logs to determine the request rate. If the request would exceed the threshold rate, then it is held.</p>
<h3 id="sliding-window">Sliding Window</h3>
<p>Sliding Window is a hybrid approach that combines the fixed window algorithm&rsquo;s low processing cost and the sliding log&rsquo;s improved boundary conditions. Like the fixed window algorithm, we track a counter for each fixed window. Next, we account for a weighted value of the previous window&rsquo;s request rate based on the current timestamp to smooth out bursts of traffic.</p>
<h2 id="rate-limiting-in-distributed-systems">Rate Limiting in Distributed Systems</h2>
<p>Rate Limiting becomes complicated when distributed systems are involved. The two broad problems that come with rate limiting in distributed systems are:</p>
<h3 id="inconsistencies">Inconsistencies</h3>
<p>When using a cluster of multiple nodes, we might need to enforce a global rate limit policy. Because if each node were to track its rate limit, a consumer could exceed a global rate limit when sending requests to different nodes. The greater the number of nodes, the more likely the user will exceed the global limit.</p>
<p>The simplest way to solve this problem is to use sticky sessions in our load balancers so that each consumer gets sent to exactly one node but this causes a lack of fault tolerance and scaling problems. Another approach might be to use a centralized data store like <a href="https://redis.io">Redis</a> but this will increase latency and cause race conditions.</p>
<h3 id="race-conditions">Race Conditions</h3>
<p>This issue happens when we use a naive <em>&ldquo;get-then-set&rdquo;</em> approach, in which we retrieve the current rate limit counter, increment it, and then push it back to the datastore. This model&rsquo;s problem is that additional requests can come through in the time it takes to perform a full cycle of read-increment-store, each attempting to store the increment counter with an invalid (lower) counter value. This allows a consumer to send a very large number of requests to bypass the rate limiting controls.</p>
<p>One way to avoid this problem is to use some sort of distributed locking mechanism around the key, preventing any other processes from accessing or writing to the counter. Though the lock will become a significant bottleneck and will not scale well. A better approach might be to use a <em>&ldquo;set-then-get&rdquo;</em> approach, allowing us to quickly increment and check counter values without letting the atomic operations get in the way.</p>
<h1 id="service-discovery">Service Discovery</h1>
<p>Service discovery is the detection of services within a computer network. Service Discovery Protocol (SDP) is a networking standard that accomplishes the detection of networks by identifying resources.</p>
<h2 id="why-do-we-need-service-discovery">Why do we need Service Discovery?</h2>
<p>In a monolithic application, services invoke one another through language-level methods or procedure calls. However, modern microservices-based applications typically run in virtualized or containerized environments where the number of instances of a service and their locations change dynamically. Consequently, we need a mechanism that enables the clients of service to make requests to a dynamically changing set of ephemeral service instances.</p>
<h2 id="implementations">Implementations</h2>
<p>There are two main service discovery patterns:</p>
<h3 id="client-side-discovery">Client-side discovery</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/client-side-service-discovery.jpg" alt="client-side-service-discovery"  />
</p>
<p>In this approach, the client obtains the location of another service by querying a service registry which is responsible for managing and storing the network locations of all the services.</p>
<h3 id="server-side-discovery">Server-side discovery</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/server-side-service-discovery.jpg" alt="server-side-service-discovery"  />
</p>
<p>In this approach, we use an intermediate component such as a load balancer. The client makes a request to the service via a load balancer which then forwards the request to an available service instance.</p>
<h2 id="service-registry">Service Registry</h2>
<p>A service registry is basically a database containing the network locations of service instances to which the clients can reach out. A Service Registry must be highly available and up-to-date.</p>
<h2 id="service-registration">Service Registration</h2>
<p>We also need a way to obtain service information, often known as service registration. Let&rsquo;s look at two possible service registration approaches:</p>
<h3 id="self-registration">Self-Registration</h3>
<p>When using the self-registration model, a service instance is responsible for registering and de-registering itself in the Service Registry. In addition, if necessary, a service instance sends heartbeat requests to keep its registration alive.</p>
<h3 id="third-party-registration">Third-party Registration</h3>
<p>The registry keeps track of changes to running instances by polling the deployment environment or subscribing to events. When it detects a newly available service instance, it records it in its database. The Service Registry also de-registers terminated service instances.</p>
<h2 id="service-mesh">Service mesh</h2>
<p>Service-to-service communication is essential in a distributed application but routing this communication, both within and across application clusters, becomes increasingly complex as the number of services grows. Service mesh enables managed, observable, and secure communication between individual services. It works with a service discovery protocol to detect services. <a href="https://istio.io/latest/about/service-mesh">Istio</a> and <a href="https://www.envoyproxy.io">envoy</a> are some of the most commonly used service mesh technologies.</p>
<h2 id="examples-15">Examples</h2>
<p>Here are some commonly used service discovery infrastructure tools:</p>
<ul>
<li><a href="https://etcd.io">etcd</a></li>
<li><a href="https://www.consul.io">Consul</a></li>
<li><a href="https://thrift.apache.org">Apache Thrift</a></li>
<li><a href="https://zookeeper.apache.org">Apache Zookeeper</a></li>
</ul>
<h1 id="sla-slo-sli">SLA, SLO, SLI</h1>
<p>Let&rsquo;s briefly discuss SLA, SLO, and SLI. These are mostly related to the business and site reliability side of things but good to know nonetheless.</p>
<h2 id="why-are-they-important">Why are they important?</h2>
<p>SLAs, SLOs, and SLIs allow companies to define, track and monitor the promises made for a service to its users. Together, SLAs, SLOs, and SLIs should help teams generate more user trust in their services with an added emphasis on continuous improvement to incident management and response processes.</p>
<h2 id="sla">SLA</h2>
<p>An SLA, or Service Level Agreement, is an agreement made between a company and its users of a given service. The SLA defines the different promises that the company makes to users regarding specific metrics, such as service availability.</p>
<p><em>SLAs are often written by a company&rsquo;s business or legal team.</em></p>
<h2 id="slo">SLO</h2>
<p>An SLO, or Service Level Objective, is the promise that a company makes to users regarding a specific metric such as incident response or uptime. SLOs exist within an SLA as individual promises contained within the full user agreement. The SLO is the specific goal that the service must meet in order to comply with the SLA. SLOs should always be simple, clearly defined, and easily measured to determine whether or not the objective is being fulfilled.</p>
<h2 id="sli">SLI</h2>
<p>An SLI, or Service Level Indicator, is a key metric used to determine whether or not the SLO is being met. It is the measured value of the metric described within the SLO. In order to remain in compliance with the SLA, the SLI&rsquo;s value must always meet or exceed the value determined by the SLO.</p>
<h1 id="disaster-recovery">Disaster recovery</h1>
<p>Disaster recovery (DR) is a process of regaining access and functionality of the infrastructure after events like a natural disaster, cyber attack, or even business disruptions.</p>
<p>Disaster recovery relies upon the replication of data and computer processing in an off-premises location not affected by the disaster. When servers go down because of a disaster, a business needs to recover lost data from a second location where the data is backed up. Ideally, an organization can transfer its computer processing to that remote location as well in order to continue operations.</p>
<p><em>Disaster Recovery is often not actively discussed during system design interviews but it&rsquo;s important to have some basic understanding of this topic. You can learn more about disaster recovery from <a href="https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/plan-for-disaster-recovery-dr.html">AWS Well-Architected Framework</a>.</em></p>
<h2 id="why-is-disaster-recovery-important">Why is disaster recovery important?</h2>
<p>Disaster recovery can have the following benefits:</p>
<ul>
<li>Minimize interruption and downtime</li>
<li>Limit damages</li>
<li>Fast restoration</li>
<li>Better customer retention</li>
</ul>
<h2 id="terms-1">Terms</h2>
<p>Let&rsquo;s discuss some important terms relevantly for disaster recovery:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/disaster-recovery.jpg" alt="disaster-recovery"  />
</p>
<h3 id="rto">RTO</h3>
<p>Recovery Time Objective (RTO) is the maximum acceptable delay between the interruption of service and restoration of service. This determines what is considered an acceptable time window when service is unavailable.</p>
<h3 id="rpo">RPO</h3>
<p>Recovery Point Objective (RPO) is the maximum acceptable amount of time since the last data recovery point. This determines what is considered an acceptable loss of data between the last recovery point and the interruption of service.</p>
<h2 id="strategies">Strategies</h2>
<p>A variety of disaster recovery (DR) strategies can be part of a disaster recovery plan.</p>
<h3 id="back-up">Back-up</h3>
<p>This is the simplest type of disaster recovery and involves storing data off-site or on a removable drive.</p>
<h3 id="cold-site">Cold Site</h3>
<p>In this type of disaster recovery, an organization sets up basic infrastructure in a second site.</p>
<h3 id="hot-site">Hot site</h3>
<p>A hot site maintains up-to-date copies of data at all times. Hot sites are time-consuming to set up and more expensive than cold sites, but they dramatically reduce downtime.</p>
<h1 id="virtual-machines-vms-and-containers">Virtual Machines (VMs) and Containers</h1>
<p>Before we discuss virtualization vs containerization, let&rsquo;s learn what are virtual machines (VMs) and Containers.</p>
<h2 id="virtual-machines-vm">Virtual Machines (VM)</h2>
<p>A Virtual Machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system. A software called a hypervisor separates the machine&rsquo;s resources from the hardware and provisions them appropriately so they can be used by the VM.</p>
<p>VMs are isolated from the rest of the system, and multiple VMs can exist on a single piece of hardware, like a server. They can be moved between host servers depending on the demand or to use resources more efficiently.</p>
<h3 id="what-is-a-hypervisor">What is a Hypervisor?</h3>
<p>A Hypervisor sometimes called a Virtual Machine Monitor (VMM), isolates the operating system and resources from the virtual machines and enables the creation and management of those VMs. The hypervisor treats resources like CPU, memory, and storage as a pool of resources that can be easily reallocated between existing guests or new virtual machines.</p>
<h3 id="why-use-a-virtual-machine">Why use a Virtual Machine?</h3>
<p>Server consolidation is a top reason to use VMs. Most operating system and application deployments only use a small amount of the physical resources available. By virtualizing our servers, we can place many virtual servers onto each physical server to improve hardware utilization. This keeps us from needing to purchase additional physical resources.</p>
<p>A VM provides an environment that is isolated from the rest of a system, so whatever is running inside a VM won&rsquo;t interfere with anything else running on the host hardware. Because VMs are isolated, they are a good option for testing new applications or setting up a production environment. We can also run a single-purpose VM to support a specific use case.</p>
<h2 id="containers">Containers</h2>
<p>A container is a standard unit of software that packages up code and all its dependencies such as specific versions of runtimes and libraries so that the application runs quickly and reliably from one computing environment to another. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently, regardless of the target environment.</p>
<h3 id="why-do-we-need-containers">Why do we need containers?</h3>
<p>Let&rsquo;s discuss some advantages of using containers:</p>
<p><strong>Separation of responsibility</strong></p>
<p>Containerization provides a clear separation of responsibility, as developers focus on application logic and dependencies, while operations teams can focus on deployment and management.</p>
<p><strong>Workload portability</strong></p>
<p>Containers can run virtually anywhere, greatly easing development and deployment.</p>
<p><strong>Application isolation</strong></p>
<p>Containers virtualize CPU, memory, storage, and network resources at the operating system level, providing developers with a view of the OS logically isolated from other applications.</p>
<p><strong>Agile development</strong></p>
<p>Containers allow developers to move much more quickly by avoiding concerns about dependencies and environments.</p>
<p><strong>Efficient operations</strong></p>
<p>Containers are lightweight and allow us to use just the computing resources we need.</p>
<h2 id="virtualization-vs-containerization">Virtualization vs Containerization</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/virtualization-vs-containerization.jpg" alt="virtualization-vs-containerization"  />
</p>
<p>In traditional virtualization, a hypervisor virtualizes physical hardware. The result is that each virtual machine contains a guest OS, a virtual copy of the hardware that the OS requires to run, and an application and its associated libraries and dependencies.</p>
<p>Instead of virtualizing the underlying hardware, containers virtualize the operating system so each container contains only the application and its dependencies making them much more lightweight than VMs. Containers also share the OS kernel and use a fraction of the memory VMs require.</p>
<h1 id="oauth-20-and-openid-connect-oidc">OAuth 2.0 and OpenID Connect (OIDC)</h1>
<h2 id="oauth-20">OAuth 2.0</h2>
<p>OAuth 2.0, which stands for Open Authorization, is a standard designed to provide consented access to resources on behalf of the user, without ever sharing the user&rsquo;s credentials. OAuth 2.0 is an authorization protocol and not an authentication protocol, it is designed primarily as a means of granting access to a set of resources, for example, remote APIs or user&rsquo;s data.</p>
<h3 id="concepts-3">Concepts</h3>
<p>The OAuth 2.0 protocol defines the following entities:</p>
<ul>
<li><strong>Resource Owner</strong>: The user or system that owns the protected resources and can grant access to them.</li>
<li><strong>Client</strong>: The client is the system that requires access to the protected resources.</li>
<li><strong>Authorization Server</strong>: This server receives requests from the Client for Access Tokens and issues them upon successful authentication and consent by the Resource Owner.</li>
<li><strong>Resource Server</strong>: A server that protects the user&rsquo;s resources and receives access requests from the Client. It accepts and validates an Access Token from the Client and returns the appropriate resources.</li>
<li><strong>Scopes</strong>: They are used to specify exactly the reason for which access to resources may be granted. Acceptable scope values, and which resources they relate to, are dependent on the Resource Server.</li>
<li><strong>Access Token</strong>: A piece of data that represents the authorization to access resources on behalf of the end-user.</li>
</ul>
<h3 id="how-does-oauth-20-work">How does OAuth 2.0 work?</h3>
<p>Let&rsquo;s learn how OAuth 2.0 works:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/oauth2.jpg" alt="oauth2"  />
</p>
<ol>
<li>The client requests authorization from the Authorization Server, supplying the client id and secret as identification. It also provides the scopes and an endpoint URI to send the Access Token or the Authorization Code.</li>
<li>The Authorization Server authenticates the client and verifies that the requested scopes are permitted.</li>
<li>The resource owner interacts with the authorization server to grant access.</li>
<li>The Authorization Server redirects back to the client with either an Authorization Code or Access Token, depending on the grant type. A Refresh Token may also be returned.</li>
<li>With the Access Token, the client can request access to the resource from the Resource Server.</li>
</ol>
<h3 id="disadvantages-24">Disadvantages</h3>
<p>Here are the most common disadvantages of OAuth 2.0:</p>
<ul>
<li>Lacks built-in security features.</li>
<li>No standard implementation.</li>
<li>No common set of scopes.</li>
</ul>
<h2 id="openid-connect">OpenID Connect</h2>
<p>OAuth 2.0 is designed only for <em>authorization</em>, for granting access to data and features from one application to another. OpenID Connect (OIDC) is a thin layer that sits on top of OAuth 2.0 that adds login and profile information about the person who is logged in.</p>
<p>When an Authorization Server supports OIDC, it is sometimes called an identity provider (IdP), since it provides information about the Resource Owner back to the Client. OpenID Connect is relatively new, resulting in lower adoption and industry implementation of best practices compared to OAuth.</p>
<h3 id="concepts-4">Concepts</h3>
<p>The OpenID Connect (OIDC) protocol defines the following entities:</p>
<ul>
<li><strong>Relying Party</strong>: The current application.</li>
<li><strong>OpenID Provider</strong>: This is essentially an intermediate service that provides a one-time code to the Relying Party.</li>
<li><strong>Token Endpoint</strong>: A web server that accepts the One-Time Code (OTC) and provides an access code that&rsquo;s valid for an hour. The main difference between OIDC and OAuth 2.0 is that the token is provided using JSON Web Token (JWT).</li>
<li><strong>UserInfo Endpoint</strong>: The Relying Party communicates with this endpoint, providing a secure token and receiving information about the end-user</li>
</ul>
<p>Both OAuth 2.0 and OIDC are easy to implement and are JSON based, which is supported by most web and mobile applications. However, the OpenID Connect (OIDC) specification is more strict than that of basic OAuth.</p>
<h1 id="single-sign-on-sso">Single Sign-On (SSO)</h1>
<p>Single Sign-On (SSO) is an authentication process in which a user is provided access to multiple applications or websites by using only a single set of login credentials. This prevents the need for the user to log separately into the different applications.</p>
<p>The user credentials and other identifying information are stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider is a trusted system that provides access to other websites and applications.</p>
<p>Single Sign-On (SSO) based authentication systems are commonly used in enterprise environments where employees require access to multiple applications of their organizations.</p>
<h2 id="components-2">Components</h2>
<p>Let&rsquo;s discuss some key components of Single Sign-On (SSO).</p>
<h3 id="identity-provider-idp">Identity Provider (IdP)</h3>
<p>User Identity information is stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider authenticates the user and provides access to the service provider.</p>
<p>The identity provider can directly authenticate the user by validating a username and password or by validating an assertion about the user&rsquo;s identity as presented by a separate identity provider. The identity provider handles the management of user identities in order to free the service provider from this responsibility.</p>
<h3 id="service-provider">Service Provider</h3>
<p>A service provider provides services to the end-user. They rely on identity providers to assert the identity of a user, and typically certain attributes about the user are managed by the identity provider. Service providers may also maintain a local account for the user along with attributes that are unique to their service.</p>
<h3 id="identity-broker">Identity Broker</h3>
<p>An identity broker acts as an intermediary that connects multiple service providers with various different identity providers. Using Identity Broker, we can perform single sign-on over any application without the hassle of the protocol it follows.</p>
<h2 id="saml">SAML</h2>
<p>Security Assertion Markup Language is an open standard that allows clients to share security information about identity, authentication, and permission across different systems. SAML is implemented with the Extensible Markup Language (XML) standard for sharing data.</p>
<p>SAML specifically enables identity federation, making it possible for identity providers (IdPs) to seamlessly and securely pass authenticated identities and their attributes to service providers.</p>
<h2 id="how-does-sso-work">How does SSO work?</h2>
<p>Now, let&rsquo;s discuss how Single Sign-On works:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/sso.jpg" alt="sso"  />
</p>
<ol>
<li>The user requests a resource from their desired application.</li>
<li>The application redirects the user to the Identity Provider (IdP) for authentication.</li>
<li>The user signs in with their credentials (usually, username and password).</li>
<li>Identity Provider (IdP) sends a Single Sign-On response back to the client application.</li>
<li>The application grants access to the user.</li>
</ol>
<h2 id="saml-vs-oauth-20-and-openid-connect-oidc">SAML vs OAuth 2.0 and OpenID Connect (OIDC)</h2>
<p>There are many differences between SAML, OAuth, and OIDC. SAML uses XML to pass messages, while OAuth and OIDC use JSON. OAuth provides a simpler experience, while SAML is geared towards enterprise security.</p>
<p>OAuth and OIDC use RESTful communication extensively, which is why mobile, and modern web applications find OAuth and OIDC a better experience for the user. SAML, on the other hand, drops a session cookie in a browser that allows a user to access certain web pages. This is great for short-lived workloads.</p>
<p>OIDC is developer-friendly and simpler to implement, which broadens the use cases for which it might be implemented. It can be implemented from scratch pretty fast, via freely available libraries in all common programming languages. SAML can be complex to install and maintain, which only enterprise-size companies can handle well.</p>
<p>OpenID Connect is essentially a layer on top of the OAuth framework. Therefore, it can offer a built-in layer of permission that asks a user to agree to what the service provider might access. Although SAML is also capable of allowing consent flow, it achieves this by hard-coding carried out by a developer and not as part of its protocol.</p>
<p><em>Both of these authentication protocols are good at what they do. As always, a lot depends on our specific use cases and target audience.</em></p>
<h2 id="advantages-29">Advantages</h2>
<p>Following are the benefits of using Single Sign-On:</p>
<ul>
<li>Ease of use as users only need to remember one set of credentials.</li>
<li>Ease of access without having to go through a lengthy authorization process.</li>
<li>Enforced security and compliance to protect sensitive data.</li>
<li>Simplifying the management with reduced IT support cost and admin time.</li>
</ul>
<h2 id="disadvantages-25">Disadvantages</h2>
<p>Here are some disadvantages of Single Sign-On:</p>
<ul>
<li>Single Password Vulnerability, if the main SSO password gets compromised, all the supported applications get compromised.</li>
<li>The authentication process using Single Sign-On is slower than traditional authentication as every application has to request the SSO provider for verification.</li>
</ul>
<h2 id="examples-16">Examples</h2>
<p>These are some commonly used Identity Providers (IdP):</p>
<ul>
<li><a href="https://www.okta.com">Okta</a></li>
<li><a href="https://cloud.google.com/architecture/identity/single-sign-on">Google</a></li>
<li><a href="https://auth0.com">Auth0</a></li>
<li><a href="https://www.onelogin.com">OneLogin</a></li>
</ul>
<h1 id="ssl-tls-mtls">SSL, TLS, mTLS</h1>
<p>Let&rsquo;s briefly discuss some important communication security protocols such as SSL, TLS, and mTLS. I would say that from a <em>&ldquo;big picture&rdquo;</em> system design perspective, this topic is not very important but still good to know about.</p>
<h2 id="ssl">SSL</h2>
<p>SSL stands for Secure Sockets Layer, and it refers to a protocol for encrypting and securing communications that take place on the internet. It was first developed in 1995 but since has been deprecated in favor of TLS (Transport Layer Security).</p>
<h3 id="why-is-it-called-an-ssl-certificate-if-it-is-deprecated">Why is it called an SSL certificate if it is deprecated?</h3>
<p>Most major certificate providers still refer to certificates as SSL certificates, which is why the naming convention persists.</p>
<h3 id="why-was-ssl-so-important">Why was SSL so important?</h3>
<p>Originally, data on the web was transmitted in plaintext that anyone could read if they intercepted the message. SSL was created to correct this problem and protect user privacy. By encrypting any data that goes between the user and a web server, SSL also stops certain kinds of cyber attacks by preventing attackers from tampering with data in transit.</p>
<h2 id="tls">TLS</h2>
<p>Transport Layer Security, or TLS, is a widely adopted security protocol designed to facilitate privacy and data security for communications over the internet. TLS evolved from a previous encryption protocol called Secure Sockets Layer (SSL). A primary use case of TLS is encrypting the communication between web applications and servers.</p>
<p>There are three main components to what the TLS protocol accomplishes:</p>
<ul>
<li><strong>Encryption</strong>: hides the data being transferred from third parties.</li>
<li><strong>Authentication</strong>: ensures that the parties exchanging information are who they claim to be.</li>
<li><strong>Integrity</strong>: verifies that the data has not been forged or tampered with.</li>
</ul>
<h2 id="mtls">mTLS</h2>
<p>Mutual TLS, or mTLS, is a method for mutual authentication. mTLS ensures that the parties at each end of a network connection are who they claim to be by verifying that they both have the correct private key. The information within their respective TLS certificates provides additional verification.</p>
<h3 id="why-use-mtls">Why use mTLS?</h3>
<p>mTLS helps ensure that the traffic is secure and trusted in both directions between a client and server. This provides an additional layer of security for users who log in to an organization&rsquo;s network or applications. It also verifies connections with client devices that do not follow a login process, such as Internet of Things (IoT) devices.</p>
<p>Nowadays, mTLS is commonly used by microservices or distributed systems in a <a href="https://en.wikipedia.org/wiki/Zero_trust_security_model">zero trust security model</a> to verify each other.</p>
<h1 id="system-design-interviews">System Design Interviews</h1>
<p>System design is a very extensive topic and system design interviews are designed to evaluate your capability to produce technical solutions to abstract problems, as such, they&rsquo;re not designed for a specific answer. The unique aspect of system design interviews is the two-way nature between the candidate and the interviewer.</p>
<p>Expectations are quite different at different engineering levels as well. Because someone with a lot of practical experience will approach it quite differently from someone who&rsquo;s new in the industry. As a result, it&rsquo;s hard to come up with a single strategy that will help us stay organized during the interview.</p>
<p>Let&rsquo;s look at some common strategies for the system design interviews:</p>
<h2 id="requirements-clarifications">Requirements clarifications</h2>
<p>System design interview questions, by nature, are vague or abstract. Asking questions about the exact scope of the problem, and clarifying functional requirements early in the interview is essential. Usually, requirements are divided into three parts:</p>
<h3 id="functional-requirements">Functional requirements</h3>
<p>These are the requirements that the end user specifically demands as basic functionalities that the system should offer. All these functionalities need to be necessarily incorporated into the system as part of the contract.</p>
<p>For example:</p>
<ul>
<li>&ldquo;What are the features that we need to design for this system?&rdquo;</li>
<li>&ldquo;What are the edge cases we need to consider, if any, in our design?&rdquo;</li>
</ul>
<h3 id="non-functional-requirements">Non-functional requirements</h3>
<p>These are the quality constraints that the system must satisfy according to the project contract. The priority or extent to which these factors are implemented varies from one project to another. They are also called non-behavioral requirements. For example, portability, maintainability, reliability, scalability, security, etc.</p>
<p>For example:</p>
<ul>
<li>&ldquo;Each request should be processed with the minimum latency&rdquo;</li>
<li>&ldquo;System should be highly available&rdquo;</li>
</ul>
<h3 id="extended-requirements">Extended requirements</h3>
<p>These are basically &ldquo;nice to have&rdquo; requirements that might be out of the scope of the system.</p>
<p>For example:</p>
<ul>
<li>&ldquo;Our system should record metrics and analytics&rdquo;</li>
<li>&ldquo;Service health and performance monitoring?&rdquo;</li>
</ul>
<h2 id="estimation-and-constraints">Estimation and Constraints</h2>
<p>Estimate the scale of the system we&rsquo;re going to design. It is important to ask questions such as:</p>
<ul>
<li>&ldquo;What is the desired scale that this system will need to handle?&rdquo;</li>
<li>&ldquo;What is the read/write ratio of our system?&rdquo;</li>
<li>&ldquo;How many requests per second?&rdquo;</li>
<li>&ldquo;How much storage will be needed?&rdquo;</li>
</ul>
<p>These questions will help us scale our design later.</p>
<h2 id="data-model-design">Data model design</h2>
<p>Once we have the estimations, we can start with defining the database schema. Doing so in the early stages of the interview would help us to understand the data flow which is the core of every system. In this step, we basically define all the entities and relationships between them.</p>
<ul>
<li>&ldquo;What are the different entities in the system?&rdquo;</li>
<li>&ldquo;What are the relationships between these entities?&rdquo;</li>
<li>&ldquo;How many tables do we need?&rdquo;</li>
<li>&ldquo;Is NoSQL a better choice here?&rdquo;</li>
</ul>
<h2 id="api-design">API design</h2>
<p>Next, we can start designing APIs for the system. These APIs will help us define the expectations from the system explicitly. We don&rsquo;t have to write any code, just a simple interface defining the API requirements such as parameters, functions, classes, types, entities, etc.</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">createUser</span><span class="p">(</span><span class="nx">name</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">email</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">User</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It is advised to keep the interface as simple as possible and come back to it later when covering extended requirements.</p>
<h2 id="high-level-component-design">High-level component design</h2>
<p>Now we have established our data model and API design, it&rsquo;s time to identify system components (such as Load Balancers, API Gateway, etc.) that are needed to solve our problem and draft the first design of our system.</p>
<ul>
<li>&ldquo;Is it best to design a monolithic or a microservices architecture?&rdquo;</li>
<li>&ldquo;What type of database should we use?&rdquo;</li>
</ul>
<p>Once we have a basic diagram, we can start discussing with the interviewer how the system will work from the client&rsquo;s perspective.</p>
<h2 id="detailed-design">Detailed design</h2>
<p>Now it&rsquo;s time to go into detail about the major components of the system we designed. As always discuss with the interviewer which component may need further improvements.</p>
<p>Here is a good opportunity to demonstrate your experience in the areas of your expertise. Present different approaches, advantages, and disadvantages. Explain your design decisions, and back them up with examples. This is also a good time to discuss any additional features the system might be able to support, though this is optional.</p>
<ul>
<li>&ldquo;How should we partition our data?&rdquo;</li>
<li>&ldquo;What about load distribution?&rdquo;</li>
<li>&ldquo;Should we use cache?&rdquo;</li>
<li>&ldquo;How will we handle a sudden spike in traffic?&rdquo;</li>
</ul>
<p>Also, try not to be too opinionated about certain technologies, statements like &ldquo;I believe that NoSQL databases are just better, SQL databases are not scalable&rdquo; reflect poorly. As someone who has interviewed a lot of people over the years, my two cents here would be to be humble about what you know and what you do not. Use your existing knowledge with examples to navigate this part of the interview.</p>
<h2 id="identify-and-resolve-bottlenecks">Identify and resolve bottlenecks</h2>
<p>Finally, it&rsquo;s time to discuss bottlenecks and approaches to mitigate them. Here are some important questions to ask:</p>
<ul>
<li>&ldquo;Do we have enough database replicas?&rdquo;</li>
<li>&ldquo;Is there any single point of failure?&rdquo;</li>
<li>&ldquo;Is database sharding required?&rdquo;</li>
<li>&ldquo;How can we make our system more robust?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>Make sure to read the engineering blog of the company you&rsquo;re interviewing with. This will help you get a sense of what technology stack they&rsquo;re using and which problems are important to them.</p>
<h1 id="url-shortener">URL Shortener</h1>
<p>Let&rsquo;s design a URL shortener, similar to services like <a href="https://bitly.com">Bitly</a>, <a href="https://tinyurl.com/app">TinyURL</a>.</p>
<h2 id="what-is-a-url-shortener">What is a URL Shortener?</h2>
<p>A URL shortener service creates an alias or a short URL for a long URL. Users are redirected to the original URL when they visit these short links.</p>
<p>For example, the following long URL can be changed to a shorter URL.</p>
<p><strong>Long URL</strong>: <a href="https://karanpratapsingh.com/courses/system-design/url-shortener">https://karanpratapsingh.com/courses/system-design/url-shortener</a></p>
<p><strong>Short URL</strong>: <a href="https://bit.ly/3I71d3o">https://bit.ly/3I71d3o</a></p>
<h2 id="why-do-we-need-a-url-shortener">Why do we need a URL shortener?</h2>
<p>URL shortener saves space in general when we are sharing URLs. Users are also less likely to mistype shorter URLs. Moreover, we can also optimize links across devices, this allows us to track individual links.</p>
<h2 id="requirements">Requirements</h2>
<p>Our URL shortening system should meet the following requirements:</p>
<h3 id="functional-requirements-1">Functional requirements</h3>
<ul>
<li>Given a URL, our service should generate a <em>shorter and unique</em> alias for it.</li>
<li>Users should be redirected to the original URL when they visit the short link.</li>
<li>Links should expire after a default timespan.</li>
</ul>
<h3 id="non-functional-requirements-1">Non-functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-1">Extended requirements</h3>
<ul>
<li>Prevent abuse of services.</li>
<li>Record analytics and metrics for redirections.</li>
</ul>
<h2 id="estimation-and-constraints-1">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic related assumptions with your interviewer.</em></p>
<h3 id="traffic">Traffic</h3>
<p>This will be a read-heavy system, so let&rsquo;s assume a <code>100:1</code> read/write ratio with 100 million links generated per month.</p>
<p><strong>Reads/Writes Per month</strong></p>
<p>For reads per month:</p>
<p>$$
100 \times 100 \space million = 10 \space billion/month
$$</p>
<p>Similarly for writes:</p>
<p>$$
1 \times 100 \space million = 100 \space million/month
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>100 million requests per month translate into 40 requests per second.</p>
<p>$$
\frac{100 \space million}{(30 \space days \times 24 \space hrs \times 3600 \space seconds)} = \sim 40 \space URLs/second
$$</p>
<p>And with a <code>100:1</code> read/write ratio, the number of redirections will be:</p>
<p>$$
100 \times 40 \space URLs/second = 4000 \space requests/second
$$</p>
<h3 id="bandwidth">Bandwidth</h3>
<p>Since we expect about 40 URLs every second, and if we assume each request is of size 500 bytes then the total incoming data for then write requests would be:</p>
<p>$$
40 \times 500 \space bytes = 20 \space KB/second
$$</p>
<p>Similarly, for the read requests, since we expect about 4K redirections, the total outgoing data would be:</p>
<p>$$
4000 \space URLs/second \times 500 \space bytes = \sim 2 \space MB/second
$$</p>
<h3 id="storage-2">Storage</h3>
<p>For storage, we will assume we store each link or record in our database for 10 years. Since we expect around 100M new requests every month, the total number of records we will need to store would be:</p>
<p>$$
100 \space million \times 10\space years \times 12 \space months = 12 \space billion
$$</p>
<p>Like earlier, if we assume each stored recorded will be approximately 500 bytes. We will need around 6TB of storage:</p>
<p>$$
12 \space billion \times 500 \space bytes = 6 \space TB
$$</p>
<h3 id="cache">Cache</h3>
<p>For caching, we will follow the classic <a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto principle</a> also known as the 80/20 rule. This means that 80% of the requests are for 20% of the data, so we can cache around 20% of our requests.</p>
<p>Since we get around 4K read or redirection requests each second. This translates into 350M requests per day.</p>
<p>$$
4000 \space URLs/second \times 24 \space hours \times 3600 \space seconds = \sim 350 \space million \space requests/day
$$</p>
<p>Hence, we will need around 35GB of memory per day.</p>
<p>$$
20 \space percent \times 350 \space million \times 500 \space bytes = 35 \space GB/day
$$</p>
<h3 id="high-level-estimate">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Writes (New URLs)</td>
<td>40/s</td>
</tr>
<tr>
<td>Reads (Redirection)</td>
<td>4K/s</td>
</tr>
<tr>
<td>Bandwidth (Incoming)</td>
<td>20 KB/s</td>
</tr>
<tr>
<td>Bandwidth (Outgoing)</td>
<td>2 MB/s</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>6 TB</td>
</tr>
<tr>
<td>Memory (Caching)</td>
<td>~35 GB/day</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-1">Data model design</h2>
<p>Next, we will focus on the data model design. Here is our database schema:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/url-shortener-datamodel.jpg" alt="url-shortener-datamodel"  />
</p>
<p>Initially, we can get started with just two tables:</p>
<p><strong>users</strong></p>
<p>Stores user&rsquo;s details such as <code>name</code>, <code>email</code>, <code>createdAt</code>, etc.</p>
<p><strong>urls</strong></p>
<p>Contains the new short URL&rsquo;s properties such as <code>expiration</code>, <code>hash</code>, <code>originalURL</code>, and <code>userID</code> of the user who created the short URL. We can also use the <code>hash</code> column as an <a href="https://karanpratapsingh.com/courses/system-design/indexes">index</a> to improve the query performance.</p>
<h3 id="what-kind-of-database-should-we-use">What kind of database should we use?</h3>
<p>Since the data is not strongly relational, NoSQL databases such as <a href="https://aws.amazon.com/dynamodb">Amazon DynamoDB</a>, <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a>, or <a href="https://www.mongodb.com">MongoDB</a> will be a better choice here, if we do decide to use an SQL database then we can use something like <a href="https://azure.microsoft.com/en-in/products/azure-sql/database">Azure SQL Database</a> or <a href="https://aws.amazon.com/rds">Amazon RDS</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases">SQL vs NoSQL</a>.</em></p>
<h2 id="api-design-1">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="create-url">Create URL</h3>
<p>This API should create a new short URL in our system given an original URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">createURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">originalURL</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">expiration?</span>: <span class="kt">Date</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Original Url (<code>string</code>): Original URL to be shortened.</p>
<p>Expiration (<code>Date</code>): Expiration date of the new URL <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Short URL (<code>string</code>): New shortened URL.</p>
<h3 id="get-url">Get URL</h3>
<p>This API should retrieve the original URL from a given short URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">shortURL</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Short Url (<code>string</code>): Short URL mapped to the original URL.</p>
<p><strong>Returns</strong></p>
<p>Original URL (<code>string</code>): Original URL to be retrieved.</p>
<h3 id="delete-url">Delete URL</h3>
<p>This API should delete a given shortURL from our system.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">deleteURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">shortURL</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Short Url (<code>string</code>): Short URL to be deleted.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="why-do-we-need-an-api-key">Why do we need an API key?</h3>
<p>As you must&rsquo;ve noticed, we&rsquo;re using an API key to prevent abuse of our services. Using this API key we can limit the users to a certain number of requests per second or minute. This is quite a standard practice for developer APIs and should cover our extended requirement.</p>
<h2 id="high-level-design">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="url-encoding">URL Encoding</h3>
<p>Our system&rsquo;s primary goal is to shorten a given URL, let&rsquo;s look at different approaches:</p>
<p><strong>Base62 Approach</strong></p>
<p>In this approach, we can encode the original URL using <a href="https://en.wikipedia.org/wiki/Base62">Base62</a> which consists of the capital letters A-Z, the lower case letters a-z, and the numbers 0-9.</p>
<p>$$
Number \space of \space URLs = 62^N
$$</p>
<p>Where,</p>
<p><code>N</code>: Number of characters in the generated URL.</p>
<p>So, if we want to generate a URL that is 7 characters long, we will generate ~3.5 trillion different URLs.</p>
<p>$$
\begin{gather*}
62^5 = \sim 916 \space million \space URLs \
62^6 = \sim 56.8 \space billion \space URLs \
62^7 = \sim 3.5 \space trillion \space URLs
\end{gather*}
$$</p>
<p>This is the simplest solution here, but it does not guarantee non-duplicate or collision-resistant keys.</p>
<p><strong>MD5 Approach</strong></p>
<p>The <a href="https://en.wikipedia.org/wiki/MD5">MD5 message-digest algorithm</a> is a widely used hash function producing a 128-bit hash value (or 32 hexadecimal digits). We can use these 32 hexadecimal digits for generating 7 characters long URL.</p>
<p>$$
MD5(original_url) \rightarrow base62encode \rightarrow hash
$$</p>
<p>However, this creates a new issue for us, which is duplication and collision. We can try to re-compute the hash until we find a unique one but that will increase the overhead of our systems. It&rsquo;s better to look for more scalable approaches.</p>
<p><strong>Counter Approach</strong></p>
<p>In this approach, we will start with a single server which will maintain the count of the keys generated. Once our service receives a request, it can reach out to the counter which returns a unique number and increments the counter. When the next request comes the counter again returns the unique number and this goes on.</p>
<p>$$
Counter(0-3.5 \space trillion) \rightarrow base62encode \rightarrow hash
$$</p>
<p>The problem with this approach is that it can quickly become a single point for failure. And if we run multiple instances of the counter we can have collision as it&rsquo;s essentially a distributed system.</p>
<p>To solve this issue we can use a distributed system manager such as <a href="https://zookeeper.apache.org">Zookeeper</a> which can provide distributed synchronization. Zookeeper can maintain multiple ranges for our servers.</p>
<p>$$
\begin{align*}
&amp; Range \space 1: \space 1 \rightarrow 1,000,000 \
&amp; Range \space 2: \space 1,000,001 \rightarrow 2,000,000 \
&amp; Range \space 3: \space 2,000,001 \rightarrow 3,000,000 \
&amp; &hellip;
\end{align*}
$$</p>
<p>Once a server reaches its maximum range Zookeeper will assign an unused counter range to the new server. This approach can guarantee non-duplicate and collision-resistant URLs. Also, we can run multiple instances of Zookeeper to remove the single point of failure.</p>
<h3 id="key-generation-service-kgs">Key Generation Service (KGS)</h3>
<p>As we discussed, generating a unique key at scale without duplication and collisions can be a bit of a challenge. To solve this problem, we can create a standalone Key Generation Service (KGS) that generates a unique key ahead of time and stores it in a separate database for later use. This approach can make things simple for us.</p>
<p><strong>How to handle concurrent access?</strong></p>
<p>Once the key is used, we can mark it in the database to make sure we don&rsquo;t reuse it, however, if there are multiple server instances reading data concurrently, two or more servers might try to use the same key.</p>
<p>The easiest way to solve this would be to store keys in two tables. As soon as a key is used, we move it to a separate table with appropriate locking in place. Also, to improve reads, we can keep some of the keys in memory.</p>
<p><strong>KGS database estimations</strong></p>
<p>As per our discussion, we can generate up to ~56.8 billion unique 6 character long keys which will result in us having to store 300 GB of keys.</p>
<p>$$
6 \space characters \times 56.8 \space billion = \sim 390 \space GB
$$</p>
<p>While 390 GB seems like a lot for this simple use case, it is important to remember this is for the entirety of our service lifetime and the size of the keys database would not increase like our main database.</p>
<h3 id="caching-1">Caching</h3>
<p>Now, let&rsquo;s talk about <a href="https://karanpratapsingh.com/courses/system-design/caching">caching</a>. As per our estimations, we will require around ~35 GB of memory per day to cache 20% of the incoming requests to our services. For this use case, we can use <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> servers alongside our API server.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching">caching</a>.</em></p>
<h3 id="design">Design</h3>
<p>Now that we have identified some core components, let&rsquo;s do the first draft of our system design.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/url-shortener-basic-design.jpg" alt="url-shortener-basic-design"  />
</p>
<p>Here&rsquo;s how it works:</p>
<p><strong>Creating a new URL</strong></p>
<ol>
<li>When a user creates a new URL, our API server requests a new unique key from the Key Generation Service (KGS).</li>
<li>Key Generation Service provides a unique key to the API server and marks the key as used.</li>
<li>API server writes the new URL entry to the database and cache.</li>
<li>Our service returns an HTTP 201 (Created) response to the user.</li>
</ol>
<p><strong>Accessing a URL</strong></p>
<ol>
<li>When a client navigates to a certain short URL, the request is sent to the API servers.</li>
<li>The request first hits the cache, and if the entry is not found there then it is retrieved from the database and an HTTP 301 (Redirect) is issued to the original URL.</li>
<li>If the key is still not found in the database, an HTTP 404 (Not found) error is sent to the user.</li>
</ol>
<h2 id="detailed-design-1">Detailed design</h2>
<p>It&rsquo;s time to discuss the finer details of our design.</p>
<h3 id="data-partitioning-1">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent Hashing</a>.</em></p>
<h3 id="database-cleanup">Database cleanup</h3>
<p>This is more of a maintenance step for our services and depends on whether we keep the expired entries or remove them. If we do decide to remove expired entries, we can approach this in two different ways:</p>
<p><strong>Active cleanup</strong></p>
<p>In active cleanup, we will run a separate cleanup service which will periodically remove expired links from our storage and cache. This will be a very lightweight service like a <a href="https://en.wikipedia.org/wiki/Cron">cron job</a>.</p>
<p><strong>Passive cleanup</strong></p>
<p>For passive cleanup, we can remove the entry when a user tries to access an expired link. This can ensure a lazy cleanup of our database and cache.</p>
<h3 id="cache-1">Cache</h3>
<p>Now let us talk about <a href="https://karanpratapsingh.com/courses/system-design/caching">caching</a>.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>As we discussed before, we can use solutions like <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<h3 id="metrics-and-analytics">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can store and update metadata like visitor&rsquo;s country, platform, the number of views, etc alongside the URL entry in our database.</p>
<h3 id="security-2">Security</h3>
<p>For security, we can introduce private URLs and authorization. A separate table can be used to store user ids that have permission to access a specific URL. If a user does not have proper permissions, we can return an HTTP 401 (Unauthorized) error.</p>
<p>We can also use an <a href="https://karanpratapsingh.com/courses/system-design/api-gateway">API Gateway</a> as they can support capabilities like authorization, rate limiting, and load balancing out of the box.</p>
<h2 id="identify-and-resolve-bottlenecks-1">Identify and resolve bottlenecks</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/url-shortener-advanced-design.jpg" alt="url-shortener-advanced-design"  />
</p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if the API service or Key Generation Service crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;What if the key database used by KGS fails?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of our Servers and Key Generation Service.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our database as it&rsquo;s a read-heavy system.</li>
<li>Standby replica for our key database in case it fails.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
</ul>
<h1 id="whatsapp">WhatsApp</h1>
<p>Let&rsquo;s design a <a href="https://whatsapp.com">WhatsApp</a> like instant messaging service, similar to services like <a href="https://www.whatsapp.com">WhatsApp</a>, <a href="https://www.messenger.com">Facebook Messenger</a>, and <a href="https://www.wechat.com">WeChat</a>.</p>
<h2 id="what-is-whatsapp">What is WhatsApp?</h2>
<p>WhatsApp is a chat application that provides instant messaging services to its users. It is one of the most used mobile applications on the planet connecting over 2 billion users in 180+ countries. WhatsApp is also available on the web.</p>
<h2 id="requirements-1">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-2">Functional requirements</h3>
<ul>
<li>Should support one-on-one chat.</li>
<li>Group chats (max 100 people).</li>
<li>Should support file sharing (image, video, etc.).</li>
</ul>
<h3 id="non-functional-requirements-2">Non-functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-2">Extended requirements</h3>
<ul>
<li>Sent, Delivered, and Read receipts of the messages.</li>
<li>Show the last seen time of users.</li>
<li>Push notifications.</li>
</ul>
<h2 id="estimation-and-constraints-2">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-1">Traffic</h3>
<p>Let us assume we have 50 million daily active users (DAU) and on average each user sends at least 10 messages to 4 different people every day. This gives us 2 billion messages per day.</p>
<p>$$
50 \space million \times 20 \space messages = 2 \space billion/day
$$</p>
<p>Messages can also contain media such as images, videos, or other files. We can assume that 5 percent of messages are media files shared by the users, which gives us additional 200 million files we would need to store.</p>
<p>$$
5 \space percent \times 2 \space billion = 200 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>2 billion requests per day translate into 24K requests per second.</p>
<p>$$
\frac{2 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 24K \space requests/second
$$</p>
<h3 id="storage-3">Storage</h3>
<p>If we assume each message on average is 100 bytes, we will require about 200 GB of database storage every day.</p>
<p>$$
2 \space billion \times 100 \space bytes = \sim 200 \space GB/day
$$</p>
<p>As per our requirements, we also know that around 5 percent of our daily messages (100 million) are media files. If we assume each file is 50 KB on average, we will require 10 TB of storage every day.</p>
<p>$$
100 \space million \times 100 \space KB = 10 \space TB/day
$$</p>
<p>And for 10 years, we will require about 38 PB of storage.</p>
<p>$$
(10 \space TB + 0.2 \space TB) \times 10 \space years \times 365 \space days = \sim 38 \space PB
$$</p>
<h3 id="bandwidth-1">Bandwidth</h3>
<p>As our system is handling 10.2 TB of ingress every day, we will require a minimum bandwidth of around 120 MB per second.</p>
<p>$$
\frac{10.2 \space TB}{(24 \space hrs \times 3600 \space seconds)} = \sim 120 \space MB/second
$$</p>
<h3 id="high-level-estimate-1">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>50 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>24K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~10.2 TB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~38 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~120 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-2">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/whatsapp-datamodel.jpg" alt="whatsapp-datamodel"  />
</p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>phoneNumber</code>, and other details.</p>
<p><strong>messages</strong></p>
<p>As the name suggests, this table will store messages with properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, and timestamps for message delivery. The message will also have a corresponding <code>chatID</code> or <code>groupID</code>.</p>
<p><strong>chats</strong></p>
<p>This table basically represents a private chat between two users and can contain multiple messages.</p>
<p><strong>users_chats</strong></p>
<p>This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.</p>
<p><strong>groups</strong></p>
<p>This table represents a group between multiple users.</p>
<p><strong>users_groups</strong></p>
<p>This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.</p>
<h3 id="what-kind-of-database-should-we-use-1">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-2">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="get-all-chats-or-groups">Get all chats or groups</h3>
<p>This API will get all chats or groups for a given <code>userID</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getAll</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Chat</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">Group</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>Chat[] | Group[]</code>): All the chats and groups the user is a part of.</p>
<h3 id="get-messages">Get messages</h3>
<p>Get all messages for a user given the <code>channelID</code> (chat or group id).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getMessages</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Message</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) from which messages need to be retrieved.</p>
<p><strong>Returns</strong></p>
<p>Messages (<code>Message[]</code>): All the messages in a given chat or group.</p>
<h3 id="send-message">Send message</h3>
<p>Send a message from a user to a channel (chat or group).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">message</span>: <span class="kt">Message</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) user wants to send a message to.</p>
<p>Message (<code>Message</code>): The message (text, image, video, etc.) that the user wants to send.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="join-or-leave-a-group">Join or leave a group</h3>
<p>Send a message from a user to a channel (chat or group).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">joinGroup</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">leaveGroup</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) the user wants to join or leave.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-1">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This is an HTTP-based service that handles user-related concerns such as authentication and user information.</p>
<p><strong>Chat Service</strong></p>
<p>The chat service will use WebSockets and establish connections with the client to handle chat and group message-related functionality. We can also use cache to keep track of all the active connections sort of like sessions which will help us determine if the user is online or not.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>
<p><strong>Presence Service</strong></p>
<p>The presence service will keep track of the last seen status of all users. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="real-time-messaging">Real-time messaging</h3>
<p>How do we efficiently send and receive messages? We have two different options:</p>
<p><strong>Pull model</strong></p>
<p>The client can periodically send an HTTP request to servers to check if there are any new messages. This can be achieved via something like <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling">Long polling</a>.</p>
<p><strong>Push model</strong></p>
<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets">WebSockets</a> or <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse">Server-Sent Events (SSE)</a> for this.</p>
<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets">WebSockets</a> is a better choice because then we can push data to the client once it&rsquo;s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse">Server-Sent Events (SSE)</a> which are only unidirectional.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>
<h3 id="last-seen">Last seen</h3>
<p>To implement the last seen functionality, we can use a <a href="https://en.wikipedia.org/wiki/Heartbeat_(computing)">heartbeat</a> mechanism, where the client can periodically ping the servers indicating its liveness. Since this needs to be as low overhead as possible, we can store the last active timestamp in the cache as follows:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>User A</td>
<td>2022-07-01T14:32:50</td>
</tr>
<tr>
<td>User B</td>
<td>2022-07-05T05:10:35</td>
</tr>
<tr>
<td>User C</td>
<td>2022-07-10T04:33:25</td>
</tr>
</tbody>
</table>
<p>This will give us the last time the user was active. This functionality will be handled by the presence service combined with <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> as our cache.</p>
<p>Another way to implement this is to track the latest action of the user, once the last activity crosses a certain threshold, such as <em>&ldquo;user hasn&rsquo;t performed any action in the last 30 seconds&rdquo;</em>, we can show the user as offline and last seen with the last recorded timestamp. This will be more of a lazy update approach and might benefit us over heartbeat in certain cases.</p>
<h3 id="notifications">Notifications</h3>
<p>Once a message is sent in a chat or a group, we will first check if the recipient is active or not, we can get this information by taking the user&rsquo;s active connection and last seen into consideration.</p>
<p>If the recipient is not active, the chat service will add an event to a <a href="https://karanpratapsingh.com/courses/system-design/message-queues">message queue</a> with additional metadata such as the client&rsquo;s device platform which will be used to route the notification to the correct platform later on.</p>
<p>The notification service will then consume the event from the message queue and forward the request to <a href="https://firebase.google.com/docs/cloud-messaging">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications">Apple Push Notification Service (APNS)</a> based on the client&rsquo;s device platform (Android, iOS, web, etc). We can also add support for email and SMS.</p>
<p><strong>Why are we using a message queue?</strong></p>
<p>Since most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they&rsquo;re sent and that a message is delivered at least once which is an important part of our service functionality.</p>
<p>While this seems like a classic <a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe">publish-subscribe</a> use case, it is actually not as mobile devices and browsers each have their own way of handling push notifications. Usually, notifications are handled externally via Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) unlike message fan-out which we commonly see in backend services. We can use something like <a href="https://aws.amazon.com/sqs">Amazon SQS</a> or <a href="https://www.rabbitmq.com">RabbitMQ</a> to support this functionality.</p>
<h3 id="read-receipts">Read receipts</h3>
<p>Handling read receipts can be tricky, for this use case we can wait for some sort of <a href="https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)">Acknowledgment (ACK)</a> from the client to determine if the message was delivered and update the corresponding <code>deliveredAt</code> field. Similarly, we will mark message the message seen once the user opens the chat and update the corresponding <code>seenAt</code> timestamp field.</p>
<h3 id="design-1">Design</h3>
<p>Now that we have identified some core components, let&rsquo;s do the first draft of our system design.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/whatsapp-basic-design.jpg" alt="whatsapp-basic-design"  />
</p>
<h2 id="detailed-design-2">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-2">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent Hashing</a>.</em></p>
<h3 id="caching-2">Caching</h3>
<p>In a messaging application, we have to be careful about using cache as our users expect the latest data, but many users will be requesting the same messages, especially in a group chat. So, to prevent usage spikes from our resources we can cache older messages.</p>
<p>Some group chats can have thousands of messages and sending that over the network will be really inefficient, to improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won&rsquo;t have to retrieve old messages unless requested.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>We can use solutions like <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching">Caching</a>.</em></p>
<h3 id="media-access-and-storage">Media access and storage</h3>
<p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>
<p>But where can we store files at scale? Well, <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage">object storage</a> is what we&rsquo;re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs">HDFS</a> or <a href="https://www.gluster.org">GlusterFS</a>.</p>
<p><em>Fun fact: WhatsApp deletes media on its servers once it has been downloaded by the user.</em></p>
<p>We can use object stores like <a href="https://aws.amazon.com/s3">Amazon S3</a>, <a href="https://azure.microsoft.com/en-in/services/storage/blobs">Azure Blob Storage</a>, or <a href="https://cloud.google.com/storage">Google Cloud Storage</a> for this use case.</p>
<h3 id="content-delivery-network-cdn-1">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn">Cloudflare CDN</a> for this use case.</p>
<h3 id="api-gateway-1">API gateway</h3>
<p>Since we will be using multiple protocols like HTTP, WebSocket, TCP/IP, deploying multiple L4 (transport layer) or L7 (application layer) type load balancers separately for each protocol will be expensive. Instead, we can use an <a href="https://karanpratapsingh.com/courses/system-design/api-gateway">API Gateway</a> that supports multiple protocols without any issues.</p>
<p>API Gateway can also offer other features such as authentication, authorization, rate limiting, throttling, and API versioning which will improve the quality of our services.</p>
<p>We can use services like <a href="https://aws.amazon.com/api-gateway">Amazon API Gateway</a> or <a href="https://azure.microsoft.com/en-in/services/api-management">Azure API Gateway</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-2">Identify and resolve bottlenecks</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/whatsapp-advanced-design.jpg" alt="whatsapp-advanced-design"  />
</p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;Wouldn&rsquo;t API Gateway be a single point of failure?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
<li>&ldquo;How can we reduce media storage costs&rdquo;?</li>
<li>&ldquo;Does chat service has too much responsibility?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>We can have a standby replica of our API Gateway.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers">message broker</a> such as <a href="https://kafka.apache.org">Apache Kafka</a> or <a href="https://nats.io">NATS</a> to make our notification system more robust.</li>
<li>We can add media processing and compression capabilities to the media service to compress large files similar to WhatsApp which will save a lot of storage space and reduce cost.</li>
<li>We can create a group service separate from the chat service to further decouple our services.</li>
</ul>
<h1 id="twitter">Twitter</h1>
<p>Let&rsquo;s design a <a href="https://twitter.com">Twitter</a> like social media service, similar to services like <a href="https://facebook.com">Facebook</a>, <a href="https://instagram.com">Instagram</a>, etc.</p>
<h2 id="what-is-twitter">What is Twitter?</h2>
<p>Twitter is a social media service where users can read or post short messages (up to 280 characters) called tweets. It is available on the web and mobile platforms such as Android and iOS.</p>
<h2 id="requirements-2">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-3">Functional requirements</h3>
<ul>
<li>Should be able to post new tweets (can be text, image, video, etc.).</li>
<li>Should be able to follow other users.</li>
<li>Should have a newsfeed feature consisting of tweets from the people the user is following.</li>
<li>Should be able to search tweets.</li>
</ul>
<h3 id="non-functional-requirements-3">Non-Functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-3">Extended requirements</h3>
<ul>
<li>Metrics and analytics.</li>
<li>Retweet functionality.</li>
<li>Favorite tweets.</li>
</ul>
<h2 id="estimation-and-constraints-3">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-2">Traffic</h3>
<p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user tweets 5 times a day. This gives us 1 billion tweets per day.</p>
<p>$$
200 \space million \times 5 \space messages = 1 \space billion/day
$$</p>
<p>Tweets can also contain media such as images, or videos. We can assume that 10 percent of tweets are media files shared by the users, which gives us additional 100 million files we would need to store.</p>
<p>$$
10 \space percent \times 1 \space billion = 100 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-4">Storage</h3>
<p>If we assume each message on average is 100 bytes, we will require about 100 GB of database storage every day.</p>
<p>$$
1 \space billion \times 100 \space bytes = \sim 100 \space GB/day
$$</p>
<p>We also know that around 10 percent of our daily messages (100 million) are media files per our requirements. If we assume each file is 50 KB on average, we will require 5 TB of storage every day.</p>
<p>$$
100 \space million \times 100 \space KB = 5 \space TB/day
$$</p>
<p>And for 10 years, we will require about 19 PB of storage.</p>
<p>$$
(5 \space TB + 0.1 \space TB) \times 365 \space days \times 10 \space years = \sim 19 \space PB
$$</p>
<h3 id="bandwidth-2">Bandwidth</h3>
<p>As our system is handling 5.1 TB of ingress every day, we will require a minimum bandwidth of around 60 MB per second.</p>
<p>$$
\frac{5.1 \space TB}{(24 \space hrs \times 3600 \space seconds)} = \sim 60 \space MB/second
$$</p>
<h3 id="high-level-estimate-2">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>100 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~5.1 TB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~19 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~60 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-3">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-datamodel.jpg" alt="twitter-datamodel"  />
</p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>
<p><strong>tweets</strong></p>
<p>As the name suggests, this table will store tweets and their properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, etc. We will also store the corresponding <code>userID</code>.</p>
<p><strong>favorites</strong></p>
<p>This table maps tweets with users for the favorite tweets functionality in our application.</p>
<p><strong>followers</strong></p>
<p>This table maps the followers and <a href="https://en.wiktionary.org/wiki/followee">followees</a> as users can follow each other (N:M relationship).</p>
<p><strong>feeds</strong></p>
<p>This table stores feed properties with the corresponding <code>userID</code>.</p>
<p><strong>feeds_tweets</strong></p>
<p>This table maps tweets and feed (N:M relationship).</p>
<h3 id="what-kind-of-database-should-we-use-2">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-3">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="post-a-tweet">Post a tweet</h3>
<p>This API will allow the user to post a tweet on the platform.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">postTweet</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">content</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">mediaURL?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the user.</p>
<p>Content (<code>string</code>): Contents of the tweet.</p>
<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="follow-or-unfollow-a-user">Follow or unfollow a user</h3>
<p>This API will allow the user to follow or unfollow another user.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span><span class="lnt" id="hl-13-2"><a class="lnlinks" href="#hl-13-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">follow</span><span class="p">(</span><span class="nx">followerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">followeeID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">unfollow</span><span class="p">(</span><span class="nx">followerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">followeeID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Follower ID (<code>UUID</code>): ID of the current user.</p>
<p>Followee ID (<code>UUID</code>): ID of the user we want to follow or unfollow.</p>
<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="get-newsfeed">Get newsfeed</h3>
<p>This API will return all the tweets to be shown within a given newsfeed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getNewsfeed</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Tweet</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the user.</p>
<p><strong>Returns</strong></p>
<p>Tweets (<code>Tweet[]</code>): All the tweets to be shown within a given newsfeed.</p>
<h2 id="high-level-design-2">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-1">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This service handles user-related concerns such as authentication and user information.</p>
<p><strong>Newsfeed Service</strong></p>
<p>This service will handle the generation and publishing of user newsfeeds. It will be discussed in detail separately.</p>
<p><strong>Tweet Service</strong></p>
<p>The tweet service will handle tweet-related use cases such as posting a tweet, favorites, etc.</p>
<p><strong>Search Service</strong></p>
<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="newsfeed">Newsfeed</h3>
<p>When it comes to the newsfeed, it seems easy enough to implement, but there are a lot of things that can make or break this feature. So, let&rsquo;s divide our problem into two parts:</p>
<p><strong>Generation</strong></p>
<p>Let&rsquo;s assume we want to generate the feed for user A, we will perform the following steps:</p>
<ol>
<li>Retrieve the IDs of all the users and entities (hashtags, topics, etc.) user A follows.</li>
<li>Fetch the relevant tweets for each of the retrieved IDs.</li>
<li>Use a ranking algorithm to rank the tweets based on parameters such as relevance, time, engagement, etc.</li>
<li>Return the ranked tweets data to the client in a paginated manner.</li>
</ol>
<p>Feed generation is an intensive process and can take quite a lot of time, especially for users following a lot of people. To improve the performance, the feed can be pre-generated and stored in the cache, then we can have a mechanism to periodically update the feed and apply our ranking algorithm to the new tweets.</p>
<p><strong>Publishing</strong></p>
<p>Publishing is the step where the feed data is pushed according to each specific user. This can be a quite heavy operation, as a user may have millions of friends or followers. To deal with this, we have three different approaches:</p>
<ul>
<li>Pull Model (or Fan-out on load)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/newsfeed-pull-model.jpg" alt="newsfeed-pull-model"  />
</p>
<p>When a user creates a tweet, and a follower reloads their newsfeed, the feed is created and stored in memory. The most recent feed is only loaded when the user requests it. This approach reduces the number of write operations on our database.</p>
<p>The downside of this approach is that the users will not be able to view recent feeds unless they &ldquo;pull&rdquo; the data from the server, which will increase the number of read operations on the server.</p>
<ul>
<li>Push Model (or Fan-out on write)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/newsfeed-push-model.jpg" alt="newsfeed-push-model"  />
</p>
<p>In this model, once a user creates a tweet, it is &ldquo;pushed&rdquo; to all the follower&rsquo;s feeds immediately. This prevents the system from having to go through a user&rsquo;s entire followers list to check for updates.</p>
<p>However, the downside of this approach is that it would increase the number of write operations on the database.</p>
<ul>
<li>Hybrid Model</li>
</ul>
<p>A third approach is a hybrid model between the pull and push model. It combines the beneficial features of the above two models and tries to provide a balanced approach between the two.</p>
<p>The hybrid model allows only users with a lesser number of followers to use the push model and for users with a higher number of followers celebrities, the pull model will be used.</p>
<h3 id="ranking-algorithm">Ranking Algorithm</h3>
<p>As we discussed, we will need a ranking algorithm to rank each tweet according to its relevance to each specific user.</p>
<p>For example, Facebook used to utilize an <a href="https://en.wikipedia.org/wiki/EdgeRank">EdgeRank</a> algorithm, here, the rank of each feed item is described by:</p>
<p>$$
Rank = Affinity \times Weight \times Decay
$$</p>
<p>Where,</p>
<p><code>Affinity</code>: is the &ldquo;closeness&rdquo; of the user to the creator of the edge. If a user frequently likes, comments, or messages the edge creator, then the value of affinity will be higher, resulting in a higher rank for the post.</p>
<p><code>Weight</code>: is the value assigned according to each edge. A comment can have a higher weightage than likes, and thus a post with more comments is more likely to get a higher rank.</p>
<p><code>Decay</code>: is the measure of the creation of the edge. The older the edge, the lesser will be the value of decay and eventually the rank.</p>
<p>Nowadays, algorithms are much more complex and ranking is done using machine learning models which can take thousands of factors into consideration.</p>
<h3 id="retweets">Retweets</h3>
<p>Retweets are one of our extended requirements. To implement this feature we can simply create a new tweet with the user id of the user retweeting the original tweet and then modify the <code>type</code> enum and <code>content</code> property of the new tweet to link it with the original tweet.</p>
<p>For example, the <code>type</code> enum property can be of type tweet, similar to text, video, etc and <code>content</code> can be the id of the original tweet. Here the first row indicates the original tweet while the second row is how we can represent a retweet.</p>
<table>
<thead>
<tr>
<th>id</th>
<th>userID</th>
<th>type</th>
<th>content</th>
<th>createdAt</th>
</tr>
</thead>
<tbody>
<tr>
<td>ad34-291a-45f6-b36c</td>
<td>7a2c-62c4-4dc8-b1bb</td>
<td>text</td>
<td>Hey, this is my first tweet‚Ä¶</td>
<td>1658905644054</td>
</tr>
<tr>
<td>f064-49ad-9aa2-84a6</td>
<td>6aa2-2bc9-4331-879f</td>
<td>tweet</td>
<td>ad34-291a-45f6-b36c</td>
<td>1658906165427</td>
</tr>
</tbody>
</table>
<p>This is a very basic implementation, to improve this we can create a separate table itself to store retweets.</p>
<h3 id="search">Search</h3>
<p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href="https://www.elastic.co">Elasticsearch</a> can help us with this use case.</p>
<p><a href="https://www.elastic.co">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href="https://lucene.apache.org">Apache Lucene</a>.</p>
<p><strong>How do we identify trending topics?</strong></p>
<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries, hashtags, and topics in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism. Our ranking algorithm can also be applied to the trending topics to give them more weight and personalize them for the user.</p>
<h3 id="notifications-1">Notifications</h3>
<p>Push notifications are an integral part of any social media platform. We can use a message queue or a message broker such as <a href="https://kafka.apache.org">Apache Kafka</a> with the notification service to dispatch requests to <a href="https://firebase.google.com/docs/cloud-messaging">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/whatsapp#notifications">WhatsApp</a> system design where we discuss push notifications.</em></p>
<h2 id="detailed-design-3">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-3">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent Hashing</a>.</em></p>
<h3 id="mutual-friends">Mutual friends</h3>
<p>For mutual friends, we can build a social graph for every user. Each node in the graph will represent a user and a directional edge will represent followers and followees. After that, we can traverse the followers of a user to find and suggest a mutual friend. This would require a graph database such as <a href="https://neo4j.com">Neo4j</a> and <a href="https://www.arangodb.com">ArangoDB</a>.</p>
<p>This is a pretty simple algorithm, to improve our suggestion accuracy, we will need to incorporate a recommendation model which uses machine learning as part of our algorithm.</p>
<h3 id="metrics-and-analytics-1">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. As we will be using <a href="https://kafka.apache.org">Apache Kafka</a> to publish all sorts of events, we can process these events and run analytics on the data using <a href="https://spark.apache.org">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing.</p>
<h3 id="caching-3">Caching</h3>
<p>In a social media application, we have to be careful about using cache as our users expect the latest data. So, to prevent usage spikes from our resources we can cache the top 20% of the tweets.</p>
<p>To further improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won&rsquo;t have to retrieve old messages unless requested.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>We can use solutions like <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching">Caching</a>.</em></p>
<h3 id="media-access-and-storage-1">Media access and storage</h3>
<p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>
<p>But where can we store files at scale? Well, <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage">object storage</a> is what we&rsquo;re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs">HDFS</a> or <a href="https://www.gluster.org">GlusterFS</a>.</p>
<h3 id="content-delivery-network-cdn-2">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn">Cloudflare CDN</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-3">Identify and resolve bottlenecks</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-advanced-design.jpg" alt="twitter-advanced-design"  />
</p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
<li>&ldquo;How can we reduce media storage costs&rdquo;?</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers">message broker</a> such as <a href="https://kafka.apache.org">Apache Kafka</a> or <a href="https://nats.io">NATS</a> to make our notification system more robust.</li>
<li>We can add media processing and compression capabilities to the media service to compress large files which will save a lot of storage space and reduce cost.</li>
</ul>
<h1 id="netflix">Netflix</h1>
<p>Let&rsquo;s design a <a href="https://netflix.com">Netflix</a> like video streaming service, similar to services like <a href="https://www.primevideo.com">Amazon Prime Video</a>, <a href="https://www.disneyplus.com">Disney Plus</a>, <a href="https://www.hulu.com">Hulu</a>, <a href="https://youtube.com">Youtube</a>, <a href="https://vimeo.com">Vimeo</a>, etc.</p>
<h2 id="what-is-netflix">What is Netflix?</h2>
<p>Netflix is a subscription-based streaming service that allows its members to watch TV shows and movies on an internet-connected device. It is available on platforms such as the Web, iOS, Android, TV, etc.</p>
<h2 id="requirements-3">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-4">Functional requirements</h3>
<ul>
<li>Users should be able to stream and share videos.</li>
<li>The content team (or users in YouTube&rsquo;s case) should be able to upload new videos (movies, tv shows episodes, and other content).</li>
<li>Users should be able to search for videos using titles or tags.</li>
<li>Users should be able to comment on a video similar to YouTube.</li>
</ul>
<h3 id="non-functional-requirements-4">Non-Functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>High reliability, no uploads should be lost.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-4">Extended requirements</h3>
<ul>
<li>Certain content should be <a href="https://en.wikipedia.org/wiki/Geo-blocking">geo-blocked</a>.</li>
<li>Resume video playback from the point user left off.</li>
<li>Record metrics and analytics of videos.</li>
</ul>
<h2 id="estimation-and-constraints-4">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-3">Traffic</h3>
<p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user watches 5 videos a day. This gives us 1 billion videos watched per day.</p>
<p>$$
200 \space million \times 5 \space videos = 1 \space billion/day
$$</p>
<p>Assuming, a <code>200:1</code> read/write ratio, about 50 million videos will be uploaded every day.</p>
<p>$$
\frac{1}{200} \times 1 \space billion = 50 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-5">Storage</h3>
<p>If we assume each video is 100 MB on average, we will require about 5 PB of storage every day.</p>
<p>$$
50 \space million \times 100 \space MB = 5 \space PB/day
$$</p>
<p>And for 10 years, we will require an astounding 18,250 PB of storage.</p>
<p>$$
5 \space PB \times 365 \space days \times 10 \space years = \sim 18,250 \space PB
$$</p>
<h3 id="bandwidth-3">Bandwidth</h3>
<p>As our system is handling 5 PB of ingress every day, we will require a minimum bandwidth of around 58 GB per second.</p>
<p>$$
\frac{5 \space PB}{(24 \space hrs \times 3600 \space seconds)} = \sim 58 \space GB/second
$$</p>
<h3 id="high-level-estimate-3">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>200 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~5 PB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~18,250 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~58 GB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-4">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/netflix-datamodel.jpg" alt="netflix-datamodel"  />
</p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>
<p><strong>videos</strong></p>
<p>As the name suggests, this table will store videos and their properties such as <code>title</code>, <code>streamURL</code>, <code>tags</code>, etc. We will also store the corresponding <code>userID</code>.</p>
<p><strong>tags</strong></p>
<p>This table will simply store tags associated with a video.</p>
<p><strong>views</strong></p>
<p>This table helps us to store all the views received on a video.</p>
<p><strong>comments</strong></p>
<p>This table stores all the comments received on a video (like YouTube).</p>
<h3 id="what-kind-of-database-should-we-use-3">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-4">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="upload-a-video">Upload a video</h3>
<p>Given a byte stream, this API enables video to be uploaded to our service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">uploadVideo</span><span class="p">(</span><span class="nx">title</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">description</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">data</span>: <span class="kt">Stream</span><span class="p">&lt;</span><span class="nt">byte</span><span class="p">&gt;,</span> <span class="nx">tags?</span>: <span class="kt">string</span><span class="p">[])</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Title (<code>string</code>): Title of the new video.</p>
<p>Description (<code>string</code>): Description of the new video.</p>
<p>Data (<code>Byte[]</code>): Byte stream of the video data.</p>
<p>Tags (<code>string[]</code>): Tags for the video <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="streaming-a-video">Streaming a video</h3>
<p>This API allows our users to stream a video with the preferred codec and resolution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">streamVideo</span><span class="p">(</span><span class="nx">videoID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">codec</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;,</span> <span class="nx">resolution</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">int</span><span class="p">&gt;,</span> <span class="nx">offset?</span>: <span class="kt">int</span><span class="p">)</span><span class="o">:</span> <span class="nx">VideoStream</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Video ID (<code>UUID</code>): ID of the video that needs to be streamed.</p>
<p>Codec (<code>Enum&lt;string&gt;</code>): Required <a href="https://en.wikipedia.org/wiki/Video_codec">codec</a> of the requested video, such as <code>h.265</code>, <code>h.264</code>, <code>VP9</code>, etc.</p>
<p>Resolution (<code>Tuple&lt;int&gt;</code>): <a href="https://en.wikipedia.org/wiki/Display_resolution">Resolution</a> of the requested video.</p>
<p>Offset (<code>int</code>): Offset of the video stream in seconds to stream data from any point in the video <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Stream (<code>VideoStream</code>): Data stream of the requested video.</p>
<h3 id="search-for-a-video">Search for a video</h3>
<p>This API will enable our users to search for a video based on its title or tags.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">searchVideo</span><span class="p">(</span><span class="nx">query</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">nextPage?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Video</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Query (<code>string</code>): Search query from the user.</p>
<p>Next Page (<code>string</code>): Token for the next page, this can be used for pagination <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Videos (<code>Video[]</code>): All the videos available for a particular search query.</p>
<h3 id="add-a-comment">Add a comment</h3>
<p>This API will allow our users to post a comment on a video (like YouTube).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">comment</span><span class="p">(</span><span class="nx">videoID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">comment</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>VideoID (<code>UUID</code>): ID of the video user wants to comment on.</p>
<p>Comment (<code>string</code>): The text content of the comment.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-3">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-2">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This service handles user-related concerns such as authentication and user information.</p>
<p><strong>Stream Service</strong></p>
<p>The tweet service will handle video streaming-related functionality.</p>
<p><strong>Search Service</strong></p>
<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the video uploads and processing. It will be discussed in detail separately.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="video-processing">Video processing</h3>
<p>There are so many variables in play when it comes to processing a video. For example, an average data size of two-hour raw 8K footage from a high-end camera can easily be up to 4 TB, thus we need to have some kind of processing to reduce both storage and delivery costs.</p>
<p>Here&rsquo;s how we can process videos once they&rsquo;re uploaded by the content team (or users in YouTube&rsquo;s case) and are queued for processing in our <a href="https://karanpratapsingh.com/courses/system-design/message-queues">message queue</a>.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/video-processing-pipeline.jpg" alt="video-processing-pipeline"  />
</p>
<p>Let&rsquo;s discuss how this works:</p>
<ul>
<li><strong>File Chunker</strong></li>
</ul>
<p>This is the first step of our processing pipeline. File chunking is the process of splitting a file into smaller pieces called chunks. It can help us eliminate duplicate copies of repeating data on storage, and reduces the amount of data sent over the network by only selecting changed chunks.</p>
<p>Usually, a video file can be split into equal size chunks based on timestamps but Netflix instead splits chunks based on scenes, this slight variation becomes a huge factor for a better user experience as whenever the client requests a chunk from the server, there is a lower chance of interruption as a complete scene will be retrieved.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/file-chunking.jpg" alt="file-chunking"  />
</p>
<ul>
<li><strong>Content Filter</strong></li>
</ul>
<p>This step checks if the video adheres to the content policy of the platform, this can be pre-approved in the case of Netflix as per the <a href="https://en.wikipedia.org/wiki/Motion_picture_content_rating_system">content rating</a> of the media or can be strictly enforced like YouTube.</p>
<p>This entire step is done by a machine learning model which performs copyright, piracy, and NSFW checks. If issues are found, we can push the task to a <a href="https://karanpratapsingh.com/courses/system-design/message-queues#dead-letter-queues">dead-letter queue (DLQ)</a> and someone from the moderation team can do further inspection.</p>
<ul>
<li><strong>Transcoder</strong></li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Transcoding">Transcoding</a> is a process in which the original data is decoded to an intermediate uncompressed format, which is then encoded into the target format. This process uses different <a href="https://en.wikipedia.org/wiki/Video_codec">codecs</a> to perform bitrate adjustment, image downsampling, or re-encoding the media.</p>
<p>This results in a smaller size file and a much more optimized format for the target devices. Standalone solutions such as <a href="https://ffmpeg.org">FFmpeg</a> or cloud-based solutions like <a href="https://aws.amazon.com/mediaconvert">AWS Elemental MediaConvert</a> can be used to implement this step of the pipeline.</p>
<ul>
<li><strong>Quality Conversion</strong></li>
</ul>
<p>This is the last step of the processing pipeline and as the name suggests, this step handles the conversion of the transcoded media from the previous step into different resolutions such as 4K, 1440p, 1080p, 720p, etc.</p>
<p>This allows us to fetch the desired quality of the video as per the user&rsquo;s request, and once the media file finishes processing, it will be uploaded to a distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs">HDFS</a>, <a href="https://www.gluster.org">GlusterFS</a>, or an <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage">object storage</a> such as <a href="https://aws.amazon.com/s3">Amazon S3</a> for later retrieval during streaming.</p>
<p><em>Note: We can add additional steps such as subtitles and thumbnails generation as part of our pipeline.</em></p>
<p><strong>Why are we using a message queue?</strong></p>
<p>Processing videos as a long-running task makes much more sense, and a <a href="https://karanpratapsingh.com/courses/system-design/message-queues">message queue</a> also decouples our video processing pipeline from the uploads functionality. We can use something like <a href="https://aws.amazon.com/sqs">Amazon SQS</a> or <a href="https://www.rabbitmq.com">RabbitMQ</a> to support this.</p>
<h3 id="video-streaming">Video streaming</h3>
<p>Video streaming is a challenging task from both the client and server perspectives. Moreover, internet connection speeds vary quite a lot between different users. To make sure users don&rsquo;t re-fetch the same content, we can use a <a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network">Content Delivery Network (CDN)</a>.</p>
<p>Netflix takes this a step further with its <a href="https://openconnect.netflix.com">Open Connect</a> program. In this approach, they partner with thousands of Internet Service Providers (ISPs) to localize their traffic and deliver their content more efficiently.</p>
<p><strong>What is the difference between Netflix&rsquo;s Open Connect and a traditional Content Delivery Network (CDN)?</strong></p>
<p>Netflix Open Connect is our purpose-built <a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network">Content Delivery Network (CDN)</a> responsible for serving Netflix&rsquo;s video traffic. Around 95% of the traffic globally is delivered via direct connections between Open Connect and the ISPs their customers use to access the internet.</p>
<p>Currently, they have Open Connect Appliances (OCAs) in over 1000 separate locations around the world. In case of issues, Open Connect Appliances (OCAs) can failover, and the traffic can be re-routed to Netflix servers.</p>
<p>Additionally, we can use <a href="https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming">Adaptive bitrate streaming</a> protocols such as <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming">HTTP Live Streaming (HLS)</a> which is designed for reliability and it dynamically adapts to network conditions by optimizing playback for the available speed of the connections.</p>
<p>Lastly, for playing the video from where the user left off (part of our extended requirements), we can simply use the <code>offset</code> property we stored in the <code>views</code> table to retrieve the scene chunk at that particular timestamp and resume the playback for the user.</p>
<h3 id="searching">Searching</h3>
<p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href="https://www.elastic.co">Elasticsearch</a> can help us with this use case.</p>
<p><a href="https://www.elastic.co">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href="https://lucene.apache.org">Apache Lucene</a>.</p>
<p><strong>How do we identify trending content?</strong></p>
<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism.</p>
<h3 id="sharing">Sharing</h3>
<p>Sharing content is an important part of any platform, for this, we can have some sort of URL shortener service in place that can generate short URLs for the users to share.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/url-shortener">URL Shortener</a> system design.</em></p>
<h2 id="detailed-design-4">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-4">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent Hashing</a>.</em></p>
<h3 id="geo-blocking">Geo-blocking</h3>
<p>Platforms like Netflix and YouTube use <a href="https://en.wikipedia.org/wiki/Geo-blocking">Geo-blocking</a> to restrict content in certain geographical areas or countries. This is primarily done due to legal distribution laws that Netflix has to adhere to when they make a deal with the production and distribution companies. In the case of YouTube, this will be controlled by the user during the publishing of the content.</p>
<p>We can determine the user&rsquo;s location either using their <a href="https://karanpratapsingh.com/courses/system-design/ip">IP</a> or region settings in their profile then use services like <a href="https://aws.amazon.com/cloudfront">Amazon CloudFront</a> which supports a geographic restrictions feature or a <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html">geolocation routing policy</a> with <a href="https://aws.amazon.com/route53">Amazon Route53</a> to restrict the content and re-route the user to an error page if the content is not available in that particular region or country.</p>
<h3 id="recommendations">Recommendations</h3>
<p>Netflix uses a machine learning model which uses the user&rsquo;s viewing history to predict what the user might like to watch next, an algorithm like <a href="https://en.wikipedia.org/wiki/Collaborative_filtering">Collaborative Filtering</a> can be used.</p>
<p>However, Netflix (like YouTube) uses its own algorithm called Netflix Recommendation Engine which can track several data points such as:</p>
<ul>
<li>User profile information like age, gender, and location.</li>
<li>Browsing and scrolling behavior of the user.</li>
<li>Time and date a user watched a title.</li>
<li>The device which was used to stream the content.</li>
<li>The number of searches and what terms were searched.</li>
</ul>
<p><em>For more detail, refer to <a href="https://research.netflix.com/research-area/recommendations">Netflix recommendation research</a>.</em></p>
<h3 id="metrics-and-analytics-2">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href="https://spark.apache.org">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>
<h3 id="caching-4">Caching</h3>
<p>In a streaming platform, caching is important. We have to be able to cache as much static media content as possible to improve user experience. We can use solutions like <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching">Caching</a>.</em></p>
<h3 id="media-streaming-and-storage">Media streaming and storage</h3>
<p>As most of our storage space will be used for storing media files such as thumbnails and videos. Per our discussion earlier, the media service will be handling both the upload and processing of media files.</p>
<p>We will use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs">HDFS</a>, <a href="https://www.gluster.org">GlusterFS</a>, or an <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage">object storage</a> such as <a href="https://aws.amazon.com/s3">Amazon S3</a> for storage and streaming of the content.</p>
<h3 id="content-delivery-network-cdn-3">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn">Cloudflare CDN</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-4">Identify and resolve bottlenecks</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/netflix-advanced-design.jpg" alt="netflix-advanced-design"  />
</p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
</ul>
<h1 id="uber">Uber</h1>
<p>Let&rsquo;s design an <a href="https://uber.com">Uber</a> like ride-hailing service, similar to services like <a href="https://www.lyft.com">Lyft</a>, <a href="https://www.olacabs.com">OLA Cabs</a>, etc.</p>
<h2 id="what-is-uber">What is Uber?</h2>
<p>Uber is a mobility service provider, allowing users to book rides and a driver to transport them in a way similar to a taxi. It is available on the web and mobile platforms such as Android and iOS.</p>
<h2 id="requirements-4">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-5">Functional requirements</h3>
<p>We will design our system for two types of users: Customers and Drivers.</p>
<p><strong>Customers</strong></p>
<ul>
<li>Customers should be able to see all the cabs in the vicinity with an ETA and pricing information.</li>
<li>Customers should be able to book a cab to a destination.</li>
<li>Customers should be able to see the location of the driver.</li>
</ul>
<p><strong>Drivers</strong></p>
<ul>
<li>Drivers should be able to accept or deny the customer requested ride.</li>
<li>Once a driver accepts the ride, they should see the pickup location of the customer.</li>
<li>Drivers should be able to mark the trip as complete on reaching the destination.</li>
</ul>
<h3 id="non-functional-requirements-5">Non-Functional requirements</h3>
<ul>
<li>High reliability.</li>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-5">Extended requirements</h3>
<ul>
<li>Customers can rate the trip after it&rsquo;s completed.</li>
<li>Payment processing.</li>
<li>Metrics and analytics.</li>
</ul>
<h2 id="estimation-and-constraints-5">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-4">Traffic</h3>
<p>Let us assume we have 100 million daily active users (DAU) with 1 million drivers and on average our platform enables 10 million rides daily.</p>
<p>If on average each user performs 10 actions (such as request a check available rides, fares, book rides, etc.) we will have to handle 1 billion requests daily.</p>
<p>$$
100 \space million \times 10 \space actions = 1 \space billion/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-6">Storage</h3>
<p>If we assume each message on average is 400 bytes, we will require about 400 GB of database storage every day.</p>
<p>$$
1 \space billion \times 400 \space bytes = \sim 400 \space GB/day
$$</p>
<p>And for 10 years, we will require about 1.4 PB of storage.</p>
<p>$$
400 \space GB \times 10 \space years \times 365 \space days = \sim 1.4 \space PB
$$</p>
<h3 id="bandwidth-4">Bandwidth</h3>
<p>As our system is handling 400 GB of ingress every day, we will require a minimum bandwidth of around 4 MB per second.</p>
<p>$$
\frac{400 \space GB}{(24 \space hrs \times 3600 \space seconds)} = \sim 5 \space MB/second
$$</p>
<h3 id="high-level-estimate-4">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>100 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~400 GB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~1.4 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~5 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-5">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/uber-datamodel.jpg" alt="uber-datamodel"  />
</p>
<p>We have the following tables:</p>
<p><strong>customers</strong></p>
<p>This table will contain a customer&rsquo;s information such as <code>name</code>, <code>email</code>, and other details.</p>
<p><strong>drivers</strong></p>
<p>This table will contain a driver&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code> and other details.</p>
<p><strong>trips</strong></p>
<p>This table represents the trip taken by the customer and stores data such as <code>source</code>, <code>destination</code>, and <code>status</code> of the trip.</p>
<p><strong>cabs</strong></p>
<p>This table stores data such as the registration number, and type (like Uber Go, Uber XL, etc.) of the cab that the driver will be driving.</p>
<p><strong>ratings</strong></p>
<p>As the name suggests, this table stores the <code>rating</code> and <code>feedback</code> for the trip.</p>
<p><strong>payments</strong></p>
<p>The payments table contains the payment-related data with the corresponding <code>tripID</code>.</p>
<h3 id="what-kind-of-database-should-we-use-4">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-5">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="request-a-ride">Request a Ride</h3>
<p>Through this API, customers will be able to request a ride.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">requestRide</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">source</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">float</span><span class="p">&gt;,</span> <span class="nx">destination</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">float</span><span class="p">&gt;,</span> <span class="nx">cabType</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;,</span> <span class="nx">paymentMethod</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;)</span><span class="o">:</span> <span class="nx">Ride</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Source (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip&rsquo;s starting location.</p>
<p>Destination (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip&rsquo;s destination.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="cancel-the-ride">Cancel the Ride</h3>
<p>This API will allow customers to cancel the ride.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">cancelRide</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">reason?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Reason (<code>UUID</code>): Reason for canceling the ride <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="accept-or-deny-the-ride">Accept or Deny the Ride</h3>
<p>This API will allow the driver to accept or deny the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1">1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">acceptRide</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rideID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">denyRide</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rideID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Driver ID (<code>UUID</code>): ID of the driver.</p>
<p>Ride ID (<code>UUID</code>): ID of the customer requested ride.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="start-or-end-the-trip">Start or End the Trip</h3>
<p>Using this API, a driver will be able to start and end the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">startTrip</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">endTrip</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Driver ID (<code>UUID</code>): ID of the driver.</p>
<p>Trip ID (<code>UUID</code>): ID of the requested trip.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="rate-the-trip">Rate the Trip</h3>
<p>This API will enable customers to rate the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">rateTrip</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rating</span>: <span class="kt">int</span><span class="p">,</span> <span class="nx">feedback?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Trip ID (<code>UUID</code>): ID of the completed trip.</p>
<p>Rating (<code>int</code>): Rating of the trip.</p>
<p>Feedback (<code>string</code>): Feedback about the trip by the customer <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-4">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-3">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>Customer Service</strong></p>
<p>This service handles customer-related concerns such as authentication and customer information.</p>
<p><strong>Driver Service</strong></p>
<p>This service handles driver-related concerns such as authentication and driver information.</p>
<p><strong>Ride Service</strong></p>
<p>This service will be responsible for ride matching and quadtree aggregation. It will be discussed in detail separately.</p>
<p><strong>Trip Service</strong></p>
<p>This service handles trip-related functionality in our system.</p>
<p><strong>Payment Service</strong></p>
<p>This service will be responsible for handling payments in our system.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="how-is-the-service-expected-to-work">How is the service expected to work?</h3>
<p>Here&rsquo;s how our service is expected to work:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/uber-working.jpg" alt="uber-working"  />
</p>
<ol>
<li>Customer requests a ride by specifying the source, destination, cab type, payment method, etc.</li>
<li>Ride service registers this request, finds nearby drivers, and calculates the estimated time of arrival (ETA).</li>
<li>The request is then broadcasted to the nearby drivers for them to accept or deny.</li>
<li>If the driver accepts, the customer is notified about the live location of the driver with the estimated time of arrival (ETA) while they wait for pickup.</li>
<li>The customer is picked up and the driver can start the trip.</li>
<li>Once the destination is reached, the driver will mark the ride as complete and collect payment.</li>
<li>After the payment is complete, the customer can leave a rating and feedback for the trip if they like.</li>
</ol>
<h3 id="location-tracking">Location Tracking</h3>
<p>How do we efficiently send and receive live location data from the client (customers and drivers) to our backend? We have two different options:</p>
<p><strong>Pull model</strong></p>
<p>The client can periodically send an HTTP request to servers to report its current location and receive ETA and pricing information. This can be achieved via something like <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling">Long polling</a>.</p>
<p><strong>Push model</strong></p>
<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets">WebSockets</a> or <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse">Server-Sent Events (SSE)</a> for this.</p>
<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets">WebSockets</a> is a better choice because then we can push data to the client once it&rsquo;s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse">Server-Sent Events (SSE)</a> which are only unidirectional.</p>
<p>Additionally, the client application should have some sort of background job mechanism to ping GPS location while the application is in the background.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>
<h3 id="ride-matching">Ride Matching</h3>
<p>We need a way to efficiently store and query nearby drivers. Let&rsquo;s explore different solutions we can incorporate into our design.</p>
<p><strong>SQL</strong></p>
<p>We already have access to the latitude and longitude of our customers, and with databases like <a href="https://www.postgresql.org">PostgreSQL</a> and <a href="https://www.mysql.com">MySQL</a> we can perform a query to find nearby driver locations given a latitude and longitude (X, Y) within a radius (R).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-24-1"><a class="lnlinks" href="#hl-24-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">locations</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">X</span><span class="o">-</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">X</span><span class="o">+</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">long</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">Y</span><span class="o">-</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">Y</span><span class="o">+</span><span class="n">R</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>However, this is not scalable, and performing this query on large datasets will be quite slow.</p>
<p><strong>Geohashing</strong></p>
<p>Geohashing is a <a href="https://en.wikipedia.org/wiki/Address_geocoding">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href="https://twitter.com/gniemeyer">Gustavo Niemeyer</a> in 2008.</p>
<p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/geohashing.jpg" alt="geohashing"  />
</p>
<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>
<p>Now, using the customer&rsquo;s geohash we can determine the nearest available driver by simply comparing it with the driver&rsquo;s geohash. For better performance, we will index and store the geohash of the driver in memory for faster retrieval.</p>
<p><strong>Quadtrees</strong></p>
<p>A Quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href="https://en.wikipedia.org/wiki/Octree">Octrees</a> which are used to partition three-dimensional space.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/quadtree.jpg" alt="quadtree"  />
</p>
<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates.</p>
<p>We can save further computation by only subdividing a node after a certain threshold.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/quadtree-subdivision.jpg" alt="quadtree-subdivision"  />
</p>
<p>Quadtree seems perfect for our use case, we can update the Quadtree every time we receive a new location update from the driver. To reduce the load on the quadtree servers we can use an in-memory datastore such as <a href="https://redis.io">Redis</a> to cache the latest updates. And with the application of mapping algorithms such as the <a href="https://en.wikipedia.org/wiki/Hilbert_curve">Hilbert curve</a>, we can perform efficient range queries to find nearby drivers for the customer.</p>
<p><strong>What about race conditions?</strong></p>
<p>Race conditions can easily occur when a large number of customers will be requesting rides simultaneously. To avoid this, we can wrap our ride matching logic in a <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)">Mutex</a> to avoid any race conditions. Furthermore, every action should be transactional in nature.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/transactions">Transactions</a> and <a href="https://karanpratapsingh.com/courses/system-design/distributed-transactions">Distributed Transactions</a>.</em></p>
<p><strong>How to find the best drivers nearby?</strong></p>
<p>Once we have a list of nearby drivers from the Quadtree servers, we can perform some sort of ranking based on parameters like average ratings, relevance, past customer feedback, etc. This will allow us to broadcast notifications to the best available drivers first.</p>
<p><strong>Dealing with high demand</strong></p>
<p>In cases of high demand, we can use the concept of Surge Pricing. Surge pricing is a dynamic pricing method where prices are temporarily increased as a reaction to increased demand and mostly limited supply. This surge price can be added to the base price of the trip.</p>
<p><em>For more details, learn how <a href="https://www.uber.com/us/en/drive/driver-app/how-surge-works">surge pricing works</a> with Uber.</em></p>
<h3 id="payments">Payments</h3>
<p>Handling payments at scale is challenging, to simplify our system we can use a third-party payment processor like <a href="https://stripe.com">Stripe</a> or <a href="https://www.paypal.com">PayPal</a>. Once the payment is complete, the payment processor will redirect the user back to our application and we can set up a <a href="https://en.wikipedia.org/wiki/Webhook">webhook</a> to capture all the payment-related data.</p>
<h3 id="notifications-2">Notifications</h3>
<p>Push notifications will be an integral part of our platform. We can use a message queue or a message broker such as <a href="https://kafka.apache.org">Apache Kafka</a> with the notification service to dispatch requests to <a href="https://firebase.google.com/docs/cloud-messaging">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/whatsapp#notifications">WhatsApp</a> system design where we discuss push notifications.</em></p>
<h2 id="detailed-design-5">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-5">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a>) can be a good first step. We can shard our database either based on existing <a href="https://karanpratapsingh.com/courses/system-design/sharding#partitioning-criteria">partition schemes</a> or regions. If we divide the locations into regions using let&rsquo;s say zip codes, we can effectively store all the data in a given region on a fixed node. But this can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing">Consistent Hashing</a>.</em></p>
<h3 id="metrics-and-analytics-3">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href="https://spark.apache.org">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>
<h3 id="caching-5">Caching</h3>
<p>In a location services-based platform, caching is important. We have to be able to cache the recent locations of the customers and drivers for fast retrieval. We can use solutions like <a href="https://redis.io">Redis</a> or <a href="https://memcached.org">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching">Caching</a>.</em></p>
<h2 id="identify-and-resolve-bottlenecks-5">Identify and resolve bottlenecks</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/uber-advanced-design.jpg" alt="uber-advanced-design"  />
</p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers">message broker</a> such as <a href="https://kafka.apache.org">Apache Kafka</a> or <a href="https://nats.io">NATS</a> to make our notification system more robust.</li>
</ul>
<h1 id="next-steps">Next Steps</h1>
<p>Congratulations, you&rsquo;ve finished the course!</p>
<p>Now that you know the fundamentals of System Design, here are some additional resources:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=UEAMfLPZZhE&amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB">Distributed Systems</a> (by Dr. Martin Kleppmann)</li>
<li><a href="https://www.amazon.in/System-Design-Interview-insiders-Second/dp/B08CMF2CQF">System Design Interview: An Insider&rsquo;s Guide</a></li>
<li><a href="https://microservices.io">Microservices</a> (by Chris Richardson)</li>
<li><a href="https://en.wikipedia.org/wiki/Serverless_computing">Serverless computing</a></li>
<li><a href="https://kubernetes.io">Kubernetes</a></li>
</ul>
<p>It is also recommended to actively follow engineering blogs of companies putting what we learned in the course into practice at scale:</p>
<ul>
<li><a href="https://engineering.microsoft.com">Microsoft Engineering</a></li>
<li><a href="https://googleresearch.blogspot.com">Google Research Blog</a></li>
<li><a href="https://techblog.netflix.com">Netflix Tech Blog</a></li>
<li><a href="https://aws.amazon.com/blogs/aws">AWS Blog</a></li>
<li><a href="https://www.facebook.com/Engineering">Facebook Engineering</a></li>
<li><a href="https://eng.uber.com">Uber Engineering Blog</a></li>
<li><a href="https://nerds.airbnb.com">Airbnb Engineering</a></li>
<li><a href="https://github.blog/category/engineering">GitHub Engineering Blog</a></li>
<li><a href="https://software.intel.com/en-us/blogs">Intel Software Blog</a></li>
<li><a href="https://engineering.linkedin.com/blog">LinkedIn Engineering</a></li>
<li><a href="https://medium.com/paypal-engineering">Paypal Developer Blog</a></li>
<li><a href="https://blog.twitter.com/engineering">Twitter Engineering</a></li>
</ul>
<p>Last but not least, volunteer for new projects at your company, and learn from senior engineers and architects to further improve your system design skills.</p>
<p>I hope this course was a great learning experience. I would love to hear feedback from you.</p>
<p>Wishing you all the best for further learning!</p>
<h1 id="references">References</h1>
<p>Here are the resources that were referenced while creating this course.</p>
<ul>
<li><a href="https://www.cloudflare.com/learning">Cloudflare learning center</a></li>
<li><a href="https://www.ibm.com/blogs">IBM Blogs</a></li>
<li><a href="https://www.fastly.com/blog">Fastly Blogs</a></li>
<li><a href="https://ns1.com/blog">NS1 Blogs</a></li>
<li><a href="https://www.educative.io/courses/grokking-the-system-design-interview">Grokking the System Design Interview</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer">System Design Primer</a></li>
<li><a href="https://aws.amazon.com/blogs">AWS Blogs</a></li>
<li><a href="https://martinfowler.com">Martin Fowler</a></li>
<li><a href="https://www.pagerduty.com/resources">PagerDuty resources</a></li>
<li><a href="https://blogs.vmware.com/learning">VMWare Blogs</a></li>
</ul>
<p><sup> Blog Disclaimer: This webpage is a modification of <a href="https://github.com/karanpratapsingh">@karanpratapsingh</a>&rsquo;s <a href="https://github.com/karanpratapsingh/system-design">system-design</a> repository with <a href="https://github.com/karanpratapsingh/system-design/commits/main/LICENSE">CC BY-NC-ND 4.0</a> <a href="https://drive.google.com/file/d/1XNunkcoiM90bUjI3LbM8giyVPWc8xVNE/view">license</a>.</sup></p>
]]></content:encoded>
    </item>
    <item>
      <title>Operating System Notes For Placement</title>
      <link>https://samirpaulb.github.io/posts/operating-system-notes-for-placement/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/operating-system-notes-for-placement/</guid>
      <description>Operating System Notes For Tech Placements</description>
      <content:encoded><![CDATA[<h1 id="operating-systems-overview">Operating Systems Overview</h1>
<hr>
<h3><a href="https://github.com/github/docs/files/12329707/OS-All-Notes.pdf" target="_blank">Download PDF Notes‚û•</a></h3>
<iframe loading="lazy" src="https://scdn.web.app/books-pdfs/1-Placements-Notes/OS-All-Notes.pdf" width="100%" height="600"></iframe>
<p><strong>Operating Systems</strong> :</p>
<ul>
<li>Direct operational resources [CPU, memory, devices]</li>
<li>Enforces working policies [Resource usage, access]</li>
<li>Mitigates difficulty of complex tasks [abstract hardware details (using system calls)]</li>
</ul>
<h2 id="what-is-an-operating-system">What is an Operating System?</h2>
<ul>
<li>Intermediate between Hardware and Software applications</li>
<li>Hides hardware complexity (Read/write file storage, send/receive socket network)</li>
<li>Handles resource management (CPU scheduling, Memory management)</li>
<li>Provide isolation and protection (allocate different parts of memory to different applications so that applications don&rsquo;t overwrite other memory locations)</li>
</ul>
<h2 id="operating-system-definition">Operating System definition:</h2>
<p>An <strong>Operating System</strong> is a layer of systems software that:</p>
<ul>
<li>directly has privileged access to the underlying hardware;</li>
<li>hides the hardware complexity;</li>
<li>manages hardware on behalf of one or more application according to some predifined policies.</li>
<li>In addition, it ensures that applications are isolated and protected from one another.</li>
</ul>
<h2 id="operating-system-examples">Operating System examples:</h2>
<table>
<thead>
<tr>
<th>Desktop</th>
<th>Embedded devices</th>
</tr>
</thead>
<tbody>
<tr>
<td>Microsoft Windows</td>
<td>Android OS</td>
</tr>
<tr>
<td>MAC OS X (BSD)</td>
<td>iOS</td>
</tr>
<tr>
<td>LINUX</td>
<td>Symbian</td>
</tr>
<tr>
<td>&hellip;</td>
<td>&hellip;</td>
</tr>
</tbody>
</table>
<h2 id="os-elements">OS Elements</h2>
<ul>
<li><strong>Abstractions</strong> (corresponds to applications that OS executes)
<ul>
<li>process, thread, file, socket,  memory page</li>
</ul>
</li>
<li><strong>Mechanisms</strong>  (on top of Abstractions)
<ul>
<li>create, schedule, open, write, allocate</li>
</ul>
</li>
<li><strong>Policies</strong> (how mechanisms are used to manage underlying hardware)
<ul>
<li>Least Recently Used (LRU) , Earliest Deadline First (EDF), etc.</li>
</ul>
</li>
</ul>
<h4 id="example-">Example :</h4>
<p><em>Memory Management:</em></p>
<ul>
<li><strong>Abstractions</strong>: Memory page</li>
<li><strong>Mechanisms</strong>: Allocate, map to a process</li>
<li><strong>Policies</strong>: LRU</li>
</ul>
<h2 id="os-design-principles">OS Design Principles</h2>
<ul>
<li>Seperation of mechanism and policy
<ul>
<li>implement flexible mechanisms to support many policies</li>
<li>e.g. LRU, LFU, random</li>
</ul>
</li>
<li>Optimize for common case
<ul>
<li>Where will the OS be used?</li>
<li>What will the user want to execute on that machine?</li>
<li>What are the workload requirements?</li>
</ul>
</li>
</ul>
<h2 id="user-kernel-protection-boundary">User/ Kernel Protection Boundary</h2>
<ul>
<li>user-level =&gt; applications [underprivileged mode]</li>
<li>kernel-level =&gt; OS Kernel [privileged access, hardware access]</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/userkernelprotectionboundary.png" alt="userkernelprotectionboundary"  />
</p>
<ul>
<li>User-Kernel switch is supported by hardware.
<ul>
<li>using trap instructions</li>
<li>system calls like:
<ul>
<li>open (file)</li>
<li>send (socket)</li>
<li>malloc (memory)</li>
</ul>
</li>
<li>signals</li>
</ul>
</li>
</ul>
<h2 id="system-call-flowcart">System call Flowcart</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/systemcallflowchart.png" alt="systemcallflowchart"  />
</p>
<ul>
<li>To make a system call, an application must:
<ul>
<li>write arguments</li>
<li>save relevant data ast well defined location</li>
<li>make system calls using system call number</li>
</ul>
</li>
<li>In synchronous mode : wait until system call completes.</li>
</ul>
<h2 id="basic-os-services">Basic OS services</h2>
<ul>
<li>process management</li>
<li>file management</li>
<li>device management</li>
<li>memory management</li>
<li>storage management</li>
<li>security</li>
</ul>
<h2 id="linux-system-calls">Linux System Calls</h2>
<table>
<thead>
<tr>
<th>Task</th>
<th>Commands</th>
</tr>
</thead>
<tbody>
<tr>
<td>Process Control</td>
<td>fork (); exit(); wait();</td>
</tr>
<tr>
<td>File Manipulation</td>
<td>open(); read(); write();</td>
</tr>
<tr>
<td>Device Manipulation</td>
<td>ioctl(); read(); write();</td>
</tr>
<tr>
<td>Information Maintenance</td>
<td>getpid(); alarm(); sleep();</td>
</tr>
<tr>
<td>Communication</td>
<td>pipe(); shmget(); mmap();</td>
</tr>
<tr>
<td>Protection</td>
<td>chmod(); umask(); chown();</td>
</tr>
</tbody>
</table>
<h2 id="linux-architecture">Linux Architecture</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/linuxarch.png" alt="linuxarchitecture"  />
</p>
<hr>
<h1 id="process-and-process-management">Process and Process Management</h1>
<p><strong>Process</strong>: Instance of an executing program.</p>
<ul>
<li>State of execution
<ul>
<li>program counter, stack pointer</li>
</ul>
</li>
<li>Parts and temporary holding area
<ul>
<li>data, register state, occupies state in memory</li>
</ul>
</li>
<li>May require special hardware
<ul>
<li>I/O devices</li>
</ul>
</li>
</ul>
<p>Process is a state of a program when executing and loaded in memory (active state) as opposed to application (static state).</p>
<h2 id="what-does-a-process-look-like">What does a process look like?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/process.png" alt="Process"  />
</p>
<h3 id="type-of-state">Type of state</h3>
<ul>
<li>Text and Data
<ul>
<li>static state when process loads first</li>
</ul>
</li>
<li>Heap
<ul>
<li>dynamically created during execution</li>
</ul>
</li>
<li>Stack
<ul>
<li>grows and shrinks</li>
<li>LIFO queue (used to store task checkpoints to resume the original process after switching from another.)</li>
</ul>
</li>
</ul>
<h2 id="how-does-the-os-know-what-a-process-is-doing">How does the OS know what a process is doing?</h2>
<p>Using:</p>
<ul>
<li>Program counter</li>
<li>CPU registers</li>
<li>Stack pointer</li>
</ul>
<h2 id="process-control-block-pcb">Process Control Block (PCB)</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pcb.png" alt="PCB"  />
</p>
<ul>
<li>PCB created when process is created</li>
<li>Certain fields are updated when process state change e.g. memory mapping</li>
<li>or other fields that change very frequently e.g. Program Counter</li>
</ul>
<h2 id="how-is-pcb-used-">How is PCB used ?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/howpcbisused.png" alt="howpcbisused"  />
</p>
<h2 id="context-switch">Context Switch</h2>
<ul>
<li>Mechanism used to switch from the context of one process to another in the CPU.</li>
</ul>
<ul>
<li>They are expensive!
<ul>
<li>direct costs: no of cycles for load and store instructions.</li>
<li>indirect costs: <strong>COLD</strong> cache (read more <a href="https://stackoverflow.com/questions/22756092/what-does-it-mean-by-cold-cache-and-warm-cache-concept">here</a>)
<ul>
<li>Therefore limit frequency how context switching is done.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>When a cache is <strong>HOT</strong>, most process data is in the cache so the process performance will be at its best.</p>
<p>Sometimes there are situations where we have to Context Switch (higher priority process, timesharing, etc.)</p>
<h2 id="process-lifecycle">Process Lifecycle</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/processlifecycle.png" alt="processlifecycle"  />
</p>
<p>CPU is able to execute a process when the process is in Running or Ready state.</p>
<h2 id="process-creation">Process Creation</h2>
<h4 id="mechanisms">Mechanisms:</h4>
<ul>
<li>
<p>fork :</p>
<ul>
<li>copies the parent PCB into new child PCB</li>
<li>child contains execution at instruction after fork</li>
</ul>
</li>
<li>
<p>exec :</p>
<ul>
<li>replace child image</li>
<li>load new program and start from first instruction</li>
</ul>
</li>
</ul>
<h2 id="what-is-the-role-of-cpu-scheduler">What is the role of CPU scheduler?</h2>
<p>CPU scheduler determines which one of the currently ready processes will be dispatched to the CPU to start running, and how long it should run for.</p>
<p>OS must :</p>
<ul>
<li>preempt =&gt; interrupt and save current context</li>
<li>schedule =&gt; run scheduler to choose next process</li>
<li>dispatch =&gt; dispatch process 2 switch into its context</li>
</ul>
<h2 id="scheduling-design-decisions">Scheduling design decisions</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/timeslice.png" alt="timeslice"  />
</p>
<ul>
<li>What are the appropriate timeslice values?</li>
<li>Metrics to choose next process to run?</li>
</ul>
<h2 id="io">I/O</h2>
<p>A process can make way in the ready queue in a number of ways.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/io.png" alt="io"  />
</p>
<h2 id="can-process-interact">Can process interact?</h2>
<h4 id="inter-process-communication">Inter Process communication:</h4>
<p>IPC mechanisms:</p>
<ul>
<li>transfer data/info between address space</li>
<li>maintain protection and isolation</li>
<li>provide flexibility and performance</li>
</ul>
<p>Two types of IPC models:</p>
<h4 id="1-message-passing-ipc">1. <strong>Message Passing IPC</strong></h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/messagepassing.png" alt="messagepassing"  />
</p>
<ul>
<li>OS provides communication channel line shared buffer</li>
<li>Processes can write(send), read(receive) msg to/from channel</li>
</ul>
<p><strong>Advantages</strong>: OS manages the channel<br>
<strong>Disadvantages</strong>: Overheads</p>
<h4 id="2-shared-memory-ipc">2. <strong>Shared Memory IPC</strong></h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmemory.png" alt="sharedmemory"  />
</p>
<ul>
<li>OS establishes a shared channel and maps it into each processes&rsquo; address space</li>
<li>Processes directly write(send), read(receive) msg to/from this memory</li>
</ul>
<p><strong>Advantages</strong>: OS is out of the way after establishing the shared channel<br>
<strong>Disadvantages</strong>: Re-implementing a lot of code that could have been done by the OS</p>
<p>Overall, <strong>shared memory</strong> based communication is better if mapping memory between two processes is ammortized over a large number of messages.</p>
<hr>
<h1 id="threads-and-concurrency">Threads and Concurrency</h1>
<p><strong>Thread</strong>:</p>
<ul>
<li>is an active
<ul>
<li>entity executing unit of a process</li>
</ul>
</li>
<li>works simultaneously with others
<ul>
<li>many threads execute together</li>
</ul>
</li>
<li>requires coordination
<ul>
<li>sharing of I/O devices, CPUs, memory</li>
</ul>
</li>
</ul>
<h2 id="process-vs-thread">Process vs Thread</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/processvthread.png" alt="processvthread"  />
</p>
<h2 id="why-are-threads-useful">Why are threads useful?</h2>
<ul>
<li>Parallelization =&gt; Speedup</li>
<li>Specialization =&gt; Hot cache</li>
<li>Efficiency =&gt; lower memory requirement &amp; cheaper IPC</li>
<li>Time for context switch in threads is less, since memory is shared, hence mapping is not required between virtual and physical memory.
<ul>
<li>Therefore multithreading can be used to hide latency.</li>
</ul>
</li>
<li>Benefits to both applicatioons and OS code
<ul>
<li>Multithreaded OS kernel
<ul>
<li>threads working on behalf of applications</li>
<li>OS level services like daemons and drivers</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="what-do-we-need-to-support-threads">What do we need to support threads?</h2>
<ul>
<li>Threads data structure
<ul>
<li>Identify threads, keep track of resource usage..</li>
</ul>
</li>
<li>Mechanisms to create and manage threads</li>
<li>Mechanisms to safely coordinate among threads running concurrently in the same address space</li>
</ul>
<h2 id="concurrency-control-and-coordination">Concurrency control and Coordination</h2>
<ul>
<li>Mutual exclusion
<ul>
<li>Exclusive access to only one thread at a time</li>
<li><strong>mutex</strong></li>
</ul>
</li>
<li>Waiting on other threads
<ul>
<li>Specific condition before proceeding</li>
<li><strong>condition variable</strong></li>
</ul>
</li>
<li>Waking up other threads from wait state</li>
</ul>
<h2 id="threads-and-threads-creation">Threads and Threads creation</h2>
<ul>
<li>
<p>Thread data structure:</p>
<ul>
<li>Thread type, Thread ID, PC, SP, registers, stack, attributes.</li>
</ul>
</li>
<li>
<p><strong>Fork</strong>(proc, args)</p>
<ul>
<li>create a thread</li>
<li>not UNIX fork</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">t1 = fork(proc, args)   
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>Join</strong>(thread)
<ul>
<li>terminate a thread</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">child_result = join(t1)   
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="example">Example:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Thread  t1;
</span></span><span class="line"><span class="cl">Shared_List list;
</span></span><span class="line"><span class="cl">t1 = fork(safe_insert, 4);
</span></span><span class="line"><span class="cl">safe_insert(6);
</span></span><span class="line"><span class="cl">join(t1); //Optional
</span></span></code></pre></td></tr></table>
</div>
</div><p>The list can be accessed by reading shared variable.</p>
<h2 id="mutual-exclusion">Mutual Exclusion</h2>
<ul>
<li>Mutex data structure:
<ul>
<li>locked?, owner, blocked_threads</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3">3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4">4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lock(mutex){
</span></span><span class="line"><span class="cl">	//Critical Section
</span></span><span class="line"><span class="cl">    //Only one thread can access at a time
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">unlock(mutex)
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/mutex.png" alt="mutex"  />
</p>
<h2 id="producer-consumer-problem">Producer Consumer problem</h2>
<p>What if the processing you wish to perform with mutual exclusion needs to occur under certai conditions?</p>
<p>For e.g. The producer appends items to a list until the list is full, and the consumer has to print out all the items of the list once the list if full and then empty the list. Thus we have to execute the Consumer thread only under a certain condition (here- when the list becomes empty, print items).</p>
<p>Solution: Use <strong>Condition Variables</strong></p>
<ul>
<li>
<p>Wait(mutex, condition)</p>
<ul>
<li>mutex is automatically released and reaquired on wait</li>
<li>The consumer applies <em>Wait</em> until the list is full</li>
</ul>
</li>
<li>
<p>Signal(condition)</p>
<ul>
<li>Notify only one thread waiting on condition</li>
<li>The Producer applies <em>Signal</em> to the Consumer thread when the list is full</li>
</ul>
</li>
<li>
<p>Broadcast(condition)</p>
<ul>
<li>Notify all waiting threads</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/producerconsumer.png" alt="producerconsumer"  />
</p>
<h2 id="readers--writer-problem">Readers / Writer problem</h2>
<ul>
<li>0 or more readers can access a resource</li>
<li>0 or 1 writer can write the resource concurrently at the same time</li>
</ul>
<ul>
<li>
<p>One solution:</p>
<ul>
<li>lock on resource
<ul>
<li>good for writer</li>
<li>too restrictive for readers</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Better solution:</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3">3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4">4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5">5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">if ((read_count == 0) &amp; (read_count == 0))
</span></span><span class="line"><span class="cl">	R okay, W okay
</span></span><span class="line"><span class="cl">if (read_count &gt; 0)
</span></span><span class="line"><span class="cl">	R okay    
</span></span><span class="line"><span class="cl">if (read_count == 1)
</span></span><span class="line"><span class="cl">	R not-okay, W not-okay    
</span></span></code></pre></td></tr></table>
</div>
</div><p>State of shared resource:</p>
<ul>
<li>free : resource_counter = 0</li>
<li>reading : resource_counter &gt; 0</li>
<li>writing : resource_counter = -1</li>
</ul>
<p>Thus essentially we can apply mutex on the new proxy &lsquo;resource_counter&rsquo; variable that represents the state of the shared resource.</p>
<h2 id="avoiding-common-mistakes">Avoiding common mistakes</h2>
<ul>
<li>keep track of mutex/lock variable used with a resource
<ul>
<li>e.g. mutex_type m1; // mutex for file1</li>
</ul>
</li>
<li>check that you are always and correctly using lock and unlock 	- Compilers can be used as they generate errors/warnings to correct this type of mistake</li>
<li>Use a single mutex to access a single resource</li>
<li>check that you are signalling correct condition</li>
<li>check that you are not using signal when broadcast is needed
<ul>
<li>signal : only 1 thread is will proceed, remaining threads will wait</li>
</ul>
</li>
<li>check thread execution order to be controlled by signals to condition variables</li>
</ul>
<h2 id="spuriousunnecessary-wake-ups">Spurious(Unnecessary) Wake ups</h2>
<p>When we wake up threads knowing they may not be able to proceed.</p>
<h2 id="deadlocks">Deadlocks</h2>
<p>Two or more competing threads are said to be in a deadlock if they are waiting on each other to complete, but none of them ever do.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/deadlock.png" alt="deadlock"  />
</p>
<p>Here T1 and T2 are in deadlock.</p>
<h3 id="how-to-avoid-this">How to avoid this?</h3>
<ol>
<li>Unlock T1 before locking T2
<ul>
<li>Fine-grained locking but T1 nad T2 may both be required</li>
</ul>
</li>
<li>Use one mega lock, get all locks upfront, then release at end
<ul>
<li>For some applications this may be ok. But generally its too restrictive and limits parallelism</li>
</ul>
</li>
<li>Maintain lock order
<ul>
<li>first m_T1</li>
<li>then m_T2
<ul>
<li>this will prevent cycles in wait graph</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>A cycle in wait graph is necessary and sufficient for deadlock to occur.<br>
(thread-waiting-on-resource &mdash;edge&mdash;&gt; thread-owning-resource)</p>
<ul>
<li>
<p>Deadlock prevention =&gt; Expensive<br>
Pre-check for cycles and then delay process or change code</p>
</li>
<li>
<p>Deadlock Detection and Recovery =&gt; Rollback</p>
</li>
</ul>
<h2 id="kernel-vs-user-level-threads">Kernel vs User level Threads</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/kernelvuserthread.png" alt="kernelvuserthread"  />
</p>
<p>Three types of models:</p>
<h4 id="1-one-to-one-model">1. <strong>One to One model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/onetoone.png" alt="onetoone"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>OS sees threads</li>
<li>Synchronization</li>
<li>Blocking</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Must go to OS for all operations</li>
<li>OS may have limits on policies, threads</li>
<li>Portability</li>
</ul>
<h4 id="2-many-to-one-model">2. <strong>Many to One model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/manytoone.png" alt="manytoone"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Totally Portable</li>
<li>Doesn&rsquo;t depend on OS limits and policies</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>OS may block entire process if one user-level thread blocks on I/O</li>
</ul>
<h4 id="3-many-to-many-model">3. <strong>Many to Many model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/manytomany.png" alt="manytomany"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Best of both worlds</li>
<li>Can have bound or unbound threads</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Requires coordination between user and kernel level thread managers</li>
</ul>
<h2 id="multithreading-patterns">Multithreading patterns</h2>
<p><strong>1. Boss-Workers pattern</strong></p>
<ul>
<li>Boss- assigns work</li>
<li>Workers- perform entire task</li>
</ul>
<p>Throughput of system is limited by boss thread. Hence boss thread must be kept efficient.</p>
<p>Throughput = 1/boss-time-orders</p>
<p>Boss assigns works by:</p>
<ol>
<li>Directly signalling specific works
<ul>
<li><strong>+</strong> workers don&rsquo;t need to sync</li>
<li><strong>-</strong> boss must keep track of everyone</li>
</ul>
</li>
<li>Placing work in queue
<ul>
<li><strong>+</strong> boss doesn&rsquo;t neeed to know details about workers</li>
<li><strong>-</strong> queue synchronization</li>
</ul>
</li>
</ol>
<p>How many workers?</p>
<ul>
<li>on demand</li>
<li>pool of workers</li>
<li>static vs dynamic (i.e dynamically increasing size according to work)</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Simplicity</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Thread pool management</li>
<li>Locality</li>
</ul>
<p><strong>1B. Boss-Workers pattern variant</strong></p>
<ul>
<li>Here workers are specialized for certain tasks opposite to the previous equally created workers</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Better locality</li>
<li>Quality of Service management</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Load balancing</li>
</ul>
<p><strong>2. Pipeline pattern</strong></p>
<ul>
<li>Threads assigned one subtask in the system</li>
<li>Entire task = Pipeline of threads</li>
<li>Multiple tasks concurrently run in the system, in different pipeline stages</li>
<li>Throughput depends on weakest link</li>
<li>Shared buffer based communication between stages</li>
</ul>
<p><strong>3. Layered pattern</strong></p>
<ul>
<li>Layers of threads are assigned group of related subtasks</li>
<li>End to end task must pass up and down through all layers</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Specialization</li>
<li>Less fine-grained than pipeline</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Not suitable for all applications</li>
<li>Synchronization</li>
</ul>
<h3 id="example-1">Example:</h3>
<p><strong>Q)</strong> For 6 step toy order application we have 2 solutions:</p>
<ol>
<li>Boss-workers solution</li>
<li>Pipeline solution</li>
</ol>
<p>Both have 6 threads. In the boss-workers solution, a worker produces a toy order in 120 ms. In the pipeline solution, each of 6 stages take 20 ms.</p>
<p>How long will it take for these solutions to complete 10 toy orders and 11 toy orders?</p>
<p><strong>A)</strong> 6 threads means for Boss-workers, 1 thread is for boss, 5 for workers. In pipeline 6 threads are equally used.</p>
<p>For 10 toy orders:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Boss-workers(10) = 120 + 120 = 240 ms
</span></span><span class="line"><span class="cl">Pipeline(10) = 120 + (9*20) = 300 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here Boss-workers is better than Pipeline.</p>
<p>For 11 toy orders:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Boss-workers(11) = 120 + 120 + 120 = 360 ms
</span></span><span class="line"><span class="cl">Pipeline(11) = 120 + (10*20) = 320 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here Pipeline is better than Boss-workers.</p>
<p>This proves that choosing a better pattern depends on the number of threads and the work required to be done.</p>
<h2 id="pthreads">PThreads</h2>
<p>PThreads == POSIX Threads</p>
<p>POSIX = Portable OS interface</p>
<h3 id="compiling-pthreads">Compiling PThreads</h3>
<ol>
<li>#include&lt;pthread.h&gt; in main file</li>
<li>Compile source with -lpthread or -pthread</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc -o main main.c -lpthread
</span></span><span class="line"><span class="cl">gcc -o main main.c -pthread
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>Check return values of common examples</li>
</ol>
<h3 id="pthread-mutexes">PThread mutexes</h3>
<ul>
<li>to solve mutual exclusion problems among concurrent threads</li>
</ul>
<h3 id="safety-tips">Safety tips</h3>
<ul>
<li>Shared data should always be accessed through single mutex</li>
<li>Mutex scope must be visible to all</li>
<li>Globally order locks
<ul>
<li>for all threads, lock mutexes in order</li>
</ul>
</li>
<li>Always unlock a mutex (correctly)</li>
</ul>
<h2 id="thread-design-considerations">Thread Design Considerations</h2>
<h3 id="kernel-vs-user-level-threads-1">Kernel vs User Level Threads</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/userlevelvkernellevel.png" alt="userlevelvkernellevel"  />
</p>
<h3 id="thread-related-data-structures">Thread related data structures</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/threadds.png" alt="threadds"  />
</p>
<h3 id="hard-vs-light-process-states">Hard vs Light Process states</h3>
<p>PCB is divided into multiple data structures classified as follows:</p>
<ul>
<li>Light Process states
<ul>
<li>Signal mask</li>
<li>System call args</li>
</ul>
</li>
<li>Heavy Process states
<ul>
<li>virtual address mapping</li>
</ul>
</li>
</ul>
<h4 id="rationale-for-multiple-data-structures">Rationale for Multiple Data Structures:</h4>
<table>
<thead>
<tr>
<th>Single PCB</th>
<th>Multiple DS</th>
</tr>
</thead>
<tbody>
<tr>
<td>Large continuos DS</td>
<td>Smaller DS</td>
</tr>
<tr>
<td>Private for each entity</td>
<td>Easier to share</td>
</tr>
<tr>
<td>Saved and restored on each context switch</td>
<td>Save and Restore only what needs to change on context switch</td>
</tr>
<tr>
<td>Update for any changes</td>
<td>User lever library need to only update portion of the state</td>
</tr>
</tbody>
</table>
<ul>
<li>Thus the following disadvantages for single PCB become advantages for Multiple DS :
<ul>
<li>Scalability</li>
<li>Overheads</li>
<li>Performance</li>
<li>Flexibility</li>
</ul>
</li>
</ul>
<h2 id="comparison-of-interrupts-and-signals">Comparison of Interrupts and Signals</h2>
<ul>
<li>Handled in specific ways
- interrupt and signal handlers
<ul>
<li>Can be ignored
<ul>
<li>interrupt and signal mask</li>
</ul>
</li>
<li>Expected or unexpected
<ul>
<li>appear synchronously or asynchronously</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Difference:</li>
</ul>
<table>
<thead>
<tr>
<th>Interrupts</th>
<th>Signals</th>
</tr>
</thead>
<tbody>
<tr>
<td>Events generated externally by components other than CPU (I/O devices, timers, other CPUs)</td>
<td>Events triggered by CPU and software running on it</td>
</tr>
<tr>
<td>Determined based on physical platform</td>
<td>Determined based on OS</td>
</tr>
<tr>
<td>Appear asynchronously</td>
<td>Appear synchronously or asynchronously</td>
</tr>
</tbody>
</table>
<ul>
<li>Similarities:
<ul>
<li>Have a unique ID depending on h/w or OS</li>
<li>Can be masked and disabled/suspended via corresponding mask
<ul>
<li>per-CPU interrupt mask, preprocess signal mask</li>
</ul>
</li>
<li>if enabled, trigger corresponding to handler
<ul>
<li>interrupt handler set for entire system by OS</li>
<li>signal handler set on per process basis by process</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>An interrupt is like a snowstorm alarm<br>
A signal is like a low battery warning</p>
</blockquote>
<h3 id="interrupts">Interrupts</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/interrupts.png" alt="interrupts"  />
</p>
<h3 id="signals">Signals</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/signals.png" alt="signals"  />
</p>
<h4 id="handlers--actions">Handlers / Actions</h4>
<ul>
<li>Default actions
<ul>
<li>Terminate, ignore</li>
<li>Terminate and core dump</li>
<li>Stop or continue</li>
</ul>
</li>
<li>Process Installs Handler
<ul>
<li>signal(), sigaction()</li>
<li>for most signals, some cannot be &ldquo;caught&rdquo;</li>
</ul>
</li>
<li><strong>Synchronous</strong>
<ul>
<li>SIGSEGV (access to protected memory)</li>
<li>SIGFPE (divided by zero)</li>
<li>SIGKILL (kill, id)
<ul>
<li>can be directed to a specific thread</li>
</ul>
</li>
</ul>
</li>
<li><strong>Asynchronous</strong>*
<ul>
<li>SIGKILL (kill)</li>
<li>SIGALARM</li>
</ul>
</li>
</ul>
<h3 id="why-disable-interrupts-or-signals">Why disable Interrupts or Signals</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/disableis.png" alt="disableis"  />
</p>
<p>Here PC: First instruction in handler<br>
SP : thread stack</p>
<p>To prevent deadlock,</p>
<ol>
<li>Keep handler code simple
<ul>
<li>avoid mutex</li>
<li><strong>-</strong> too restrictive</li>
</ul>
</li>
<li>Control interruptions by handler code
<ul>
<li>Use interrupt/signal masks</li>
<li>0011100110.. (0: disabled, 1: enabled)</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">clear_field_in_mask(mask)
</span></span><span class="line"><span class="cl">lock(mutex)
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#disabled =&gt; remaining pending
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">unlock(mutex)
</span></span><span class="line"><span class="cl">reset_field_in_mask(mask)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#enabled =&gt; execute handler code
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Interrupt masks are per CPU</p>
<ul>
<li>if mask disables interrupt, hardware interrupt rounting mechanism will not deliver interrupt</li>
</ul>
</li>
<li>
<p>Signal are per execution context (User-level thread on top of Kernel-level thread)</p>
<ul>
<li>if mask disables signal, kernel sees mask and will not interrupt corresponding thread</li>
</ul>
</li>
</ul>
<h3 id="types-of-signals">Types of Signals</h3>
<ol>
<li>One-shot Signals
<ul>
<li>&ldquo;n signals pending == 1 signal pending&rdquo; : atleast once</li>
<li>must be explicitly re-enabled</li>
</ul>
</li>
<li>Realtime Signals
<ul>
<li>&ldquo;if n signals raised, then handler is called n times&rdquo;</li>
</ul>
</li>
</ol>
<h3 id="handling-interrupts-as-threads">Handling interrupts as threads</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/interruptsasthreads.png" alt="interruptsasthreads"  />
</p>
<p>but dynamic thread creation is expensive!</p>
<ul>
<li>Dynamic decision
<ul>
<li>if handler doesn&rsquo;t lock
<ul>
<li>execute on interrupted threads stack</li>
</ul>
</li>
<li>if handler can block
<ul>
<li>turn into real thread</li>
</ul>
</li>
</ul>
</li>
<li>Optimization
<ul>
<li>pre-create and pre-initialize thread structure for interrupt routines</li>
</ul>
</li>
</ul>
<h3 id="threads-and-signal-handling">Threads and Signal Handling</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/tshandling.png" alt="tshandling"  />
</p>
<p><strong>Case 1 :</strong></p>
<ul>
<li>User-Level-Thread mask = 1</li>
<li>Kernel-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case1.png" alt="case1"  />
</p>
<p><strong>Case 2 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>another User-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case2.png" alt="case2"  />
</p>
<p><strong>Case 3 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>another User-Level-Thread mask = 1</li>
<li>another Kernel-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case3.png" alt="case3"  />
</p>
<p><strong>Case 4 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>all User-Level-Thread mask = 0</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case4.png" alt="case4"  />
</p>
<p><strong>Optimize common case</strong></p>
<ul>
<li>signals less frequennt than signal mask updates</li>
<li>system calls avoided
<ul>
<li>cheaper to update user-level mask</li>
</ul>
</li>
<li>signal handling more expensive</li>
</ul>
<h2 id="multi-processing-vs-multi-threading">Multi-processing vs Multi-threading</h2>
<p>How to best provide concurrency?</p>
<h3 id="multi-processing-mp">Multi-Processing (MP)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Simple programming</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>High memory usage</li>
<li>Costs context switch</li>
<li>costly to maintain shared state (tricky port setup)</li>
</ul>
<h3 id="multi-threading-mp">Multi-Threading (MP)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Shared address space</li>
<li>Shared state (no sys calls to other threads)</li>
<li>Cheap context switch</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Complex implementation</li>
<li>Requires synchronization</li>
<li>Requires underlying support for threads</li>
</ul>
<h2 id="event-driven-model">Event Driven model</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/eventdrivenmodel.png" alt="eventdrivenmodel"  />
</p>
<p>Features:</p>
<ul>
<li>Single address space</li>
<li>Single process</li>
<li>Single thread of control</li>
</ul>
<p>Dispatcher : acts as a state machine and accepts any external events</p>
<p>When call handler =&gt; jump to code</p>
<p>The handler:</p>
<ul>
<li>Runs to completion</li>
<li>if they need to block
<ul>
<li>initiate blocking operation and pass control to dispatch loop</li>
</ul>
</li>
</ul>
<h3 id="concurrent-execution-in-event-driven-models">Concurrent execution in Event-driven models</h3>
<ul>
<li>MP &amp; MT :  1 request per execution context (process/thread)</li>
<li>Event Driven : Many requests interleaved in an execution context</li>
<li>Single thread switches among processing of different requests</li>
<li>Process requests until wait is necessary
<ul>
<li>then switch to another request</li>
</ul>
</li>
</ul>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Single address space</li>
<li>Single flow of control</li>
<li>Smaller memory requirement
<ul>
<li>Event Driven model requires less memory than Boss-workers/Pipeline model, where the extra memory is required for helper thread for concurrent blocking I/O not for all concurrent requests.</li>
</ul>
</li>
<li>No context switches</li>
<li>No synchronization</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>A blocking request/handler will block entire process</li>
</ul>
<h3 id="asynchronous-io-operations">Asynchronous I/O operations</h3>
<p>Asynchronous I/O operations fit well with Event-driven models</p>
<p>Since asynchronous calls are not easily avalible, helpers can be used to implement the async call functionality:</p>
<ul>
<li>designated for blocking I/O operations only</li>
<li>pipe/socket based communication with event dispatcher
<ul>
<li>select()/ poll() still okay</li>
</ul>
</li>
<li>helper blocks, but main event loop (&amp; process) will not</li>
</ul>
<h3 id="asymmetric-multi-process-event-driven-model-amped--amted">Asymmetric Multi-Process Event Driven model (AMPED &amp; AMTED)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Resolve portability limitations of basic event driven model</li>
<li>Smaller footprint than regular worker thread</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Applicability to certain classes of applications</li>
<li>Event routing on multi CPU systems</li>
</ul>
<p>Eg <a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server">Apache Web Server</a></p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/apachewebserver.png" alt="apachewebserver.png"  />
</p>
<ul>
<li>Core : basic server skeleton</li>
<li>Modules : per functionality</li>
<li>Flow of Control : Similar to Event Driven model</li>
<li>But its an combination of MP + MT,
<ul>
<li>each process = boss/worker with dynamic thread pool</li>
<li>number of processes can also be dynamically adjusted</li>
</ul>
</li>
</ul>
<hr>    
<h1 id="scheduling">Scheduling</h1>
<p>Operating System perform scheduling in the following simple ways:</p>
<ul>
<li>Dispatch orders immediately
<ul>
<li>scheduling is simple FIFO (First-Come-First-Serve)</li>
</ul>
</li>
<li>Dispatch simple orders first
<ul>
<li>maximize number of orders processed over time</li>
<li>maximize throughput (SJF)</li>
</ul>
</li>
<li>Dispatch complex orders first
<ul>
<li>maximize utilization of CPU, devices, memory</li>
</ul>
</li>
</ul>
<h2 id="cpu-scheduler">CPU Scheduler</h2>
<ul>
<li>Decides how and when process (and their threads) access shared CPUs</li>
<li>Schedules tasks running at user level processes/threads as well as kernel level threads</li>
<li>Chooses one of the ready tasks to run on CPU</li>
<li>Runs when
<ul>
<li>CPU becomes idle</li>
<li>new task becomes ready</li>
<li>timeslice expired timeout</li>
</ul>
</li>
</ul>
<p>Context switch, enter user mode, set PC and go! &lt;= Thread is dispatched on CPU.</p>
<ul>
<li>Which task should be selected?
<ul>
<li>Scheduling policy/algorithm</li>
</ul>
</li>
<li>How is this done?
<ul>
<li>Depends on runqueue data structure</li>
</ul>
</li>
</ul>
<h3 id="run-to-completion-scheduling">&ldquo;Run-to-completion&rdquo; Scheduling</h3>
<ul>
<li>Initial assumptions
<ul>
<li>group of tasks/jobs</li>
<li>known execution time</li>
<li>no preemption</li>
<li>single CPU</li>
</ul>
</li>
<li>Metrics
<ul>
<li>throughput</li>
<li>average job completion time</li>
<li>average job wait time</li>
<li>CPU utilization</li>
</ul>
</li>
</ul>
<h2 id="scheduling-algorithms">Scheduling algorithms:</h2>
<h3 id="1-first-come-first-serve-fcfs">1. First Come First Serve (FCFS)</h3>
<ul>
<li>Schedules tasks in order of arrival</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = queue(FIFO)
</span></span></code></pre></td></tr></table>
</div>
</div><p>If T1, T2, T3 arrive in the given order and T1 has execution time 1s, T2 10s and T3 1s then :</p>
<ul>
<li>Throughput = 3/(1+10+1) = 3/12 = 0.25s</li>
<li>Average completion time = (1 + 11 + 12)/3 = 8s</li>
<li>Average wait time = (1+1+11)/3 = 4s</li>
<li>Starvation NOT possible</li>
</ul>
<h3 id="2-shortest-job-first-sjf">2. Shortest Job First (SJF)</h3>
<ul>
<li>Schedules tasks in order of execution time</li>
<li>Therefore for the above example, T1(1s) &gt; T3(1s) &gt; T2(10s)</li>
<li>Starvation possible</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = ordered(queue)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//or
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">runqueue = tree()
</span></span></code></pre></td></tr></table>
</div>
</div><p>For SJF,</p>
<ul>
<li>Throughput = 3/(1+10+1) = 3/12 = 0.25s</li>
<li>Average completion time = (1 + 2 + 12)/3 = 5s</li>
<li>Average wait time = (0+1+2)/3 = 1s</li>
</ul>
<h3 id="preemptive-scheduling">Preemptive Scheduling</h3>
<ul>
<li>SJF + Preemption</li>
<li>Starvation is possible</li>
</ul>
<p>T2 arrives first.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/preemptive.png" alt="preemptive"  />
</p>
<h3 id="priority-scheduling">Priority Scheduling</h3>
<ul>
<li>Tasks have different priority levels</li>
<li>Run highest priority task next (preemption)</li>
<li>Starvation is possible</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/priority.png" alt="priority"  />
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4">4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = per priority_queue()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//or 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">runqueue = tree() ordered on priority
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>low priority task stuck in runqueue =&gt; starvation</li>
<li>&ldquo;priority aging&rdquo;
<ul>
<li>priority = f(actual priority, time spent in runqueue)</li>
<li>eventually tasks will run</li>
<li>prevents starvation</li>
</ul>
</li>
</ul>
<h3 id="3-round-robin-scheduling">3. Round-Robin Scheduling</h3>
<ul>
<li>Pick up the first task from queue (like FCFS)</li>
<li>Task may yield to wait on I/O (unlike FCFCS)</li>
<li>Starvation is NOT possible</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr1.png" alt="rr1"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr2.png" alt="rr2"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr3.png" alt="rr3"  />
</p>
<h3 id="4-shortest-remaining-time-first-srtf">4. Shortest Remaining Time First (SRTF)</h3>
<ul>
<li>Chooses the process with the shortest CPU burst remaining and executes that one. If processes come in during execution that have less remaining time, the current one is preempted and the new one executed. Therefore, it can lead to starvation.</li>
</ul>
<h4 id="timeslicing">Timeslicing</h4>
<ul>
<li>Timeslice = max amount of uninterrupted time given to a task</li>
<li>task may run less than timeslice
<ul>
<li>has to wait on I/O sync
<ul>
<li>will be placed on queue</li>
</ul>
</li>
<li>higher priority task becomes runnable</li>
</ul>
</li>
<li>using timeslice tasks are interleaved
<ul>
<li>timesharing the CPU</li>
<li>CPU bound tasks =&gt; preemption after timeslice</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr4.png" alt="rr4"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Short tasks finish sooner</li>
<li>More responsive</li>
<li>Lengthy I/O operations initiated sooner
<ul>
<li>best to keep timeslice &gt; context-switch-time</li>
</ul>
</li>
</ul>
<p><strong>Disdvantages</strong><br></p>
<ul>
<li>Overheads</li>
</ul>
<h4 id="how-long-should-a-timeslice-be-be">How long should a timeslice be be?</h4>
<ul>
<li>should balance benefits and overheads</li>
</ul>
<h3 id="for-cpu-bound-tasks">For CPU bound tasks:</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cputs.png" alt="cputs"  />
</p>
<ul>
<li>Hence, for CPU bound tasks, larger timeslice values are better</li>
</ul>
<h3 id="for-io-bound-tasks">For I/O bound tasks:</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/iots.png" alt="iots"  />
</p>
<ul>
<li>Hence, for I/O bound tasks, smaller timeslice values are better
<ul>
<li>Keeps CPU and I/P devices busy, I/O bound tasks run quickly, makes I/O requests responds to a user.</li>
</ul>
</li>
</ul>
<h3 id="summary">Summary</h3>
<ul>
<li>
<p>CPU bound tasks prefer longer timeslices</p>
<ul>
<li>limits context switching overheads</li>
<li>keeps CPU utilization and throughput</li>
</ul>
</li>
<li>
<p>I/O bound tasks prefer smaller timeslices</p>
<ul>
<li>However, if all the tasks in contention are I/O bound, it may not make such a difference</li>
<li>If a portion of them are I/O smaller timeslices keeps CPU and device utilization high</li>
<li>Provides better user-perceived performance</li>
</ul>
</li>
</ul>
<hr>
<h1 id="memory-management">Memory Management</h1>
<p>Operating systems:</p>
<ul>
<li>uses intelligently size containers
<ul>
<li>memory pages of segments</li>
</ul>
</li>
<li>Not all parts are needed at once
<ul>
<li>tasks operate on subset of memory</li>
</ul>
</li>
<li>Optimized for performance
<ul>
<li>reduce time to access state in memory
<ul>
<li>leads to better performance!</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="memory-management-goals">Memory Management Goals</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/mmgoals.png" alt="mmgoals.png"  />
</p>
<h4 id="virtual-vs-physical-memory">Virtual vs Physical memory</h4>
<ul>
<li>Allocate
<ul>
<li>allocation, replacement</li>
</ul>
</li>
<li>Arbitrate
<ul>
<li>address translation and validation</li>
</ul>
</li>
</ul>
<h4 id="page-based-memory-management">Page-based Memory Management</h4>
<ul>
<li>Allocate =&gt; pages =&gt; page frames</li>
<li>Arbitrate =&gt; page tables</li>
</ul>
<h4 id="segment-based-memory-management">Segment-based Memory Management</h4>
<ul>
<li>Allocate =&gt; segments</li>
<li>Arbitrate =&gt; segment registers</li>
</ul>
<h2 id="hardware-support">Hardware Support</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hardwaresupport.png" alt="hardwaresupport.png"  />
</p>
<h3 id="memory-management-unit-mmu">Memory Management Unit (MMU)</h3>
<ul>
<li>translate virtual to physical address</li>
<li>reports faults (illegal access, permission, not present in memory)</li>
</ul>
<h3 id="registers">Registers</h3>
<ul>
<li>pointers to page tables</li>
<li>base and limit size, number of segments</li>
</ul>
<h3 id="cache">Cache</h3>
<ul>
<li>Translation lookaside buffer</li>
<li>Valid VA-PA translations using TLB</li>
</ul>
<h3 id="translation">Translation</h3>
<ul>
<li>Actual PA generation done in hardware</li>
</ul>
<h2 id="page-tables">Page Tables</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pagetables.png" alt="pagetables.png"  />
</p>
<ul>
<li>OS creates page table per process</li>
<li>On context switch, switch to valid page table</li>
<li>Updates register that points to correct page table.
E.g CR3 on x86 architecture</li>
</ul>
<h2 id="page-table-entry-pte">Page Table Entry (PTE)</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pfn.png" alt="pfn.png"  />
</p>
<h4 id="flags">Flags</h4>
<ul>
<li>Present (valid/invalid)</li>
<li>Dirty (written to)</li>
<li>Accessed (for read or write)</li>
<li>Protection bits =&gt; RWX</li>
</ul>
<h2 id="page-table-entry-on-x86">Page Table Entry on x86</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pfnx86.png" alt="pfnx86.png"  />
</p>
<h4 id="flags-1">Flags</h4>
<ul>
<li>Present</li>
<li>Dirty</li>
<li>Accessed</li>
<li>R/W permission bit 0: R only, 1: R/W</li>
<li>U/S permission bit 0: usermode, 1: superviser mode only</li>
<li>others: caching related info (write through, caching disabled)</li>
<li>unused: for future use</li>
</ul>
<h2 id="page-faults">Page faults</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pagefaults.png" alt="pagefaults.png"  />
</p>
<h2 id="page-table-size">Page Table Size</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pts.png" alt="pts.png"  />
</p>
<ul>
<li>32 bit architecture
<ul>
<li>Page Table Entry (PTE) = 4 Bytes, including PFN + flags</li>
<li>Virtual Page Number (VPN) = 2^32/page_size</li>
<li>Page size = 4KB (&hellip;8KB, 2MB, 4MB, 1GB)</li>
</ul>
</li>
</ul>
<p>Therefore Page Table Size = (2^32 * 2^12)*4B = 4MB (per process)</p>
<ul>
<li>for 64 bit architecture
<ul>
<li>Page Table Entry (PTE) = 8 Bytes</li>
<li>Page size = 4KB</li>
</ul>
</li>
</ul>
<p>Page Table Size = (2^64 * 2^12)*8B = 32PB (per process!)</p>
<ul>
<li>processes don&rsquo;t use entire address space</li>
<li>even on 32 bit architecture, it will not always use all 4GB</li>
</ul>
<p>But Page Table assumes an entry per VPN regardless, of whether corresponding virtual memory is needed or not.</p>
<h2 id="hierarchical-page-tables">Hierarchical Page Tables</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hierarchicalpt.png" alt="hierarchicalpt.png"  />
</p>
<p>On malloc, a new internal page table may be allocated.</p>
<h4 id="address-split">Address split:</h4>
<table>
  <tr>
    <th colspan="2">Page Number</th>
    <th>offset</th>
  </tr>
  <tr>
    <td>P1</td>
    <td>P2</td>
    <td>d</td>
  </tr>
  <tr>
    <td>12</td>
    <td>10</td>
    <td>10</td>
  </tr>
</table>
<ul>
<li>inner table addresses =&gt; 2^10 * page_size = 2^10*2^10 = 1MB</li>
<li>don&rsquo;t need an inner table for each 1MB virtual memory gap</li>
</ul>
<p>Additional Layers</p>
<ul>
<li>page table directory pointer (3rd level)</li>
<li>page table directory map (4th level)</li>
</ul>
<ul>
<li>Important on 64 bit architectures</li>
<li>larger and more sparse =&gt; larger gaps would save more internal page table components</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hierarchicalpt2.png" alt="hierarchicalpt2.png"  />
</p>
<h3 id="tradeoffs-of-multilevel-page-tables">Tradeoffs of Multilevel Page Tables</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Smaller internal page tables/directories</li>
<li>Granularity of coverage
<ul>
<li>Potentially reduced page table size</li>
</ul>
</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>More memory accesses required for translation</li>
<li>increased translation latency</li>
</ul>
<h2 id="overheads-of-address-translation">Overheads of Address Translation</h2>
<p>For each memory reference :</p>
<table>
<thead>
<tr>
<th>Single level page table</th>
<th>Four level page table</th>
</tr>
</thead>
<tbody>
<tr>
<td>x1 access to PTE</td>
<td>x4 accesses to PTE</td>
</tr>
<tr>
<td>x1 access to mem</td>
<td>x1 access to mem</td>
</tr>
</tbody>
</table>
<p>which results in slowdown.</p>
<h2 id="page-table-cache">Page Table Cache</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/ptcache.png" alt="ptcache.png"  />
</p>
<h4 id="translation-lookaside-buffer">Translation Lookaside Buffer</h4>
<ul>
<li>MMU level address translation cache</li>
<li>On TLB miss =&gt; page table access from memory</li>
<li>has protection/validity bits</li>
<li>small number of cached address =&gt; high TLB hit rate
<ul>
<li>temporal and spatial locality</li>
</ul>
</li>
</ul>
<ul>
<li>Example
<ul>
<li>x86 Core i7
<ul>
<li>per core : 64-entry data TLB <br> 128-entry instruction TLB</li>
<li>512-entry shared second-level TLB</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="inverted-page-tables">Inverted Page Tables</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/invertedpt.png" alt="invertedpt.png"  />
</p>
<h3 id="hashing-page-tables">Hashing Page Tables</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hashingpt.png" alt="hashingpt.png"  />
</p>
<h2 id="segmentation">Segmentation</h2>
<p>Segmentation is the process of mapping virtual to physical memory using segments.</p>
<ul>
<li>Segments: arbitrary granularity (size)
<ul>
<li>e.g. code, heap, data, stack..</li>
<li>address = segment - selector + offset</li>
</ul>
</li>
<li>Segment
<ul>
<li>contiguous physical memory</li>
<li>segment size = segment base + limit registers</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/segmentation.png" alt="segmentation.png"  />
</p>
<h4 id="segmentation--paging">Segmentation + Paging</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/segmentationpaging.png" alt="segmentationpaging.png"  />
</p>
<h2 id="page-size">Page Size</h2>
<ul>
<li>10 bit offset =&gt; 1 KB page size [2^10]</li>
<li>12 bit offset =&gt; 4 KB page size [2^12]</li>
</ul>
<p>In real world examples,</p>
<ul>
<li>Linux/x86 : 4 KB, 2MB, 1GB</li>
<li>Solaris/Sparse: 8kB, 4MB, 2GB</li>
</ul>
<p>||Large|Huge|
|&mdash;-|&mdash;&ndash;|
|page size|2 MB|1 GB|
|offset bits|21 bits|30 bits|
|reduction factor on page table size|x512|x1024|</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>larger pages
<ul>
<li>fewer page table entries, smaller page tables, more TLB hits</li>
</ul>
</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>internal fragmentation =&gt; wastes memory</li>
</ul>
<h2 id="memory-allocation">Memory Allocation</h2>
<ul>
<li>
<p>Memory allocator</p>
<ul>
<li>determines VA to PA mapping</li>
<li>address translation, page tables
=&gt; simply determine PA from VA and check validity/permsissions</li>
</ul>
</li>
<li>
<p>Kernel Level Allocators</p>
<ul>
<li>kernel state, static process state</li>
</ul>
</li>
<li>
<p>User Level Allocators</p>
<ul>
<li>dynamic process state (heap), malloc/free</li>
<li>e.g. d/malloc, jemalloc, Hoard, tcmalloc</li>
</ul>
</li>
</ul>
<h2 id="demand-paging">Demand Paging</h2>
<ul>
<li>Virtual Memory &raquo; Physical Memory
<ul>
<li>virtual memory page is not always in physical memory</li>
<li>physical page frame saved and restored to/from secondary storage</li>
</ul>
</li>
</ul>
<h3 id="demand-paging-1">Demand paging:</h3>
<ul>
<li>pages swapped in/out of memory &amp; a swap partition (e.g. on a disk)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/demandpaging.png" alt="demandpaging.png"  />
</p>
<ul>
<li>Original PA != PA after swapping
<ul>
<li>if page is &ldquo;pinned&rdquo;, swapping is disabled</li>
</ul>
</li>
</ul>
<h4 id="when-pages-should-be-swapped">When pages should be swapped?</h4>
<ul>
<li>page(out) daemon</li>
<li>when memory usage is above threshold</li>
<li>when CPU usage is below threshold</li>
</ul>
<h4 id="which-page-should-be-swapped-out">Which page should be swapped out?</h4>
<ul>
<li>pages that won&rsquo;t be used</li>
<li>history based prediction
<ul>
<li>Least Recently Used (LRU policy). Access bit tracks if page is referenced.</li>
</ul>
</li>
<li>page that don&rsquo;t need to be written out
<ul>
<li>Dirty bit to track if modified</li>
</ul>
</li>
<li>avoid non-swappable pages</li>
</ul>
<h2 id="checkpointing">Checkpointing</h2>
<ul>
<li>Failure and Recovery management technique
<ul>
<li>periodically save process state</li>
<li>failure may be unavoidable but can restart from checkpoint, so recovery would be faster</li>
</ul>
</li>
</ul>
<h4 id="simple-approach">Simple Approach</h4>
<ul>
<li>pause and save</li>
</ul>
<h4 id="better-approach">Better Approach</h4>
<ul>
<li>write-protect and copy everything at once</li>
<li>copy diffs of dirties pages for incremental checkpoints
<ul>
<li>rebuild from multiple diffs, or in background</li>
</ul>
</li>
</ul>
<p>Checkpointing can also be used in other services:</p>
<ul>
<li>
<p>Debugging</p>
<ul>
<li>Rewind-Replay</li>
<li>rewind = restart from checkpoint</li>
<li>gradually go back to earlier checkpoints until error is found</li>
</ul>
</li>
<li>
<p>Migration</p>
<ul>
<li>continue on another machine</li>
<li>disaster recovery</li>
<li>consolidation</li>
<li>repeated checkpoints in a fast loop until pause and copy becomes acceptable (or unavoidable)</li>
</ul>
</li>
</ul>
<hr>
<h1 id="inter-process-communication-1">Inter Process Communication</h1>
<ul>
<li>Processes share memory
<ul>
<li>data in shared messages</li>
</ul>
</li>
<li>Processes exchange messages
<ul>
<li>message passing via sockets</li>
</ul>
</li>
<li>Requires synchronization
<ul>
<li>mutex, waiting</li>
</ul>
</li>
</ul>
<p><strong>Inter Process Communication</strong>(IPC) is an OS supported mechanism for interaction among processes (coordination and communication)</p>
<ul>
<li>Message Passing
<ul>
<li>e.g. sockets, pips, msgs, queues</li>
</ul>
</li>
<li>Memory based IPC
<ul>
<li>shared memory, memory mapped files</li>
</ul>
</li>
<li>Higher level semantics
<ul>
<li>files, <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a></li>
</ul>
</li>
<li>Synchronization primitives</li>
</ul>
<h2 id="message-passing">Message Passing</h2>
<ul>
<li>Send/Receive messages</li>
<li>OS creates and maintains a channel
<ul>
<li>buffer, FIFO queue</li>
</ul>
</li>
<li>OS provides interfaces to processes
<ul>
<li>a port</li>
<li>processes send/write messages to this port</li>
<li>processes receive/read messages from this port</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/messagepassingipc.png" alt="messagepassingipc.png"  />
</p>
<ul>
<li>Kernel required to
<ul>
<li>establish communication</li>
<li>perform each IPC operation</li>
<li>send: system call + data copy</li>
<li>receive: system call + data copy</li>
</ul>
</li>
<li>Request-response:
4x user/ kernel crossings + <br>
4x data copies</li>
</ul>
<p><strong>Advantages</strong><br></p>
<ul>
<li>simplicity : kernel does channel management and synchronization</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Overheads</li>
</ul>
<h3 id="forms-of-message-passing-ipc">Forms of Message Passing IPC</h3>
<h4 id="1-pipes">1. Pipes</h4>
<ul>
<li>Carry byte stream between 2 process</li>
<li>e.g connect output from 1 process to input of another</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pipes.png" alt="pipes.png"  />
</p>
<h4 id="2-message-queues">2. Message queues</h4>
<ul>
<li>Carry &ldquo;messages&rdquo; among processes</li>
<li>OS management includes priorities, scheduling of message delivery</li>
<li>APIs : Sys-V and POSIX</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/msgq.png" alt="msgq.png"  />
</p>
<h4 id="3-sockets">3. Sockets</h4>
<ul>
<li>send() and recv() : pass message buffers</li>
<li>socket() : create kernel level socket buffer</li>
<li>associated neccessary kernel processing (TCP-IP,..)</li>
<li>If different machines, channel between processes and network devices</li>
<li>If same machine, bypass full protocol stack</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sockets.png" alt="sockets.png"  />
</p>
<h2 id="shared-memory-ipc">Shared Memory IPC</h2>
<ul>
<li>read and write to shared memory region</li>
<li>OS establishes shared channel between the processes
<ol>
<li>physical pages mapped into virtual address space</li>
<li>VA(P1) and VA(P2) map to same physical address</li>
<li>VA(P1) != VA(P2)</li>
<li>physical mempry doesn&rsquo;t need to be contiguous</li>
</ol>
</li>
<li>APIs : SysV, POSIX, memory mapped files, Android ashmem</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmemoryipc.png" alt="sharedmemoryipc.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>System calls only for setup data copies potentially reduced (but not eliminated)</li>
</ul>
<p><strong>Disdvantages</strong><br></p>
<ul>
<li>explicit synchronization</li>
<li>communication protocol, shared buffer management
<ul>
<li>programmer&rsquo;s responsibility</li>
</ul>
</li>
</ul>
<h2 id="which-is-better">Which is better?</h2>
<p><strong>Overheads for</strong></p>
<ol>
<li>Message Passing : must perform multiple copies</li>
<li>Shared Memory : must establish all mappings among processes&rsquo; address space and shared memory pages</li>
</ol>
<p>Thus, it depends.</p>
<h2 id="copy-vs-map">Copy vs Map</h2>
<p>Goal for both is to transfer data from one into target saddress space</p>
<table>
<thead>
<tr>
<th>Copy (Message Passing)</th>
<th>Map (Shared Memory)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU cycles to copy data to/from port</td>
<td>CPU cycles to map memory into address space</td>
</tr>
<tr>
<td>CPU to copy data to channel</td>
<td></td>
</tr>
<tr>
<td>If channel setup once, use many times (good payoff)</td>
<td></td>
</tr>
<tr>
<td>Can perform well for 1 time use</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>Large Data: t(Copy) &raquo; t(Map)
<ul>
<li>e.g. tradeoff exercised in Window &ldquo;Local&rdquo; Procedure Calls (LPC)</li>
</ul>
</li>
</ul>
<h2 id="shared-memory-and-synchronization">Shared Memory and Synchronization</h2>
<p>Use threads accessing shared state in a single addressing space, but for process</p>
<p>Synchronization method:</p>
<ol>
<li>mechanism supported by processing threading library (pthreads)</li>
<li>OS supported IPC for sync</li>
</ol>
<p>Either method must coordinate</p>
<ul>
<li>no of concurrent access to shared segment</li>
<li>when data is available and ready for consumption</li>
</ul>
<h3 id="ipc-synchronization">IPC Synchronization</h3>
<table>
<thead>
<tr>
<th>Message Queues</th>
<th>Semaphores</th>
</tr>
</thead>
<tbody>
<tr>
<td>Implement &ldquo;mutual exclusion&rdquo; via send/receive</td>
<td>OS supported synchronization construct</td>
</tr>
<tr>
<td>binary construct (either allow process or not)</td>
<td></td>
</tr>
<tr>
<td>Like mutex, if value = 0, stop; if value = 1, decrement(lock) and proceed</td>
<td></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="synchronization">Synchronization</h1>
<p>Waiting for other processes, so that they can continue working together</p>
<ul>
<li>may repeatedly check to continue
<ul>
<li>sync using spinlocks</li>
</ul>
</li>
<li>may wait for a signal to continue
<ul>
<li>sync using mutexes and condition vatiables</li>
</ul>
</li>
<li>waiting hurts performance
<ul>
<li>CPUs wste cycles for checking; cache effects</li>
</ul>
</li>
</ul>
<h2 id="limitation-of-mutextes-and-condition-variables">Limitation of mutextes and condition variables</h2>
<ul>
<li>Error prone/correctness/ease of use
<ul>
<li>unlock wrong mutex, signal wrong condition variable</li>
</ul>
</li>
<li>Lack of expressive power
<ul>
<li>helper variables for access or priority control</li>
</ul>
</li>
</ul>
<p>Low-level support: hardware atmoic instructions</p>
<h2 id="synchronization-constructs">Synchronization constructs</h2>
<ol>
<li>Spinlocks (basic sync construct)
<ul>
<li>Spinlock is like a mutex
<ul>
<li>mutual exclusion</li>
<li>lock and unlock(free)
- but, lock == busy =&gt; spinning</li>
</ul>
</li>
</ul>
</li>
<li>Semaphores
<ul>
<li>common sync construct in OS kernels</li>
<li>like a traffic light: Stop and Go</li>
<li>like mutex, but more general</li>
</ul>
</li>
</ol>
<p>Semaphore == integer value</p>
<ul>
<li>on init
<ul>
<li>assigned a max value (positive int) =&gt; max count</li>
</ul>
</li>
<li>on try(wait)
<ul>
<li>if non-zero, decrement and proceed =&gt; counting semaphore</li>
</ul>
</li>
<li>if initialized with 1
<ul>
<li>semaphore == mutex(binary semaphore)</li>
</ul>
</li>
<li>on exit(post)
<ul>
<li>increment</li>
</ul>
</li>
</ul>
<h2 id="syncing-different-types-of-accesses">Syncing different types of accesses</h2>
<h3 id="readerwriter-locks">Reader/Writer locks</h3>
<table>
<tr>
<td>read (don't modify)</td>
<td>write (always modify)</td>
</tr>
<tr>
<td>shared access</td>
<td>exclusive access</td>
</tr>
</table>
<ul>
<li>RW locks
<ul>
<li>specify type of access, then lock behaves accordingly</li>
</ul>
</li>
</ul>
<h3 id="monitors-highlevel-construct">Monitors (highlevel construct)</h3>
<ul>
<li>shared resource</li>
<li>entry resource</li>
<li>possible condition variables</li>
</ul>
<ul>
<li>On entry:
<ul>
<li>lock, check</li>
</ul>
</li>
<li>On exit:
<ul>
<li>unlock, check, signal</li>
</ul>
</li>
</ul>
<h3 id="more-synchroniaztion-constructs">More synchroniaztion constructs</h3>
<ul>
<li>serializers</li>
<li>path expressions</li>
<li>barriers</li>
<li>rendezvous points</li>
<li>optimistic wait-free sync (RCU) [Read Copy Update]</li>
</ul>
<p>All need hardware support.</p>
<h2 id="need-for-hardware-support">Need for hardware support</h2>
<ul>
<li>Problem
<ul>
<li>concurrent check/update on different CPUs can overlap</li>
</ul>
</li>
</ul>
<h3 id="atomic-instructions">Atomic instructions</h3>
<p>Critical section with hardware supported synchronization</p>
<h4 id="hardware-specific">Hardware specific</h4>
<ul>
<li>
<p>test-and-set</p>
<ul>
<li>returns(tests) original values and sets new-value!= 1 (busy) automatically</li>
<li>first thread: test-and-set(lock) =&gt; 0 : free</li>
<li>next ones: test-and-set(lock) =&gt; 1 busy
<ul>
<li>reset lock to 1, but that&rsquo;s okay</li>
</ul>
</li>
<li><strong>+</strong> : Latency</li>
<li><strong>+</strong> : minimal (Atomic)</li>
<li><strong>+</strong> : Delay potentially min</li>
<li><strong>-</strong> : Contention processors go to memory on each spin
- To reduce contention, introduce delay
- Static(based on a fixed value) or Dynamic(backoff based, random delay)</li>
</ul>
</li>
<li>
<p>read-and-increment</p>
</li>
<li>
<p>compare-and-swap</p>
</li>
</ul>
<h4 id="guarantees">Guarantees</h4>
<ul>
<li>atomicity</li>
<li>mutual exclusion</li>
<li>queue all concurrent instructions but one</li>
</ul>
<h3 id="shared-memory-multiprocessors">Shared Memory Multiprocessors</h3>
<p>Also called symmetric multiprocessors (SMP)</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmmmp.png" alt="sharedmmmp"  />
</p>
<ul>
<li>Caches
<ul>
<li>hide memory latency, &ldquo;memory&rdquo; further away due to contention</li>
<li>no-write, write-through, write-back</li>
</ul>
</li>
</ul>
<h3 id="cache-coherence">Cache Coherence</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachecoherence.png" alt="cachecoherence"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachecoherence2.png" alt="cachecoherence2"  />
</p>
<hr>
<pre><code># I/O Management
</code></pre>
<p>Operating system</p>
<ul>
<li>Has protocols
<ul>
<li>Interfaces for device I/O</li>
</ul>
</li>
<li>Has dedicated handlers
<ul>
<li>Device drivers, interrupt handlers</li>
</ul>
</li>
<li>Decouple I/O details from core processing
<ul>
<li>abstract I/O device detail from applications</li>
</ul>
</li>
</ul>
<h2 id="io-device-features">I/O Device Features</h2>
<ul>
<li>Control registers (accessed by CPU)
<ul>
<li>Command</li>
<li>Data Transfers</li>
<li>Status</li>
</ul>
</li>
<li>Microcontroller : device&rsquo;s CPU</li>
<li>On device memory</li>
<li>Other logic
<ul>
<li>e.g. analog to digital</li>
</ul>
</li>
</ul>
<h2 id="device-drivers">Device drivers</h2>
<ul>
<li>per each device type</li>
<li>responsible for device access management and control</li>
<li>provided by device manufacturers per OS /version</li>
<li>each OS standardizes interfaces
<ul>
<li>device independence</li>
<li>device diversity</li>
</ul>
</li>
</ul>
<h2 id="types-of-devices">Types of devices</h2>
<ul>
<li>Block
<ul>
<li>e.g. disk</li>
<li>read/write blocks of data</li>
<li>direct access to arbitrary block</li>
</ul>
</li>
<li>Character
<ul>
<li>e.g. keyboard</li>
<li>get/put character</li>
</ul>
</li>
<li>Network devices</li>
</ul>
<p>OS representation of a device : special device file</p>
<p>UNIX like systems:</p>
<ul>
<li>/dev</li>
<li>tmpfs</li>
<li>devfs</li>
</ul>
<p>Linux supports a number of pseudo &ldquo;virtual&rdquo; devices that provide special functionality to a system.</p>
<h2 id="cpu-device-interactions">CPU device interactions</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/iointeractions.png" alt="iointeractions.png"  />
</p>
<p>access device registers : memory load/store</p>
<ol>
<li>Memory mapped I/0
<ul>
<li>part of &lsquo;host&rsquo; physical memory dedicated for device interactions</li>
<li>Base Address Registers (BAR)</li>
</ul>
</li>
<li>I/O Port
<ul>
<li>dedicated in low instructions for device access</li>
<li>target device (I/0 port) and value in register</li>
</ul>
</li>
</ol>
<h2 id="path-from-device-to-cpu">Path from Device to CPU</h2>
<ol>
<li>Interrupt
<ul>
<li>Overhead: Interrupt handling steps</li>
<li>+: Can be generated as soon as possible</li>
</ul>
</li>
<li>Polling
<ul>
<li>Overhead: Delay or CPU overhead</li>
<li>when convenient for OS</li>
</ul>
</li>
</ol>
<h2 id="device-access--programmed-io-pio">Device access : Programmed I/O (PIO)</h2>
<ul>
<li>No additional hardware support</li>
<li>CPU &ldquo;programs&rdquo; the device
<ul>
<li>via command registers</li>
<li>data movement</li>
</ul>
</li>
<li>E.g. NIC(Network Interface Card)
<ul>
<li>data = network packet</li>
</ul>
</li>
<li>Write command to request packet information</li>
<li>Copy packet to data registers</li>
<li>Repeat until packet sent</li>
</ul>
<p>E.g. 1500B packet; 8 byte registers or bus =&gt; 1(for bus command) + 188(for data) = 189 CPU store instructions</p>
<h2 id="direct-memory-access-dma">Direct Memory Access (DMA)</h2>
<ul>
<li>Relies on DMA controller</li>
<li>CPU &ldquo;programs&rdquo; the device
<ul>
<li>via command registers</li>
<li>via DMA controls</li>
</ul>
</li>
<li>E.g. NIC (data = network packet)</li>
<li>Write command to request packet information</li>
<li>Configure DMA controller with in memory address and size of packet buffer</li>
</ul>
<p>E.g. 1500B packet; 8 byte registers or bus =&gt; 1(for bus command) + 1(for DMA configuration) = total 2 CPU store instructions. Less steps, but DMA configuration is more complex.</p>
<p>For DMAs</p>
<ul>
<li>data buffer must be in physical memory until transfer completes</li>
<li>pinning regions (non-swappable)</li>
</ul>
<h2 id="typical-device-access">Typical Device Access</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/typicaldeviceaccess.png" alt="typicaldeviceaccess.png"  />
</p>
<ul>
<li>System call</li>
<li>In-kernel stack</li>
<li>Driver Invocation</li>
<li>Device request configuration</li>
<li>Device performs request</li>
</ul>
<h3 id="os-bypass">OS bypass</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/osbypass.png" alt="osbypass.png"  />
</p>
<ul>
<li>device registers/data
<ul>
<li>directly available</li>
</ul>
</li>
<li>OS configures
<ul>
<li>then gets out of the way</li>
</ul>
</li>
<li>&ldquo;user level driver&rdquo;
<ul>
<li>in library</li>
</ul>
</li>
<li>OS retains coarse-grain control</li>
<li>relies on device features
<ul>
<li>sufficient registers</li>
<li>demux capability</li>
</ul>
</li>
</ul>
<h2 id="what-happens-to-a-calling-thread">What happens to a calling thread?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/access.png" alt="access.png"  />
</p>
<ul>
<li>Synchronous I/O operations
<ul>
<li>process blocks</li>
</ul>
</li>
<li>Asynchronous I/O operations
<ul>
<li>process continues</li>
<li>Later, process checks and retrieves result</li>
<li>OR</li>
<li>process is notified that operation is completed and results are ready</li>
</ul>
</li>
</ul>
<h2 id="block-device-stack">Block Device Stack</h2>
<p>Block device typical storage for files:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/blockdevicestack.png" alt="blockdevicestack.png"  />
</p>
<ul>
<li>processes use files =&gt; logical storage unit</li>
<li>kernel file system (KFS)
<ul>
<li>where how to find and access file</li>
<li>OS specifies interface</li>
</ul>
</li>
<li>generic block layer
<ul>
<li>OS standardized block interface</li>
</ul>
</li>
<li>Device driver</li>
</ul>
<h2 id="virtual-file-system">Virtual File System</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/vfs.png" alt="vfs.png"  />
</p>
<h3 id="virtual-file-system-abstractions">Virtual File System Abstractions</h3>
<ul>
<li>File : Elements on which the VFS operates</li>
<li>File Descriptor : OS representation of file
<ul>
<li>open, read, write, send file , lock, close</li>
</ul>
</li>
<li>inode : Persistent representation of file &ldquo;index&rdquo;
<ul>
<li>list of all data blocks</li>
<li>device, permissions, size</li>
</ul>
</li>
<li>dentry : Directory entry, corresponding to the single path component,
<ul>
<li>dentry cache</li>
</ul>
</li>
<li>super block : file system specific information regarding the File System layout</li>
</ul>
<h3 id="vfs-on-disk">VFS on disk</h3>
<ul>
<li>File : data blocks on disk</li>
<li>inode : track file blocks
<ul>
<li>also resides on disk in some block</li>
</ul>
</li>
<li>super block : overall map of disk blocks
<ul>
<li>inode blocks</li>
<li>data blocks</li>
<li>free blocks</li>
</ul>
</li>
</ul>
<h3 id="inodes">Inodes</h3>
<p>Index of all disk blocks corresponding to a file</p>
<ul>
<li>File : identified by inode</li>
<li>inode : list of all blocks + other metadata</li>
</ul>
<p><strong>+</strong>: Easy to perform sequential or random access<br>
<strong>-</strong>: Limit on file size</p>
<h3 id="inodes-with-indirect-pointers">Inodes with indirect pointers</h3>
<ul>
<li>Index of all disk blocks corresponding to a file</li>
<li>Index contain:
<ul>
<li>metadata</li>
<li>pointers to blocks</li>
</ul>
</li>
<li>Direct pointer : Points to data block
<ul>
<li>1 KB per entry</li>
</ul>
</li>
<li>Indirect pointer : Points to block of pointers
<ul>
<li>256 KB per entry</li>
</ul>
</li>
<li>Double Indirect pointer : Points to block of block of pointers
<ul>
<li>64 MB per entry</li>
</ul>
</li>
</ul>
<p><strong>+</strong>: Small inode =&gt; large file size<br>
<strong>-</strong>: File access slowdown</p>
<h2 id="disk-access-optimizations">Disk access optimizations</h2>
<p>Reducing file access overheads</p>
<ol>
<li>Caching/buffering : reducenumber of disk accesses
<ul>
<li>buffer cache in main menu</li>
<li>read/write from cache</li>
<li>periodically flush to disk - fsync()</li>
</ul>
</li>
<li>I/O scheduling : reduce disk head movement
<ul>
<li>maximize sequential vs random access</li>
</ul>
</li>
<li>Prefetching : increases cache hits
<ul>
<li>leverages locality</li>
</ul>
</li>
<li>Journaling/logging: reduce random access (ext3, ext4)
<ul>
<li>&ldquo;describe&rdquo; write in log : block, offset, value..</li>
<li>periodically apply updates to proper disk locations</li>
</ul>
</li>
</ol>
<hr>    
<pre><code># Virtualization
</code></pre>
<p>Virtualization allows concurrent execution of multiple OSs and their applications on the same physical machine.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/virtualization.png" alt="virtualization.png"  />
</p>
<ul>
<li>Virtual resources : each OS thinks that ot &ldquo;owns&rdquo; hardware resources</li>
<li>Virtual machine (VM) : OS + applications + virtual resources (guest domain)</li>
<li>Virtualization layer : management of physical hardware (virtual machine monitor, hypervisor)</li>
</ul>
<h2 id="defining-virtual-machine">Defining Virtual Machine</h2>
<p>A Virtual Machine is an efficient, isolated duplicate of the real machine.</p>
<ul>
<li>Supported by a Virtual Machine Monitor (VMM):
<ol>
<li>provides environment essentially identical with the original machine</li>
<li>programs show only minor decrease in speed at worst</li>
<li>VMM is in complete control of the system resources</li>
</ol>
</li>
</ul>
<h2 id="vmm-goals">VMM goals</h2>
<ul>
<li>Fidelity</li>
<li>Performance</li>
<li>Safety and Isolation</li>
</ul>
<h2 id="virtualization-advantages">Virtualization advantages</h2>
<ul>
<li>consolidation
<ul>
<li>decrease cost, improve manageability</li>
</ul>
</li>
<li>migration
<ul>
<li>availibility, reliability</li>
</ul>
</li>
<li>security, debugging, support for legacy OS</li>
</ul>
<h2 id="two-main-virtualization-models">Two main Virtualization Models:</h2>
<h3 id="1-bare-metal-or-hypervisor-based-type-1">1. Bare-metal or Hypervisor based (Type 1)</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hypervisor.png" alt="hypervisor.png"  />
</p>
<ul>
<li>VMM (hypervisor) manages all hardware resources abd supports execution of VMs</li>
<li>privileged, secure VM to deal with devices (and other configuration and management tasks)</li>
<li>Adopted by Xen(Opensource or Citriol Xen Server) and ESX (VMware)</li>
</ul>
<h3 id="1-hosted-type-2">1. Hosted (Type 2)</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hosted.png" alt="hosted.png"  />
</p>
<ul>
<li>Host owns all hardware</li>
<li>Special VMM modle provides hardware interfaces to VMs and deals with VM context switching</li>
</ul>
<h2 id="virtualization-requirements">Virtualization requirements</h2>
<ul>
<li>Present virtual platform interface to VMs
<ul>
<li>virtualize CPU, memory, devices</li>
</ul>
</li>
<li>Provide isolation across VMs
<ul>
<li>preemption, MMU for address translation and validation</li>
</ul>
</li>
<li>Protect guest OS from applications
<ul>
<li>can&rsquo;t run guest OS and applications at same protection level</li>
</ul>
</li>
<li>Protect VMs from guest OS
<ul>
<li>can&rsquo;t run guest OS and VMMs at same protection level</li>
</ul>
</li>
</ul>
<h2 id="hardware-protection-levels">Hardware protection levels</h2>
<p>Commodity hardware has more than two protection levels</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hwprotectionlevels.png" alt="hwprotectionlevels"  />
</p>
<ul>
<li>x86 has 4 protection levels (rings)
<ul>
<li>ring 3 : lowest privilege (applications)</li>
<li>ring 1 : OS</li>
<li>ring 0 : highest privilege (hypervisor)</li>
</ul>
</li>
<li>and 2 protection modes
<ul>
<li>non root : VMs
<ul>
<li>ring 3 : apps</li>
<li>ring 0 : OS</li>
</ul>
</li>
<li>root :
<ul>
<li>ring 0 : hypervisor</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="process-virtualization-trap-and-emulate">Process Virtualization (Trap-and-Emulate)</h2>
<ul>
<li>Guest instruments
<ul>
<li>executed directly by hardware</li>
<li>for non-privileged operations : hardware speeds =&gt; efficiency</li>
<li>for privileged operations : trap to hypervisor</li>
</ul>
</li>
<li>Hypervisor determines what needs to be done:
<ul>
<li>if illegal operation : terminate VM</li>
<li>if legal operation : emulate the behaviour the guest OS was expecting from the hardware</li>
</ul>
</li>
</ul>
<h2 id="problems-with-trap-and-emulate">Problems with Trap-and-Emulate</h2>
<ul>
<li>17 privileged information do not trao but fail silently</li>
<li>Hypervisor doesn&rsquo;t know, so it doesn&rsquo;t try to change settings</li>
<li>OS doesn&rsquo;t know, so assumes change was successful</li>
</ul>
<h2 id="binary-translation">Binary Translation</h2>
<p><strong>Goal</strong> : Full Virtualization i.e. guest OS is not modified</p>
<p><strong>Approach</strong> : Dynamic Binary Translation</p>
<ol>
<li>Inspect code blocks to be executed</li>
<li>If needed, translate to alternate instruction sequence
<ul>
<li>e.g. to emulate desired behaviour, possibly avoid traps</li>
</ul>
</li>
<li>Otherwise run at hardware speeds
<ul>
<li>cache translated blocks to ammortize translation costs</li>
</ul>
</li>
</ol>
<h2 id="paravirtualization">Paravirtualization</h2>
<p><strong>Goal</strong> : Performance; give up on modified guest OSs</p>
<p><strong>Approach</strong> : Paravirtualization : modify guest OSs so that</p>
<ul>
<li>it knows it is running virtualized</li>
<li>it makes explicit calls to hyperisor (hypercalls)</li>
<li>hypercalls (~ system calls)
<ul>
<li>package context information</li>
<li>specify desired hypercall</li>
<li>trap to VMM</li>
</ul>
</li>
<li>Xen : opensource hypervisor</li>
</ul>
<h2 id="memory-virtualization">Memory virtualization</h2>
<ul>
<li>Full virtualization
<ul>
<li>all guests expect contiguous physical memory starting at 0</li>
<li>virtual vs physical vs machine addresses and page frame numbers</li>
<li>still leverages hardware (MMU, TLB..)</li>
</ul>
</li>
<li>Option 1
<ul>
<li>guest page table : VA =&gt; PA</li>
<li>hypervisor : PA =&gt; MA</li>
<li>too expensive!</li>
</ul>
</li>
<li>Option 2
<ul>
<li>guest page tables : VA =&gt; PA</li>
<li>hypervisor shadow PT : VA =&gt; MA</li>
<li>hypervisor maintains consistence
<ul>
<li>e.g. invalidate on context switch, write protect guest PT to track new mappings</li>
</ul>
</li>
</ul>
</li>
<li>Paravirtualized
<ul>
<li>guest aware of virtualization</li>
<li>no longer strict requirement on contiguous physical memory starting at 0</li>
<li>explicitly registers page tables with hypervisor</li>
<li>can &ldquo;batch&rdquo; page tables updates to reduce VM exits</li>
<li>other optimazations</li>
</ul>
</li>
</ul>
<p>Overheads eliminated or reduced on newer platforms</p>
<h2 id="device-virtualization">Device Virtualization</h2>
<ul>
<li>For CPUs and Memory
<ul>
<li>less diversity, Intruction-Set-Architecture(ISA) level</li>
<li>Standardization of interface</li>
</ul>
</li>
<li>For Devices
<ul>
<li>high diversity</li>
<li>lack of standard specification of device interface and behaviour</li>
</ul>
</li>
</ul>
<h4 id="3-key-models-for-device-virtualization">3 key models for Device Virtualization:</h4>
<h3 id="1-pass-through-model">1. Pass through model</h3>
<p>Approach: VMM-level-driver configures device access permissions</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/passthrough.png" alt="passthrough.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>VM provided with exclusive and direct (VMM bypass) access to the device</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Device sharing difficult</li>
<li>VMM must have exact type of device as what VM expects</li>
<li>VM migration tricky</li>
</ul>
<h3 id="2-hypervisor---direct-model">2. Hypervisor - Direct model</h3>
<p>Approach:</p>
<ul>
<li>VMM interrupts all device accesses</li>
<li>Emulate device operations
<ul>
<li>translate to generic I/O operations</li>
<li>traverse VMM-resident I/O stack</li>
<li>invoke VMM-resident driver</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hypervisordirect.png" alt="hypervisordirect.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>VM decoupled from physical device</li>
<li>Sharing, migration, dealing with device specifics</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Latency of device operations</li>
<li>Device driver ecosystem complexities in Hypervisor</li>
</ul>
<h3 id="3-split-device-driver-model">3. Split Device-Driver model</h3>
<p>Approach:</p>
<ul>
<li>Device access control split between</li>
<li>Emulate device operations
<ul>
<li>front-end driver in guest VM (device API)</li>
<li>back-end driver in service VM (or Host)</li>
<li>modified guest drivers
<ul>
<li>i.e. limited to paravirtualized guests</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/splitdevicedriver.png" alt="splitdevicedriver.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Eliminate emulation overhead</li>
<li>Allow for better management of shared devices</li>
</ul>
<hr>
<h1 id="remote-procedure-calls">Remote Procedure Calls</h1>
<p>Example : GetFile App</p>
<ul>
<li>Client Server</li>
<li>Create and init sockets</li>
<li>Allocate and populate buffers</li>
<li>Include &lsquo;protocol&rsquo; info
<ul>
<li>GetFile, size</li>
</ul>
</li>
<li>Copy data into buffers
<ul>
<li>filename, file</li>
</ul>
</li>
</ul>
<ul>
<li>common steps related to remote IPC</li>
</ul>
<h4 id="remote-procedure-calls-rpc">Remote Procedure Calls (RPC)</h4>
<ul>
<li>Intended to simplify the development of cross address space and cross machine interactions</li>
</ul>
<p><strong>+</strong> Higher-level interface for data movement and communication<br>
<strong>+</strong> Error handling<br>
<strong>+</strong> Hiding complexities of cross machine interactions</p>
<h2 id="rpc-requirements">RPC requirements</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rpcrequirements.png" alt="rpcrequirements"  />
</p>
<ol>
<li>Client/Server interactions</li>
<li>Procedure Call Interface =&gt; RPC
<ul>
<li>sync call semantics</li>
</ul>
</li>
<li>Type checking
<ul>
<li>error handling</li>
<li>packet bytes interpretation</li>
</ul>
</li>
<li>Cross machine conversion
<ul>
<li>e.g. big/little endian</li>
</ul>
</li>
<li>Higher level protocol
<ul>
<li>access control, fault tolerance, different transport protocols</li>
</ul>
</li>
</ol>
<h2 id="structure-of-rpc">Structure of RPC</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rpcstructure.png" alt="rpcstructure"  />
</p>
<h2 id="rpc-steps">RPC Steps:</h2>
<p>(-1.) register : server registers procedure, arg types, location<br>
(0.) bind : client finds and binds to desired server</p>
<ol>
<li>call : client make RPC call; control passed to stub, client code blocks</li>
<li>marshal : client stub &ldquo;marshals&rdquo; args (serialize args into buffer)</li>
<li>send : client sends message to server</li>
<li>receive : server receives message; passes message to server stub; access control</li>
<li>unmarshal : server stub &ldquo;unmarshals&rdquo; args (extract args from buffer)</li>
<li>actual call : server stub calls local procedure implementation</li>
<li>result : server performs operation and computes result of RPC operation</li>
</ol>
<p>(same on return &lt;=)</p>
<h2 id="interface-definition-language-idl">Interface definition Language (IDL)</h2>
<ul>
<li>Used to describe the interface the server expects
<ul>
<li>procedure name, args, 2 result types</li>
<li>version number</li>
</ul>
</li>
</ul>
<p>RPC can use IDL that is</p>
<ol>
<li>Language agnostic
<ul>
<li>XDR in SunRPC</li>
</ul>
</li>
<li>Language specific
<ul>
<li>Java in JavaRMI</li>
</ul>
</li>
</ol>
<h2 id="marshalling">Marshalling</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/marshalling.png" alt="Marshalling"  />
</p>
<h2 id="unmarshalling">Unmarshalling</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/unmarshalling.png" alt="Unmarshalling"  />
</p>
<p>Marshalling/Unmarshalling routines are provided by RPC system compiler.</p>
<h2 id="binding-and-registry">Binding and Registry</h2>
<ul>
<li>Client determines
<ul>
<li><strong>which</strong> server to connect to?
<ul>
<li>service name. version number</li>
</ul>
</li>
<li><strong>how</strong> to connect to that server?
<ul>
<li>IP address, network protocol</li>
</ul>
</li>
</ul>
</li>
<li>Registry : database of available services
<ul>
<li>search for service name to find server(which) and contact details(how)</li>
<li>distributed
<ul>
<li>any RPC service can register</li>
</ul>
</li>
<li>machine-specific
<ul>
<li>for services running on same machine</li>
<li>clients must know machine addresses</li>
<li>registry provides port number needed for connection</li>
</ul>
</li>
</ul>
</li>
<li>Who can provide a service?
<ul>
<li>lookup registry for image processing</li>
</ul>
</li>
<li>What services do they provide?
<ul>
<li>compress/filter.. version number =&gt; IDL</li>
</ul>
</li>
<li>How will they ship package?
<ul>
<li>TCP / UDP -&gt; registry</li>
</ul>
</li>
</ul>
<h2 id="pointers">Pointers</h2>
<ul>
<li>Procedure interface : foo(int,int)</li>
<li>in Local Calls : foo(x,y) =&gt; okay</li>
<li>in Remote Calls : foo(x,y) =&gt; ?</li>
</ul>
<p>here, y points to location in caller address space</p>
<ul>
<li>Solutions:
<ul>
<li>No pointers</li>
<li>Serialize pointers; copy referenced (&ldquo;points to&rdquo;) data structure to send buffer</li>
</ul>
</li>
</ul>
<h2 id="handling-partial-failures">Handling Partial Failures</h2>
<ul>
<li>Special RPC error notification (signal, exception..)
<ul>
<li>Catch all possible ways in which RPC can (partially) fail</li>
</ul>
</li>
</ul>
<h2 id="rpc-design-choice">RPC Design choice</h2>
<ul>
<li>Binding =&gt; How to find the server</li>
<li>IDL =&gt; How to talk to server; how to package data</li>
<li>Pointers as args =&gt; Disallow or serialize pointer data</li>
<li>Partial failures =&gt; Special error notifications</li>
</ul>
<hr>
<h1 id="distributed-file-systems">Distributed File Systems</h1>
<ul>
<li>Accessed via well defined interface
<ul>
<li>access via Virtual File Systems</li>
</ul>
</li>
<li>Focus on consistent state
<ul>
<li>tracking state, file update, cache coherence</li>
</ul>
</li>
<li>Mixed distribution models possible
<ul>
<li>replicates vs partitioned, peer-like systems</li>
</ul>
</li>
</ul>
<h2 id="dfs-models">DFS models</h2>
<ul>
<li>Client Server on different machines</li>
<li>File server distributed on multiple machines
<ul>
<li>replicated (each server : all files)</li>
<li>partitioned (each server : parts of files)</li>
<li>both (files partitioned, each partition replicates)</li>
</ul>
</li>
<li>Files stored on and served from all machines (peers)
<ul>
<li>blurred distinction between clients and servers</li>
</ul>
</li>
</ul>
<h2 id="remote-file-service--extremes">Remote File Service : Extremes</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/extremes.png" alt="extremes"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/extremes2.png" alt="extremes2"  />
</p>
<ol>
<li>Extreme1 : Upload/Download
<ul>
<li>like FTP, SVN</li>
<li><strong>+</strong> local read/writes at client</li>
<li><strong>-</strong> entire file download/upload evn for small accesses</li>
<li><strong>-</strong> server gives up contro;</li>
</ul>
</li>
<li>Extreme2 : True Remote File Access
<ul>
<li>Every access to remote file, nothing done locally</li>
<li><strong>+</strong> file access centralized, easy to reason about consistency</li>
<li><strong>-</strong> every file operation pays network cost, limits server scalablity</li>
</ul>
</li>
</ol>
<h2 id="remote-file-service--a-compromise">Remote File Service : A compromise</h2>
<p>A more practical Remote File access (with Caching)</p>
<ol>
<li>Allow clients to store parts of files locally (blocks)
<ul>
<li><strong>+</strong> low latency on file operations</li>
<li><strong>+</strong> server load reduces =&gt; more scalable</li>
</ul>
</li>
<li>Force clients to interact with server (frequently)
<ul>
<li><strong>+</strong> server has insights into what clients are doing</li>
<li><strong>+</strong> server has control into which accesses can be permitted =&gt; easier to maintain consistency</li>
<li><strong>-</strong> server more complex, requires different file sharing semantics</li>
</ul>
</li>
</ol>
<h2 id="stateless-vs-stateful-file-server">Stateless vs Stateful File server</h2>
<table>
<thead>
<tr>
<th>Stateless</th>
<th>Stateful</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keeps no state; Okay with extreme models, but can&rsquo;t support &lsquo;practical&rsquo; model</td>
<td>Keeps client state needed for &lsquo;practical&rsquo; model to track what is cached/accessed</td>
</tr>
<tr>
<td><strong>-</strong> Can&rsquo;t support caching and consistency management</td>
<td><strong>+</strong> Can support locking, caching, incremental operations</td>
</tr>
<tr>
<td><strong>-</strong> Every request self-contained. =&gt; more bits transferred</td>
<td><strong>-</strong> Overheads to maintain state and consistency. Depends on caching mechanism and consistency protocol.</td>
</tr>
<tr>
<td><strong>+</strong> No resources are used on server side (CPU, MM). On failure just restart</td>
<td><strong>-</strong> On failure, need checkpoining and recovery mechanisms</td>
</tr>
</tbody>
</table>
<h2 id="caching-state-in-a-dfs">Caching state in a DFS</h2>
<ul>
<li>Locally clients maintain portion of state (e.g. file blocks)</li>
<li>Locally clients perform operations on cached state (e.g. open/read/write)</li>
<li>requires coherent mechanisms</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachingstate.png" alt="cachingstate.png"  />
</p>
<table>
<thead>
<tr>
<th>System</th>
<th>How</th>
<th>When</th>
</tr>
</thead>
<tbody>
<tr>
<td>SMP</td>
<td>Write-update/Write-invalidate</td>
<td>On write</td>
</tr>
<tr>
<td>DFS</td>
<td>Client/Server-driven</td>
<td>On demand, periodically, on open..</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>Files or File blocks can be (with 1 server and multiple clients) cached in:</p>
<ul>
<li>in client memory</li>
<li>on client  storage device (HDD/SDD)</li>
<li>in buffer cache in memory on server
<ul>
<li>(usefulness will depend on client load, request interleaving)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>File Sharing Semantics in DFS</p>
</li>
<li>
<p>Session semantics (between open-close =&gt; Session)</p>
<ul>
<li>write-back on close(), update on open()</li>
<li>easy to reason, but may be insufficient</li>
</ul>
</li>
<li>
<p>Periodic updates</p>
<ul>
<li>client writes-back periodically
<ul>
<li>clients have a &ldquo;lease&rdquo; on cached data (not exclusively necessary)</li>
</ul>
</li>
<li>servers invalidates periodically =&gt; provides biunds on &ldquo;inconsistency&rdquo;</li>
<li>augment with flush()/sync() API</li>
</ul>
</li>
<li>
<p>Immutable files =&gt; never modify, new files created</p>
</li>
<li>
<p>Transactions =&gt; all changes atomic</p>
</li>
</ul>
<h1 id="replication-vs-partitioning">Replication vs Partitioning</h1>
<table>
<tr>
<th></th>
<th>Replication</th>
<th>Partitioning</th>
</tr>
<tr>
<td></td>
<td>Each machine holds all files</td>
<td>Each machine has subset of files</td>
</tr>
<tr>
<td>Advantages</td>
<td>Load balancing, availibility, fault tolerance </td>
<td>Availibility vs single server DFS;<br>Scalability with file system size;<br>single file writes simpler</td>
</tr>
<tr>
<td>Disadvantages</td>
<td>Write becomes more complex<br>- Synchronous to all<br>- or, write to one, then propagate to others<br>replicas must be reconciled e.g. Voting</td>
<td>On failure, lose portion of data<br>load balancing harder, if not balanced, then hot-spots possible</td>
</tr>
</table>
<ul>
<li>Can combine both techniques
<ul>
<li>Replicate each partition!</li>
</ul>
</li>
</ul>
<hr>
<h1 id="distributed-shared-memory">Distributed Shared Memory</h1>
<ul>
<li>Must decide placement
<ul>
<li>place memory (pages) close to relevant processes</li>
</ul>
</li>
<li>Must decide migration
<ul>
<li>when to copy memory (pages) from remote to local</li>
</ul>
</li>
<li>Must decide sharing rules
<ul>
<li>ensure memory generations are properly ordered</li>
</ul>
</li>
</ul>
<h2 id="peer-distribution-applications">&ldquo;Peer&rdquo; Distribution Applications</h2>
<ul>
<li>Each node
<ul>
<li>&ldquo;owns&rdquo; state</li>
<li>provide service</li>
</ul>
</li>
</ul>
<ul>
<li>all nodes are &ldquo;peers&rdquo;.</li>
</ul>
<p>Examples: Big-data analytics, web searches, context sharing or distributed shared memory (DSM)</p>
<h2 id="distributed-shared-memory-dsm">Distributed Shared Memory (DSM)</h2>
<p>DSM is a service that manages memory accross multiple nodes so that applications that are running on top will have an illusion that they are running on a shared memory.</p>
<ul>
<li>Each node
<ul>
<li>&ldquo;owns&rdquo; state =&gt; memory</li>
<li>provide service
<ul>
<li>memory read/writes from any nodes</li>
<li>consistency protocols</li>
</ul>
</li>
<li>permits scaling beyond single machine memory limits
<ul>
<li>more &ldquo;shared&rdquo; memory at lower cost</li>
<li>slower overall memory access</li>
<li>commodity interconnect technologies support this RDMA(Remote Direct Memory Access)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="hardware-vs-software-dsm">Hardware vs Software DSM</h2>
<ul>
<li>Hardware-supported (expensive!)
<ul>
<li>relies on interconnect</li>
<li>OS manages larger physical memory</li>
<li>NIC(Network Interface Cards) translate remote memory accesses to messages</li>
<li>NICs involved in all aspects of memory management; support atomics..</li>
</ul>
</li>
<li>Software supported
<ul>
<li>everything done by software</li>
<li>OS,or language runtime</li>
</ul>
</li>
<li>Hybrid (Software tasks in Hardware) DSM implementations
<ul>
<li>prefetch pages</li>
<li>address translation (easier done in hardware)</li>
<li>triggering invalidations (easier done in hardware)</li>
</ul>
</li>
</ul>
<h2 id="dsm-design--sharing-granularity">DSM Design : Sharing Granularity</h2>
<ul>
<li>cache line granularity?
<ul>
<li>overheads too high for DSM</li>
</ul>
</li>
</ul>
<ul>
<li>variable granularity [N]</li>
<li>page granularity [Y] (OS level)</li>
<li>object granularity [Y] (Language runtime)
<ul>
<li>beware of false sharing E.g. x and y shared on same page</li>
</ul>
</li>
</ul>
<h2 id="what-types-of-applications-use-dsm">What types of applications use DSM?</h2>
<p>Application access algorithm</p>
<ul>
<li>Single reader/ single writer (SRSW)</li>
<li>Multiple readers/ single writer (MRSW)</li>
<li>Multiple reader/ Multiple writers (MRMW)</li>
</ul>
<h2 id="performance-considerations">Performance considerations</h2>
<ul>
<li>DSM performance metric == access latency</li>
<li>Achieving low latency through
<ul>
<li>Migration
<ul>
<li>makes sense for SRSW</li>
<li>requires data movement</li>
</ul>
</li>
<li>Replication (caching)
<ul>
<li>more general</li>
<li>requires consistency management</li>
</ul>
</li>
</ul>
</li>
<li>Hence, migration is okay for SRSW but not for all.</li>
<li>Caching and Replication
<ul>
<li>Copies of data to incerease data access</li>
<li>for many concurrent writes, overheads too high but stil generally better than Migration</li>
</ul>
</li>
</ul>
<h2 id="consistency-management">Consistency Management</h2>
<ul>
<li>In SMP
<ul>
<li>write invalidate</li>
<li>write update</li>
</ul>
</li>
<li>coherence operations triggered in each write
<ul>
<li>overhead too high</li>
</ul>
</li>
<li>Push invalidations when data is written to
<ol>
<li>Proactive</li>
<li>Eager</li>
<li>Pessimistic</li>
</ol>
</li>
<li>Pull modifications information periodically
<ol>
<li>on demand (reactive)</li>
<li>lazy</li>
<li>optimistic</li>
</ol>
</li>
<li>when these methods get triggered depends on the consistency model for the shared state</li>
</ul>
<h2 id="dsm-architecture-page-based-os-supported">DSM architecture (page-based, OS-supported)</h2>
<ul>
<li>Page-based DSM architecture
<ul>
<li>distributed nodes, each with own local memory contribution</li>
<li>pool of pages from all nodes</li>
<li>each page has IO (&ldquo;home&rdquo; node), page frame number</li>
</ul>
</li>
<li>if MRMW
<ul>
<li>need local caches for performances (latency)</li>
<li>&ldquo;home&rdquo; or &ldquo;manager&rdquo; node drives coherence operations</li>
<li>all nodes responsible for part if distributed memory (state) management</li>
</ul>
</li>
<li>Home node
<ul>
<li>keeps state: page accessed, modifications, caching enabled/disabled, locked..</li>
</ul>
</li>
<li>Current owner
<ul>
<li>owner may not be equal to home node</li>
</ul>
</li>
<li>Explicit replicas
<ul>
<li>for load balancing, performance, or reliability
home, manager node controls memory</li>
</ul>
</li>
</ul>
<h2 id="dsm-metadata">DSM metadata</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/metadata.png" alt="metadata.png"  />
</p>
<h2 id="implementing-dsms">Implementing DSMs</h2>
<ul>
<li>Problem : DSM must intercept access to DSM state
<ul>
<li>to send remote messages requesting access</li>
<li>to trigger coherence messages</li>
</ul>
</li>
</ul>
<ul>
<li>overheads should be avoided for local non-shared state (pages)</li>
<li>dynamically engage and disengage DSM when necessary</li>
</ul>
<ul>
<li>Solution : Use hardware MMU support!
<ul>
<li>trap in OS if mapping invalid or access denied</li>
<li>remote address mapping -&gt; trap and pass to DSM to send message</li>
<li>cached content -&gt; trap and pass to DSM to perform memory coherence operations</li>
<li>other MMU information useful (e.g. Dirty page)</li>
</ul>
</li>
</ul>
<h2 id="consistency-model">Consistency model</h2>
<ul>
<li>Agreement between memory (state) and upper software layers</li>
<li>Memory behaves correctly if and only if software follows specific rules</li>
<li>Memory (state) guarantees to behave correctly
<ul>
<li>access ordering</li>
<li>propagation/ visibility of updates</li>
</ul>
</li>
</ul>
<h3 id="our-notation">Our notation</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/notation.png" alt="notation.png"  />
</p>
<ul>
<li>R_m1(X) =&gt; X was read from memory location m1</li>
<li>W_m1(Y) =&gt; Y was written to memory location m1</li>
</ul>
<h3 id="strict-consistency">Strict Consistency</h3>
<p>Strict Consistency =&gt; updates visible everywhere immediately</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/strict.png" alt="strict.png"  />
</p>
<ul>
<li>In practice
<ul>
<li>Even on single SMP no guarantees on order without extra locking and synchronization</li>
<li>in DS, latency and message reorder make this even harder</li>
<li>Hence almost impossible to guarantee strict consistency</li>
</ul>
</li>
</ul>
<h3 id="sequential-consistency">Sequential Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/seq.png" alt="seq.png"  />
</p>
<p>Sequential consistency =&gt;</p>
<ul>
<li>memory updates from different  processors may be arbitrarily interleaved</li>
<li>All processes will see the same interleaving</li>
<li>Operations from the same process always appearin order they were issued</li>
</ul>
<h3 id="causal-consistency">Causal Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/causal.png" alt="causal.png"  />
</p>
<ul>
<li>For writes not causally related, &ldquo;concurrent&rdquo; writes doesnt gurantee.</li>
<li>Don&rsquo;t permit arbitrary ordering from same process writer</li>
</ul>
<h3 id="weak-consistency">Weak Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/weak.png" alt="weak.png"  />
</p>
<ul>
<li>Use of synchronization
<ul>
<li>Synchronization point =&gt; operations that are available (R,W,Sync)</li>
<li>all updates prior to a sync point will be visible</li>
<li>no guarantee what happens in between</li>
</ul>
</li>
</ul>
<p><strong>+</strong> limit data movement of coherence operations</p>
<p><strong>-</strong> maintain extra state for additional operations</p>
<ul>
<li>Variations:
<ul>
<li>Single sync operation (sync)</li>
<li>Seperate sync per surface of state (page)</li>
<li>Seperate &ldquo;entry/acquire&rdquo; vs &ldquo;exit/release&rdquo; operations</li>
</ul>
</li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>PyShooter Python Game</title>
      <link>https://samirpaulb.github.io/posts/pyshooter/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/pyshooter/</guid>
      <description>PyShooter Python two-dimensional shooter game</description>
      <content:encoded><![CDATA[<p><a href="https://www.python.org"><img loading="lazy" src="https://img.shields.io/badge/language-python-blue.svg?style=flat" alt="Language"  />
</a>
<a href="https://www.pygame.org/news.html"><img loading="lazy" src="https://img.shields.io/badge/module-pygame-brightgreen.svg?style=flat" alt="Module"  />
</a></p>
<p>PyShooter is a two-dimensional shooter game in which the player runs horizontally and fires at enemies.</p>
<h5 id="repository-httpsgithubcomsamirpaulbpyshooterhttpsgithubcomsamirpaulbpyshooter">Repository: <a href="https://github.com/SamirPaulb/PyShooter">https://github.com/SamirPaulb/PyShooter</a></h5>
<h2 id="demo">Demo:</h2>
<iframe width="100%" height="420" src="https://www.youtube.com/embed/rg-49OTHZVY" loading="lazy" title="PyShooter - Samir Paul - YouTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="true"></iframe>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/214920668-ef657089-b71f-43c8-8011-a202a09f5531.mp4" loading="lazy" width="100%" height = "500" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<p>Vimeo: <a href="https://vimeo.com/809728956">https://vimeo.com/809728956</a></p>
<!---
<a href="https://www.youtube.com/watch?v=rg-49OTHZVY">
<img src="https://raw.githubusercontent.com/SamirPaul1/assets/main/pygame-youtube-video-thumbnail.jpg" alt="PyShooter Demo YouTube" width="700" height="370">
</a>
-->
<h2 id="how-to-play">How To Play</h2>
<ul>
<li>If you don&rsquo;t have <a href="https://www.python.org/downloads/">Python</a> or <a href="https://www.pygame.org/download.shtml">Pygame</a> installed, you can simply double click the .exe file to play the game.
<strong>Note:</strong> <em>The .exe file needs to stay in the same directory as the sounds, images, and font folders.</em></li>
</ul>
<p>Install Pygame <code>pip install pygame</code></p>
<ul>
<li>If you have the correct version of Python and Pygame installed, you can run the program in the command prompt / terminal.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> PyShooter
</span></span><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>Credits for assets used:</p>
<ol>
<li><a href="https://erayzesen.itch.io/pixel-platformer">https://erayzesen.itch.io/pixel-platformer</a></li>
<li><a href="https://secrethideout.itch.io/team-wars-platformer-battle">https://secrethideout.itch.io/team-wars-platformer-battle</a></li>
<li><a href="https://soundimage.org/fantasywonder">https://soundimage.org/fantasywonder</a></li>
<li><a href="https://gushh.net/blog/free-game-sprites-explosion-3">https://gushh.net/blog/free-game-sprites-explosion-3</a></li>
<li><a href="https://mtk.itch.io/grenades-16x16">https://mtk.itch.io/grenades-16x16</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Text File Compressor De-compressor Web App</title>
      <link>https://samirpaulb.github.io/posts/text-file-compressor-de-compressor-web-app/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/text-file-compressor-de-compressor-web-app/</guid>
      <description>Text File Compressor De-compressor Web App</description>
      <content:encoded><![CDATA[<ul>
<li>This webapp uses Huffman Coding for Text Compression and De-compression.</li>
<li>Made with <code>JavaScript</code>, <code>HTML5</code> and <code>CSS3</code>.</li>
<li>Live Demo: <a href="https://samirpaulb.github.io/txt-compressor/"><strong>samirpaulb.github.io/txt-compressor</strong></a></li>
<li>Repository: <a href="https://github.com/SamirPaulb/txt-compressor">github.com/SamirPaulb/txt-compressor</a></li>
</ul>
<h2 id="about-this-application">About this application:</h2>
<ul>
<li>An online text(.txt) file compressor, decompressor which uses Huffman Algorithm to encode/compress files by 35% and decode them back to the original size.</li>
<li>This tool assigns a variable-length code to the characters of the uploaded file based on the frequency of occurrence. Then converts characters to that special code which takes less size than the original ASCII codes. Huffman code forms a binary tree assigning the most frequent characters with the smallest codes and longer codes for the least frequent characters.</li>
<li>A Huffman code is a tree, built bottom up, starting with the list of different characters appearing in a text and their frequency.</li>
<li>With this lossless data compression method, this tool can compress the file size by 35 to 40%.</li>
<li>As file size gets reduced and original characters get changed to special characters so this encoding also improves security by encrypting the file during file sharing.</li>
<li>With the decoding feature, the user can decode the encoded file and get back the original file of the previous size.</li>
<li>I have used JavaScript to implement the algorithms so that browser can compile the code and HTML, CSS to make the website responsive.</li>
<li>Additional instructions and warnings are provided if steps are not followed correctly.</li>
<li>An <a href="https://samirpaulb.github.io/txt-compressor/info.html">Info page</a> is added to give more information about tecnique of <strong>Lossless Data Compression</strong> with Huffman coding.</li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172716965-50560f4a-2acf-4013-ae87-8b474b2a09e3.mp4" loading="lazy" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li><input checked="" disabled="" type="checkbox"> Landing Page:</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-landing-page.png" alt="landing-page"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Upload File</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step1.png" alt="step1"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Select Action (Compress / De-compress)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step2.png" alt="step2"  />
</p>
<ul>
<li>
<p><input checked="" disabled="" type="checkbox"> Wait for File Download</p>
<ul>
<li>
<p>File gets downloaded automatically when selected process is complete.</p>
</li>
<li>
<p>Compression - Compression Ratio is also displayed</p>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step3.png" alt="compression"  />
</p>
<ul>
<li>De-compression</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-decompression.png" alt="decompression"  />
</p>
</li>
<li>
<p>Additional Instructions and Warnings are provided if the above steps are not followed correctly</p>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-nofile.png" alt="noFile"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-verysmallfile.png" alt="smallFile"  />
</p>
<ul>
<li>About the tecnique of Lossless Data Compression with Huffman coding.</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-info.jpeg" alt="info1"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Some of My Online Courses Certificates</title>
      <link>https://samirpaulb.github.io/posts/some-of-my-online-courses-certificates/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/some-of-my-online-courses-certificates/</guid>
      <description>Some of My Online Courses Certificates</description>
      <content:encoded><![CDATA[<h1 id="some-of-my-verified-skills-and-certifications">Some of my verified skills and certifications‚úÖ:</h1>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000757-d9920eef-d5bf-4ef9-a043-ef28d66cf2a2.jpg" alt="Adobe Photoshop CC Fundamentals and Essentials Training Udemy UC-c9524150-649d-4ed2-bdcc-9fcfd284297a-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000775-21a04da5-4241-4d4d-a91f-fd32c1008a09.jpg" alt="Advanced Algorithms and Complexity Coursera GLMMPEBLCU9Q-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000778-885a11c9-c3b0-40cd-86ca-a0cd016e100e.jpg" alt="AI Fundamentals DataCamp Certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000784-28a09b2d-cd63-4575-81c1-f1127d4ec6f5.jpg" alt="AI ON JETSON NANO Nvidia-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000789-2a660c46-d8d1-4d07-9d09-b1df9882a63e.jpg" alt="Algorithmic Toolbox Coursera MA4KKNFEU7MB-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000791-6763e718-6b72-4db4-a893-1f4d683e5d5f.jpg" alt="C&#43;&#43; Programming Udemy UC-c58957c7-3ae3-4f83-b4b1-2f69b2df48fa-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000796-e5091489-1644-4aa0-b17c-95db71b158d4.jpg" alt="Codegoda 2022 organised by Agoda-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000801-4f9cedc2-9e04-4d80-8766-2645dd3310ac.jpg" alt="Data Analytics Real-World Projects in Python Udemy UC-75332da1-4725-4f60-80ab-41f640046e3e-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000807-5527fa2f-1812-4bdf-85af-b9b1c237580f.jpg" alt="Data Science for Everyone DateCamp Certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000814-229550c2-e13b-4377-a2ac-bdb101ab40d2.jpg" alt="Data Structures Coursera 394N5RVDD2EU-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000819-7e707391-c1f8-44ac-9b1f-a41716c3c469.jpg" alt="Database Foundations Database Management-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000823-1eff258f-483e-40cb-8b46-d4535960add6.jpg" alt="Databases_ Relational Databases and SQL StanfordOnline SOE YDB-SQL0001 Certificate _ edX-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000825-fca0038a-1b87-44e0-ba5c-78219c7e9007.jpg" alt="Divide and Conquer, Sorting and Searching, and Randomized Algorithms Coursera V58E5TWMYGTV-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000830-a24369f8-fbba-445b-908e-84024a1d03aa.jpg" alt="Introduction to IoT_Cisco -certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000834-fbb4181f-05b2-4ca5-a102-5ae0984edd9b.jpg" alt="Introduction to Opensource, Git and Github Microsoft Learn Student  2102001215000100   Github-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000839-3f4158ba-3993-43f0-befa-65fd769060fb.jpg" alt="Introduction to SQL Data Camp certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000841-68c9007b-4e86-4892-9eb3-a38022703889.jpg" alt="IoT Foundations Operating Systems Fundamentals-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000846-d0da3ea5-9d18-40b6-a4ac-7eecf8c0d95f.jpg" alt="Linux Shells and Processes - LinkedIn learning-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000849-c222d1f0-3856-4fad-8f59-380a503665b5.jpg" alt="Machine Learning Coursera VJHQ4C2F8LDA-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000857-a0b600ce-8063-47bf-84ea-204c1fdbbfa2.jpg" alt="Microsoft SQL Server 2019_ For Beginners Udemy UC-93630ce4-c301-401f-a935-a38155ba79aa-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000863-558e99d7-c318-4e2a-b4be-b7ff04828f07.jpg" alt="Networking Foundations Network Media LANs-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000865-807a964f-77d7-46e1-b05b-fc5ed76b39df.png" alt="Python Assessment for skill HackerRank Certificate"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000868-12b8d203-0fb8-4b55-b09e-1ccb847a2e7b.png" alt="Deep Learning Fundamentals TV ML0115EN Certificate Cognitive Class"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000869-a38af34d-a5f5-4eea-afe9-9b4fba238402.png" alt="Problem Solving (Basic) HackerRank Certificate"  />
</p>
<hr>
<p>The content and images of this post are protected by intellectual property rights and safeguarded by the protection service offered by <a href="https://www.dmca.com/">DMCA.com</a>.</p>
<p><a href="https://www.dmca.com/Protection/Status.aspx?ID=7f8c10cf-e84d-4bc6-ae00-edf047097d43"><img loading="lazy" src="https://images.dmca.com/Badges/DMCA_logo-std-btn120w.png?ID=7f8c10cf-e84d-4bc6-ae00-edf047097d43" alt="DMCA.com Protection Status"  />
</a></p>
<script src="https://images.dmca.com/Badges/DMCABadgeHelper.min.js"> </script>
]]></content:encoded>
    </item>
    <item>
      <title>URL Shortening Service</title>
      <link>https://samirpaulb.github.io/posts/url-shortening-service/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/url-shortening-service/</guid>
      <description>URL Shortening Service</description>
      <content:encoded><![CDATA[<h1 id="designing-a-url-shortening-service-like-tinyurl">Designing a URL Shortening service like TinyURL</h1>
<hr>
<p>Let&rsquo;s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs.</p>
<p>Similar services: bit.ly, goo.gl, qlink.me, etc.<br>
Difficulty Level: Easy</p>
<p>We&rsquo;ll cover the following:</p>
<ul>
<li><a href="#1-why-do-we-need-url-shortening">1. Why do we need URL shortening?</a></li>
<li><a href="#2-requirements-and-goals-of-the-system">2. Requirements and Goals of the System</a></li>
<li><a href="#3-capacity-estimation-and-constraints">3. Capacity Estimation and Constraints</a></li>
<li><a href="#4-system-apis">4. System APIs</a></li>
<li><a href="#5-database-design">5. Database Design</a>
<ul>
<li><a href="#database-schema">Database Schema:</a></li>
</ul>
</li>
<li><a href="#6-basic-system-design-and-algorithm">6. Basic System Design and Algorithm</a>
<ul>
<li><a href="#a-encoding-an-actual-url">a. Encoding an actual URL</a></li>
<li><a href="#b-generating-keys-offline">b. Generating keys offline</a></li>
</ul>
</li>
<li><a href="#7-data-partitioning-and-replication">7. Data Partitioning and Replication</a></li>
<li><a href="#8-cache">8. Cache</a></li>
<li><a href="#9-load-balancer-lb">9. Load Balancer (LB)</a></li>
<li><a href="#10-purging-or-db-cleanup">10. Purging or DB cleanup</a></li>
<li><a href="#11-telemetry">11. Telemetry</a></li>
<li><a href="#12-security-and-permissions">12. Security and Permissions</a></li>
</ul>
<h2 id="1-why-do-we-need-url-shortening">1. Why do we need URL shortening?</h2>
<p>URL shortening is used to create shorter aliases for long URLs.
We call these shortened aliases &ldquo;short links.&rdquo; Users are redirected
to the original URL when they hit these short links.
Short links save a lot of space when displayed, printed, messaged, or tweeted.
Additionally, users are less likely to mistype shorter URLs.</p>
<p>For example, if we shorten this page through TinyURL:</p>
<blockquote>
<p><a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/">https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/</a></p>
</blockquote>
<p>We would get:</p>
<blockquote>
<p><a href="https://tinyurl.com/jlg8zpc">https://tinyurl.com/jlg8zpc</a></p>
</blockquote>
<p>The shortened URL is nearly one-third the size of the actual URL.</p>
<p>URL shortening is used for optimizing links across devices, tracking individual links to analyze audience and campaign performance, and hiding affiliated original URLs.</p>
<p>If you haven&rsquo;t used <a href="https://tinyurl.com/">tinyurl.com</a> before,
please try creating a new shortened URL and spend some time going through
the various options their service offers. This will help you a lot in
understanding this chapter.</p>
<h2 id="2-requirements-and-goals-of-the-system">2. Requirements and Goals of the System</h2>
<blockquote>
<p>&#x1f4a1; You should always clarify requirements at the beginning of the interview.</p>
<pre><code>   Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.
</code></pre>
</blockquote>
<p>Our URL shortening system should meet the following requirements:</p>
<p><strong>Functional Requirements:</strong></p>
<ol>
<li>Given a URL, our service should generate a shorter and unique alias of it.
This is called a short link. This link should be short enough to be easily copied and pasted into applications.</li>
<li>When users access a short link, our service should redirect them to the original link.</li>
<li>Users should optionally be able to pick a custom short link for their URL.</li>
<li>Links will expire after a standard default timespan. Users should be able to specify the expiration time.</li>
</ol>
<p><strong>Non-Functional Requirements:</strong></p>
<ol>
<li>The system should be highly available. This is required because, if our service is down,
all the URL redirections will start failing.</li>
<li>URL redirection should happen in real-time with minimal latency.</li>
<li>Shortened links should not be guessable (not predictable).</li>
</ol>
<p><strong>Extended Requirements:</strong></p>
<ol>
<li>Analytics; e.g., how many times a redirection happened?</li>
<li>Our service should also be accessible through REST APIs by other services.</li>
</ol>
<h2 id="3-capacity-estimation-and-constraints">3. Capacity Estimation and Constraints</h2>
<p>Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings.
Let&rsquo;s assume a 100:1 ratio between read and write.</p>
<p><strong>Traffic estimates:</strong> Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio,
we can expect 50B redirections during the same period:</p>
<blockquote>
<pre><code>                                  **100 * 500M =&gt; 50B**
</code></pre>
</blockquote>
<p>What would be Queries Per Second (QPS) for our system? New URLs shortenings per second:</p>
<blockquote>
<pre><code>                **500 million / (30 days * 24 hours * 3600 seconds) = ~200 URLs/s**
</code></pre>
</blockquote>
<p>Considering 100:1 read/write ratio, URLs redirections per second will be:</p>
<blockquote>
<pre><code>                                     **100 * 200 URLs/s = 20K/s**
</code></pre>
</blockquote>
<p><strong>Storage estimates:</strong> Let&rsquo;s assume we store every URL shortening request (and associated shortened link) for 5 years.
Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion:</p>
<blockquote>
<pre><code>                   **500 million * 5 years * 12 months = 30 billion**
</code></pre>
</blockquote>
<p>Let&rsquo;s assume that each stored object will be approximately 500 bytes (just a ballpark estimate&ndash;we will dig
into it later). We will need 15TB of total storage:</p>
<blockquote>
<pre><code>                                          **30 billion * 500 bytes = 15 TB**
</code></pre>
</blockquote>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-capacity-estimation-and-constraints.png" alt="url-shortening-capacity-estimation-and-constraints"  />
</p>
<p><strong>Bandwidth estimates:</strong> For write requests, since we expect 200 new URLs every second, total incoming data for
our service will be 100KB per second:</p>
<blockquote>
<pre><code>                               **200 * 500 bytes = 100 KB/s**
</code></pre>
</blockquote>
<p>For read requests, since every second we expect ~20K URLs redirections, total outgoing data for our service
would be 10MB per second:</p>
<blockquote>
<pre><code>                                   **20K * 500 bytes = ~10 MB/s**
</code></pre>
</blockquote>
<p><strong>Memory estimates:</strong> If we want to cache some of the hot URLs that are frequently accessed,
how much memory will we need to store them? If we follow the 80-20 rule, meaning 20% of URLs generate 80% of traffic,
we would like to cache these 20% hot URLs.</p>
<p>Since we have 20K requests per second, we will be getting 1.7 billion requests per day:</p>
<blockquote>
<pre><code>                          **20K * 3600 seconds * 24 hours = ~1.7 billion**
</code></pre>
</blockquote>
<p>To cache 20% of these requests, we will need 170GB of memory.</p>
<blockquote>
<pre><code>                              **0.2 * 1.7 billion * 500 bytes = ~170GB**
</code></pre>
</blockquote>
<p>One thing to note here is that since there will be a lot of duplicate requests (of the same URL), therefore,
our actual memory usage will be less than 170GB.</p>
<p><strong>High level estimates:</strong> Assuming 500 million new URLs per month and 100:1 read:write ratio,
following is the summary of the high level estimates for our service:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-bandwidth-estimates.png" alt="url-shortening-bandwidth-estimates"  />
</p>
<h2 id="4-system-apis">4. System APIs</h2>
<blockquote>
<p>&#x1f4a1; Once we&rsquo;ve finalized the requirements, it&rsquo;s always a good idea to define the system APIs.</p>
<pre><code>   This should explicitly state what is expected from the system.
</code></pre>
</blockquote>
<p>We can have SOAP or REST APIs to expose the functionality of our service.
Following could be the definitions of the APIs for creating and deleting URLs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">createURL(api_dev_key,original_url,custom_alias=None,user_name=None,expire_date=None)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">api_dev_key (string)    : The API developer key of a registered account. 
</span></span><span class="line"><span class="cl">                          This will be used to, among other things, throttle users based on their allocated quota
</span></span><span class="line"><span class="cl">original_url (string)   : Original URL to be shortened.
</span></span><span class="line"><span class="cl">custom_alias (string)   : Optional custom key for the URL.
</span></span><span class="line"><span class="cl">user_name (string)      : Optional user name to be used in the encoding.
</span></span><span class="line"><span class="cl">expire_date (string)    : Optional expiration date for the shortened URL.
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Returns:</strong>(string)
A successful insertion returns the shortened URL; otherwise, it returns an error code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">deleteURL(api_dev_key,url_kexy)
</span></span></code></pre></td></tr></table>
</div>
</div><p>Where &ldquo;url_key&rdquo; is a string representing the shortened URL to be retrieved. A successful deletion returns &lsquo;URL Removed&rsquo;.</p>
<p><strong>How do we detect and prevent abuse?</strong> A malicious user can put us out of business by consuming all URL keys
in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited
to a certain number of URL creations and redirections per some time period (which may be set to a different duration
per developer key).</p>
<h2 id="5-database-design">5. Database Design</h2>
<blockquote>
<p>&#x1f4a1; Defining the DB schema in the early stages of the interview would help to understand the data</p>
<pre><code>   flow among various components and later would guide towards data partitioning.
</code></pre>
</blockquote>
<p>A few observations about the nature of the data we will store:</p>
<ol>
<li>We need to store billions of records.</li>
<li>Each object we store is small (less than 1K).</li>
<li>There are no relationships between records&mdash;other than storing which user created a URL.</li>
<li>Our service is read-heavy.</li>
</ol>
<h4 id="database-schema">Database Schema:</h4>
<p>We would need two tables: one for storing information about the URL mappings, and one for the user&rsquo;s data
who created the short link.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-database-design.png" alt="url-shortening-database-design"  />
</p>
<p>What kind of database should we use?Since we anticipate storing billions of rows, and
we don&rsquo;t need to use relationships between objects &ndash; a NoSQL store like
<a href="https://en.wikipedia.org/wiki/Amazon_DynamoDB">DynamoDB</a>,
<a href="https://en.wikipedia.org/wiki/Apache_Cassandra">Cassandra</a>, or,
<a href="https://en.wikipedia.org/wiki/Riak">Riak</a> is a better choice.
A NoSQL choice would also be easier to scale.
Please see <a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5728116278296576/">SQL vs NoSQL</a>
for more details.</p>
<h2 id="6-basic-system-design-and-algorithm">6. Basic System Design and Algorithm</h2>
<p>The problem we are solving here is, how to generate a short and unique key for a given URL.</p>
<p>In the TinyURL example in Section 1, the shortened URL is
<a href="https://tinyurl.com/jlg8zpc%E2%80%9D">&ldquo;https://tinyurl.com/jlg8zpc&rdquo;</a>.
The last seven characters of this URL is the short key we want to generate. We&rsquo;ll explore two solutions here:</p>
<h4 id="a-encoding-an-actual-url">a. Encoding an actual URL</h4>
<p>We can compute a unique hash (e.g., <a href="https://en.wikipedia.org/wiki/MD5">MD5</a> or
<a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a>, etc.) of the given URL.
The hash can then be encoded for displaying. This encoding could be base36 ([a-z ,0-9]) or
base62 ([A-Z, a-z, 0-9]) and if we add &lsquo;+&rsquo; and &lsquo;/&rsquo; we can use
<a href="https://en.wikipedia.org/wiki/Base64#Base64_table">Base64</a> encoding.
A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?</p>
<p>Using base64 encoding, a 6 letters long key would result in 64^6 = ~68.7 billion possible strings.
Using base64 encoding, an 8 letters long key would result in 64^8 = ~281 trillion possible strings.</p>
<p>With 68.7B unique strings, let&rsquo;s assume six letter keys would suffice for our system.</p>
<p>If we use the MD5 algorithm as our hash function, it&rsquo;ll produce a 128-bit hash value. After base64 encoding,
we&rsquo;ll get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value).
Now we only have space for 8 characters per short key, how will we choose our key then?
We can take the first 6 (or 8) letters for the key. This could result in key duplication, to resolve that,
we can choose some other characters out of the encoding string or swap some characters.</p>
<p><strong>What are the different issues with our solution?</strong>
We have the following couple of problems with our encoding scheme:</p>
<ol>
<li>If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable.</li>
<li>What if parts of the URL are URL-encoded? e.g., <a href="https://www.educative.io/distributed.php?id=design">https://www.educative.io/distributed.php?id=design</a>, and
<a href="https://www.educative.io/distributed.php%3Fid%3Ddesign">https://www.educative.io/distributed.php%3Fid%3Ddesign</a> are identical except for the URL encoding.</li>
</ol>
<p><strong>Workaround for the issues:</strong> We can append an increasing sequence number to each input URL to make it unique,
and then generate a hash of it. We don&rsquo;t need to store this sequence number in the databases, though.
Possible problems with this approach could be an ever-increasing sequence number. Can it overflow?
Appending an increasing sequence number will also impact the performance of the service.</p>
<p>Another solution could be to append user id (which should be unique) to the input URL.
However, if the user has not signed in, we would have to ask the user to choose a uniqueness key.
Even after this, if we have a conflict, we have to keep generating a key until we get a unique one.</p>
<p>Request flow for shortening of a URL</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-1.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-2.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-3.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-4.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-5.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-6.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-7.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-8.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-9.png" alt="request-flow-for-accessing-a-shortened"  />
</p>
<h4 id="b-generating-keys-offline">b. Generating keys offline</h4>
<p>We can have a standalone <strong>Key Generation Service (KGS)</strong> that generates random six-letter strings beforehand
and stores them in a database (let&rsquo;s call it key-DB). Whenever we want to shorten a URL, we will just take one
of the already-generated keys and use it. This approach will make things quite simple and fast. Not only
are we not encoding the URL, but we won&rsquo;t have to worry about duplications or collisions. KGS will make sure
all the keys inserted into key-DB are unique</p>
<p><strong>Can concurrency cause problems?</strong> As soon as a key is used, it should be marked in the database to ensure
it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario
where two or more servers try to read the same key from the database. How can we solve this concurrency problem?</p>
<p>Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that
are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to
the used keys table. KGS can always keep some keys in memory so that it can quickly provide them whenever
a server needs them.</p>
<p>For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table.
This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server,
we will be wasting those keys&ndash;which could be acceptable, given the huge number of keys we have.</p>
<p>KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a
lock on) the data structure holding the keys before removing keys from it and giving them to a server.</p>
<p><strong>What would be the key-DB size?</strong> With base64 encoding, we can generate 68.7B unique six letters keys.
If we need one byte to store one alpha-numeric character, we can store all these keys in:</p>
<blockquote>
<pre><code>                             **6 (characters per key) * 68.7B (unique keys) = 412 GB.**
</code></pre>
</blockquote>
<p><strong>Isn&rsquo;t KGS a single point of failure?</strong> Yes, it is. To solve this, we can have a standby replica of KGS.
Whenever the primary server dies, the standby server can take over to generate and provide keys.</p>
<p><strong>Can each app server cache some keys from key-DB?</strong> Yes, this can surely speed things up. Although in this case,
if the application server dies before consuming all the keys, we will end up losing those keys.
This can be acceptable since we have 68B unique six-letter keys.</p>
<p><strong>How would we perform a key lookup?</strong> We can look up the key in our database to get the full URL.
If it&rsquo;s present in the DB, issue an &ldquo;HTTP 302 Redirect&rdquo; status back to the browser, passing the stored URL in the
&ldquo;Location&rdquo; field of the request. If that key is not present in our system, issue an &ldquo;HTTP 404 Not Found&rdquo; status
or redirect the user back to the homepage.</p>
<p><strong>Should we impose size limits on custom aliases?</strong> Our service supports custom aliases. Users can pick any
&lsquo;key&rsquo; they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable)
to impose a size limit on a custom alias to ensure we have a consistent URL database. Let&rsquo;s assume users can
specify a maximum of 16 characters per customer key (as reflected in the above database schema).</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/high-level-system-design-for-url-shortening.png" alt="high-level-system-design-for-url-shortening"  />
</p>
<h1 id="7-data-partitioning-and-replication">7. Data Partitioning and Replication</h1>
<p>To scale out our DB, we need to partition it so that it can store information about billions of URLs.
We need to come up with a partitioning scheme that would divide and store our data into different DB servers.</p>
<p>a. Range Based Partitioning:We can store URLs in separate partitions based on the first letter of the hash key.
Hence, we save all the URLs starting with letter &lsquo;A&rsquo; (and &lsquo;a&rsquo;) in one partition, save those that start with
letter &lsquo;B&rsquo; in another partition and so on. This approach is called range-based partitioning. We can even
combine certain less frequently occurring letters into one database partition. We should come up with a static
partitioning scheme so that we can always store/find a URL in a predictable manner.</p>
<p>The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to
put all URLs starting with letter &lsquo;E&rsquo; into a DB partition, but later we realize that we have too many URLs
that start with the letter &lsquo;E&rsquo;.</p>
<p><strong>b. Hash-Based Partitioning:</strong> In this scheme, we take a hash of the object we are storing. We then calculate
which partition to use based upon the hash. In our case, we can take the hash of the &lsquo;key&rsquo; or the short link to
determine the partition in which we store the data object.</p>
<p>Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can
always map any &lsquo;key&rsquo; to a number between [1&hellip;256]), and this number would represent the partition in which we
store our object.</p>
<p>This approach can still lead to overloaded partitions, which can be solved by using
<a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5709068098338816/">Consistent Hashing</a>.</p>
<h2 id="8-cache">8. Cache</h2>
<p>We can cache URLs that are frequently accessed. We can use some off-the-shelf solution like
<a href="https://en.wikipedia.org/wiki/Memcached">Memcached</a>, which can store full URLs with their respective hashes.
The application servers, before hitting backend storage, can quickly check if the cache has the desired URL.</p>
<p><strong>How much cache memory should we have?</strong> We can start with 20% of daily traffic and, based on clients&rsquo; usage pattern,
we can adjust how many cache servers we need. As estimated above, we need 170GB memory to cache 20% of daily traffic.
Since a modern-day server can have 256GB memory, we can easily fit all the cache into one machine.
Alternatively, we can use a couple of smaller servers to store all these hot URLs.</p>
<p><strong>Which cache eviction policy would best fit our needs?</strong> When the cache is full, and we want to replace a
link with a newer/hotter URL, how would we choose? <strong>Least Recently Used (LRU)</strong> can be a reasonable policy for
our system. Under this policy, we discard the least recently used URL first.
We can use a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashMap.html">Linked Hash Map</a> or a
similar data structure to store our URLs and Hashes, which will also keep track of the URLs
that have been accessed recently.</p>
<p>To further increase the efficiency, we can replicate our caching servers to distribute the load between them.</p>
<p><strong>How can each cache replica be updated?</strong> Whenever there is a cache miss, our servers would be hitting a
backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas.
Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it.</p>
<p>Request flow for accessing a shortened URL</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-1.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-2.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-3.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-4.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-5.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-6.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-7.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-8.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-9.png" alt="request-flow-for-accessing-a-shortened"  />
</p>
<h2 id="9-load-balancer-lb">9. Load Balancer (LB)</h2>
<p>We can add a Load balancing layer at three places in our system:</p>
<ol>
<li>Between Clients and Application servers</li>
<li>Between Application Servers and database servers</li>
<li>Between Application Servers and Cache servers</li>
</ol>
<p>Initially, we could use a simple <strong>Round Robin</strong> approach that distributes incoming requests equally
among backend servers. This LB is simple to implement and does not introduce any overhead. Another
benefit of this approach is that if a server is dead, LB will take it out of the rotation and will
stop sending any traffic to it.</p>
<p>A problem with <strong>Round Robin LB</strong> is that we don&rsquo;t take the server load into consideration. If a server is overloaded
or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution
can be placed that periodically queries the backend server about its load and adjusts traffic based on that.</p>
<h2 id="10-purging-or-db-cleanup">10. Purging or DB cleanup</h2>
<p>Should entries stick around forever or should they be purged? If a user-specified expiration time is reached,
what should happen to the link?</p>
<p>If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database.
Instead, we can slowly remove expired links and do a lazy cleanup. Our service will make sure that only
expired links will be deleted, although some expired links can live longer but will never be returned to users.</p>
<ul>
<li>Whenever a user tries to access an expired link, we can delete the link and return an error to the user.</li>
<li>A separate Cleanup service can run periodically to remove expired links from our storage and cache.
This service should be very lightweight and can be scheduled to run only when the user traffic is expected to be low.</li>
<li>We can have a default expiration time for each link (e.g., two years).</li>
<li>After removing an expired link, we can put the key back in the key-DB to be reused.</li>
<li>Should we remove links that haven&rsquo;t been visited in some length of time, say six months? This could be tricky.
Since storage is getting cheap, we can decide to keep links forever.</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/detailed-component-design-for-url-shortening.png" alt="detailed-component-design-for-url-shortening"  />
</p>
<h2 id="11-telemetry">11. Telemetry</h2>
<p>How many times a short URL has been used, what were user locations, etc.? How would we store these statistics?
If it is part of a DB row that gets updated on each view, what will happen when a popular URL is slammed with a
large number of concurrent requests?</p>
<p>Some statistics worth tracking: country of the visitor, date and time of access, web page that refers the click,
browser, or platform from where the page was accessed.</p>
<h2 id="12-security-and-permissions">12. Security and Permissions</h2>
<p>Can users create private URLs or allow a particular set of users to access a URL?</p>
<p>We can store the permission level (public/private) with each URL in the database.
We can also create a separate table to store UserIDs that have permission to see a specific URL.
If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back.
Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table
storing permissions would be the &lsquo;Hash&rsquo; (or the KGS generated &lsquo;key&rsquo;). The columns will store the UserIDs
of those users that have the permission to see the URL.</p>
]]></content:encoded>
    </item>
    <item>
      <title>SQL Joins - Inner, Left, Right and Full Joins</title>
      <link>https://samirpaulb.github.io/posts/sql-joins/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/sql-joins/</guid>
      <description>SQL Joins - Inner, Left, Right and Full Joins</description>
      <content:encoded><![CDATA[<p><strong>SQL Join</strong> statement is used to combine data or rows from two or more tables based on a common field between them.¬†Different types of Joins are as follows:¬†</p>
<ul>
<li>INNER JOIN</li>
<li>LEFT JOIN</li>
<li>RIGHT JOIN</li>
<li>FULL JOIN</li>
</ul>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png" alt="SQL Joins"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Leetcode Solutions Cheatsheet</title>
      <link>https://samirpaulb.github.io/posts/leetcode-solutions-cheatsheet/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/leetcode-solutions-cheatsheet/</guid>
      <description>Leetcode Solutions Cheatsheet</description>
      <content:encoded><![CDATA[<h1 id="1-two-sum">1-Two Sum</h1>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.
You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Given nums = [2, 7, 11, 15], target = 9,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Because nums[0] + nums[1] = 2 + 7 = 9,
</span></span><span class="line"><span class="cl">return [0, 1].
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="brute-force">Brute Force</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">.</span><span class="na">size</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time complexity:   O(n^2)       we have a nested loop 
</span></span><span class="line"><span class="cl">* Space complexity:  O(1) 	  we do not allocate any additional memory
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="one-pass-hash-table">One Pass Hash Table</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">complement</span><span class="o">=</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="n">complement</span><span class="p">)){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="p">{</span><span class="n">map</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">complement</span><span class="p">),</span><span class="n">i</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time complexity:   O(n)		each lookup in the hash table only requires O(1) time
</span></span><span class="line"><span class="cl">* Space complexity:  O(n)		we require additional space for the hash table which stores at most n
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="2-add-two-numbers">2-Add Two Numbers</h1>
<p>Given two non-empty linked lists representing two non-negative integers with the digits stored in
reverse order and each node containing a single digit, add the two numbers and return as a linked list</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 
</span></span><span class="line"><span class="cl">Output 7 -&gt; 0 -&gt; 8 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">342 + 465 = 807
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="elementary-math-solution">Elementary Math Solution</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span><span class="lnt" id="hl-6-21"><a class="lnlinks" href="#hl-6-21">21</a>
</span><span class="lnt" id="hl-6-22"><a class="lnlinks" href="#hl-6-22">22</a>
</span><span class="lnt" id="hl-6-23"><a class="lnlinks" href="#hl-6-23">23</a>
</span><span class="lnt" id="hl-6-24"><a class="lnlinks" href="#hl-6-24">24</a>
</span><span class="lnt" id="hl-6-25"><a class="lnlinks" href="#hl-6-25">25</a>
</span><span class="lnt" id="hl-6-26"><a class="lnlinks" href="#hl-6-26">26</a>
</span><span class="lnt" id="hl-6-27"><a class="lnlinks" href="#hl-6-27">27</a>
</span><span class="lnt" id="hl-6-28"><a class="lnlinks" href="#hl-6-28">28</a>
</span><span class="lnt" id="hl-6-29"><a class="lnlinks" href="#hl-6-29">29</a>
</span><span class="lnt" id="hl-6-30"><a class="lnlinks" href="#hl-6-30">30</a>
</span><span class="lnt" id="hl-6-31"><a class="lnlinks" href="#hl-6-31">31</a>
</span><span class="lnt" id="hl-6-32"><a class="lnlinks" href="#hl-6-32">32</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * public class ListNode {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     int val;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode next;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode(int x) { val = x; }
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="n">l2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ListNode</span><span class="w"> </span><span class="n">dummyHead</span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ListNode</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">q</span><span class="o">=</span><span class="n">l2</span><span class="p">,</span><span class="w"> </span><span class="n">curr</span><span class="o">=</span><span class="n">dummyHead</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">carry</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">||</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="p">:</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="c1">//if (p!=null) then x contains p.val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="p">:</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="o">=</span><span class="n">carry</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">carry</span><span class="o">=</span><span class="n">sum</span><span class="o">/</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">sum</span><span class="o">%</span><span class="n">10</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">curr</span><span class="o">=</span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="n">q</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">carry</span><span class="o">&gt;</span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">carry</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">dummyHead</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time Complexity:  O(max(m,n))         depends on the lengths of the two linked lists 
</span></span><span class="line"><span class="cl">* Space Complexity: O(max(m,n))		the maximum length of the new list is max(m,n)+1
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="3-substring-no-repeat">3-Substring No Repeat</h1>
<p>Longest Substring Without Repeating Characters</p>
<p>Given a string find the length of the longest substring without repeating characters.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1">1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2">2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3">3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example
</span></span><span class="line"><span class="cl">Input: 		&#34;abcabcbb&#34;
</span></span><span class="line"><span class="cl">Output:		3
</span></span><span class="line"><span class="cl">Explanation:	The answer is &#34;abc&#34;, with the length of 3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2">2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3">3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2
</span></span><span class="line"><span class="cl">Input:		&#34;bbbbb&#34;
</span></span><span class="line"><span class="cl">Output:		1
</span></span><span class="line"><span class="cl">Explanation:	The answer is &#34;b&#34;, with the length of 1
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3
</span></span><span class="line"><span class="cl">Input:		&#34;pwwkew&#34;
</span></span><span class="line"><span class="cl">Output:		3
</span></span><span class="line"><span class="cl">Explanation: 	The answer is &#34;wke&#34;, with the length of 3. Note that the answer must be a substring
</span></span><span class="line"><span class="cl">		&#34;pwke&#34; is a subsequence and not a substring 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="brute-force-1">Brute Force</h2>
<p><em>Algorithm</em></p>
<p>Suppose we have a function &ldquo;boolean allUnique(String substring)&rdquo; which returns true if all the
characters in the substring are unique and false otherwise. We can iterate through all the possible
substrings of the given string s and call the function allUnique. If it turns out to be true, then we
update our answer of the maximum length of substring without duplicate characters.</p>
<p>To enumerate all substrings of a given string we enumerate the start and end indices of them. Suppose
the start and end indices are i and j respectively. Then we have 0 &lt;= i &lt;= j &lt;= n. Thus using two
nested loops with i from 0 to n-1 and j from i+1 to n, we can enumerate all the substrings of s</p>
<p>To check if one string has duplicate characters we can use a set. We iterate through all the
characters in the string and put them into the set one by one. Before putting one character, we check
if the set already contains it. If so we return false and after the loop we return true.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">allUnique</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="p">))</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">allUnique</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span><span class="w"> </span><span class="n">set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">start</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">end</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Character</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">set</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="n">ch</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">set</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1"> 1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2"> 2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3"> 3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4"> 4</a>
</span><span class="lnt" id="hl-12-5"><a class="lnlinks" href="#hl-12-5"> 5</a>
</span><span class="lnt" id="hl-12-6"><a class="lnlinks" href="#hl-12-6"> 6</a>
</span><span class="lnt" id="hl-12-7"><a class="lnlinks" href="#hl-12-7"> 7</a>
</span><span class="lnt" id="hl-12-8"><a class="lnlinks" href="#hl-12-8"> 8</a>
</span><span class="lnt" id="hl-12-9"><a class="lnlinks" href="#hl-12-9"> 9</a>
</span><span class="lnt" id="hl-12-10"><a class="lnlinks" href="#hl-12-10">10</a>
</span><span class="lnt" id="hl-12-11"><a class="lnlinks" href="#hl-12-11">11</a>
</span><span class="lnt" id="hl-12-12"><a class="lnlinks" href="#hl-12-12">12</a>
</span><span class="lnt" id="hl-12-13"><a class="lnlinks" href="#hl-12-13">13</a>
</span><span class="lnt" id="hl-12-14"><a class="lnlinks" href="#hl-12-14">14</a>
</span><span class="lnt" id="hl-12-15"><a class="lnlinks" href="#hl-12-15">15</a>
</span><span class="lnt" id="hl-12-16"><a class="lnlinks" href="#hl-12-16">16</a>
</span><span class="lnt" id="hl-12-17"><a class="lnlinks" href="#hl-12-17">17</a>
</span><span class="lnt" id="hl-12-18"><a class="lnlinks" href="#hl-12-18">18</a>
</span><span class="lnt" id="hl-12-19"><a class="lnlinks" href="#hl-12-19">19</a>
</span><span class="lnt" id="hl-12-20"><a class="lnlinks" href="#hl-12-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time Complexity:   O(n^3)		Verifying if characters in   [i,j) are unique requires us to scan all of
</span></span><span class="line"><span class="cl">					them which would cost O(j-i) time. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					For a given i, the sum of time costed by each j -&gt; [i+1,n] is 
</span></span><span class="line"><span class="cl">					&#34;Summation from i+1 to n O(j-1)&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					Thus, the sum of all the time consumption is: 
</span></span><span class="line"><span class="cl">					O(summation from 0 to n-1(summation from j=i+1 to n (j-1))) 
</span></span><span class="line"><span class="cl">					O(summation from i=0 to n-1(1+n-i)(n-i)/2)) = O(n^3)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					*Note that the sum of all numbers up to n 1+2+3+...+n = n(n+1)/2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* Space Complexity:  O(min(n,m))	We require O(k) space for checking a substring has no duplicate 
</span></span><span class="line"><span class="cl">					characters, where k is the size of the set. The size of the Set is 
</span></span><span class="line"><span class="cl">					upper bounded by the size of the string n amd the size of the charset
</span></span><span class="line"><span class="cl">					or alphabet m 
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="sliding-window">Sliding Window</h2>
<p>A sliding window is an abstract concept commonly used in array/string problems. A window is a range of
elements in the array/string which usually defined by the start and end indices</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Ex. [i,j) left-closed, right-open
</span></span></code></pre></td></tr></table>
</div>
</div><p>A sliding window is a window that slides its two boundaries in a certain direction, for example if we
slide [i,j) to the right by 1 element, then it becomes [i+1, j+1) - left closed, right open.</p>
<p>Sliding Window approach, whenever we are looking at a section on an array usual to perform calculations
we don&rsquo;t need to completely recalculate everything for every section of the array. Usually we can use
the value obtained from another section of the array to determine something about this section of the
array. For example if we are calculating the sum of sections of an array we can use the previously
calculated value of a section to determine the sum of an adjacent section in the array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Ex. 1 2 3 4 5 6 7 8 
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we calculate the first section of four values we get 1+2+3+4 = 10 , then to calculate the next section
2+3+4+5 we can just take our first section (window_sum) and perform the operation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">window_sum-first entry + last entry = 10-1+5= 14
</span></span></code></pre></td></tr></table>
</div>
</div><p>So essentially for the window sliding technique we use what we know about an existing window to
determine properties for another window.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>In the brute force approach, we repeatedly check a substring to see if it has duplicate characters but
this is unnecessary. If a substring from index i to j-1 is already checked to have no duplicate
characters we only need to check if s[j] is already in the substring.</p>
<p>To check if a character is already in the substring we can scan the substring which leads to an O(n^2)
algorithm but we can improve on this runtime using a HashSet as a sliding window to check if a
character exists in the current set O(1).</p>
<p>We use a HashSet to store the characters in the current window [i,j) and then we slide the index j to
the right, if it is not in the HashSet, we slide j further until s[j] is already in the HashSet. At
this point we found the maximum size of substrings without duplicate characters starting with index i.
If we do this for all i, then we obtain our answer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span><span class="lnt" id="hl-16-14"><a class="lnlinks" href="#hl-16-14">14</a>
</span><span class="lnt" id="hl-16-15"><a class="lnlinks" href="#hl-16-15">15</a>
</span><span class="lnt" id="hl-16-16"><a class="lnlinks" href="#hl-16-16">16</a>
</span><span class="lnt" id="hl-16-17"><a class="lnlinks" href="#hl-16-17">17</a>
</span><span class="lnt" id="hl-16-18"><a class="lnlinks" href="#hl-16-18">18</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span><span class="w"> </span><span class="n">set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// try to extend the range [i, j]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">set</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">))){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">set</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">++</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">set</span><span class="p">.</span><span class="na">remove</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1">1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2">2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3">3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4">4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5">5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity:	O(2n)=O(n)	Worst case each character will be visited twice by i and j
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity: 	O(min(m,n))	Same as the brute force method, we need O(k) space for the 
</span></span><span class="line"><span class="cl">					sliding window where k is the size of the set. The size of the
</span></span><span class="line"><span class="cl">					set is bounded by the size of the string n and the size of the
</span></span><span class="line"><span class="cl">					charset/alphabet m
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="sliding-window-optimized">Sliding Window Optimized</h2>
<p>The previously discussed sliding window approach requires at most 2n steps and this could in fact be
optimized even further to require only n steps. Instead of using a set to tell if a character exists or
not, we could define a mapping of the characters to its index. Then we can skip the characters
immediately when we found a repeated character</p>
<p>If s[j] has a duplicate in the range [i , j) with index j&rsquo;, we don&rsquo;t need to increase i little be little
we can just skip all the elements in the range [i , j&rsquo;] and let i be j&rsquo;+1 directly</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1"> 1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2"> 2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3"> 3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4"> 4</a>
</span><span class="lnt" id="hl-18-5"><a class="lnlinks" href="#hl-18-5"> 5</a>
</span><span class="lnt" id="hl-18-6"><a class="lnlinks" href="#hl-18-6"> 6</a>
</span><span class="lnt" id="hl-18-7"><a class="lnlinks" href="#hl-18-7"> 7</a>
</span><span class="lnt" id="hl-18-8"><a class="lnlinks" href="#hl-18-8"> 8</a>
</span><span class="lnt" id="hl-18-9"><a class="lnlinks" href="#hl-18-9"> 9</a>
</span><span class="lnt" id="hl-18-10"><a class="lnlinks" href="#hl-18-10">10</a>
</span><span class="lnt" id="hl-18-11"><a class="lnlinks" href="#hl-18-11">11</a>
</span><span class="lnt" id="hl-18-12"><a class="lnlinks" href="#hl-18-12">12</a>
</span><span class="lnt" id="hl-18-13"><a class="lnlinks" href="#hl-18-13">13</a>
</span><span class="lnt" id="hl-18-14"><a class="lnlinks" href="#hl-18-14">14</a>
</span><span class="lnt" id="hl-18-15"><a class="lnlinks" href="#hl-18-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">(),</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w"> </span><span class="c1">// current index of character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// try to extend the range [i, j]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)),</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="4-median-of-two-sorted-arrays">4-Median of Two Sorted Arrays</h1>
<p>There are two sorted arrays num1 and num2 of size m and n respectively. Find the median of the two
sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2
cannot be both empty.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2">2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3">3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4">4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5">5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums1 = [1, 3] 
</span></span><span class="line"><span class="cl">nums2 = [2]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The median is 2.0
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1">1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2">2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3">3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4">4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5">5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums1= [1, 2] 
</span></span><span class="line"><span class="cl">nums2= [3, 4] 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The median is (2+3)/2 = 2.5
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="recursive-approach">Recursive Approach</h2>
<p>In statistics the median is used for dividing a set into two equal length subsets with one set being
always greater than the other set. To approach this problem first we cut A into two parts at a random
position i:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1">1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2">2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">         left_A                |           right_A 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  A[0], A[1], ... , A[i-1]         A[i], A[i+1], ... , A[m-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Since A has m elements, there are m+1 kinds of cutting as i can range from 0-m. We can also see that
left_A is empty when i is zero and right_A is empty when i=m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">len(left_A) = i and len(right_A)= m-i
</span></span></code></pre></td></tr></table>
</div>
</div><p>We can similarly cut B into two parts at a random position j:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1">1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2">2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	left_B			|	right_B
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  B[0], B[1], ... , B[j-1]	   B[j], B[j+1], ... , B[n-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now if we put left_A and left_B into one set and put right_A and right_B into another set and name
them left_part and right_part, then we get</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-24-1"><a class="lnlinks" href="#hl-24-1">1</a>
</span><span class="lnt" id="hl-24-2"><a class="lnlinks" href="#hl-24-2">2</a>
</span><span class="lnt" id="hl-24-3"><a class="lnlinks" href="#hl-24-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	left_part		|	right_part
</span></span><span class="line"><span class="cl">  A[0], A[1], ... , A[i-1]	  A[i], A[i+1], ... , A[m-1]
</span></span><span class="line"><span class="cl">  B[0], B[1], ... , B[j-1]	  B[j], B[j+1], ... , B[n-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we can ensure that</p>
<ol>
<li>the len(left_part) = len(right_part)</li>
<li>max(left_part) &lt;= min(right_part)</li>
</ol>
<p>then we divide all the elements in {A,B} into two parts with equal length and one part is always
greater than the other. Then</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-25-1"><a class="lnlinks" href="#hl-25-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">median= (max(left_part)+min(right_part))/2
</span></span></code></pre></td></tr></table>
</div>
</div><p>To ensure these two conditions, we need to ensure:</p>
<ol>
<li>i+j= m-i+n-j (or: m-i+n-j+1) if n&gt;m, we just need to set i=0~m, j= (m+n+1)/2 - i</li>
<li>B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j]</li>
</ol>
<p>So, all we need to do is search for i in [0,m] to find an object i such that
B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j] where j=(m+n+1)/2 -i</p>
<p>Then we perform a binary search following the steps described below:</p>
<ol>
<li>Set imin=0, imax=0, then start searching in [imin, imax]</li>
<li>Set i=(imin+imax)/2 , j=(m+n+1)/2 - i</li>
<li>Now we have len(left_part) = len(right_part) and there are only 3 more situations which we may
encounter:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-26-1"><a class="lnlinks" href="#hl-26-1"> 1</a>
</span><span class="lnt" id="hl-26-2"><a class="lnlinks" href="#hl-26-2"> 2</a>
</span><span class="lnt" id="hl-26-3"><a class="lnlinks" href="#hl-26-3"> 3</a>
</span><span class="lnt" id="hl-26-4"><a class="lnlinks" href="#hl-26-4"> 4</a>
</span><span class="lnt" id="hl-26-5"><a class="lnlinks" href="#hl-26-5"> 5</a>
</span><span class="lnt" id="hl-26-6"><a class="lnlinks" href="#hl-26-6"> 6</a>
</span><span class="lnt" id="hl-26-7"><a class="lnlinks" href="#hl-26-7"> 7</a>
</span><span class="lnt" id="hl-26-8"><a class="lnlinks" href="#hl-26-8"> 8</a>
</span><span class="lnt" id="hl-26-9"><a class="lnlinks" href="#hl-26-9"> 9</a>
</span><span class="lnt" id="hl-26-10"><a class="lnlinks" href="#hl-26-10">10</a>
</span><span class="lnt" id="hl-26-11"><a class="lnlinks" href="#hl-26-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">   - B[j-1] &lt;= A[i] and A[i-1]&lt;=B[j] 
</span></span><span class="line"><span class="cl">     This means that we have found the object i, so we can stop searching
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   - B[j-1] &gt; A[i]
</span></span><span class="line"><span class="cl">     Means A[i] is too small, we must adjust i to get B[j-1]&lt;=A[i] so we increase i because this will
</span></span><span class="line"><span class="cl">     cuase j to be decreased. We cannot decrease i because when i is decreased, j will be increased
</span></span><span class="line"><span class="cl">     so B[j-1] is increased and A[i] is decreased (B[j-1]&lt;= A[i] will never be satisfied)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   - A[i-1] &gt; B[j] 
</span></span><span class="line"><span class="cl">     Means A[i-1] is too big and thus we must decrease i to get A[i-1]&lt;=B[j]. In order to do that we 
</span></span><span class="line"><span class="cl">     must adjust the searching range to [imin, i-1] so we set imax=i-1 and go back to step 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>When the object i is found, then the media is:</p>
<p>max(A[i-1],B[j-1]), when m+n is odd
(max(A[i-1],B[j-1])+min(A[i],B[j]))/2, when m+n is even</p>
<p>Next is to consider the edge values i=0, i=m, j=0, j=n where A[i-1], B[j-1], A[i], B[j] may not exist</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-27-1"><a class="lnlinks" href="#hl-27-1"> 1</a>
</span><span class="lnt" id="hl-27-2"><a class="lnlinks" href="#hl-27-2"> 2</a>
</span><span class="lnt" id="hl-27-3"><a class="lnlinks" href="#hl-27-3"> 3</a>
</span><span class="lnt" id="hl-27-4"><a class="lnlinks" href="#hl-27-4"> 4</a>
</span><span class="lnt" id="hl-27-5"><a class="lnlinks" href="#hl-27-5"> 5</a>
</span><span class="lnt" id="hl-27-6"><a class="lnlinks" href="#hl-27-6"> 6</a>
</span><span class="lnt" id="hl-27-7"><a class="lnlinks" href="#hl-27-7"> 7</a>
</span><span class="lnt" id="hl-27-8"><a class="lnlinks" href="#hl-27-8"> 8</a>
</span><span class="lnt" id="hl-27-9"><a class="lnlinks" href="#hl-27-9"> 9</a>
</span><span class="lnt" id="hl-27-10"><a class="lnlinks" href="#hl-27-10">10</a>
</span><span class="lnt" id="hl-27-11"><a class="lnlinks" href="#hl-27-11">11</a>
</span><span class="lnt" id="hl-27-12"><a class="lnlinks" href="#hl-27-12">12</a>
</span><span class="lnt" id="hl-27-13"><a class="lnlinks" href="#hl-27-13">13</a>
</span><span class="lnt" id="hl-27-14"><a class="lnlinks" href="#hl-27-14">14</a>
</span><span class="lnt" id="hl-27-15"><a class="lnlinks" href="#hl-27-15">15</a>
</span><span class="lnt" id="hl-27-16"><a class="lnlinks" href="#hl-27-16">16</a>
</span><span class="lnt" id="hl-27-17"><a class="lnlinks" href="#hl-27-17">17</a>
</span><span class="lnt" id="hl-27-18"><a class="lnlinks" href="#hl-27-18">18</a>
</span><span class="lnt" id="hl-27-19"><a class="lnlinks" href="#hl-27-19">19</a>
</span><span class="lnt" id="hl-27-20"><a class="lnlinks" href="#hl-27-20">20</a>
</span><span class="lnt" id="hl-27-21"><a class="lnlinks" href="#hl-27-21">21</a>
</span><span class="lnt" id="hl-27-22"><a class="lnlinks" href="#hl-27-22">22</a>
</span><span class="lnt" id="hl-27-23"><a class="lnlinks" href="#hl-27-23">23</a>
</span><span class="lnt" id="hl-27-24"><a class="lnlinks" href="#hl-27-24">24</a>
</span><span class="lnt" id="hl-27-25"><a class="lnlinks" href="#hl-27-25">25</a>
</span><span class="lnt" id="hl-27-26"><a class="lnlinks" href="#hl-27-26">26</a>
</span><span class="lnt" id="hl-27-27"><a class="lnlinks" href="#hl-27-27">27</a>
</span><span class="lnt" id="hl-27-28"><a class="lnlinks" href="#hl-27-28">28</a>
</span><span class="lnt" id="hl-27-29"><a class="lnlinks" href="#hl-27-29">29</a>
</span><span class="lnt" id="hl-27-30"><a class="lnlinks" href="#hl-27-30">30</a>
</span><span class="lnt" id="hl-27-31"><a class="lnlinks" href="#hl-27-31">31</a>
</span><span class="lnt" id="hl-27-32"><a class="lnlinks" href="#hl-27-32">32</a>
</span><span class="lnt" id="hl-27-33"><a class="lnlinks" href="#hl-27-33">33</a>
</span><span class="lnt" id="hl-27-34"><a class="lnlinks" href="#hl-27-34">34</a>
</span><span class="lnt" id="hl-27-35"><a class="lnlinks" href="#hl-27-35">35</a>
</span><span class="lnt" id="hl-27-36"><a class="lnlinks" href="#hl-27-36">36</a>
</span><span class="lnt" id="hl-27-37"><a class="lnlinks" href="#hl-27-37">37</a>
</span><span class="lnt" id="hl-27-38"><a class="lnlinks" href="#hl-27-38">38</a>
</span><span class="lnt" id="hl-27-39"><a class="lnlinks" href="#hl-27-39">39</a>
</span><span class="lnt" id="hl-27-40"><a class="lnlinks" href="#hl-27-40">40</a>
</span><span class="lnt" id="hl-27-41"><a class="lnlinks" href="#hl-27-41">41</a>
</span><span class="lnt" id="hl-27-42"><a class="lnlinks" href="#hl-27-42">42</a>
</span><span class="lnt" id="hl-27-43"><a class="lnlinks" href="#hl-27-43">43</a>
</span><span class="lnt" id="hl-27-44"><a class="lnlinks" href="#hl-27-44">44</a>
</span><span class="lnt" id="hl-27-45"><a class="lnlinks" href="#hl-27-45">45</a>
</span><span class="lnt" id="hl-27-46"><a class="lnlinks" href="#hl-27-46">46</a>
</span><span class="lnt" id="hl-27-47"><a class="lnlinks" href="#hl-27-47">47</a>
</span><span class="lnt" id="hl-27-48"><a class="lnlinks" href="#hl-27-48">48</a>
</span><span class="lnt" id="hl-27-49"><a class="lnlinks" href="#hl-27-49">49</a>
</span><span class="lnt" id="hl-27-50"><a class="lnlinks" href="#hl-27-50">50</a>
</span><span class="lnt" id="hl-27-51"><a class="lnlinks" href="#hl-27-51">51</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">double</span><span class="w"> </span><span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">B</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">m</span><span class="o">=</span><span class="n">A</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="n">B</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">m</span><span class="o">&gt;</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">   	</span><span class="c1">//ensuring that m&lt;=n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">temp</span><span class="o">=</span><span class="n">A</span><span class="p">;</span><span class="w"> </span><span class="n">A</span><span class="o">=</span><span class="n">B</span><span class="p">;</span><span class="w"> </span><span class="n">B</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="w"> </span><span class="n">tmp</span><span class="o">=</span><span class="n">m</span><span class="p">;</span><span class="w"> </span><span class="n">m</span><span class="o">=</span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">iMin</span><span class="o">=</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">iMax</span><span class="o">=</span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">halfLen</span><span class="o">=</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">iMin</span><span class="o">&lt;=</span><span class="n">iMax</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="p">(</span><span class="n">iMin</span><span class="o">+</span><span class="n">iMax</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="w"> </span><span class="n">halfLen</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">iMax</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">iMin</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="c1">//i is too small</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">iMin</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]&gt;</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">iMax</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="c1">//i is too big</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">else</span><span class="p">{</span><span class="w"> </span><span class="c1">//we have found the object i </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="kt">int</span><span class="w"> </span><span class="n">maxLeft</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">maxLeft</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">maxLeft</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">maxLeft</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="p">)</span><span class="o">%</span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">return</span><span class="w"> </span><span class="n">maxLeft</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="kt">int</span><span class="w"> </span><span class="n">minRIght</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">minRight</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">minRight</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">minRight</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">maxLeft</span><span class="o">+</span><span class="n">minRight</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">.</span><span class="na">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">.</span><span class="na">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-28-1"><a class="lnlinks" href="#hl-28-1">1</a>
</span><span class="lnt" id="hl-28-2"><a class="lnlinks" href="#hl-28-2">2</a>
</span><span class="lnt" id="hl-28-3"><a class="lnlinks" href="#hl-28-3">3</a>
</span><span class="lnt" id="hl-28-4"><a class="lnlinks" href="#hl-28-4">4</a>
</span><span class="lnt" id="hl-28-5"><a class="lnlinks" href="#hl-28-5">5</a>
</span><span class="lnt" id="hl-28-6"><a class="lnlinks" href="#hl-28-6">6</a>
</span><span class="lnt" id="hl-28-7"><a class="lnlinks" href="#hl-28-7">7</a>
</span><span class="lnt" id="hl-28-8"><a class="lnlinks" href="#hl-28-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Time</span> <span class="n">Complexity</span><span class="p">:</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">)))</span>	<span class="n">At</span> <span class="n">first</span> <span class="n">the</span> <span class="n">searching</span> <span class="nb">range</span> <span class="n">is</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">m</span><span class="p">]</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">length</span> <span class="n">of</span> <span class="n">this</span> 
</span></span><span class="line"><span class="cl">					<span class="n">searching</span> <span class="nb">range</span> <span class="n">will</span> <span class="n">be</span> <span class="n">reduced</span> <span class="n">by</span> <span class="n">half</span> <span class="n">after</span> <span class="n">each</span> <span class="n">loop</span> <span class="n">so</span> <span class="n">we</span>
</span></span><span class="line"><span class="cl">					<span class="n">only</span> <span class="n">need</span> <span class="nb">log</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="n">loops</span><span class="o">.</span> <span class="n">Since</span> <span class="n">we</span> <span class="k">do</span> <span class="n">constant</span> <span class="n">operations</span> <span class="ow">in</span> 
</span></span><span class="line"><span class="cl">					<span class="n">each</span> <span class="n">loop</span> <span class="n">the</span> <span class="n">time</span> <span class="n">complexity</span> <span class="n">is</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="ow">and</span> <span class="n">since</span> <span class="n">m</span><span class="o">&lt;=</span><span class="n">n</span> <span class="n">the</span>
</span></span><span class="line"><span class="cl">					<span class="n">time</span> <span class="n">complexity</span> <span class="n">is</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Space</span> <span class="n">Complexity</span><span class="p">:</span> <span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>			<span class="n">We</span> <span class="n">only</span> <span class="n">need</span> <span class="n">constant</span> <span class="n">memory</span> <span class="n">to</span> <span class="n">store</span> <span class="mi">9</span> <span class="n">local</span> <span class="n">variables</span> <span class="n">so</span> <span class="n">the</span>
</span></span><span class="line"><span class="cl">					<span class="n">space</span> <span class="n">complexity</span> <span class="n">is</span> <span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="5-longest-palindromic-substring">5-Longest Palindromic Substring</h1>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length
of s is 1000.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-29-1"><a class="lnlinks" href="#hl-29-1">1</a>
</span><span class="lnt" id="hl-29-2"><a class="lnlinks" href="#hl-29-2">2</a>
</span><span class="lnt" id="hl-29-3"><a class="lnlinks" href="#hl-29-3">3</a>
</span><span class="lnt" id="hl-29-4"><a class="lnlinks" href="#hl-29-4">4</a>
</span><span class="lnt" id="hl-29-5"><a class="lnlinks" href="#hl-29-5">5</a>
</span><span class="lnt" id="hl-29-6"><a class="lnlinks" href="#hl-29-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;babad&#34; 
</span></span><span class="line"><span class="cl">Output: &#34;bab&#34; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Note: &#34;aba&#34; is also a valid answer 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-30-1"><a class="lnlinks" href="#hl-30-1">1</a>
</span><span class="lnt" id="hl-30-2"><a class="lnlinks" href="#hl-30-2">2</a>
</span><span class="lnt" id="hl-30-3"><a class="lnlinks" href="#hl-30-3">3</a>
</span><span class="lnt" id="hl-30-4"><a class="lnlinks" href="#hl-30-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;cbbd&#34;
</span></span><span class="line"><span class="cl">Output: &#34;bb&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="longest-common-substring">Longest Common Substring</h2>
<p>Some people will be tempted to come up with this quick solution which is unforunately flawed, &ldquo;reverse
S and become S&rsquo;. Find the longest common substring between S and S&rsquo; and that will be the longest
palindromic substring.&rdquo; This will work with some examples but there are some cases where the longest
common substring is not a valid palindrome.</p>
<pre><code>Ex. S=&quot;abacdfgdcaba&quot;, S'=&quot;abacdgfdcaba&quot; 	
</code></pre>
<p>The longest common substring between S and S&rsquo; is &ldquo;abacd&rdquo; and clearly this is not a valid
palindrome</p>
<p>We can solve this problem however by checking if the substring&rsquo;s indices are the same as the reversed
substring&rsquo;s original indices each time we find a longest common substring. If it is, then we attempt
to update the longest palindrome found so far, if not we skip this and find the next candidate</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-31-1"><a class="lnlinks" href="#hl-31-1">1</a>
</span><span class="lnt" id="hl-31-2"><a class="lnlinks" href="#hl-31-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n^2) 
</span></span><span class="line"><span class="cl">Space Complexity: O(n^2) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="brute-force-2">Brute Force</h2>
<p>The obvious brute force solution is to pick all possible starting and ending position for a substring
and verify if it is a palindrome</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-32-1"><a class="lnlinks" href="#hl-32-1">1</a>
</span><span class="lnt" id="hl-32-2"><a class="lnlinks" href="#hl-32-2">2</a>
</span><span class="lnt" id="hl-32-3"><a class="lnlinks" href="#hl-32-3">3</a>
</span><span class="lnt" id="hl-32-4"><a class="lnlinks" href="#hl-32-4">4</a>
</span><span class="lnt" id="hl-32-5"><a class="lnlinks" href="#hl-32-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n^3)		If n is the length of the input string, there are a total of 
</span></span><span class="line"><span class="cl">				(n 2) = n(n-1)/2 substrings and since verifying each substring takes 
</span></span><span class="line"><span class="cl">				O(n) time, the run time complexity is O(n^3)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(1) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="dynamic-programming">Dynamic Programming</h2>
<p>We can improve on the brute force solution by avoid some unnecessary re-computation while validating
palidromes. Consider the word &ldquo;ababa&rdquo;, if we already know that &ldquo;bab&rdquo; is a palindrome then we can
determine that ababa is a palindrome by noticing that the two left and right letters connected to bab
are the same.</p>
<p>This yields a straight forward dynamic programming solution where we initialize the one and two letters
palindromes and then work our way up finding all three letters palindromes and so on.</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-33-1"><a class="lnlinks" href="#hl-33-1">1</a>
</span><span class="lnt" id="hl-33-2"><a class="lnlinks" href="#hl-33-2">2</a>
</span><span class="lnt" id="hl-33-3"><a class="lnlinks" href="#hl-33-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(n^2)	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(n^2)	Using O(n^2) space to store the table 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="expand-around-center">Expand Around Center</h2>
<p>This approach allows us to solve this problem in O(n^2) time using only constant space complexity. We
observe that a palindrome mirrors around its enter and therefore a palindrome can be expanded from its
center and there are only 2n-1 such centers (for palindromes with an even number of letters like
&ldquo;abba&rdquo; its center is in between two letters).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-34-1"><a class="lnlinks" href="#hl-34-1"> 1</a>
</span><span class="lnt" id="hl-34-2"><a class="lnlinks" href="#hl-34-2"> 2</a>
</span><span class="lnt" id="hl-34-3"><a class="lnlinks" href="#hl-34-3"> 3</a>
</span><span class="lnt" id="hl-34-4"><a class="lnlinks" href="#hl-34-4"> 4</a>
</span><span class="lnt" id="hl-34-5"><a class="lnlinks" href="#hl-34-5"> 5</a>
</span><span class="lnt" id="hl-34-6"><a class="lnlinks" href="#hl-34-6"> 6</a>
</span><span class="lnt" id="hl-34-7"><a class="lnlinks" href="#hl-34-7"> 7</a>
</span><span class="lnt" id="hl-34-8"><a class="lnlinks" href="#hl-34-8"> 8</a>
</span><span class="lnt" id="hl-34-9"><a class="lnlinks" href="#hl-34-9"> 9</a>
</span><span class="lnt" id="hl-34-10"><a class="lnlinks" href="#hl-34-10">10</a>
</span><span class="lnt" id="hl-34-11"><a class="lnlinks" href="#hl-34-11">11</a>
</span><span class="lnt" id="hl-34-12"><a class="lnlinks" href="#hl-34-12">12</a>
</span><span class="lnt" id="hl-34-13"><a class="lnlinks" href="#hl-34-13">13</a>
</span><span class="lnt" id="hl-34-14"><a class="lnlinks" href="#hl-34-14">14</a>
</span><span class="lnt" id="hl-34-15"><a class="lnlinks" href="#hl-34-15">15</a>
</span><span class="lnt" id="hl-34-16"><a class="lnlinks" href="#hl-34-16">16</a>
</span><span class="lnt" id="hl-34-17"><a class="lnlinks" href="#hl-34-17">17</a>
</span><span class="lnt" id="hl-34-18"><a class="lnlinks" href="#hl-34-18">18</a>
</span><span class="lnt" id="hl-34-19"><a class="lnlinks" href="#hl-34-19">19</a>
</span><span class="lnt" id="hl-34-20"><a class="lnlinks" href="#hl-34-20">20</a>
</span><span class="lnt" id="hl-34-21"><a class="lnlinks" href="#hl-34-21">21</a>
</span><span class="lnt" id="hl-34-22"><a class="lnlinks" href="#hl-34-22">22</a>
</span><span class="lnt" id="hl-34-23"><a class="lnlinks" href="#hl-34-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">longestPalindrome</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">     </span><span class="c1">//edge case </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="o">=</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">len1</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">len2</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">len1</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">len</span><span class="o">&gt;</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">start</span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">end</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">expandAroundCenter</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">L</span><span class="o">=</span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">R</span><span class="o">=</span><span class="n">right</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="n">L</span><span class="o">&gt;=</span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">R</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">==</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">R</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">L</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">R</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="manachers-algorithm">Manacher&rsquo;s Algorithm</h2>
<p>There is an O(n) algorithm called Manacher&rsquo;s algorithm, however, it is a non-trivial algorithm and no
one would expect you to come up with this algorithm in a 45 minute coding session</p>
<p><br><br><br></p>
<hr>
<h1 id="6-zigzag-conversion">6-ZigZag Conversion</h1>
<p>The string &ldquo;PAYPALISHIRING&rdquo; is written in a zigzag pattern on a given number of rows like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-35-1"><a class="lnlinks" href="#hl-35-1">1</a>
</span><span class="lnt" id="hl-35-2"><a class="lnlinks" href="#hl-35-2">2</a>
</span><span class="lnt" id="hl-35-3"><a class="lnlinks" href="#hl-35-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">P   A   H   N
</span></span><span class="line"><span class="cl">A P L S I I G
</span></span><span class="line"><span class="cl">Y   I   R
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then read line by line: &ldquo;PAHNAPLSIIGYIR&rdquo;. Write a code that will take a string and make this
conversion given a number of rows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-36-1"><a class="lnlinks" href="#hl-36-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">string convert(string s, int numRows);
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-37-1"><a class="lnlinks" href="#hl-37-1">1</a>
</span><span class="lnt" id="hl-37-2"><a class="lnlinks" href="#hl-37-2">2</a>
</span><span class="lnt" id="hl-37-3"><a class="lnlinks" href="#hl-37-3">3</a>
</span><span class="lnt" id="hl-37-4"><a class="lnlinks" href="#hl-37-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: s=&#34;PAYPALISHIRING&#34;, numRows=3
</span></span><span class="line"><span class="cl">Output: &#34;PAHNAPLSIIGYIR&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-38-1"><a class="lnlinks" href="#hl-38-1"> 1</a>
</span><span class="lnt" id="hl-38-2"><a class="lnlinks" href="#hl-38-2"> 2</a>
</span><span class="lnt" id="hl-38-3"><a class="lnlinks" href="#hl-38-3"> 3</a>
</span><span class="lnt" id="hl-38-4"><a class="lnlinks" href="#hl-38-4"> 4</a>
</span><span class="lnt" id="hl-38-5"><a class="lnlinks" href="#hl-38-5"> 5</a>
</span><span class="lnt" id="hl-38-6"><a class="lnlinks" href="#hl-38-6"> 6</a>
</span><span class="lnt" id="hl-38-7"><a class="lnlinks" href="#hl-38-7"> 7</a>
</span><span class="lnt" id="hl-38-8"><a class="lnlinks" href="#hl-38-8"> 8</a>
</span><span class="lnt" id="hl-38-9"><a class="lnlinks" href="#hl-38-9"> 9</a>
</span><span class="lnt" id="hl-38-10"><a class="lnlinks" href="#hl-38-10">10</a>
</span><span class="lnt" id="hl-38-11"><a class="lnlinks" href="#hl-38-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: s=&#34;PAYPALISHIRING&#34;, numRows=4
</span></span><span class="line"><span class="cl">Output: &#34;PINALSIGYAHRPI&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">P           I          N
</span></span><span class="line"><span class="cl">A       L   S      I   G
</span></span><span class="line"><span class="cl">Y   A       H   R
</span></span><span class="line"><span class="cl">P           I
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="sort-by-row">Sort by Row</h2>
<p>By iterating through the string from left to right we can easily determine which row in the Zig-Zag
pattern that a character belongs to</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We can use min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern.
Iterate through s from left to right appending each character to the appropriate row. The appropriate
row can be tracked using two variables: the current row and the current direction.</p>
<p>The current direction only changes when we moved to the topmost row or moved down to the bottommost
row</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-39-1"><a class="lnlinks" href="#hl-39-1"> 1</a>
</span><span class="lnt" id="hl-39-2"><a class="lnlinks" href="#hl-39-2"> 2</a>
</span><span class="lnt" id="hl-39-3"><a class="lnlinks" href="#hl-39-3"> 3</a>
</span><span class="lnt" id="hl-39-4"><a class="lnlinks" href="#hl-39-4"> 4</a>
</span><span class="lnt" id="hl-39-5"><a class="lnlinks" href="#hl-39-5"> 5</a>
</span><span class="lnt" id="hl-39-6"><a class="lnlinks" href="#hl-39-6"> 6</a>
</span><span class="lnt" id="hl-39-7"><a class="lnlinks" href="#hl-39-7"> 7</a>
</span><span class="lnt" id="hl-39-8"><a class="lnlinks" href="#hl-39-8"> 8</a>
</span><span class="lnt" id="hl-39-9"><a class="lnlinks" href="#hl-39-9"> 9</a>
</span><span class="lnt" id="hl-39-10"><a class="lnlinks" href="#hl-39-10">10</a>
</span><span class="lnt" id="hl-39-11"><a class="lnlinks" href="#hl-39-11">11</a>
</span><span class="lnt" id="hl-39-12"><a class="lnlinks" href="#hl-39-12">12</a>
</span><span class="lnt" id="hl-39-13"><a class="lnlinks" href="#hl-39-13">13</a>
</span><span class="lnt" id="hl-39-14"><a class="lnlinks" href="#hl-39-14">14</a>
</span><span class="lnt" id="hl-39-15"><a class="lnlinks" href="#hl-39-15">15</a>
</span><span class="lnt" id="hl-39-16"><a class="lnlinks" href="#hl-39-16">16</a>
</span><span class="lnt" id="hl-39-17"><a class="lnlinks" href="#hl-39-17">17</a>
</span><span class="lnt" id="hl-39-18"><a class="lnlinks" href="#hl-39-18">18</a>
</span><span class="lnt" id="hl-39-19"><a class="lnlinks" href="#hl-39-19">19</a>
</span><span class="lnt" id="hl-39-20"><a class="lnlinks" href="#hl-39-20">20</a>
</span><span class="lnt" id="hl-39-21"><a class="lnlinks" href="#hl-39-21">21</a>
</span><span class="lnt" id="hl-39-22"><a class="lnlinks" href="#hl-39-22">22</a>
</span><span class="lnt" id="hl-39-23"><a class="lnlinks" href="#hl-39-23">23</a>
</span><span class="lnt" id="hl-39-24"><a class="lnlinks" href="#hl-39-24">24</a>
</span><span class="lnt" id="hl-39-25"><a class="lnlinks" href="#hl-39-25">25</a>
</span><span class="lnt" id="hl-39-26"><a class="lnlinks" href="#hl-39-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">convert</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">numRows</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">		</span><span class="c1">//if there is only one row return string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">List</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span><span class="w"> </span><span class="n">rows</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">numRows</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">());</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rows</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">curRow</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">boolean</span><span class="w"> </span><span class="n">goingDown</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rows</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">curRow</span><span class="p">).</span><span class="na">append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">curRow</span><span class="o">==</span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">curRow</span><span class="o">==</span><span class="n">numRows</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">goingDown</span><span class="o">=!</span><span class="n">goingDown</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">curRow</span><span class="o">+=</span><span class="n">goingDown</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">ret</span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">row</span><span class="p">:</span><span class="n">rows</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">ret</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">row</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">.</span><span class="na">toString</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-40-1"><a class="lnlinks" href="#hl-40-1">1</a>
</span><span class="lnt" id="hl-40-2"><a class="lnlinks" href="#hl-40-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(n)	where n==len(s)
</span></span><span class="line"><span class="cl">Space Complexity: O(n)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="visit-by-row">Visit by Row</h2>
<p>Visit the characters in the same order as reading the Zig-Zag pattern line by line</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Visit all characters in row 0 first, then row 1, then row 2, and so on.
For all whole numbers k,
* characters in row 0 are located at indexes  k*(2*numRows-2)
* characters in row numRows -1 are located at indexes  k*(2*numRows-2)+ numRows -1
* characters in inner row i are located at indexes  k*(2*numRows-2)+i and (k+1)(2*numRows-2)-i</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-41-1"><a class="lnlinks" href="#hl-41-1"> 1</a>
</span><span class="lnt" id="hl-41-2"><a class="lnlinks" href="#hl-41-2"> 2</a>
</span><span class="lnt" id="hl-41-3"><a class="lnlinks" href="#hl-41-3"> 3</a>
</span><span class="lnt" id="hl-41-4"><a class="lnlinks" href="#hl-41-4"> 4</a>
</span><span class="lnt" id="hl-41-5"><a class="lnlinks" href="#hl-41-5"> 5</a>
</span><span class="lnt" id="hl-41-6"><a class="lnlinks" href="#hl-41-6"> 6</a>
</span><span class="lnt" id="hl-41-7"><a class="lnlinks" href="#hl-41-7"> 7</a>
</span><span class="lnt" id="hl-41-8"><a class="lnlinks" href="#hl-41-8"> 8</a>
</span><span class="lnt" id="hl-41-9"><a class="lnlinks" href="#hl-41-9"> 9</a>
</span><span class="lnt" id="hl-41-10"><a class="lnlinks" href="#hl-41-10">10</a>
</span><span class="lnt" id="hl-41-11"><a class="lnlinks" href="#hl-41-11">11</a>
</span><span class="lnt" id="hl-41-12"><a class="lnlinks" href="#hl-41-12">12</a>
</span><span class="lnt" id="hl-41-13"><a class="lnlinks" href="#hl-41-13">13</a>
</span><span class="lnt" id="hl-41-14"><a class="lnlinks" href="#hl-41-14">14</a>
</span><span class="lnt" id="hl-41-15"><a class="lnlinks" href="#hl-41-15">15</a>
</span><span class="lnt" id="hl-41-16"><a class="lnlinks" href="#hl-41-16">16</a>
</span><span class="lnt" id="hl-41-17"><a class="lnlinks" href="#hl-41-17">17</a>
</span><span class="lnt" id="hl-41-18"><a class="lnlinks" href="#hl-41-18">18</a>
</span><span class="lnt" id="hl-41-19"><a class="lnlinks" href="#hl-41-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">convert</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">numRows</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">ret</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">cycleLen</span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="o">*</span><span class="w"> </span><span class="n">numRows</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">numRows</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">+=</span><span class="w"> </span><span class="n">cycleLen</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">ret</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="o">!=</span><span class="n">numROws</span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">ret</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">.</span><span class="na">toString</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-42-1"><a class="lnlinks" href="#hl-42-1">1</a>
</span><span class="lnt" id="hl-42-2"><a class="lnlinks" href="#hl-42-2">2</a>
</span><span class="lnt" id="hl-42-3"><a class="lnlinks" href="#hl-42-3">3</a>
</span><span class="lnt" id="hl-42-4"><a class="lnlinks" href="#hl-42-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n)	where n==len(s) Each index is visited once
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(n) 	C++ implementation can achieve O(1) if the return string is not considered 
</span></span><span class="line"><span class="cl">			extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="7-reverse-integer">7-Reverse Integer</h1>
<p>Given a 32- bit signed integer, reverse digits of an integer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-43-1"><a class="lnlinks" href="#hl-43-1">1</a>
</span><span class="lnt" id="hl-43-2"><a class="lnlinks" href="#hl-43-2">2</a>
</span><span class="lnt" id="hl-43-3"><a class="lnlinks" href="#hl-43-3">3</a>
</span><span class="lnt" id="hl-43-4"><a class="lnlinks" href="#hl-43-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 123
</span></span><span class="line"><span class="cl">Output: 321
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-44-1"><a class="lnlinks" href="#hl-44-1">1</a>
</span><span class="lnt" id="hl-44-2"><a class="lnlinks" href="#hl-44-2">2</a>
</span><span class="lnt" id="hl-44-3"><a class="lnlinks" href="#hl-44-3">3</a>
</span><span class="lnt" id="hl-44-4"><a class="lnlinks" href="#hl-44-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: -123
</span></span><span class="line"><span class="cl">Output: -321
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-45-1"><a class="lnlinks" href="#hl-45-1">1</a>
</span><span class="lnt" id="hl-45-2"><a class="lnlinks" href="#hl-45-2">2</a>
</span><span class="lnt" id="hl-45-3"><a class="lnlinks" href="#hl-45-3">3</a>
</span><span class="lnt" id="hl-45-4"><a class="lnlinks" href="#hl-45-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 120 
</span></span><span class="line"><span class="cl">Output: 21
</span></span></code></pre></td></tr></table>
</div>
</div><p>For the purpose of this problem assume that your function returns 0 when the reversed integer overflows</p>
<p><br><br></p>
<h2 id="pop-and-push-digits-and-check-before-overflow">Pop and Push Digits and Check Before Overflow</h2>
<p>We can build up the reverse integer one digit at and time and before doing so we can check whether or
not appedning another digit would cause overflow</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Reversing an integer can be done similarly to reversing a string. We want to repeatedly &ldquo;pop&rdquo; the last
digit off of x and push it to the back of the rev so that in the end rev is the reverse of x.</p>
<p>To push and pop digits without the help of some auxiliar stack/array we can use math</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-46-1"><a class="lnlinks" href="#hl-46-1">1</a>
</span><span class="lnt" id="hl-46-2"><a class="lnlinks" href="#hl-46-2">2</a>
</span><span class="lnt" id="hl-46-3"><a class="lnlinks" href="#hl-46-3">3</a>
</span><span class="lnt" id="hl-46-4"><a class="lnlinks" href="#hl-46-4">4</a>
</span><span class="lnt" id="hl-46-5"><a class="lnlinks" href="#hl-46-5">5</a>
</span><span class="lnt" id="hl-46-6"><a class="lnlinks" href="#hl-46-6">6</a>
</span><span class="lnt" id="hl-46-7"><a class="lnlinks" href="#hl-46-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//pop operation: 
</span></span><span class="line"><span class="cl">pop = x%10; 
</span></span><span class="line"><span class="cl">x/=10;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//push operation:
</span></span><span class="line"><span class="cl">temp=rev*10+pop;
</span></span><span class="line"><span class="cl">rev =temp;
</span></span></code></pre></td></tr></table>
</div>
</div><p>This statement is dangerous however as the statement temp=rev*10+pop may cause an overflow and luckily
it is easy to check beforehand whether or not this statement would cause an overflow.</p>
<ol>
<li>If temp=rev*10+pop causes an overflow, then rev&gt;=INTMAX/10</li>
<li>If rev&gt; INTMAX/10, then temp=rev*10+pop is guaranteed to overflow</li>
<li>if rev==INTMAX/10, then temp=rev*10 + pop will overflow if an only if pop&gt;7</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-47-1"><a class="lnlinks" href="#hl-47-1"> 1</a>
</span><span class="lnt" id="hl-47-2"><a class="lnlinks" href="#hl-47-2"> 2</a>
</span><span class="lnt" id="hl-47-3"><a class="lnlinks" href="#hl-47-3"> 3</a>
</span><span class="lnt" id="hl-47-4"><a class="lnlinks" href="#hl-47-4"> 4</a>
</span><span class="lnt" id="hl-47-5"><a class="lnlinks" href="#hl-47-5"> 5</a>
</span><span class="lnt" id="hl-47-6"><a class="lnlinks" href="#hl-47-6"> 6</a>
</span><span class="lnt" id="hl-47-7"><a class="lnlinks" href="#hl-47-7"> 7</a>
</span><span class="lnt" id="hl-47-8"><a class="lnlinks" href="#hl-47-8"> 8</a>
</span><span class="lnt" id="hl-47-9"><a class="lnlinks" href="#hl-47-9"> 9</a>
</span><span class="lnt" id="hl-47-10"><a class="lnlinks" href="#hl-47-10">10</a>
</span><span class="lnt" id="hl-47-11"><a class="lnlinks" href="#hl-47-11">11</a>
</span><span class="lnt" id="hl-47-12"><a class="lnlinks" href="#hl-47-12">12</a>
</span><span class="lnt" id="hl-47-13"><a class="lnlinks" href="#hl-47-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">reverse</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">rev</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="w"> </span><span class="n">pop</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rev</span><span class="o">&gt;</span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||</span><span class="p">(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">pop</span><span class="o">&gt;</span><span class="n">7</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rev</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||</span><span class="p">(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">pop</span><span class="o">&lt;-</span><span class="n">8</span><span class="p">))</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">rev</span><span class="o">=</span><span class="n">rev</span><span class="o">*</span><span class="n">10</span><span class="w"> </span><span class="o">+</span><span class="n">pop</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">rev</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-48-1"><a class="lnlinks" href="#hl-48-1">1</a>
</span><span class="lnt" id="hl-48-2"><a class="lnlinks" href="#hl-48-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(log(x))	There are roughly log10(x) digits in x 
</span></span><span class="line"><span class="cl">Space Complexity: O(1)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="8-string-to-integer-atoi">8-String to Integer (atoi)</h1>
<p>Implement atoi which converts a string to an integer</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace
character is found. Then, starting from this character, takes an optional initial plus or minus sign
followed by as many numerical digits as possible and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are
ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such
sequence exits because either str is empty or it contains only whitespace characters, no conversion is
performed.</p>
<p>If no valid conversion could be performed a zero value is returned</p>
<p>Note:</p>
<ul>
<li>only the space character &rsquo; &rsquo; is considered as whitespace character</li>
<li>assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31, 2^31-1]. If the numerical value is out of the range of representable values, INT_MAX (2^31-1) or INT_MIN (-2^31) is returned</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-49-1"><a class="lnlinks" href="#hl-49-1">1</a>
</span><span class="lnt" id="hl-49-2"><a class="lnlinks" href="#hl-49-2">2</a>
</span><span class="lnt" id="hl-49-3"><a class="lnlinks" href="#hl-49-3">3</a>
</span><span class="lnt" id="hl-49-4"><a class="lnlinks" href="#hl-49-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;42&#34;
</span></span><span class="line"><span class="cl">	Output: 42
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-50-1"><a class="lnlinks" href="#hl-50-1">1</a>
</span><span class="lnt" id="hl-50-2"><a class="lnlinks" href="#hl-50-2">2</a>
</span><span class="lnt" id="hl-50-3"><a class="lnlinks" href="#hl-50-3">3</a>
</span><span class="lnt" id="hl-50-4"><a class="lnlinks" href="#hl-50-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;      -42&#34; 
</span></span><span class="line"><span class="cl">	Output: -42
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-51-1"><a class="lnlinks" href="#hl-51-1">1</a>
</span><span class="lnt" id="hl-51-2"><a class="lnlinks" href="#hl-51-2">2</a>
</span><span class="lnt" id="hl-51-3"><a class="lnlinks" href="#hl-51-3">3</a>
</span><span class="lnt" id="hl-51-4"><a class="lnlinks" href="#hl-51-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 3:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;4193 with words &#34;
</span></span><span class="line"><span class="cl">	Output: 4193
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-52-1"><a class="lnlinks" href="#hl-52-1">1</a>
</span><span class="lnt" id="hl-52-2"><a class="lnlinks" href="#hl-52-2">2</a>
</span><span class="lnt" id="hl-52-3"><a class="lnlinks" href="#hl-52-3">3</a>
</span><span class="lnt" id="hl-52-4"><a class="lnlinks" href="#hl-52-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 4: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Input: &#34;words and 987&#34;
</span></span><span class="line"><span class="cl">	Output: 0
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-53-1"><a class="lnlinks" href="#hl-53-1">1</a>
</span><span class="lnt" id="hl-53-2"><a class="lnlinks" href="#hl-53-2">2</a>
</span><span class="lnt" id="hl-53-3"><a class="lnlinks" href="#hl-53-3">3</a>
</span><span class="lnt" id="hl-53-4"><a class="lnlinks" href="#hl-53-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 5:
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Input: &#34;-91283472332&#34;
</span></span><span class="line"><span class="cl">	Output: -2147483648 	//out of the range of a 32-bit signed integer so INT_MIN is returned
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="ascii-conversion">ASCII Conversion</h2>
<p>Recognize that ASCII characters are actually numbers and 0-9 digits are numbers starting from decimal
48 (0x30 hexadecimal)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-54-1"><a class="lnlinks" href="#hl-54-1">1</a>
</span><span class="lnt" id="hl-54-2"><a class="lnlinks" href="#hl-54-2">2</a>
</span><span class="lnt" id="hl-54-3"><a class="lnlinks" href="#hl-54-3">3</a>
</span><span class="lnt" id="hl-54-4"><a class="lnlinks" href="#hl-54-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;0&#39; is 48
</span></span><span class="line"><span class="cl">	&#39;1&#39; is 49
</span></span><span class="line"><span class="cl">	...
</span></span><span class="line"><span class="cl">	&#39;9&#39; is 57
</span></span></code></pre></td></tr></table>
</div>
</div><p>So to get the value of any character digit you can just remove the &lsquo;0&rsquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-55-1"><a class="lnlinks" href="#hl-55-1">1</a>
</span><span class="lnt" id="hl-55-2"><a class="lnlinks" href="#hl-55-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;1&#39; - &#39;0&#39; =&gt; 1
</span></span><span class="line"><span class="cl">	49  -  48 =&gt; 1
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-56-1"><a class="lnlinks" href="#hl-56-1"> 1</a>
</span><span class="lnt" id="hl-56-2"><a class="lnlinks" href="#hl-56-2"> 2</a>
</span><span class="lnt" id="hl-56-3"><a class="lnlinks" href="#hl-56-3"> 3</a>
</span><span class="lnt" id="hl-56-4"><a class="lnlinks" href="#hl-56-4"> 4</a>
</span><span class="lnt" id="hl-56-5"><a class="lnlinks" href="#hl-56-5"> 5</a>
</span><span class="lnt" id="hl-56-6"><a class="lnlinks" href="#hl-56-6"> 6</a>
</span><span class="lnt" id="hl-56-7"><a class="lnlinks" href="#hl-56-7"> 7</a>
</span><span class="lnt" id="hl-56-8"><a class="lnlinks" href="#hl-56-8"> 8</a>
</span><span class="lnt" id="hl-56-9"><a class="lnlinks" href="#hl-56-9"> 9</a>
</span><span class="lnt" id="hl-56-10"><a class="lnlinks" href="#hl-56-10">10</a>
</span><span class="lnt" id="hl-56-11"><a class="lnlinks" href="#hl-56-11">11</a>
</span><span class="lnt" id="hl-56-12"><a class="lnlinks" href="#hl-56-12">12</a>
</span><span class="lnt" id="hl-56-13"><a class="lnlinks" href="#hl-56-13">13</a>
</span><span class="lnt" id="hl-56-14"><a class="lnlinks" href="#hl-56-14">14</a>
</span><span class="lnt" id="hl-56-15"><a class="lnlinks" href="#hl-56-15">15</a>
</span><span class="lnt" id="hl-56-16"><a class="lnlinks" href="#hl-56-16">16</a>
</span><span class="lnt" id="hl-56-17"><a class="lnlinks" href="#hl-56-17">17</a>
</span><span class="lnt" id="hl-56-18"><a class="lnlinks" href="#hl-56-18">18</a>
</span><span class="lnt" id="hl-56-19"><a class="lnlinks" href="#hl-56-19">19</a>
</span><span class="lnt" id="hl-56-20"><a class="lnlinks" href="#hl-56-20">20</a>
</span><span class="lnt" id="hl-56-21"><a class="lnlinks" href="#hl-56-21">21</a>
</span><span class="lnt" id="hl-56-22"><a class="lnlinks" href="#hl-56-22">22</a>
</span><span class="lnt" id="hl-56-23"><a class="lnlinks" href="#hl-56-23">23</a>
</span><span class="lnt" id="hl-56-24"><a class="lnlinks" href="#hl-56-24">24</a>
</span><span class="lnt" id="hl-56-25"><a class="lnlinks" href="#hl-56-25">25</a>
</span><span class="lnt" id="hl-56-26"><a class="lnlinks" href="#hl-56-26">26</a>
</span><span class="lnt" id="hl-56-27"><a class="lnlinks" href="#hl-56-27">27</a>
</span><span class="lnt" id="hl-56-28"><a class="lnlinks" href="#hl-56-28">28</a>
</span><span class="lnt" id="hl-56-29"><a class="lnlinks" href="#hl-56-29">29</a>
</span><span class="lnt" id="hl-56-30"><a class="lnlinks" href="#hl-56-30">30</a>
</span><span class="lnt" id="hl-56-31"><a class="lnlinks" href="#hl-56-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">myAtoi</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="o">=</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">sign</span><span class="o">=</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">total</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//1. Empty string </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//2. Remove Spaces </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39; &#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//3. Handle signs </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">sign</span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;+&#39;</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">1</span><span class="p">:</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//4. COnvert number and avoid overflow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="n">index</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="na">length</span><span class="p">()){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">digit</span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digit</span><span class="o">&lt;</span><span class="n">0</span><span class="o">||</span><span class="n">digit</span><span class="o">&gt;</span><span class="n">9</span><span class="p">)</span><span class="w"> </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">//check if total will overflow after 10 times and add digit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">total</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="o">%</span><span class="n">10</span><span class="o">&lt;</span><span class="n">digit</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="k">return</span><span class="w"> </span><span class="n">sign</span><span class="o">==</span><span class="n">1</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">total</span><span class="o">=</span><span class="w"> </span><span class="n">10</span><span class="o">*</span><span class="w"> </span><span class="n">total</span><span class="o">+</span><span class="n">digit</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">total</span><span class="o">*</span><span class="n">sign</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="9-palindrome-number">9-Palindrome Number</h1>
<p>Determines whether an interger is a palindrome. An integer is a palindrome when it reads the same
backward as forward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-57-1"><a class="lnlinks" href="#hl-57-1">1</a>
</span><span class="lnt" id="hl-57-2"><a class="lnlinks" href="#hl-57-2">2</a>
</span><span class="lnt" id="hl-57-3"><a class="lnlinks" href="#hl-57-3">3</a>
</span><span class="lnt" id="hl-57-4"><a class="lnlinks" href="#hl-57-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 121
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-58-1"><a class="lnlinks" href="#hl-58-1">1</a>
</span><span class="lnt" id="hl-58-2"><a class="lnlinks" href="#hl-58-2">2</a>
</span><span class="lnt" id="hl-58-3"><a class="lnlinks" href="#hl-58-3">3</a>
</span><span class="lnt" id="hl-58-4"><a class="lnlinks" href="#hl-58-4">4</a>
</span><span class="lnt" id="hl-58-5"><a class="lnlinks" href="#hl-58-5">5</a>
</span><span class="lnt" id="hl-58-6"><a class="lnlinks" href="#hl-58-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: -121
</span></span><span class="line"><span class="cl">Output: false 
</span></span><span class="line"><span class="cl">Explanation: 	From left to right, it reads -121, meanwhile from right to left it becomes 121- . 
</span></span><span class="line"><span class="cl">		Therefore it is not a palindrome
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-59-1"><a class="lnlinks" href="#hl-59-1">1</a>
</span><span class="lnt" id="hl-59-2"><a class="lnlinks" href="#hl-59-2">2</a>
</span><span class="lnt" id="hl-59-3"><a class="lnlinks" href="#hl-59-3">3</a>
</span><span class="lnt" id="hl-59-4"><a class="lnlinks" href="#hl-59-4">4</a>
</span><span class="lnt" id="hl-59-5"><a class="lnlinks" href="#hl-59-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 10 
</span></span><span class="line"><span class="cl">Output: false 
</span></span><span class="line"><span class="cl">Explanation: 	Reads 01 from right to left. Therefore it is not a palindrome
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="revert-half-of-the-number">Revert Half of the Number</h2>
<p>A first idea which may come to mind is to convert the number into a string and check if the string is a
palindrome but this would require extra non-constant space for creating the string not allowed by the
problem description</p>
<p>Second idea would be reverting the number itself and comparing the number with the original number, if
they are the same then the number is a palindrome, however if the reversed number is larger than
int.MAX we will hit integer overflow problem.</p>
<p>To avoid the overflow issue of the reverted number, what if we only revert half of the int number? The
reverse of the last half of the palindrome should be the same as the first half of the number if the
number is a palindrome.</p>
<p>If the input is 1221, if we can revert the last part of the number &ldquo;1221&rdquo; from &ldquo;21&rdquo; to &ldquo;12&rdquo; and compare
it with the first half of the number &ldquo;12&rdquo;, since 12 is the same as 12, we know that the number is a
palindrome.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>At the very beginning we can deal with some edge cases. All negative numbers are not palindrome and
numbers ending in zero can only be a palindrome if the first digit is also 0 (only 0 satisfies this
property)</p>
<p>Now let&rsquo;s think about how to revert the last half of the number. For the number 1221 if we do 1221%10
we get the last digit 1. To get the second last digit we divide the number by 10 1221/10=122 and then
we can get the last digit again by doing a modulus by 10, 122%10=2. If we multiply the last digit by
10 and add the second last digit 1*10+2=12 which gives us the reverted number we want. COntinuing this
process would give us the reverted number with more digits.</p>
<p>Next is how do we know that we&rsquo;ve reached the half of the number?
Since we divided the number by 10 and multiplied the reversed number by 10 when the original number is
less than the reversed number, it means we&rsquo;ve gone through half of the number digits.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-60-1"><a class="lnlinks" href="#hl-60-1"> 1</a>
</span><span class="lnt" id="hl-60-2"><a class="lnlinks" href="#hl-60-2"> 2</a>
</span><span class="lnt" id="hl-60-3"><a class="lnlinks" href="#hl-60-3"> 3</a>
</span><span class="lnt" id="hl-60-4"><a class="lnlinks" href="#hl-60-4"> 4</a>
</span><span class="lnt" id="hl-60-5"><a class="lnlinks" href="#hl-60-5"> 5</a>
</span><span class="lnt" id="hl-60-6"><a class="lnlinks" href="#hl-60-6"> 6</a>
</span><span class="lnt" id="hl-60-7"><a class="lnlinks" href="#hl-60-7"> 7</a>
</span><span class="lnt" id="hl-60-8"><a class="lnlinks" href="#hl-60-8"> 8</a>
</span><span class="lnt" id="hl-60-9"><a class="lnlinks" href="#hl-60-9"> 9</a>
</span><span class="lnt" id="hl-60-10"><a class="lnlinks" href="#hl-60-10">10</a>
</span><span class="lnt" id="hl-60-11"><a class="lnlinks" href="#hl-60-11">11</a>
</span><span class="lnt" id="hl-60-12"><a class="lnlinks" href="#hl-60-12">12</a>
</span><span class="lnt" id="hl-60-13"><a class="lnlinks" href="#hl-60-13">13</a>
</span><span class="lnt" id="hl-60-14"><a class="lnlinks" href="#hl-60-14">14</a>
</span><span class="lnt" id="hl-60-15"><a class="lnlinks" href="#hl-60-15">15</a>
</span><span class="lnt" id="hl-60-16"><a class="lnlinks" href="#hl-60-16">16</a>
</span><span class="lnt" id="hl-60-17"><a class="lnlinks" href="#hl-60-17">17</a>
</span><span class="lnt" id="hl-60-18"><a class="lnlinks" href="#hl-60-18">18</a>
</span><span class="lnt" id="hl-60-19"><a class="lnlinks" href="#hl-60-19">19</a>
</span><span class="lnt" id="hl-60-20"><a class="lnlinks" href="#hl-60-20">20</a>
</span><span class="lnt" id="hl-60-21"><a class="lnlinks" href="#hl-60-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPalindrome</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">&lt;</span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">==</span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">revertedNumber</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">&gt;</span><span class="n">revertedNumber</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">revertedNumber</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">+</span><span class="n">revertedNumber</span><span class="o">*</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//when the length is an odd number, we can get rid of the middle digit by </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//revertedNumber/10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//For example when the input is 12321, at the end of the while loop we get x=12, </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//revertedNumber=123, since the middle digit doesn&#39;t matter in a palindrome we can</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//simply get rid of it </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">||</span><span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">/</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="10-regular-expression-matching">10-Regular Expression Matching</h1>
<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for &lsquo;.&rsquo;
and &lsquo;*&rsquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-61-1"><a class="lnlinks" href="#hl-61-1">1</a>
</span><span class="lnt" id="hl-61-2"><a class="lnlinks" href="#hl-61-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;.&#39; Matches any single character
</span></span><span class="line"><span class="cl">	&#39;*&#39; Matches zero or more of the preceding element 
</span></span></code></pre></td></tr></table>
</div>
</div><p>The matching should cover the entire input string (not partial)</p>
<p>Note:</p>
<ul>
<li>s could be empty and contains only lower case letters a-z</li>
<li>p could be empty and contains only lower case letters a-z and characters like . or *</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-62-1"><a class="lnlinks" href="#hl-62-1">1</a>
</span><span class="lnt" id="hl-62-2"><a class="lnlinks" href="#hl-62-2">2</a>
</span><span class="lnt" id="hl-62-3"><a class="lnlinks" href="#hl-62-3">3</a>
</span><span class="lnt" id="hl-62-4"><a class="lnlinks" href="#hl-62-4">4</a>
</span><span class="lnt" id="hl-62-5"><a class="lnlinks" href="#hl-62-5">5</a>
</span><span class="lnt" id="hl-62-6"><a class="lnlinks" href="#hl-62-6">6</a>
</span><span class="lnt" id="hl-62-7"><a class="lnlinks" href="#hl-62-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">	s=&#34;aa&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;a&#34; 
</span></span><span class="line"><span class="cl">	Output: false 
</span></span><span class="line"><span class="cl">	Explanation: 	&#34;a&#34; does not match the entire string &#34;aa&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-63-1"><a class="lnlinks" href="#hl-63-1">1</a>
</span><span class="lnt" id="hl-63-2"><a class="lnlinks" href="#hl-63-2">2</a>
</span><span class="lnt" id="hl-63-3"><a class="lnlinks" href="#hl-63-3">3</a>
</span><span class="lnt" id="hl-63-4"><a class="lnlinks" href="#hl-63-4">4</a>
</span><span class="lnt" id="hl-63-5"><a class="lnlinks" href="#hl-63-5">5</a>
</span><span class="lnt" id="hl-63-6"><a class="lnlinks" href="#hl-63-6">6</a>
</span><span class="lnt" id="hl-63-7"><a class="lnlinks" href="#hl-63-7">7</a>
</span><span class="lnt" id="hl-63-8"><a class="lnlinks" href="#hl-63-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;aa&#34;
</span></span><span class="line"><span class="cl">	p=&#34;a*&#34; 
</span></span><span class="line"><span class="cl">	Output: true 
</span></span><span class="line"><span class="cl">	Explanation: 	&#39;*&#39; means zero of more of the preceding element, &#39;a&#39;. Therefore, by repeating
</span></span><span class="line"><span class="cl">			&#39;a&#39; once it becomes &#34;aa&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-64-1"><a class="lnlinks" href="#hl-64-1">1</a>
</span><span class="lnt" id="hl-64-2"><a class="lnlinks" href="#hl-64-2">2</a>
</span><span class="lnt" id="hl-64-3"><a class="lnlinks" href="#hl-64-3">3</a>
</span><span class="lnt" id="hl-64-4"><a class="lnlinks" href="#hl-64-4">4</a>
</span><span class="lnt" id="hl-64-5"><a class="lnlinks" href="#hl-64-5">5</a>
</span><span class="lnt" id="hl-64-6"><a class="lnlinks" href="#hl-64-6">6</a>
</span><span class="lnt" id="hl-64-7"><a class="lnlinks" href="#hl-64-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;ab&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;.*&#34; 
</span></span><span class="line"><span class="cl">	Output: true 
</span></span><span class="line"><span class="cl">	Explanation: 	&#39;.*&#39; means &#34;zero or more (*) of any character (.)&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-65-1"><a class="lnlinks" href="#hl-65-1">1</a>
</span><span class="lnt" id="hl-65-2"><a class="lnlinks" href="#hl-65-2">2</a>
</span><span class="lnt" id="hl-65-3"><a class="lnlinks" href="#hl-65-3">3</a>
</span><span class="lnt" id="hl-65-4"><a class="lnlinks" href="#hl-65-4">4</a>
</span><span class="lnt" id="hl-65-5"><a class="lnlinks" href="#hl-65-5">5</a>
</span><span class="lnt" id="hl-65-6"><a class="lnlinks" href="#hl-65-6">6</a>
</span><span class="lnt" id="hl-65-7"><a class="lnlinks" href="#hl-65-7">7</a>
</span><span class="lnt" id="hl-65-8"><a class="lnlinks" href="#hl-65-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;aab&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;c*a*b&#34; 
</span></span><span class="line"><span class="cl">	Output: true
</span></span><span class="line"><span class="cl">	Explanation: 	c can be repeated 0 times, a can be repeated 1 time. Therefore it matches 
</span></span><span class="line"><span class="cl">			&#34;aab&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-66-1"><a class="lnlinks" href="#hl-66-1">1</a>
</span><span class="lnt" id="hl-66-2"><a class="lnlinks" href="#hl-66-2">2</a>
</span><span class="lnt" id="hl-66-3"><a class="lnlinks" href="#hl-66-3">3</a>
</span><span class="lnt" id="hl-66-4"><a class="lnlinks" href="#hl-66-4">4</a>
</span><span class="lnt" id="hl-66-5"><a class="lnlinks" href="#hl-66-5">5</a>
</span><span class="lnt" id="hl-66-6"><a class="lnlinks" href="#hl-66-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;mississippi&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;mis*is*p*.&#34;
</span></span><span class="line"><span class="cl">	Output: false 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="recursion">Recursion</h2>
<p>If there were no Kleene stars (the * wildcard characters for regular expressions), the problem would
be easier- we simply check from left to right if each character of the text matches the pattern. When
a star is present we may need to check for may different suffixes of the text and see if they match
the rest of the pattern. A recursive solution is a straightforward way to represent this relationship</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-67-1"><a class="lnlinks" href="#hl-67-1"> 1</a>
</span><span class="lnt" id="hl-67-2"><a class="lnlinks" href="#hl-67-2"> 2</a>
</span><span class="lnt" id="hl-67-3"><a class="lnlinks" href="#hl-67-3"> 3</a>
</span><span class="lnt" id="hl-67-4"><a class="lnlinks" href="#hl-67-4"> 4</a>
</span><span class="lnt" id="hl-67-5"><a class="lnlinks" href="#hl-67-5"> 5</a>
</span><span class="lnt" id="hl-67-6"><a class="lnlinks" href="#hl-67-6"> 6</a>
</span><span class="lnt" id="hl-67-7"><a class="lnlinks" href="#hl-67-7"> 7</a>
</span><span class="lnt" id="hl-67-8"><a class="lnlinks" href="#hl-67-8"> 8</a>
</span><span class="lnt" id="hl-67-9"><a class="lnlinks" href="#hl-67-9"> 9</a>
</span><span class="lnt" id="hl-67-10"><a class="lnlinks" href="#hl-67-10">10</a>
</span><span class="lnt" id="hl-67-11"><a class="lnlinks" href="#hl-67-11">11</a>
</span><span class="lnt" id="hl-67-12"><a class="lnlinks" href="#hl-67-12">12</a>
</span><span class="lnt" id="hl-67-13"><a class="lnlinks" href="#hl-67-13">13</a>
</span><span class="lnt" id="hl-67-14"><a class="lnlinks" href="#hl-67-14">14</a>
</span><span class="lnt" id="hl-67-15"><a class="lnlinks" href="#hl-67-15">15</a>
</span><span class="lnt" id="hl-67-16"><a class="lnlinks" href="#hl-67-16">16</a>
</span><span class="lnt" id="hl-67-17"><a class="lnlinks" href="#hl-67-17">17</a>
</span><span class="lnt" id="hl-67-18"><a class="lnlinks" href="#hl-67-18">18</a>
</span><span class="lnt" id="hl-67-19"><a class="lnlinks" href="#hl-67-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isMatch</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">pattern</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">text</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">boolean</span><span class="w"> </span><span class="n">first_match</span><span class="o">=</span><span class="p">(</span><span class="o">!</span><span class="n">text</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">				    </span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">0</span><span class="p">)</span><span class="o">==</span><span class="n">text</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">0</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;.&#39;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">&gt;=</span><span class="n">2</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">isMatch</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">pattern</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">2</span><span class="p">))</span><span class="o">||</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			       </span><span class="p">(</span><span class="n">first_match</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">isMatch</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">1</span><span class="p">),</span><span class="n">pattern</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">//note: pattern.substring(2) returns all of the characters after index 2 of pattern</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">first_match</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">isMatch</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">1</span><span class="p">),</span><span class="w"> </span><span class="n">pattern</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-68-1"><a class="lnlinks" href="#hl-68-1"> 1</a>
</span><span class="lnt" id="hl-68-2"><a class="lnlinks" href="#hl-68-2"> 2</a>
</span><span class="lnt" id="hl-68-3"><a class="lnlinks" href="#hl-68-3"> 3</a>
</span><span class="lnt" id="hl-68-4"><a class="lnlinks" href="#hl-68-4"> 4</a>
</span><span class="lnt" id="hl-68-5"><a class="lnlinks" href="#hl-68-5"> 5</a>
</span><span class="lnt" id="hl-68-6"><a class="lnlinks" href="#hl-68-6"> 6</a>
</span><span class="lnt" id="hl-68-7"><a class="lnlinks" href="#hl-68-7"> 7</a>
</span><span class="lnt" id="hl-68-8"><a class="lnlinks" href="#hl-68-8"> 8</a>
</span><span class="lnt" id="hl-68-9"><a class="lnlinks" href="#hl-68-9"> 9</a>
</span><span class="lnt" id="hl-68-10"><a class="lnlinks" href="#hl-68-10">10</a>
</span><span class="lnt" id="hl-68-11"><a class="lnlinks" href="#hl-68-11">11</a>
</span><span class="lnt" id="hl-68-12"><a class="lnlinks" href="#hl-68-12">12</a>
</span><span class="lnt" id="hl-68-13"><a class="lnlinks" href="#hl-68-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. In the worst
</span></span><span class="line"><span class="cl">			case, a call to match(text[i:],pattern[2j:]) will be made (i+j i) times, and 
</span></span><span class="line"><span class="cl">			strings of the order O(T-i) and O(P-2*j) will be made. Thus the complexity has
</span></span><span class="line"><span class="cl">			the order: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			summation from i=0 to T * summation from j=0 to P/2 * (i+j i) O(T+P-i-2j).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			We can show that this is bounded by O((T+P)2^(T+P/2))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity:	For every call to match, we will create those strings as described above 
</span></span><span class="line"><span class="cl">			possibly creating duplicates. If memory is not freed, this will also take a
</span></span><span class="line"><span class="cl">			total of O((T+P)2^(T+P/2)) space even though there are only order O(T^2+P^2) 
</span></span><span class="line"><span class="cl">			unique suffixes of P and T that are actually required 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="dynamic-programming-1">Dynamic Programming</h2>
<p>As the problem has an optimal substructure, it is natural to cache intermediate results. We ask the
question dp(i,j): does text[i:] and pattern[j:] match? We can describe our answer in terms of answers
to questions involving smaller strings</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We proceed with the same recursion as in Approach 1, except because calls will only ever be made to
match(text[i:], pattern[j:]), we use dp(i,j) to handle those calls instead, saving us expensive
string-building operations and allowing us to cache the intermediate results</p>
<p><strong>Java Top-Down Variation</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-69-1"><a class="lnlinks" href="#hl-69-1"> 1</a>
</span><span class="lnt" id="hl-69-2"><a class="lnlinks" href="#hl-69-2"> 2</a>
</span><span class="lnt" id="hl-69-3"><a class="lnlinks" href="#hl-69-3"> 3</a>
</span><span class="lnt" id="hl-69-4"><a class="lnlinks" href="#hl-69-4"> 4</a>
</span><span class="lnt" id="hl-69-5"><a class="lnlinks" href="#hl-69-5"> 5</a>
</span><span class="lnt" id="hl-69-6"><a class="lnlinks" href="#hl-69-6"> 6</a>
</span><span class="lnt" id="hl-69-7"><a class="lnlinks" href="#hl-69-7"> 7</a>
</span><span class="lnt" id="hl-69-8"><a class="lnlinks" href="#hl-69-8"> 8</a>
</span><span class="lnt" id="hl-69-9"><a class="lnlinks" href="#hl-69-9"> 9</a>
</span><span class="lnt" id="hl-69-10"><a class="lnlinks" href="#hl-69-10">10</a>
</span><span class="lnt" id="hl-69-11"><a class="lnlinks" href="#hl-69-11">11</a>
</span><span class="lnt" id="hl-69-12"><a class="lnlinks" href="#hl-69-12">12</a>
</span><span class="lnt" id="hl-69-13"><a class="lnlinks" href="#hl-69-13">13</a>
</span><span class="lnt" id="hl-69-14"><a class="lnlinks" href="#hl-69-14">14</a>
</span><span class="lnt" id="hl-69-15"><a class="lnlinks" href="#hl-69-15">15</a>
</span><span class="lnt" id="hl-69-16"><a class="lnlinks" href="#hl-69-16">16</a>
</span><span class="lnt" id="hl-69-17"><a class="lnlinks" href="#hl-69-17">17</a>
</span><span class="lnt" id="hl-69-18"><a class="lnlinks" href="#hl-69-18">18</a>
</span><span class="lnt" id="hl-69-19"><a class="lnlinks" href="#hl-69-19">19</a>
</span><span class="lnt" id="hl-69-20"><a class="lnlinks" href="#hl-69-20">20</a>
</span><span class="lnt" id="hl-69-21"><a class="lnlinks" href="#hl-69-21">21</a>
</span><span class="lnt" id="hl-69-22"><a class="lnlinks" href="#hl-69-22">22</a>
</span><span class="lnt" id="hl-69-23"><a class="lnlinks" href="#hl-69-23">23</a>
</span><span class="lnt" id="hl-69-24"><a class="lnlinks" href="#hl-69-24">24</a>
</span><span class="lnt" id="hl-69-25"><a class="lnlinks" href="#hl-69-25">25</a>
</span><span class="lnt" id="hl-69-26"><a class="lnlinks" href="#hl-69-26">26</a>
</span><span class="lnt" id="hl-69-27"><a class="lnlinks" href="#hl-69-27">27</a>
</span><span class="lnt" id="hl-69-28"><a class="lnlinks" href="#hl-69-28">28</a>
</span><span class="lnt" id="hl-69-29"><a class="lnlinks" href="#hl-69-29">29</a>
</span><span class="lnt" id="hl-69-30"><a class="lnlinks" href="#hl-69-30">30</a>
</span><span class="lnt" id="hl-69-31"><a class="lnlinks" href="#hl-69-31">31</a>
</span><span class="lnt" id="hl-69-32"><a class="lnlinks" href="#hl-69-32">32</a>
</span><span class="lnt" id="hl-69-33"><a class="lnlinks" href="#hl-69-33">33</a>
</span><span class="lnt" id="hl-69-34"><a class="lnlinks" href="#hl-69-34">34</a>
</span><span class="lnt" id="hl-69-35"><a class="lnlinks" href="#hl-69-35">35</a>
</span><span class="lnt" id="hl-69-36"><a class="lnlinks" href="#hl-69-36">36</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">enum</span><span class="w"> </span><span class="n">Result</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">FALSE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Result</span><span class="o">[][]</span><span class="w"> </span><span class="n">memo</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isMatch</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">pattern</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">memo</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="n">Result</span><span class="o">[</span><span class="n">text</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">pattern</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">dp</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="n">0</span><span class="p">,</span><span class="n">text</span><span class="p">,</span><span class="n">pattern</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">dp</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">pattern</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">Result</span><span class="p">.</span><span class="na">TRUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">boolean</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">pattern</span><span class="p">.</span><span class="na">length</span><span class="p">()){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">ans</span><span class="o">=</span><span class="n">i</span><span class="o">==</span><span class="n">text</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">boolean</span><span class="w"> </span><span class="n">first_match</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">text</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">text</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					     </span><span class="n">patter</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;.&#39;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">pattern</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">ans</span><span class="o">=</span><span class="p">(</span><span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="n">text</span><span class="p">,</span><span class="n">pattern</span><span class="p">)</span><span class="o">||</span><span class="n">first_match</span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">text</span><span class="p">,</span><span class="n">pattern</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">ans</span><span class="o">=</span><span class="n">first_match</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">dp</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="n">pattern</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">ans</span><span class="o">?</span><span class="w"> </span><span class="n">Result</span><span class="p">.</span><span class="na">TRUE</span><span class="p">:</span><span class="w"> </span><span class="n">Result</span><span class="p">.</span><span class="na">FALSE</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-70-1"><a class="lnlinks" href="#hl-70-1">1</a>
</span><span class="lnt" id="hl-70-2"><a class="lnlinks" href="#hl-70-2">2</a>
</span><span class="lnt" id="hl-70-3"><a class="lnlinks" href="#hl-70-3">3</a>
</span><span class="lnt" id="hl-70-4"><a class="lnlinks" href="#hl-70-4">4</a>
</span><span class="lnt" id="hl-70-5"><a class="lnlinks" href="#hl-70-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. The work 
</span></span><span class="line"><span class="cl">			for every call to dp(i,j) for i=0,...,T; j=0,...,P is done once and it is O(1) 				work. Hence the time complexity is O(TP)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity:	The only memory we use is the O(TP) boolean entries in our cache. Hence, the 
</span></span><span class="line"><span class="cl">			space complexity is O(TP) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="non-recursive">Non-Recursive</h2>
<p>The recursive programming solutions are pretty confusing so this implementation uses 2D arrays and
Dynamic Programming</p>
<p>The logic works as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-71-1"><a class="lnlinks" href="#hl-71-1"> 1</a>
</span><span class="lnt" id="hl-71-2"><a class="lnlinks" href="#hl-71-2"> 2</a>
</span><span class="lnt" id="hl-71-3"><a class="lnlinks" href="#hl-71-3"> 3</a>
</span><span class="lnt" id="hl-71-4"><a class="lnlinks" href="#hl-71-4"> 4</a>
</span><span class="lnt" id="hl-71-5"><a class="lnlinks" href="#hl-71-5"> 5</a>
</span><span class="lnt" id="hl-71-6"><a class="lnlinks" href="#hl-71-6"> 6</a>
</span><span class="lnt" id="hl-71-7"><a class="lnlinks" href="#hl-71-7"> 7</a>
</span><span class="lnt" id="hl-71-8"><a class="lnlinks" href="#hl-71-8"> 8</a>
</span><span class="lnt" id="hl-71-9"><a class="lnlinks" href="#hl-71-9"> 9</a>
</span><span class="lnt" id="hl-71-10"><a class="lnlinks" href="#hl-71-10">10</a>
</span><span class="lnt" id="hl-71-11"><a class="lnlinks" href="#hl-71-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1. If p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]; 
</span></span><span class="line"><span class="cl">2. If p.charAt(j) == &#39;.&#39; : dp[i][j] = dp[i-1][j-1]; 
</span></span><span class="line"><span class="cl">3. If p.charAt(j) == &#39;*&#39;: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Subconditions
</span></span><span class="line"><span class="cl">	1. If p.charAt(j-1)!= s.charAt(i):dp[i][j]=dp[i][j-2]  	//in this case a* only counts as empty
</span></span><span class="line"><span class="cl">	2. If p.charAt(i-1)== s.charAt(i) or p.charAt(i-1) == &#39;.&#39;: 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		dp[i][j] = dp[i-1][j]	//in this case a* counts as multiple a 
</span></span><span class="line"><span class="cl">	     or dp[i][j] = dp[i][j-1]	//in this case a* counts as single a 
</span></span><span class="line"><span class="cl">	     or dp[i][j] = dp[i][j-2]	//in this case a* counts as empty 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-72-1"><a class="lnlinks" href="#hl-72-1"> 1</a>
</span><span class="lnt" id="hl-72-2"><a class="lnlinks" href="#hl-72-2"> 2</a>
</span><span class="lnt" id="hl-72-3"><a class="lnlinks" href="#hl-72-3"> 3</a>
</span><span class="lnt" id="hl-72-4"><a class="lnlinks" href="#hl-72-4"> 4</a>
</span><span class="lnt" id="hl-72-5"><a class="lnlinks" href="#hl-72-5"> 5</a>
</span><span class="lnt" id="hl-72-6"><a class="lnlinks" href="#hl-72-6"> 6</a>
</span><span class="lnt" id="hl-72-7"><a class="lnlinks" href="#hl-72-7"> 7</a>
</span><span class="lnt" id="hl-72-8"><a class="lnlinks" href="#hl-72-8"> 8</a>
</span><span class="lnt" id="hl-72-9"><a class="lnlinks" href="#hl-72-9"> 9</a>
</span><span class="lnt" id="hl-72-10"><a class="lnlinks" href="#hl-72-10">10</a>
</span><span class="lnt" id="hl-72-11"><a class="lnlinks" href="#hl-72-11">11</a>
</span><span class="lnt" id="hl-72-12"><a class="lnlinks" href="#hl-72-12">12</a>
</span><span class="lnt" id="hl-72-13"><a class="lnlinks" href="#hl-72-13">13</a>
</span><span class="lnt" id="hl-72-14"><a class="lnlinks" href="#hl-72-14">14</a>
</span><span class="lnt" id="hl-72-15"><a class="lnlinks" href="#hl-72-15">15</a>
</span><span class="lnt" id="hl-72-16"><a class="lnlinks" href="#hl-72-16">16</a>
</span><span class="lnt" id="hl-72-17"><a class="lnlinks" href="#hl-72-17">17</a>
</span><span class="lnt" id="hl-72-18"><a class="lnlinks" href="#hl-72-18">18</a>
</span><span class="lnt" id="hl-72-19"><a class="lnlinks" href="#hl-72-19">19</a>
</span><span class="lnt" id="hl-72-20"><a class="lnlinks" href="#hl-72-20">20</a>
</span><span class="lnt" id="hl-72-21"><a class="lnlinks" href="#hl-72-21">21</a>
</span><span class="lnt" id="hl-72-22"><a class="lnlinks" href="#hl-72-22">22</a>
</span><span class="lnt" id="hl-72-23"><a class="lnlinks" href="#hl-72-23">23</a>
</span><span class="lnt" id="hl-72-24"><a class="lnlinks" href="#hl-72-24">24</a>
</span><span class="lnt" id="hl-72-25"><a class="lnlinks" href="#hl-72-25">25</a>
</span><span class="lnt" id="hl-72-26"><a class="lnlinks" href="#hl-72-26">26</a>
</span><span class="lnt" id="hl-72-27"><a class="lnlinks" href="#hl-72-27">27</a>
</span><span class="lnt" id="hl-72-28"><a class="lnlinks" href="#hl-72-28">28</a>
</span><span class="lnt" id="hl-72-29"><a class="lnlinks" href="#hl-72-29">29</a>
</span><span class="lnt" id="hl-72-30"><a class="lnlinks" href="#hl-72-30">30</a>
</span><span class="lnt" id="hl-72-31"><a class="lnlinks" href="#hl-72-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isMatch</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">p</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">boolean</span><span class="o">[][]</span><span class="w"> </span><span class="n">dp</span><span class="o">=</span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]=</span><span class="kc">true</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="kc">true</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;.&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">==</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="o">!=</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="sc">&#39;.&#39;</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="p">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">][</span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="11-container-with-the-most-water">11-Container with the Most Water</h1>
<p>Given n non negative integers a1,a2, &hellip; , an where each represents a point at coordinate (i, ai). n
vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two
lines, which together with x-axis forns a container such that the container contains the most water.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-73-1"><a class="lnlinks" href="#hl-73-1">1</a>
</span><span class="lnt" id="hl-73-2"><a class="lnlinks" href="#hl-73-2">2</a>
</span><span class="lnt" id="hl-73-3"><a class="lnlinks" href="#hl-73-3">3</a>
</span><span class="lnt" id="hl-73-4"><a class="lnlinks" href="#hl-73-4">4</a>
</span><span class="lnt" id="hl-73-5"><a class="lnlinks" href="#hl-73-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		      ^		    ^
</span></span><span class="line"><span class="cl">	 These two values form the container which could hold water at a max height of 7, these values
</span></span><span class="line"><span class="cl">	 are also 7 array indexes apart from each other so it could hold water at a max width of 7. The
</span></span><span class="line"><span class="cl">	 area of water which could be held is thus 7 x 7 = 49
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="brute-force-3">Brute Force</h2>
<p>In this case we simply consider the area for every possible pair of the lines and find out the maximum
area out of those.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-74-1"><a class="lnlinks" href="#hl-74-1"> 1</a>
</span><span class="lnt" id="hl-74-2"><a class="lnlinks" href="#hl-74-2"> 2</a>
</span><span class="lnt" id="hl-74-3"><a class="lnlinks" href="#hl-74-3"> 3</a>
</span><span class="lnt" id="hl-74-4"><a class="lnlinks" href="#hl-74-4"> 4</a>
</span><span class="lnt" id="hl-74-5"><a class="lnlinks" href="#hl-74-5"> 5</a>
</span><span class="lnt" id="hl-74-6"><a class="lnlinks" href="#hl-74-6"> 6</a>
</span><span class="lnt" id="hl-74-7"><a class="lnlinks" href="#hl-74-7"> 7</a>
</span><span class="lnt" id="hl-74-8"><a class="lnlinks" href="#hl-74-8"> 8</a>
</span><span class="lnt" id="hl-74-9"><a class="lnlinks" href="#hl-74-9"> 9</a>
</span><span class="lnt" id="hl-74-10"><a class="lnlinks" href="#hl-74-10">10</a>
</span><span class="lnt" id="hl-74-11"><a class="lnlinks" href="#hl-74-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public class Solution {
</span></span><span class="line"><span class="cl">	public int maxArea(int[] height) {
</span></span><span class="line"><span class="cl">		int maxarea=0; 
</span></span><span class="line"><span class="cl">		for (int i=0; i&lt;height.length; i++){
</span></span><span class="line"><span class="cl">			for (int j=i+1;j&lt;height.length;j++){
</span></span><span class="line"><span class="cl">				maxarea=Math.max(maxarea, Math.min(height[i],height[j])*(j-i));
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">		return maxarea;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-75-1"><a class="lnlinks" href="#hl-75-1">1</a>
</span><span class="lnt" id="hl-75-2"><a class="lnlinks" href="#hl-75-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(n^2) 	Calculating the area for all n(n-1)/2 height pairs 
</span></span><span class="line"><span class="cl">Space complexity: 	O(1) 	Constant extra space is used 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="two-pointer-approach">Two Pointer Approach</h2>
<p>The intuition behind this approach is that the area formed between the lines will always be limited by
the height of the shorter line. Further, the farther the lines, the more will be the area obtained.</p>
<p>We take two pointers, one at the beginning and one at the end of the array constituting the length of
the lines. Further, we maintain a variable maxarea to store the maximum area obtained till now. At
every step, we find out the area formed between them, update maxarea and move the pointer pointing to
the shorter line towards the other end by one step.</p>
<p>Initially we consider the area constituting the exterior most lines. Now to maximize the area we need
to consider the area between the lines of larger lengths. If we try to move the pointer at the longer
line inwards, we won&rsquo;t gain any increase in area, since it is limited by the shorter line. But moving
the shorter line&rsquo;s pointer could turn out to be benefical, as per the same argument, despite the
reduction in width. This is done since a relatively longer line obtained by moving the shorter line&rsquo;s
pointer might overcome the reduction in area caused by the width reduction.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-76-1"><a class="lnlinks" href="#hl-76-1"> 1</a>
</span><span class="lnt" id="hl-76-2"><a class="lnlinks" href="#hl-76-2"> 2</a>
</span><span class="lnt" id="hl-76-3"><a class="lnlinks" href="#hl-76-3"> 3</a>
</span><span class="lnt" id="hl-76-4"><a class="lnlinks" href="#hl-76-4"> 4</a>
</span><span class="lnt" id="hl-76-5"><a class="lnlinks" href="#hl-76-5"> 5</a>
</span><span class="lnt" id="hl-76-6"><a class="lnlinks" href="#hl-76-6"> 6</a>
</span><span class="lnt" id="hl-76-7"><a class="lnlinks" href="#hl-76-7"> 7</a>
</span><span class="lnt" id="hl-76-8"><a class="lnlinks" href="#hl-76-8"> 8</a>
</span><span class="lnt" id="hl-76-9"><a class="lnlinks" href="#hl-76-9"> 9</a>
</span><span class="lnt" id="hl-76-10"><a class="lnlinks" href="#hl-76-10">10</a>
</span><span class="lnt" id="hl-76-11"><a class="lnlinks" href="#hl-76-11">11</a>
</span><span class="lnt" id="hl-76-12"><a class="lnlinks" href="#hl-76-12">12</a>
</span><span class="lnt" id="hl-76-13"><a class="lnlinks" href="#hl-76-13">13</a>
</span><span class="lnt" id="hl-76-14"><a class="lnlinks" href="#hl-76-14">14</a>
</span><span class="lnt" id="hl-76-15"><a class="lnlinks" href="#hl-76-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxArea</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">height</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">maxarea</span><span class="o">=</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">l</span><span class="o">=</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="o">=</span><span class="n">height</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">maxarea</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">maxarea</span><span class="p">,</span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">]</span><span class="p">,</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">]</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">]&lt;</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">l</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">r</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">maxarea</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-77-1"><a class="lnlinks" href="#hl-77-1">1</a>
</span><span class="lnt" id="hl-77-2"><a class="lnlinks" href="#hl-77-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(n) 	Single pass
</span></span><span class="line"><span class="cl">Space complexity: 	O(1) 	Constant space is used 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="12-integer-to-roman">12-Integer To Roman</h1>
<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-78-1"><a class="lnlinks" href="#hl-78-1">1</a>
</span><span class="lnt" id="hl-78-2"><a class="lnlinks" href="#hl-78-2">2</a>
</span><span class="lnt" id="hl-78-3"><a class="lnlinks" href="#hl-78-3">3</a>
</span><span class="lnt" id="hl-78-4"><a class="lnlinks" href="#hl-78-4">4</a>
</span><span class="lnt" id="hl-78-5"><a class="lnlinks" href="#hl-78-5">5</a>
</span><span class="lnt" id="hl-78-6"><a class="lnlinks" href="#hl-78-6">6</a>
</span><span class="lnt" id="hl-78-7"><a class="lnlinks" href="#hl-78-7">7</a>
</span><span class="lnt" id="hl-78-8"><a class="lnlinks" href="#hl-78-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Symbol		Value 
</span></span><span class="line"><span class="cl">I		1
</span></span><span class="line"><span class="cl">V		5
</span></span><span class="line"><span class="cl">X		10
</span></span><span class="line"><span class="cl">L		50
</span></span><span class="line"><span class="cl">C		100
</span></span><span class="line"><span class="cl">D		500
</span></span><span class="line"><span class="cl">M		1000
</span></span></code></pre></td></tr></table>
</div>
</div><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we
subtract it making four. The same principle applies to the number nine which is written as IX. There
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, input is guaranteed to be within the range from
1 to 3999</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-79-1"><a class="lnlinks" href="#hl-79-1">1</a>
</span><span class="lnt" id="hl-79-2"><a class="lnlinks" href="#hl-79-2">2</a>
</span><span class="lnt" id="hl-79-3"><a class="lnlinks" href="#hl-79-3">3</a>
</span><span class="lnt" id="hl-79-4"><a class="lnlinks" href="#hl-79-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 3 
</span></span><span class="line"><span class="cl">Output: &#34;III&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-80-1"><a class="lnlinks" href="#hl-80-1">1</a>
</span><span class="lnt" id="hl-80-2"><a class="lnlinks" href="#hl-80-2">2</a>
</span><span class="lnt" id="hl-80-3"><a class="lnlinks" href="#hl-80-3">3</a>
</span><span class="lnt" id="hl-80-4"><a class="lnlinks" href="#hl-80-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 4
</span></span><span class="line"><span class="cl">Output: &#34;IV&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-81-1"><a class="lnlinks" href="#hl-81-1">1</a>
</span><span class="lnt" id="hl-81-2"><a class="lnlinks" href="#hl-81-2">2</a>
</span><span class="lnt" id="hl-81-3"><a class="lnlinks" href="#hl-81-3">3</a>
</span><span class="lnt" id="hl-81-4"><a class="lnlinks" href="#hl-81-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 9 
</span></span><span class="line"><span class="cl">Output: &#34;IX&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-82-1"><a class="lnlinks" href="#hl-82-1">1</a>
</span><span class="lnt" id="hl-82-2"><a class="lnlinks" href="#hl-82-2">2</a>
</span><span class="lnt" id="hl-82-3"><a class="lnlinks" href="#hl-82-3">3</a>
</span><span class="lnt" id="hl-82-4"><a class="lnlinks" href="#hl-82-4">4</a>
</span><span class="lnt" id="hl-82-5"><a class="lnlinks" href="#hl-82-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 58 
</span></span><span class="line"><span class="cl">Output: &#34;LVIII&#34; 
</span></span><span class="line"><span class="cl">Explanation: L=50, V=5, III=3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-83-1"><a class="lnlinks" href="#hl-83-1">1</a>
</span><span class="lnt" id="hl-83-2"><a class="lnlinks" href="#hl-83-2">2</a>
</span><span class="lnt" id="hl-83-3"><a class="lnlinks" href="#hl-83-3">3</a>
</span><span class="lnt" id="hl-83-4"><a class="lnlinks" href="#hl-83-4">4</a>
</span><span class="lnt" id="hl-83-5"><a class="lnlinks" href="#hl-83-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 1994
</span></span><span class="line"><span class="cl">Output: &#34;MCMXCIV&#34;
</span></span><span class="line"><span class="cl">Explanation: M=1000, CM=900, XC=90 and IV=4 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="string-array">String Array</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-84-1"><a class="lnlinks" href="#hl-84-1"> 1</a>
</span><span class="lnt" id="hl-84-2"><a class="lnlinks" href="#hl-84-2"> 2</a>
</span><span class="lnt" id="hl-84-3"><a class="lnlinks" href="#hl-84-3"> 3</a>
</span><span class="lnt" id="hl-84-4"><a class="lnlinks" href="#hl-84-4"> 4</a>
</span><span class="lnt" id="hl-84-5"><a class="lnlinks" href="#hl-84-5"> 5</a>
</span><span class="lnt" id="hl-84-6"><a class="lnlinks" href="#hl-84-6"> 6</a>
</span><span class="lnt" id="hl-84-7"><a class="lnlinks" href="#hl-84-7"> 7</a>
</span><span class="lnt" id="hl-84-8"><a class="lnlinks" href="#hl-84-8"> 8</a>
</span><span class="lnt" id="hl-84-9"><a class="lnlinks" href="#hl-84-9"> 9</a>
</span><span class="lnt" id="hl-84-10"><a class="lnlinks" href="#hl-84-10">10</a>
</span><span class="lnt" id="hl-84-11"><a class="lnlinks" href="#hl-84-11">11</a>
</span><span class="lnt" id="hl-84-12"><a class="lnlinks" href="#hl-84-12">12</a>
</span><span class="lnt" id="hl-84-13"><a class="lnlinks" href="#hl-84-13">13</a>
</span><span class="lnt" id="hl-84-14"><a class="lnlinks" href="#hl-84-14">14</a>
</span><span class="lnt" id="hl-84-15"><a class="lnlinks" href="#hl-84-15">15</a>
</span><span class="lnt" id="hl-84-16"><a class="lnlinks" href="#hl-84-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">intToRoman</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">M</span><span class="o">[]=</span><span class="p">{</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;M&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;MM&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;MMM&#34;</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//represents 1000, 2000, and 3000 since we know the number is in the range 1 to 3999</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">C</span><span class="o">[]=</span><span class="p">{</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;C&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;CC&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;CCC&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;CD&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;D&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;DC&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;DCC&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;DCCC&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;CM&#34;</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//represents 0, 100,  200,   300,  400, 500,  600,   700,    800,  900</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">X</span><span class="o">[]=</span><span class="p">{</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;X&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;XX&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;XXX&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;XL&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;L&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;LX&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;LXX&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;LXXX&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;XC&#34;</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//represents 0,  10,   20,    30,   40,  50,   60,    70,     80,   90</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">I</span><span class="o">[]=</span><span class="p">{</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;I&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;II&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;III&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;IV&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;V&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;VI&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;VII&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;VIII&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;IX&#34;</span><span class="p">};</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//represents 0,   1,    2,     3,    4,  5,    6,     7,      8,    9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">M</span><span class="o">[</span><span class="n">num</span><span class="o">/</span><span class="n">1000</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">C</span><span class="o">[</span><span class="p">(</span><span class="n">num</span><span class="o">%</span><span class="n">1000</span><span class="p">)</span><span class="o">/</span><span class="n">100</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">X</span><span class="o">[</span><span class="p">(</span><span class="n">num</span><span class="o">%</span><span class="n">100</span><span class="p">)</span><span class="o">/</span><span class="n">10</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">I</span><span class="o">[</span><span class="n">num</span><span class="o">%</span><span class="n">10</span><span class="o">]</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="13-roman-to-integer">13-Roman to Integer</h1>
<p>Roman numerals are represented by seven different symbols I, V, X, L, C, D and M</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-85-1"><a class="lnlinks" href="#hl-85-1">1</a>
</span><span class="lnt" id="hl-85-2"><a class="lnlinks" href="#hl-85-2">2</a>
</span><span class="lnt" id="hl-85-3"><a class="lnlinks" href="#hl-85-3">3</a>
</span><span class="lnt" id="hl-85-4"><a class="lnlinks" href="#hl-85-4">4</a>
</span><span class="lnt" id="hl-85-5"><a class="lnlinks" href="#hl-85-5">5</a>
</span><span class="lnt" id="hl-85-6"><a class="lnlinks" href="#hl-85-6">6</a>
</span><span class="lnt" id="hl-85-7"><a class="lnlinks" href="#hl-85-7">7</a>
</span><span class="lnt" id="hl-85-8"><a class="lnlinks" href="#hl-85-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Symbol 		Value 
</span></span><span class="line"><span class="cl">I		1
</span></span><span class="line"><span class="cl">V		5
</span></span><span class="line"><span class="cl">X		10 
</span></span><span class="line"><span class="cl">L		50
</span></span><span class="line"><span class="cl">C		100
</span></span><span class="line"><span class="cl">D		500
</span></span><span class="line"><span class="cl">M		1000
</span></span></code></pre></td></tr></table>
</div>
</div><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we
subtract it making four. The same principle applies to the number nine which is written as IX. There
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, Input is guaranteed to be within the range from
1 to 3999</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-86-1"><a class="lnlinks" href="#hl-86-1">1</a>
</span><span class="lnt" id="hl-86-2"><a class="lnlinks" href="#hl-86-2">2</a>
</span><span class="lnt" id="hl-86-3"><a class="lnlinks" href="#hl-86-3">3</a>
</span><span class="lnt" id="hl-86-4"><a class="lnlinks" href="#hl-86-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">Input: &#34;III&#34; 
</span></span><span class="line"><span class="cl">Output: 3 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-87-1"><a class="lnlinks" href="#hl-87-1">1</a>
</span><span class="lnt" id="hl-87-2"><a class="lnlinks" href="#hl-87-2">2</a>
</span><span class="lnt" id="hl-87-3"><a class="lnlinks" href="#hl-87-3">3</a>
</span><span class="lnt" id="hl-87-4"><a class="lnlinks" href="#hl-87-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;IV&#34; 
</span></span><span class="line"><span class="cl">Output: 4
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-88-1"><a class="lnlinks" href="#hl-88-1">1</a>
</span><span class="lnt" id="hl-88-2"><a class="lnlinks" href="#hl-88-2">2</a>
</span><span class="lnt" id="hl-88-3"><a class="lnlinks" href="#hl-88-3">3</a>
</span><span class="lnt" id="hl-88-4"><a class="lnlinks" href="#hl-88-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;IX&#34; 
</span></span><span class="line"><span class="cl">Output: 9 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-89-1"><a class="lnlinks" href="#hl-89-1">1</a>
</span><span class="lnt" id="hl-89-2"><a class="lnlinks" href="#hl-89-2">2</a>
</span><span class="lnt" id="hl-89-3"><a class="lnlinks" href="#hl-89-3">3</a>
</span><span class="lnt" id="hl-89-4"><a class="lnlinks" href="#hl-89-4">4</a>
</span><span class="lnt" id="hl-89-5"><a class="lnlinks" href="#hl-89-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;LVIII&#34; 
</span></span><span class="line"><span class="cl">Output: 58 
</span></span><span class="line"><span class="cl">Explanation: L=50, V=5, III=3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-90-1"><a class="lnlinks" href="#hl-90-1">1</a>
</span><span class="lnt" id="hl-90-2"><a class="lnlinks" href="#hl-90-2">2</a>
</span><span class="lnt" id="hl-90-3"><a class="lnlinks" href="#hl-90-3">3</a>
</span><span class="lnt" id="hl-90-4"><a class="lnlinks" href="#hl-90-4">4</a>
</span><span class="lnt" id="hl-90-5"><a class="lnlinks" href="#hl-90-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;MCMXCIV&#34; 
</span></span><span class="line"><span class="cl">Output: 1994
</span></span><span class="line"><span class="cl">Explanation: M=1000, CM=900, XC=90 and IV=4
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="character-array">Character Array</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-91-1"><a class="lnlinks" href="#hl-91-1"> 1</a>
</span><span class="lnt" id="hl-91-2"><a class="lnlinks" href="#hl-91-2"> 2</a>
</span><span class="lnt" id="hl-91-3"><a class="lnlinks" href="#hl-91-3"> 3</a>
</span><span class="lnt" id="hl-91-4"><a class="lnlinks" href="#hl-91-4"> 4</a>
</span><span class="lnt" id="hl-91-5"><a class="lnlinks" href="#hl-91-5"> 5</a>
</span><span class="lnt" id="hl-91-6"><a class="lnlinks" href="#hl-91-6"> 6</a>
</span><span class="lnt" id="hl-91-7"><a class="lnlinks" href="#hl-91-7"> 7</a>
</span><span class="lnt" id="hl-91-8"><a class="lnlinks" href="#hl-91-8"> 8</a>
</span><span class="lnt" id="hl-91-9"><a class="lnlinks" href="#hl-91-9"> 9</a>
</span><span class="lnt" id="hl-91-10"><a class="lnlinks" href="#hl-91-10">10</a>
</span><span class="lnt" id="hl-91-11"><a class="lnlinks" href="#hl-91-11">11</a>
</span><span class="lnt" id="hl-91-12"><a class="lnlinks" href="#hl-91-12">12</a>
</span><span class="lnt" id="hl-91-13"><a class="lnlinks" href="#hl-91-13">13</a>
</span><span class="lnt" id="hl-91-14"><a class="lnlinks" href="#hl-91-14">14</a>
</span><span class="lnt" id="hl-91-15"><a class="lnlinks" href="#hl-91-15">15</a>
</span><span class="lnt" id="hl-91-16"><a class="lnlinks" href="#hl-91-16">16</a>
</span><span class="lnt" id="hl-91-17"><a class="lnlinks" href="#hl-91-17">17</a>
</span><span class="lnt" id="hl-91-18"><a class="lnlinks" href="#hl-91-18">18</a>
</span><span class="lnt" id="hl-91-19"><a class="lnlinks" href="#hl-91-19">19</a>
</span><span class="lnt" id="hl-91-20"><a class="lnlinks" href="#hl-91-20">20</a>
</span><span class="lnt" id="hl-91-21"><a class="lnlinks" href="#hl-91-21">21</a>
</span><span class="lnt" id="hl-91-22"><a class="lnlinks" href="#hl-91-22">22</a>
</span><span class="lnt" id="hl-91-23"><a class="lnlinks" href="#hl-91-23">23</a>
</span><span class="lnt" id="hl-91-24"><a class="lnlinks" href="#hl-91-24">24</a>
</span><span class="lnt" id="hl-91-25"><a class="lnlinks" href="#hl-91-25">25</a>
</span><span class="lnt" id="hl-91-26"><a class="lnlinks" href="#hl-91-26">26</a>
</span><span class="lnt" id="hl-91-27"><a class="lnlinks" href="#hl-91-27">27</a>
</span><span class="lnt" id="hl-91-28"><a class="lnlinks" href="#hl-91-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">romanToInt</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;I&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;V&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">5</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;X&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">10</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;L&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">50</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;C&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">100</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;D&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">500</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;M&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">1000</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">sc</span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">total</span><span class="o">=</span><span class="w"> </span><span class="n">map</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">pre</span><span class="o">=</span><span class="n">map</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">sc</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">int</span><span class="w"> </span><span class="n">curr</span><span class="o">=</span><span class="n">map</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">sc</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">curr</span><span class="o">&lt;=</span><span class="n">pre</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">total</span><span class="o">=</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">curr</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">total</span><span class="o">=</span><span class="n">total</span><span class="o">+</span><span class="n">curr</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="o">*</span><span class="n">pre</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">pre</span><span class="o">=</span><span class="n">curr</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">total</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="14-longest-common-prefix">14-Longest Common Prefix</h1>
<p>Write a function to find the longest common prefix string amongst an array of strings. If there is no
common prefix, return an empty string &quot;&quot;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-92-1"><a class="lnlinks" href="#hl-92-1">1</a>
</span><span class="lnt" id="hl-92-2"><a class="lnlinks" href="#hl-92-2">2</a>
</span><span class="lnt" id="hl-92-3"><a class="lnlinks" href="#hl-92-3">3</a>
</span><span class="lnt" id="hl-92-4"><a class="lnlinks" href="#hl-92-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: [&#34;flower&#34;, &#34;flow&#34;, &#34;flight&#34;]
</span></span><span class="line"><span class="cl">Output: &#34;fl&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-93-1"><a class="lnlinks" href="#hl-93-1">1</a>
</span><span class="lnt" id="hl-93-2"><a class="lnlinks" href="#hl-93-2">2</a>
</span><span class="lnt" id="hl-93-3"><a class="lnlinks" href="#hl-93-3">3</a>
</span><span class="lnt" id="hl-93-4"><a class="lnlinks" href="#hl-93-4">4</a>
</span><span class="lnt" id="hl-93-5"><a class="lnlinks" href="#hl-93-5">5</a>
</span><span class="lnt" id="hl-93-6"><a class="lnlinks" href="#hl-93-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: [&#34;dog&#34;, &#34;racecar&#34;, &#34;car&#34;] 
</span></span><span class="line"><span class="cl">Output: &#34;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation: There is no common prefix among the input strings 
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Note:</em>
All given inputs are in lowercase letters a-z</p>
<p><br><br></p>
<h2 id="horizontal-scanning">Horizontal Scanning</h2>
<br>
*Intuition:* 
<p>For a start we will describe a simple way of find the longest prefix shared by a set of strings
LCP(S1 &hellip; Sn).We will use the observation that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-94-1"><a class="lnlinks" href="#hl-94-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<em>Algorithm:</em></p>
<p>To employ this idea, the algorithm iterates through the strings [S1 &hellip; Sn]. finding at each iteration
i the longest common prefix of strings LCP(S1 &hellip; Si). When LCP(S1 &hellip; Si) is an empty string, the
algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 &hellip; Sn)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-95-1"><a class="lnlinks" href="#hl-95-1"> 1</a>
</span><span class="lnt" id="hl-95-2"><a class="lnlinks" href="#hl-95-2"> 2</a>
</span><span class="lnt" id="hl-95-3"><a class="lnlinks" href="#hl-95-3"> 3</a>
</span><span class="lnt" id="hl-95-4"><a class="lnlinks" href="#hl-95-4"> 4</a>
</span><span class="lnt" id="hl-95-5"><a class="lnlinks" href="#hl-95-5"> 5</a>
</span><span class="lnt" id="hl-95-6"><a class="lnlinks" href="#hl-95-6"> 6</a>
</span><span class="lnt" id="hl-95-7"><a class="lnlinks" href="#hl-95-7"> 7</a>
</span><span class="lnt" id="hl-95-8"><a class="lnlinks" href="#hl-95-8"> 8</a>
</span><span class="lnt" id="hl-95-9"><a class="lnlinks" href="#hl-95-9"> 9</a>
</span><span class="lnt" id="hl-95-10"><a class="lnlinks" href="#hl-95-10">10</a>
</span><span class="lnt" id="hl-95-11"><a class="lnlinks" href="#hl-95-11">11</a>
</span><span class="lnt" id="hl-95-12"><a class="lnlinks" href="#hl-95-12">12</a>
</span><span class="lnt" id="hl-95-13"><a class="lnlinks" href="#hl-95-13">13</a>
</span><span class="lnt" id="hl-95-14"><a class="lnlinks" href="#hl-95-14">14</a>
</span><span class="lnt" id="hl-95-15"><a class="lnlinks" href="#hl-95-15">15</a>
</span><span class="lnt" id="hl-95-16"><a class="lnlinks" href="#hl-95-16">16</a>
</span><span class="lnt" id="hl-95-17"><a class="lnlinks" href="#hl-95-17">17</a>
</span><span class="lnt" id="hl-95-18"><a class="lnlinks" href="#hl-95-18">18</a>
</span><span class="lnt" id="hl-95-19"><a class="lnlinks" href="#hl-95-19">19</a>
</span><span class="lnt" id="hl-95-20"><a class="lnlinks" href="#hl-95-20">20</a>
</span><span class="lnt" id="hl-95-21"><a class="lnlinks" href="#hl-95-21">21</a>
</span><span class="lnt" id="hl-95-22"><a class="lnlinks" href="#hl-95-22">22</a>
</span><span class="lnt" id="hl-95-23"><a class="lnlinks" href="#hl-95-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">   \       /      
</span></span><span class="line"><span class="cl">  LCP{1,2} = leets
</span></span><span class="line"><span class="cl">  	     leetcode
</span></span><span class="line"><span class="cl">	     leet 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 	\	{leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">		 \ 			   /
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		 LCP{1,3} = leet
</span></span><span class="line"><span class="cl">		 	    leet
</span></span><span class="line"><span class="cl">			    leet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			      \          {leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">			       \ 				  /
</span></span><span class="line"><span class="cl">			       LCP{1,4}   leet
</span></span><span class="line"><span class="cl">			       		  leeds
</span></span><span class="line"><span class="cl">					  lee
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				LCP{1,4} = &#34;lee&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-96-1"><a class="lnlinks" href="#hl-96-1"> 1</a>
</span><span class="lnt" id="hl-96-2"><a class="lnlinks" href="#hl-96-2"> 2</a>
</span><span class="lnt" id="hl-96-3"><a class="lnlinks" href="#hl-96-3"> 3</a>
</span><span class="lnt" id="hl-96-4"><a class="lnlinks" href="#hl-96-4"> 4</a>
</span><span class="lnt" id="hl-96-5"><a class="lnlinks" href="#hl-96-5"> 5</a>
</span><span class="lnt" id="hl-96-6"><a class="lnlinks" href="#hl-96-6"> 6</a>
</span><span class="lnt" id="hl-96-7"><a class="lnlinks" href="#hl-96-7"> 7</a>
</span><span class="lnt" id="hl-96-8"><a class="lnlinks" href="#hl-96-8"> 8</a>
</span><span class="lnt" id="hl-96-9"><a class="lnlinks" href="#hl-96-9"> 9</a>
</span><span class="lnt" id="hl-96-10"><a class="lnlinks" href="#hl-96-10">10</a>
</span><span class="lnt" id="hl-96-11"><a class="lnlinks" href="#hl-96-11">11</a>
</span><span class="lnt" id="hl-96-12"><a class="lnlinks" href="#hl-96-12">12</a>
</span><span class="lnt" id="hl-96-13"><a class="lnlinks" href="#hl-96-13">13</a>
</span><span class="lnt" id="hl-96-14"><a class="lnlinks" href="#hl-96-14">14</a>
</span><span class="lnt" id="hl-96-15"><a class="lnlinks" href="#hl-96-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">longestCommon</span><span class="w"> </span><span class="nf">Prefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">prefix</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">indexOf</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">prefix</span><span class="o">=</span><span class="n">prefix</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">prefix</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prefix</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">prefix</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-97-1"><a class="lnlinks" href="#hl-97-1">1</a>
</span><span class="lnt" id="hl-97-2"><a class="lnlinks" href="#hl-97-2">2</a>
</span><span class="lnt" id="hl-97-3"><a class="lnlinks" href="#hl-97-3">3</a>
</span><span class="lnt" id="hl-97-4"><a class="lnlinks" href="#hl-97-4">4</a>
</span><span class="lnt" id="hl-97-5"><a class="lnlinks" href="#hl-97-5">5</a>
</span><span class="lnt" id="hl-97-6"><a class="lnlinks" href="#hl-97-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Time</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>	<span class="n">Where</span> <span class="n">S</span> <span class="n">is</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">all</span> <span class="n">characters</span> <span class="ow">in</span> <span class="n">all</span> <span class="n">strings</span><span class="o">.</span> <span class="n">In</span> <span class="n">the</span> <span class="n">worse</span> <span class="k">case</span>
</span></span><span class="line"><span class="cl">				<span class="n">all</span> <span class="n">n</span> <span class="n">strings</span> <span class="n">are</span> <span class="n">the</span> <span class="n">same</span><span class="o">.</span> <span class="n">The</span> <span class="n">algorithm</span> <span class="n">compares</span> <span class="n">the</span> <span class="n">string</span> <span class="n">S1</span> <span class="n">with</span> 
</span></span><span class="line"><span class="cl">				<span class="n">the</span> <span class="n">other</span> <span class="n">strings</span> <span class="p">[</span><span class="n">S2</span> <span class="o">...</span> <span class="n">Sn</span><span class="p">]</span><span class="o">.</span> <span class="n">There</span> <span class="n">are</span> <span class="n">S</span> <span class="n">character</span> <span class="n">comparisons</span> <span class="n">where</span>
</span></span><span class="line"><span class="cl">				<span class="n">S</span> <span class="n">is</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">all</span> <span class="n">characters</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">input</span> <span class="n">array</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Space</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 	<span class="n">We</span> <span class="n">only</span> <span class="n">used</span> <span class="n">constant</span> <span class="n">extra</span> <span class="n">space</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="vertical-scanning">Vertical Scanning</h2>
<p>Imagine a very short string is at the end of the array. The above approach will still do S comparisons.
One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on
the same column (same character index of the strings) before moving on to the next column.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-98-1"><a class="lnlinks" href="#hl-98-1"> 1</a>
</span><span class="lnt" id="hl-98-2"><a class="lnlinks" href="#hl-98-2"> 2</a>
</span><span class="lnt" id="hl-98-3"><a class="lnlinks" href="#hl-98-3"> 3</a>
</span><span class="lnt" id="hl-98-4"><a class="lnlinks" href="#hl-98-4"> 4</a>
</span><span class="lnt" id="hl-98-5"><a class="lnlinks" href="#hl-98-5"> 5</a>
</span><span class="lnt" id="hl-98-6"><a class="lnlinks" href="#hl-98-6"> 6</a>
</span><span class="lnt" id="hl-98-7"><a class="lnlinks" href="#hl-98-7"> 7</a>
</span><span class="lnt" id="hl-98-8"><a class="lnlinks" href="#hl-98-8"> 8</a>
</span><span class="lnt" id="hl-98-9"><a class="lnlinks" href="#hl-98-9"> 9</a>
</span><span class="lnt" id="hl-98-10"><a class="lnlinks" href="#hl-98-10">10</a>
</span><span class="lnt" id="hl-98-11"><a class="lnlinks" href="#hl-98-11">11</a>
</span><span class="lnt" id="hl-98-12"><a class="lnlinks" href="#hl-98-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="o">==</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">&lt;</span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">!=</span><span class="n">c</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-99-1"><a class="lnlinks" href="#hl-99-1">1</a>
</span><span class="lnt" id="hl-99-2"><a class="lnlinks" href="#hl-99-2">2</a>
</span><span class="lnt" id="hl-99-3"><a class="lnlinks" href="#hl-99-3">3</a>
</span><span class="lnt" id="hl-99-4"><a class="lnlinks" href="#hl-99-4">4</a>
</span><span class="lnt" id="hl-99-5"><a class="lnlinks" href="#hl-99-5">5</a>
</span><span class="lnt" id="hl-99-6"><a class="lnlinks" href="#hl-99-6">6</a>
</span><span class="lnt" id="hl-99-7"><a class="lnlinks" href="#hl-99-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Time</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> 	<span class="n">Where</span> <span class="n">S</span> <span class="n">is</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">all</span> <span class="n">characters</span> <span class="ow">in</span> <span class="n">all</span> <span class="n">strings</span><span class="o">.</span> <span class="n">In</span> <span class="n">the</span> <span class="n">worst</span> <span class="k">case</span>
</span></span><span class="line"><span class="cl">				<span class="n">there</span> <span class="n">will</span> <span class="n">be</span> <span class="n">n</span> <span class="n">equal</span> <span class="n">strings</span> <span class="n">with</span> <span class="n">length</span> <span class="n">m</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">algorithm</span> <span class="n">performs</span>
</span></span><span class="line"><span class="cl">				<span class="n">S</span><span class="o">=</span><span class="n">n</span><span class="o">*</span><span class="n">m</span> <span class="n">character</span> <span class="n">comparisons</span><span class="o">.</span> <span class="n">Even</span> <span class="n">the</span> <span class="n">worst</span> <span class="k">case</span> <span class="n">is</span> <span class="n">still</span> <span class="n">the</span> <span class="n">same</span> <span class="n">as</span> 
</span></span><span class="line"><span class="cl">				<span class="n">Approach</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">best</span> <span class="k">case</span> <span class="n">there</span> <span class="n">are</span> <span class="n">at</span> <span class="n">most</span> <span class="n">n</span><span class="o">*</span><span class="n">minLen</span> <span class="n">comparisons</span> 
</span></span><span class="line"><span class="cl">				<span class="n">where</span> <span class="n">minLen</span> <span class="n">is</span> <span class="n">the</span> <span class="n">length</span> <span class="n">of</span> <span class="n">the</span> <span class="n">shortest</span> <span class="n">string</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">array</span><span class="o">.</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Space</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>	<span class="n">We</span> <span class="n">only</span> <span class="n">used</span> <span class="n">constant</span> <span class="n">extra</span> <span class="n">space</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="divide-and-conquer">Divide and Conquer</h2>
<p>The idea of the algorithm comes from the associative property of LCP operation. We notice that:
LCP(S1 &hellip; Sn) = LCP(LCP(S1 &hellip; Sk), LCP(Sk+1 &hellip; Sn)), where LCP(S1 &hellip; Sn) is the longest common
prefix in a set of strings [S1 &hellip; Sn], 1&lt;k&lt;n</p>
<p><br><br>
<em>Algorithm</em></p>
<p>To apply the previous observation, we use the divide and conquer technique, where we split the
LCP(Si &hellip; Sj) problem into two subproblems LCP(Si &hellip; Smid) and LCP(Smid+1 &hellip; Sj), where mid is
(i+j)/2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem
LCP(Si &hellip; Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till
there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the
LCP(Si &hellip; Sj)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-100-1"><a class="lnlinks" href="#hl-100-1"> 1</a>
</span><span class="lnt" id="hl-100-2"><a class="lnlinks" href="#hl-100-2"> 2</a>
</span><span class="lnt" id="hl-100-3"><a class="lnlinks" href="#hl-100-3"> 3</a>
</span><span class="lnt" id="hl-100-4"><a class="lnlinks" href="#hl-100-4"> 4</a>
</span><span class="lnt" id="hl-100-5"><a class="lnlinks" href="#hl-100-5"> 5</a>
</span><span class="lnt" id="hl-100-6"><a class="lnlinks" href="#hl-100-6"> 6</a>
</span><span class="lnt" id="hl-100-7"><a class="lnlinks" href="#hl-100-7"> 7</a>
</span><span class="lnt" id="hl-100-8"><a class="lnlinks" href="#hl-100-8"> 8</a>
</span><span class="lnt" id="hl-100-9"><a class="lnlinks" href="#hl-100-9"> 9</a>
</span><span class="lnt" id="hl-100-10"><a class="lnlinks" href="#hl-100-10">10</a>
</span><span class="lnt" id="hl-100-11"><a class="lnlinks" href="#hl-100-11">11</a>
</span><span class="lnt" id="hl-100-12"><a class="lnlinks" href="#hl-100-12">12</a>
</span><span class="lnt" id="hl-100-13"><a class="lnlinks" href="#hl-100-13">13</a>
</span><span class="lnt" id="hl-100-14"><a class="lnlinks" href="#hl-100-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">				{leetcode, leet, lee, le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				    /                \   
</span></span><span class="line"><span class="cl">Divide 			{leetcode, leet}            {lee, le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Conquer				|			 | 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     {leet} 		        {le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			         \                      /
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				 	   {le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Searching for the longest common prefix (LCP) in dataset {leetcode, leet, lee, le} 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-101-1"><a class="lnlinks" href="#hl-101-1"> 1</a>
</span><span class="lnt" id="hl-101-2"><a class="lnlinks" href="#hl-101-2"> 2</a>
</span><span class="lnt" id="hl-101-3"><a class="lnlinks" href="#hl-101-3"> 3</a>
</span><span class="lnt" id="hl-101-4"><a class="lnlinks" href="#hl-101-4"> 4</a>
</span><span class="lnt" id="hl-101-5"><a class="lnlinks" href="#hl-101-5"> 5</a>
</span><span class="lnt" id="hl-101-6"><a class="lnlinks" href="#hl-101-6"> 6</a>
</span><span class="lnt" id="hl-101-7"><a class="lnlinks" href="#hl-101-7"> 7</a>
</span><span class="lnt" id="hl-101-8"><a class="lnlinks" href="#hl-101-8"> 8</a>
</span><span class="lnt" id="hl-101-9"><a class="lnlinks" href="#hl-101-9"> 9</a>
</span><span class="lnt" id="hl-101-10"><a class="lnlinks" href="#hl-101-10">10</a>
</span><span class="lnt" id="hl-101-11"><a class="lnlinks" href="#hl-101-11">11</a>
</span><span class="lnt" id="hl-101-12"><a class="lnlinks" href="#hl-101-12">12</a>
</span><span class="lnt" id="hl-101-13"><a class="lnlinks" href="#hl-101-13">13</a>
</span><span class="lnt" id="hl-101-14"><a class="lnlinks" href="#hl-101-14">14</a>
</span><span class="lnt" id="hl-101-15"><a class="lnlinks" href="#hl-101-15">15</a>
</span><span class="lnt" id="hl-101-16"><a class="lnlinks" href="#hl-101-16">16</a>
</span><span class="lnt" id="hl-101-17"><a class="lnlinks" href="#hl-101-17">17</a>
</span><span class="lnt" id="hl-101-18"><a class="lnlinks" href="#hl-101-18">18</a>
</span><span class="lnt" id="hl-101-19"><a class="lnlinks" href="#hl-101-19">19</a>
</span><span class="lnt" id="hl-101-20"><a class="lnlinks" href="#hl-101-20">20</a>
</span><span class="lnt" id="hl-101-21"><a class="lnlinks" href="#hl-101-21">21</a>
</span><span class="lnt" id="hl-101-22"><a class="lnlinks" href="#hl-101-22">22</a>
</span><span class="lnt" id="hl-101-23"><a class="lnlinks" href="#hl-101-23">23</a>
</span><span class="lnt" id="hl-101-24"><a class="lnlinks" href="#hl-101-24">24</a>
</span><span class="lnt" id="hl-101-25"><a class="lnlinks" href="#hl-101-25">25</a>
</span><span class="lnt" id="hl-101-26"><a class="lnlinks" href="#hl-101-26">26</a>
</span><span class="lnt" id="hl-101-27"><a class="lnlinks" href="#hl-101-27">27</a>
</span><span class="lnt" id="hl-101-28"><a class="lnlinks" href="#hl-101-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strs</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">longestCommonPrefix</span><span class="p">(</span><span class="n">strs</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">l</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="n">r</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">strs</span><span class="o">[</span><span class="n">l</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">String</span><span class="w"> </span><span class="n">lcpLeft</span><span class="o">=</span><span class="w"> </span><span class="n">longestCommonPrefix</span><span class="p">(</span><span class="n">strs</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="w"> </span><span class="n">mid</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">String</span><span class="w"> </span><span class="n">lcpRight</span><span class="o">=</span><span class="w"> </span><span class="n">longestCommonPrefix</span><span class="p">(</span><span class="n">strs</span><span class="p">,</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="n">r</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">commonPrefix</span><span class="p">(</span><span class="n">lcpLeft</span><span class="p">,</span><span class="n">lcpRight</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="nf">commonPrefix</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">min</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="na">length</span><span class="p">(),</span><span class="w"> </span><span class="n">right</span><span class="p">.</span><span class="na">length</span><span class="p">());</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">min</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="n">right</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">left</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">left</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<p>In the worst case we have n equal strings with length m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-102-1"><a class="lnlinks" href="#hl-102-1">1</a>
</span><span class="lnt" id="hl-102-2"><a class="lnlinks" href="#hl-102-2">2</a>
</span><span class="lnt" id="hl-102-3"><a class="lnlinks" href="#hl-102-3">3</a>
</span><span class="lnt" id="hl-102-4"><a class="lnlinks" href="#hl-102-4">4</a>
</span><span class="lnt" id="hl-102-5"><a class="lnlinks" href="#hl-102-5">5</a>
</span><span class="lnt" id="hl-102-6"><a class="lnlinks" href="#hl-102-6">6</a>
</span><span class="lnt" id="hl-102-7"><a class="lnlinks" href="#hl-102-7">7</a>
</span><span class="lnt" id="hl-102-8"><a class="lnlinks" href="#hl-102-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(S)		where S is the number of all characters in the array, S=m*n so time
</span></span><span class="line"><span class="cl">				complexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the
</span></span><span class="line"><span class="cl">				best case the algorithm performs O(minLen * n) comparisons, where
</span></span><span class="line"><span class="cl">				minLen is the shortest string of the array 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(m*log(n))	There is a memory overhead since we sotre recursive call in the 
</span></span><span class="line"><span class="cl">				execution stack. There are log(n) recursive calls, each store needs m
</span></span><span class="line"><span class="cl">				space to store the result so space complexity is O(m*log(n))
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="binary-search">Binary Search</h2>
<p>The idea is to apply binary search method to find the string with maximum value L, which is common
prefix of all the strings. The algorithm searches the space in the interval (0 &hellip; minLen), where
minLen is minimum string length and the maximum possible common prefix. Each time search space is
divided in two equal parts, one of them is discarded because it is sure that it doesn&rsquo;t contain the
solution. There are two possible cases:</p>
<ul>
<li>S[1&hellip;mid] is not a common string. This means that for each j&gt;i, S[1&hellip;j] is not a common string and we discard the second half of the search space</li>
<li>S [1&hellip;mid] is common string. This means that for each i&lt;j, S[1&hellip;i] is a common string and we discard the first half of the search space, because we try to find longer common prefix</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-103-1"><a class="lnlinks" href="#hl-103-1"> 1</a>
</span><span class="lnt" id="hl-103-2"><a class="lnlinks" href="#hl-103-2"> 2</a>
</span><span class="lnt" id="hl-103-3"><a class="lnlinks" href="#hl-103-3"> 3</a>
</span><span class="lnt" id="hl-103-4"><a class="lnlinks" href="#hl-103-4"> 4</a>
</span><span class="lnt" id="hl-103-5"><a class="lnlinks" href="#hl-103-5"> 5</a>
</span><span class="lnt" id="hl-103-6"><a class="lnlinks" href="#hl-103-6"> 6</a>
</span><span class="lnt" id="hl-103-7"><a class="lnlinks" href="#hl-103-7"> 7</a>
</span><span class="lnt" id="hl-103-8"><a class="lnlinks" href="#hl-103-8"> 8</a>
</span><span class="lnt" id="hl-103-9"><a class="lnlinks" href="#hl-103-9"> 9</a>
</span><span class="lnt" id="hl-103-10"><a class="lnlinks" href="#hl-103-10">10</a>
</span><span class="lnt" id="hl-103-11"><a class="lnlinks" href="#hl-103-11">11</a>
</span><span class="lnt" id="hl-103-12"><a class="lnlinks" href="#hl-103-12">12</a>
</span><span class="lnt" id="hl-103-13"><a class="lnlinks" href="#hl-103-13">13</a>
</span><span class="lnt" id="hl-103-14"><a class="lnlinks" href="#hl-103-14">14</a>
</span><span class="lnt" id="hl-103-15"><a class="lnlinks" href="#hl-103-15">15</a>
</span><span class="lnt" id="hl-103-16"><a class="lnlinks" href="#hl-103-16">16</a>
</span><span class="lnt" id="hl-103-17"><a class="lnlinks" href="#hl-103-17">17</a>
</span><span class="lnt" id="hl-103-18"><a class="lnlinks" href="#hl-103-18">18</a>
</span><span class="lnt" id="hl-103-19"><a class="lnlinks" href="#hl-103-19">19</a>
</span><span class="lnt" id="hl-103-20"><a class="lnlinks" href="#hl-103-20">20</a>
</span><span class="lnt" id="hl-103-21"><a class="lnlinks" href="#hl-103-21">21</a>
</span><span class="lnt" id="hl-103-22"><a class="lnlinks" href="#hl-103-22">22</a>
</span><span class="lnt" id="hl-103-23"><a class="lnlinks" href="#hl-103-23">23</a>
</span><span class="lnt" id="hl-103-24"><a class="lnlinks" href="#hl-103-24">24</a>
</span><span class="lnt" id="hl-103-25"><a class="lnlinks" href="#hl-103-25">25</a>
</span><span class="lnt" id="hl-103-26"><a class="lnlinks" href="#hl-103-26">26</a>
</span><span class="lnt" id="hl-103-27"><a class="lnlinks" href="#hl-103-27">27</a>
</span><span class="lnt" id="hl-103-28"><a class="lnlinks" href="#hl-103-28">28</a>
</span><span class="lnt" id="hl-103-29"><a class="lnlinks" href="#hl-103-29">29</a>
</span><span class="lnt" id="hl-103-30"><a class="lnlinks" href="#hl-103-30">30</a>
</span><span class="lnt" id="hl-103-31"><a class="lnlinks" href="#hl-103-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 				{leets, leetcode, leetc, leeds} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						|
</span></span><span class="line"><span class="cl">					      
</span></span><span class="line"><span class="cl">					     &#34;leets&#34;
</span></span><span class="line"><span class="cl">					    /        \
</span></span><span class="line"><span class="cl">					 &#34;lee&#34;      &#34;ts&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					     midpoint 
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leetcode&#34; : yes
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leetc&#34; : yes
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leeds&#34; : yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						|
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					     &#34;leets&#34;
</span></span><span class="line"><span class="cl">					     /     \
</span></span><span class="line"><span class="cl">					  &#34;lee&#34;    &#34;ts&#34;
</span></span><span class="line"><span class="cl">					    |      /   \
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					  &#34;lee&#34;   &#34;t&#34;   &#34;s&#34;
</span></span><span class="line"><span class="cl">					        
</span></span><span class="line"><span class="cl">						   midpoint
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leetcode&#34; : yes
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leetc&#34; : yes 
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leeds&#34; : no
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						   LCP= &#34;lee&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-104-1"><a class="lnlinks" href="#hl-104-1"> 1</a>
</span><span class="lnt" id="hl-104-2"><a class="lnlinks" href="#hl-104-2"> 2</a>
</span><span class="lnt" id="hl-104-3"><a class="lnlinks" href="#hl-104-3"> 3</a>
</span><span class="lnt" id="hl-104-4"><a class="lnlinks" href="#hl-104-4"> 4</a>
</span><span class="lnt" id="hl-104-5"><a class="lnlinks" href="#hl-104-5"> 5</a>
</span><span class="lnt" id="hl-104-6"><a class="lnlinks" href="#hl-104-6"> 6</a>
</span><span class="lnt" id="hl-104-7"><a class="lnlinks" href="#hl-104-7"> 7</a>
</span><span class="lnt" id="hl-104-8"><a class="lnlinks" href="#hl-104-8"> 8</a>
</span><span class="lnt" id="hl-104-9"><a class="lnlinks" href="#hl-104-9"> 9</a>
</span><span class="lnt" id="hl-104-10"><a class="lnlinks" href="#hl-104-10">10</a>
</span><span class="lnt" id="hl-104-11"><a class="lnlinks" href="#hl-104-11">11</a>
</span><span class="lnt" id="hl-104-12"><a class="lnlinks" href="#hl-104-12">12</a>
</span><span class="lnt" id="hl-104-13"><a class="lnlinks" href="#hl-104-13">13</a>
</span><span class="lnt" id="hl-104-14"><a class="lnlinks" href="#hl-104-14">14</a>
</span><span class="lnt" id="hl-104-15"><a class="lnlinks" href="#hl-104-15">15</a>
</span><span class="lnt" id="hl-104-16"><a class="lnlinks" href="#hl-104-16">16</a>
</span><span class="lnt" id="hl-104-17"><a class="lnlinks" href="#hl-104-17">17</a>
</span><span class="lnt" id="hl-104-18"><a class="lnlinks" href="#hl-104-18">18</a>
</span><span class="lnt" id="hl-104-19"><a class="lnlinks" href="#hl-104-19">19</a>
</span><span class="lnt" id="hl-104-20"><a class="lnlinks" href="#hl-104-20">20</a>
</span><span class="lnt" id="hl-104-21"><a class="lnlinks" href="#hl-104-21">21</a>
</span><span class="lnt" id="hl-104-22"><a class="lnlinks" href="#hl-104-22">22</a>
</span><span class="lnt" id="hl-104-23"><a class="lnlinks" href="#hl-104-23">23</a>
</span><span class="lnt" id="hl-104-24"><a class="lnlinks" href="#hl-104-24">24</a>
</span><span class="lnt" id="hl-104-25"><a class="lnlinks" href="#hl-104-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">minLen</span><span class="o">=</span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">str</span><span class="p">:</span><span class="w"> </span><span class="n">strs</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">minLen</span><span class="o">=</span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">minLen</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">length</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="o">=</span><span class="n">min</span><span class="w"> </span><span class="n">Len</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="o">&lt;=</span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">middle</span><span class="o">=</span><span class="p">(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isCommonPrefix</span><span class="p">(</span><span class="n">strs</span><span class="p">,</span><span class="w"> </span><span class="n">middle</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">low</span><span class="o">=</span><span class="n">middle</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">else</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">high</span><span class="o">=</span><span class="n">middle</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isCommonPrefix</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strs</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="w"> </span><span class="n">str1</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">substring</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="n">len</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">startsWith</span><span class="p">(</span><span class="n">str1</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>**Complexity Analysis</p>
<p>In the worst case we have n equal strings with length m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-105-1"><a class="lnlinks" href="#hl-105-1">1</a>
</span><span class="lnt" id="hl-105-2"><a class="lnlinks" href="#hl-105-2">2</a>
</span><span class="lnt" id="hl-105-3"><a class="lnlinks" href="#hl-105-3">3</a>
</span><span class="lnt" id="hl-105-4"><a class="lnlinks" href="#hl-105-4">4</a>
</span><span class="lnt" id="hl-105-5"><a class="lnlinks" href="#hl-105-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">	<span class="n">Time</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="n">S</span> <span class="o">*</span> <span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">)),</span> <span class="n">where</span> <span class="n">S</span> <span class="n">is</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">all</span> <span class="n">characters</span> <span class="ow">in</span> <span class="n">all</span> <span class="n">strings</span><span class="o">.</span> <span class="n">The</span>
</span></span><span class="line"><span class="cl">				<span class="n">algorithm</span> <span class="n">makes</span> <span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="n">iterations</span><span class="p">,</span> <span class="k">for</span> <span class="n">each</span> <span class="n">of</span> <span class="n">them</span> <span class="n">there</span> <span class="n">are</span> <span class="n">S</span><span class="o">=</span><span class="n">m</span><span class="o">*</span><span class="n">n</span> 
</span></span><span class="line"><span class="cl">				<span class="n">comparisons</span><span class="p">,</span> <span class="n">which</span> <span class="n">gives</span> <span class="ow">in</span> <span class="n">total</span> <span class="n">O</span><span class="p">(</span><span class="n">S</span> <span class="o">*</span> <span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="n">time</span> <span class="n">complexity</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">Space</span> <span class="n">complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span> <span class="n">We</span> <span class="n">only</span> <span class="n">used</span> <span class="n">constant</span> <span class="n">extra</span> <span class="n">space</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="further-thoughts">Further Thoughts</h2>
<p>Considering a slightly different problem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-106-1"><a class="lnlinks" href="#hl-106-1">1</a>
</span><span class="lnt" id="hl-106-2"><a class="lnlinks" href="#hl-106-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S.
</span></span><span class="line"><span class="cl">	This LCP query will be called frequently
</span></span></code></pre></td></tr></table>
</div>
</div><p>We coule optimize LCP queries by storing the set of keys S in a Trie. See this for Trie
implementation. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to
find the longest common prefix of a string q and all key strings. This means that we have to find the
deepest path from the root, which satisfies the following conditions</p>
<ul>
<li>it is a prefix of query string q</li>
<li>each node along the path must contain only one child element. Otherwise the found path will not be a
common prefix among all strings</li>
<li>the path doesn&rsquo;t comprise of nodes which are marked as end of key. Otherwise the path couldn&rsquo;t be a
prefix of a key which is shorter than itself</li>
</ul>
<p><br><br>
<em>Algorithm</em></p>
<p>The only question left is how to find the deepest path in the Trie, that fulfills the requirements
above. The most effective way is to build a trie from {S1 &hellip; Sn] strings. Then find the prefix of
query string q in the Trie. We traverse the Trie from the root, till it is impossible to continue the
path in the Trie because one of the conditions above is not satisfied.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-107-1"><a class="lnlinks" href="#hl-107-1"> 1</a>
</span><span class="lnt" id="hl-107-2"><a class="lnlinks" href="#hl-107-2"> 2</a>
</span><span class="lnt" id="hl-107-3"><a class="lnlinks" href="#hl-107-3"> 3</a>
</span><span class="lnt" id="hl-107-4"><a class="lnlinks" href="#hl-107-4"> 4</a>
</span><span class="lnt" id="hl-107-5"><a class="lnlinks" href="#hl-107-5"> 5</a>
</span><span class="lnt" id="hl-107-6"><a class="lnlinks" href="#hl-107-6"> 6</a>
</span><span class="lnt" id="hl-107-7"><a class="lnlinks" href="#hl-107-7"> 7</a>
</span><span class="lnt" id="hl-107-8"><a class="lnlinks" href="#hl-107-8"> 8</a>
</span><span class="lnt" id="hl-107-9"><a class="lnlinks" href="#hl-107-9"> 9</a>
</span><span class="lnt" id="hl-107-10"><a class="lnlinks" href="#hl-107-10">10</a>
</span><span class="lnt" id="hl-107-11"><a class="lnlinks" href="#hl-107-11">11</a>
</span><span class="lnt" id="hl-107-12"><a class="lnlinks" href="#hl-107-12">12</a>
</span><span class="lnt" id="hl-107-13"><a class="lnlinks" href="#hl-107-13">13</a>
</span><span class="lnt" id="hl-107-14"><a class="lnlinks" href="#hl-107-14">14</a>
</span><span class="lnt" id="hl-107-15"><a class="lnlinks" href="#hl-107-15">15</a>
</span><span class="lnt" id="hl-107-16"><a class="lnlinks" href="#hl-107-16">16</a>
</span><span class="lnt" id="hl-107-17"><a class="lnlinks" href="#hl-107-17">17</a>
</span><span class="lnt" id="hl-107-18"><a class="lnlinks" href="#hl-107-18">18</a>
</span><span class="lnt" id="hl-107-19"><a class="lnlinks" href="#hl-107-19">19</a>
</span><span class="lnt" id="hl-107-20"><a class="lnlinks" href="#hl-107-20">20</a>
</span><span class="lnt" id="hl-107-21"><a class="lnlinks" href="#hl-107-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Searching for the longest common prefix of string &#34;le&#34; in a Trie from dataset {lead, leet}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			Root
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	l   ===========&gt;  \  l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	e   ===============&gt;   \ e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LCP &#34;le&#34; FOUND	=============&gt;   3   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     a	/  \ e    End of Key &#34;lee&#34; 
</span></span><span class="line"><span class="cl">				     
</span></span><span class="line"><span class="cl">			      6      4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			 d  /	       \ t
</span></span><span class="line"><span class="cl">				        
</span></span><span class="line"><span class="cl">END OF KEY &#34;lead&#34;	  7		 5   End of key &#34;leet&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-108-1"><a class="lnlinks" href="#hl-108-1"> 1</a>
</span><span class="lnt" id="hl-108-2"><a class="lnlinks" href="#hl-108-2"> 2</a>
</span><span class="lnt" id="hl-108-3"><a class="lnlinks" href="#hl-108-3"> 3</a>
</span><span class="lnt" id="hl-108-4"><a class="lnlinks" href="#hl-108-4"> 4</a>
</span><span class="lnt" id="hl-108-5"><a class="lnlinks" href="#hl-108-5"> 5</a>
</span><span class="lnt" id="hl-108-6"><a class="lnlinks" href="#hl-108-6"> 6</a>
</span><span class="lnt" id="hl-108-7"><a class="lnlinks" href="#hl-108-7"> 7</a>
</span><span class="lnt" id="hl-108-8"><a class="lnlinks" href="#hl-108-8"> 8</a>
</span><span class="lnt" id="hl-108-9"><a class="lnlinks" href="#hl-108-9"> 9</a>
</span><span class="lnt" id="hl-108-10"><a class="lnlinks" href="#hl-108-10">10</a>
</span><span class="lnt" id="hl-108-11"><a class="lnlinks" href="#hl-108-11">11</a>
</span><span class="lnt" id="hl-108-12"><a class="lnlinks" href="#hl-108-12">12</a>
</span><span class="lnt" id="hl-108-13"><a class="lnlinks" href="#hl-108-13">13</a>
</span><span class="lnt" id="hl-108-14"><a class="lnlinks" href="#hl-108-14">14</a>
</span><span class="lnt" id="hl-108-15"><a class="lnlinks" href="#hl-108-15">15</a>
</span><span class="lnt" id="hl-108-16"><a class="lnlinks" href="#hl-108-16">16</a>
</span><span class="lnt" id="hl-108-17"><a class="lnlinks" href="#hl-108-17">17</a>
</span><span class="lnt" id="hl-108-18"><a class="lnlinks" href="#hl-108-18">18</a>
</span><span class="lnt" id="hl-108-19"><a class="lnlinks" href="#hl-108-19">19</a>
</span><span class="lnt" id="hl-108-20"><a class="lnlinks" href="#hl-108-20">20</a>
</span><span class="lnt" id="hl-108-21"><a class="lnlinks" href="#hl-108-21">21</a>
</span><span class="lnt" id="hl-108-22"><a class="lnlinks" href="#hl-108-22">22</a>
</span><span class="lnt" id="hl-108-23"><a class="lnlinks" href="#hl-108-23">23</a>
</span><span class="lnt" id="hl-108-24"><a class="lnlinks" href="#hl-108-24">24</a>
</span><span class="lnt" id="hl-108-25"><a class="lnlinks" href="#hl-108-25">25</a>
</span><span class="lnt" id="hl-108-26"><a class="lnlinks" href="#hl-108-26">26</a>
</span><span class="lnt" id="hl-108-27"><a class="lnlinks" href="#hl-108-27">27</a>
</span><span class="lnt" id="hl-108-28"><a class="lnlinks" href="#hl-108-28">28</a>
</span><span class="lnt" id="hl-108-29"><a class="lnlinks" href="#hl-108-29">29</a>
</span><span class="lnt" id="hl-108-30"><a class="lnlinks" href="#hl-108-30">30</a>
</span><span class="lnt" id="hl-108-31"><a class="lnlinks" href="#hl-108-31">31</a>
</span><span class="lnt" id="hl-108-32"><a class="lnlinks" href="#hl-108-32">32</a>
</span><span class="lnt" id="hl-108-33"><a class="lnlinks" href="#hl-108-33">33</a>
</span><span class="lnt" id="hl-108-34"><a class="lnlinks" href="#hl-108-34">34</a>
</span><span class="lnt" id="hl-108-35"><a class="lnlinks" href="#hl-108-35">35</a>
</span><span class="lnt" id="hl-108-36"><a class="lnlinks" href="#hl-108-36">36</a>
</span><span class="lnt" id="hl-108-37"><a class="lnlinks" href="#hl-108-37">37</a>
</span><span class="lnt" id="hl-108-38"><a class="lnlinks" href="#hl-108-38">38</a>
</span><span class="lnt" id="hl-108-39"><a class="lnlinks" href="#hl-108-39">39</a>
</span><span class="lnt" id="hl-108-40"><a class="lnlinks" href="#hl-108-40">40</a>
</span><span class="lnt" id="hl-108-41"><a class="lnlinks" href="#hl-108-41">41</a>
</span><span class="lnt" id="hl-108-42"><a class="lnlinks" href="#hl-108-42">42</a>
</span><span class="lnt" id="hl-108-43"><a class="lnlinks" href="#hl-108-43">43</a>
</span><span class="lnt" id="hl-108-44"><a class="lnlinks" href="#hl-108-44">44</a>
</span><span class="lnt" id="hl-108-45"><a class="lnlinks" href="#hl-108-45">45</a>
</span><span class="lnt" id="hl-108-46"><a class="lnlinks" href="#hl-108-46">46</a>
</span><span class="lnt" id="hl-108-47"><a class="lnlinks" href="#hl-108-47">47</a>
</span><span class="lnt" id="hl-108-48"><a class="lnlinks" href="#hl-108-48">48</a>
</span><span class="lnt" id="hl-108-49"><a class="lnlinks" href="#hl-108-49">49</a>
</span><span class="lnt" id="hl-108-50"><a class="lnlinks" href="#hl-108-50">50</a>
</span><span class="lnt" id="hl-108-51"><a class="lnlinks" href="#hl-108-51">51</a>
</span><span class="lnt" id="hl-108-52"><a class="lnlinks" href="#hl-108-52">52</a>
</span><span class="lnt" id="hl-108-53"><a class="lnlinks" href="#hl-108-53">53</a>
</span><span class="lnt" id="hl-108-54"><a class="lnlinks" href="#hl-108-54">54</a>
</span><span class="lnt" id="hl-108-55"><a class="lnlinks" href="#hl-108-55">55</a>
</span><span class="lnt" id="hl-108-56"><a class="lnlinks" href="#hl-108-56">56</a>
</span><span class="lnt" id="hl-108-57"><a class="lnlinks" href="#hl-108-57">57</a>
</span><span class="lnt" id="hl-108-58"><a class="lnlinks" href="#hl-108-58">58</a>
</span><span class="lnt" id="hl-108-59"><a class="lnlinks" href="#hl-108-59">59</a>
</span><span class="lnt" id="hl-108-60"><a class="lnlinks" href="#hl-108-60">60</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public String longestCommonPrefix(String q, String[] strs) {
</span></span><span class="line"><span class="cl">    if (strs == null || strs.length == 0)
</span></span><span class="line"><span class="cl">         return &#34;&#34;;  
</span></span><span class="line"><span class="cl">    if (strs.length == 1)
</span></span><span class="line"><span class="cl">         return strs[0];
</span></span><span class="line"><span class="cl">    Trie trie = new Trie();      
</span></span><span class="line"><span class="cl">    for (int i = 1; i &lt; strs.length ; i++) {
</span></span><span class="line"><span class="cl">        trie.insert(strs[i]);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    return trie.searchLongestPrefix(q);
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class TrieNode {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    // R links to node children
</span></span><span class="line"><span class="cl">    private TrieNode[] links;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private final int R = 26;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private boolean isEnd;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    // number of children non null links
</span></span><span class="line"><span class="cl">    private int size;    
</span></span><span class="line"><span class="cl">    public void put(char ch, TrieNode node) {
</span></span><span class="line"><span class="cl">        links[ch -&#39;a&#39;] = node;
</span></span><span class="line"><span class="cl">        size++;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    public int getLinks() {
</span></span><span class="line"><span class="cl">        return size;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    //assume methods containsKey, isEnd, get, put are implemented as it is described
</span></span><span class="line"><span class="cl">   //in  )
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public class Trie {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private TrieNode root;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    public Trie() {
</span></span><span class="line"><span class="cl">        root = new TrieNode();
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//assume methods insert, search, searchPrefix are implemented
</span></span><span class="line"><span class="cl">    private String searchLongestPrefix(String word) {
</span></span><span class="line"><span class="cl">        TrieNode node = root;
</span></span><span class="line"><span class="cl">        StringBuilder prefix = new StringBuilder();
</span></span><span class="line"><span class="cl">        for (int i = 0; i &lt; word.length(); i++) {
</span></span><span class="line"><span class="cl">            char curLetter = word.charAt(i);
</span></span><span class="line"><span class="cl">            if (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == 1) &amp;&amp; (!node.isEnd())) {
</span></span><span class="line"><span class="cl">                prefix.append(curLetter);
</span></span><span class="line"><span class="cl">                node = node.get(curLetter);
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">            else
</span></span><span class="line"><span class="cl">                return prefix.toString();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">         return prefix.toString();
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-109-1"><a class="lnlinks" href="#hl-109-1">1</a>
</span><span class="lnt" id="hl-109-2"><a class="lnlinks" href="#hl-109-2">2</a>
</span><span class="lnt" id="hl-109-3"><a class="lnlinks" href="#hl-109-3">3</a>
</span><span class="lnt" id="hl-109-4"><a class="lnlinks" href="#hl-109-4">4</a>
</span><span class="lnt" id="hl-109-5"><a class="lnlinks" href="#hl-109-5">5</a>
</span><span class="lnt" id="hl-109-6"><a class="lnlinks" href="#hl-109-6">6</a>
</span><span class="lnt" id="hl-109-7"><a class="lnlinks" href="#hl-109-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In the worst case query q has length m and is equal to all n strings of the array 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity:   O(S)   where S is the number of all characters in the array, LCP query O(m) 
</span></span><span class="line"><span class="cl">  			  Trie build has O(S) time complexity. To find the common prefix of q 
</span></span><span class="line"><span class="cl">			  in the Trie takes in the worst O(m). 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity:  O(S)   we only used additional S extra space for the Trie. 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="15-3sum">15-3Sum</h1>
<p>Given an array &ldquo;nums&rdquo; of n integers, are there elements a, b, c in nums such that a+b+c=0? Find all
unique triplets in the array which gives the sum of zero.</p>
<p>Note:</p>
<p>The solution set must not contain duplicate triplets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-110-1"><a class="lnlinks" href="#hl-110-1">1</a>
</span><span class="lnt" id="hl-110-2"><a class="lnlinks" href="#hl-110-2">2</a>
</span><span class="lnt" id="hl-110-3"><a class="lnlinks" href="#hl-110-3">3</a>
</span><span class="lnt" id="hl-110-4"><a class="lnlinks" href="#hl-110-4">4</a>
</span><span class="lnt" id="hl-110-5"><a class="lnlinks" href="#hl-110-5">5</a>
</span><span class="lnt" id="hl-110-6"><a class="lnlinks" href="#hl-110-6">6</a>
</span><span class="lnt" id="hl-110-7"><a class="lnlinks" href="#hl-110-7">7</a>
</span><span class="lnt" id="hl-110-8"><a class="lnlinks" href="#hl-110-8">8</a>
</span><span class="lnt" id="hl-110-9"><a class="lnlinks" href="#hl-110-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums = [-1, 0, 1, 2, -1, -4]. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A solution set is: 
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  [-1, 0, 1],
</span></span><span class="line"><span class="cl">  [-1, -1, 2]
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="sorted-array">Sorted Array</h2>
<p>The method is to sort an input array and then run through all indices of a possible first element of a
triplet. For each element we make another 2Sum sweep of the remaining part of the array. Also we want
to skip elements to avoid duplicates in the answer without expending extra memory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-111-1"><a class="lnlinks" href="#hl-111-1"> 1</a>
</span><span class="lnt" id="hl-111-2"><a class="lnlinks" href="#hl-111-2"> 2</a>
</span><span class="lnt" id="hl-111-3"><a class="lnlinks" href="#hl-111-3"> 3</a>
</span><span class="lnt" id="hl-111-4"><a class="lnlinks" href="#hl-111-4"> 4</a>
</span><span class="lnt" id="hl-111-5"><a class="lnlinks" href="#hl-111-5"> 5</a>
</span><span class="lnt" id="hl-111-6"><a class="lnlinks" href="#hl-111-6"> 6</a>
</span><span class="lnt" id="hl-111-7"><a class="lnlinks" href="#hl-111-7"> 7</a>
</span><span class="lnt" id="hl-111-8"><a class="lnlinks" href="#hl-111-8"> 8</a>
</span><span class="lnt" id="hl-111-9"><a class="lnlinks" href="#hl-111-9"> 9</a>
</span><span class="lnt" id="hl-111-10"><a class="lnlinks" href="#hl-111-10">10</a>
</span><span class="lnt" id="hl-111-11"><a class="lnlinks" href="#hl-111-11">11</a>
</span><span class="lnt" id="hl-111-12"><a class="lnlinks" href="#hl-111-12">12</a>
</span><span class="lnt" id="hl-111-13"><a class="lnlinks" href="#hl-111-13">13</a>
</span><span class="lnt" id="hl-111-14"><a class="lnlinks" href="#hl-111-14">14</a>
</span><span class="lnt" id="hl-111-15"><a class="lnlinks" href="#hl-111-15">15</a>
</span><span class="lnt" id="hl-111-16"><a class="lnlinks" href="#hl-111-16">16</a>
</span><span class="lnt" id="hl-111-17"><a class="lnlinks" href="#hl-111-17">17</a>
</span><span class="lnt" id="hl-111-18"><a class="lnlinks" href="#hl-111-18">18</a>
</span><span class="lnt" id="hl-111-19"><a class="lnlinks" href="#hl-111-19">19</a>
</span><span class="lnt" id="hl-111-20"><a class="lnlinks" href="#hl-111-20">20</a>
</span><span class="lnt" id="hl-111-21"><a class="lnlinks" href="#hl-111-21">21</a>
</span><span class="lnt" id="hl-111-22"><a class="lnlinks" href="#hl-111-22">22</a>
</span><span class="lnt" id="hl-111-23"><a class="lnlinks" href="#hl-111-23">23</a>
</span><span class="lnt" id="hl-111-24"><a class="lnlinks" href="#hl-111-24">24</a>
</span><span class="lnt" id="hl-111-25"><a class="lnlinks" href="#hl-111-25">25</a>
</span><span class="lnt" id="hl-111-26"><a class="lnlinks" href="#hl-111-26">26</a>
</span><span class="lnt" id="hl-111-27"><a class="lnlinks" href="#hl-111-27">27</a>
</span><span class="lnt" id="hl-111-28"><a class="lnlinks" href="#hl-111-28">28</a>
</span><span class="lnt" id="hl-111-29"><a class="lnlinks" href="#hl-111-29">29</a>
</span><span class="lnt" id="hl-111-30"><a class="lnlinks" href="#hl-111-30">30</a>
</span><span class="lnt" id="hl-111-31"><a class="lnlinks" href="#hl-111-31">31</a>
</span><span class="lnt" id="hl-111-32"><a class="lnlinks" href="#hl-111-32">32</a>
</span><span class="lnt" id="hl-111-33"><a class="lnlinks" href="#hl-111-33">33</a>
</span><span class="lnt" id="hl-111-34"><a class="lnlinks" href="#hl-111-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] num) {
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    //Arrays.sort re-arranges the array of integers in ascending order
</span></span><span class="line"><span class="cl">    //ex. [1, 2, 3, 4]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Arrays.sort(num);
</span></span><span class="line"><span class="cl">    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;(); 
</span></span><span class="line"><span class="cl">    for (int i = 0; i &lt; num.length-2; i++) {
</span></span><span class="line"><span class="cl">        if (i == 0 || (i &gt; 0 &amp;&amp; num[i] != num[i-1])) {
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">	    //This lets us skip some of the duplicate entries in the array
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    int lo = i+1, hi = num.length-1, sum = 0 - num[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	    //This is for the 2 Sum sweep 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            while (lo &lt; hi) {
</span></span><span class="line"><span class="cl">                if (num[lo] + num[hi] == sum) {
</span></span><span class="line"><span class="cl">                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
</span></span><span class="line"><span class="cl">                    while (lo &lt; hi &amp;&amp; num[lo] == num[lo+1]) lo++;
</span></span><span class="line"><span class="cl">                    while (lo &lt; hi &amp;&amp; num[hi] == num[hi-1]) hi--;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		    //This lets us skip some of the duplicate entries in the array
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    lo++; hi--;
</span></span><span class="line"><span class="cl">                } else if (num[lo] + num[hi] &lt; sum) lo++;
</span></span><span class="line"><span class="cl">                else hi--;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		//This allows us to optimize slightly since we know that the array is sorted
</span></span><span class="line"><span class="cl">           }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    return res;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-112-1"><a class="lnlinks" href="#hl-112-1">1</a>
</span><span class="lnt" id="hl-112-2"><a class="lnlinks" href="#hl-112-2">2</a>
</span><span class="lnt" id="hl-112-3"><a class="lnlinks" href="#hl-112-3">3</a>
</span><span class="lnt" id="hl-112-4"><a class="lnlinks" href="#hl-112-4">4</a>
</span><span class="lnt" id="hl-112-5"><a class="lnlinks" href="#hl-112-5">5</a>
</span><span class="lnt" id="hl-112-6"><a class="lnlinks" href="#hl-112-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(n^2)   We go through a maximum of n elements for the first element of a triplet, 
</span></span><span class="line"><span class="cl">			   and then when making a bi-directional 2Sum sweep of the remaining part of 
</span></span><span class="line"><span class="cl">			   the array we also go through a maxiumum of n elements. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(1)	   If we assume the return linked list is not extra space, then we do not 
</span></span><span class="line"><span class="cl">			   allocate any significant extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="16-3sum-closest">16-3Sum Closest</h1>
<p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum
is closest to target. Return the sum of the three integers. You may assume that each input would have
exactly one solution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-113-1"><a class="lnlinks" href="#hl-113-1">1</a>
</span><span class="lnt" id="hl-113-2"><a class="lnlinks" href="#hl-113-2">2</a>
</span><span class="lnt" id="hl-113-3"><a class="lnlinks" href="#hl-113-3">3</a>
</span><span class="lnt" id="hl-113-4"><a class="lnlinks" href="#hl-113-4">4</a>
</span><span class="lnt" id="hl-113-5"><a class="lnlinks" href="#hl-113-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums=[-1, 2, 1, -4], and target=1.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The sum that is closest to the target is 2. (-1+2+1=2)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="3-pointers">3 Pointers</h2>
<p>Similar to the previous 3Sum problem, we use three pointers to point to the current element, next
element and the last element. If the sum is less than the target, it means that we need to add a larger
element so next element move to the next. If the sum is greater, it means we have to add a smaller
element so last element move to the second last element. Keep doing this until the end. Each time
compare the difference between sum and target, if it is less than minimum difference so far, then
replace result with it, otherwise continue iterating.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-114-1"><a class="lnlinks" href="#hl-114-1"> 1</a>
</span><span class="lnt" id="hl-114-2"><a class="lnlinks" href="#hl-114-2"> 2</a>
</span><span class="lnt" id="hl-114-3"><a class="lnlinks" href="#hl-114-3"> 3</a>
</span><span class="lnt" id="hl-114-4"><a class="lnlinks" href="#hl-114-4"> 4</a>
</span><span class="lnt" id="hl-114-5"><a class="lnlinks" href="#hl-114-5"> 5</a>
</span><span class="lnt" id="hl-114-6"><a class="lnlinks" href="#hl-114-6"> 6</a>
</span><span class="lnt" id="hl-114-7"><a class="lnlinks" href="#hl-114-7"> 7</a>
</span><span class="lnt" id="hl-114-8"><a class="lnlinks" href="#hl-114-8"> 8</a>
</span><span class="lnt" id="hl-114-9"><a class="lnlinks" href="#hl-114-9"> 9</a>
</span><span class="lnt" id="hl-114-10"><a class="lnlinks" href="#hl-114-10">10</a>
</span><span class="lnt" id="hl-114-11"><a class="lnlinks" href="#hl-114-11">11</a>
</span><span class="lnt" id="hl-114-12"><a class="lnlinks" href="#hl-114-12">12</a>
</span><span class="lnt" id="hl-114-13"><a class="lnlinks" href="#hl-114-13">13</a>
</span><span class="lnt" id="hl-114-14"><a class="lnlinks" href="#hl-114-14">14</a>
</span><span class="lnt" id="hl-114-15"><a class="lnlinks" href="#hl-114-15">15</a>
</span><span class="lnt" id="hl-114-16"><a class="lnlinks" href="#hl-114-16">16</a>
</span><span class="lnt" id="hl-114-17"><a class="lnlinks" href="#hl-114-17">17</a>
</span><span class="lnt" id="hl-114-18"><a class="lnlinks" href="#hl-114-18">18</a>
</span><span class="lnt" id="hl-114-19"><a class="lnlinks" href="#hl-114-19">19</a>
</span><span class="lnt" id="hl-114-20"><a class="lnlinks" href="#hl-114-20">20</a>
</span><span class="lnt" id="hl-114-21"><a class="lnlinks" href="#hl-114-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public class Solution {
</span></span><span class="line"><span class="cl">		public int threeSumClosest(int[] num, int target) {
</span></span><span class="line"><span class="cl">		int result=num[0] + num[1] + num[num.length-1];
</span></span><span class="line"><span class="cl">		Arrays.sort(num);
</span></span><span class="line"><span class="cl">		for (int i=0; i&lt;num.length -2; i++) {
</span></span><span class="line"><span class="cl">			int start= i+1, end = num.length -1;
</span></span><span class="line"><span class="cl">			while (start &lt; end) {
</span></span><span class="line"><span class="cl">				int sum = num[i] + num[start] + num[end];
</span></span><span class="line"><span class="cl">				if (sum &gt; target) {
</span></span><span class="line"><span class="cl">					end--;
</span></span><span class="line"><span class="cl">				} else {
</span></span><span class="line"><span class="cl">					start++;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">				if (Math.abs(sum-target) &lt; Math.abs(result-target)) {
</span></span><span class="line"><span class="cl">					result=sum;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">		return result;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="17-letter-combinations-of-a-phone-number">17-Letter Combinations of a Phone Number</h1>
<p>Given a string contianing digits from 2-9 inclusive, return all possible letter combinations that the
number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not
map to any letters.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-115-1"><a class="lnlinks" href="#hl-115-1">1</a>
</span><span class="lnt" id="hl-115-2"><a class="lnlinks" href="#hl-115-2">2</a>
</span><span class="lnt" id="hl-115-3"><a class="lnlinks" href="#hl-115-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2 - abc 	3 - def 	4 - ghi		5 - jkl		6 - mno		7 - pqrs 	8 - tuv
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">						9 - wxyz
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-116-1"><a class="lnlinks" href="#hl-116-1">1</a>
</span><span class="lnt" id="hl-116-2"><a class="lnlinks" href="#hl-116-2">2</a>
</span><span class="lnt" id="hl-116-3"><a class="lnlinks" href="#hl-116-3">3</a>
</span><span class="lnt" id="hl-116-4"><a class="lnlinks" href="#hl-116-4">4</a>
</span><span class="lnt" id="hl-116-5"><a class="lnlinks" href="#hl-116-5">5</a>
</span><span class="lnt" id="hl-116-6"><a class="lnlinks" href="#hl-116-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;23&#34; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output: [&#34;ad&#34;, &#34;ae&#34;, &#34;af&#34;, &#34;bd&#34;, &#34;be&#34;, &#34;bf&#34;, &#34;cd&#34;, &#34;ce&#34;, &#34;cf&#34;]. 
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Note: The above answer is in lexicographical order but the answer can be in any order</em></p>
<p><br><br></p>
<h2 id="backtracking">Backtracking</h2>
<p>Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the
solution candidate turns to not be a solution (or at least not the last one), backtracking algorithm
discards it by making some changes on the previous step, ie <em>backtracks</em> and then tries again.</p>
<p>Here is a backtrack function backtrack(combination, next_digits) which takes as arguments an ongoing
letter combination and the next digits to check.</p>
<ul>
<li>If there are no more digits to check that means the current combination is done</li>
<li>If there are still digits to check:
<ul>
<li>Iterate over the letters mapping to the next available digit</li>
<li>Append the current letter to the current combination and proceed to check next digits:</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-117-1"><a class="lnlinks" href="#hl-117-1">1</a>
</span><span class="lnt" id="hl-117-2"><a class="lnlinks" href="#hl-117-2">2</a>
</span><span class="lnt" id="hl-117-3"><a class="lnlinks" href="#hl-117-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	  combination = combination + letter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	  backtrack(combination + letter, next_digits[1:]).
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Visual Representation</strong></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/Screenshot-2022-10-26-180426.png" alt="Visual Representation"  />
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-119-1"><a class="lnlinks" href="#hl-119-1">1</a>
</span><span class="lnt" id="hl-119-2"><a class="lnlinks" href="#hl-119-2">2</a>
</span><span class="lnt" id="hl-119-3"><a class="lnlinks" href="#hl-119-3">3</a>
</span><span class="lnt" id="hl-119-4"><a class="lnlinks" href="#hl-119-4">4</a>
</span><span class="lnt" id="hl-119-5"><a class="lnlinks" href="#hl-119-5">5</a>
</span><span class="lnt" id="hl-119-6"><a class="lnlinks" href="#hl-119-6">6</a>
</span><span class="lnt" id="hl-119-7"><a class="lnlinks" href="#hl-119-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
</span></span><span class="line"><span class="cl">					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
</span></span><span class="line"><span class="cl">					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
</span></span><span class="line"><span class="cl">					total number digits in the input 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="first-in-first-out-fifo-queue">First In First Out (FIFO) Queue</h2>
<p>This solution utilizes the Single Queue Breadth First Search (BFS) which is an algorithm for traversing
or searching tree or graph data structures. It starts at the tree root and explores all of the neighbor
nodes.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-120-1"><a class="lnlinks" href="#hl-120-1"> 1</a>
</span><span class="lnt" id="hl-120-2"><a class="lnlinks" href="#hl-120-2"> 2</a>
</span><span class="lnt" id="hl-120-3"><a class="lnlinks" href="#hl-120-3"> 3</a>
</span><span class="lnt" id="hl-120-4"><a class="lnlinks" href="#hl-120-4"> 4</a>
</span><span class="lnt" id="hl-120-5"><a class="lnlinks" href="#hl-120-5"> 5</a>
</span><span class="lnt" id="hl-120-6"><a class="lnlinks" href="#hl-120-6"> 6</a>
</span><span class="lnt" id="hl-120-7"><a class="lnlinks" href="#hl-120-7"> 7</a>
</span><span class="lnt" id="hl-120-8"><a class="lnlinks" href="#hl-120-8"> 8</a>
</span><span class="lnt" id="hl-120-9"><a class="lnlinks" href="#hl-120-9"> 9</a>
</span><span class="lnt" id="hl-120-10"><a class="lnlinks" href="#hl-120-10">10</a>
</span><span class="lnt" id="hl-120-11"><a class="lnlinks" href="#hl-120-11">11</a>
</span><span class="lnt" id="hl-120-12"><a class="lnlinks" href="#hl-120-12">12</a>
</span><span class="lnt" id="hl-120-13"><a class="lnlinks" href="#hl-120-13">13</a>
</span><span class="lnt" id="hl-120-14"><a class="lnlinks" href="#hl-120-14">14</a>
</span><span class="lnt" id="hl-120-15"><a class="lnlinks" href="#hl-120-15">15</a>
</span><span class="lnt" id="hl-120-16"><a class="lnlinks" href="#hl-120-16">16</a>
</span><span class="lnt" id="hl-120-17"><a class="lnlinks" href="#hl-120-17">17</a>
</span><span class="lnt" id="hl-120-18"><a class="lnlinks" href="#hl-120-18">18</a>
</span><span class="lnt" id="hl-120-19"><a class="lnlinks" href="#hl-120-19">19</a>
</span><span class="lnt" id="hl-120-20"><a class="lnlinks" href="#hl-120-20">20</a>
</span><span class="lnt" id="hl-120-21"><a class="lnlinks" href="#hl-120-21">21</a>
</span><span class="lnt" id="hl-120-22"><a class="lnlinks" href="#hl-120-22">22</a>
</span><span class="lnt" id="hl-120-23"><a class="lnlinks" href="#hl-120-23">23</a>
</span><span class="lnt" id="hl-120-24"><a class="lnlinks" href="#hl-120-24">24</a>
</span><span class="lnt" id="hl-120-25"><a class="lnlinks" href="#hl-120-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">letterCombinations</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">digits</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">mapping</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="p">{</span><span class="s">&#34;0&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;1&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;abc&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;def&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;ghi&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;jkl&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;mno&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;pqrs&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;tuv&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">wxyz</span><span class="s">&#34;};
</span></span></span><span class="line"><span class="cl"><span class="s">	ans.add(&#34;&#34;); 
</span></span></span><span class="line"><span class="cl"><span class="s">	for (int i = 0; i&lt;digits.length(); i++) {
</span></span></span><span class="line"><span class="cl"><span class="s">		int x = Character.getNumericValue(digits.charAt(i)); 
</span></span></span><span class="line"><span class="cl"><span class="s">		
</span></span></span><span class="line"><span class="cl"><span class="s">		//we terminate the while loop when we encounter a new-formed string which is more than
</span></span></span><span class="line"><span class="cl"><span class="s">		//the current level i 
</span></span></span><span class="line"><span class="cl"><span class="s">		
</span></span></span><span class="line"><span class="cl"><span class="s">		//peek retrieves the first value of the linked list
</span></span></span><span class="line"><span class="cl"><span class="s">		while (ans.peek().length==i){
</span></span></span><span class="line"><span class="cl"><span class="s">			
</span></span></span><span class="line"><span class="cl"><span class="s">			//removes the head or the first value in the linkedlist
</span></span></span><span class="line"><span class="cl"><span class="s">			String t = ans.remove(); 
</span></span></span><span class="line"><span class="cl"><span class="s">			for (char s : mapping[x].toCharArray()) {
</span></span></span><span class="line"><span class="cl"><span class="s">				ans.add(t+s);
</span></span></span><span class="line"><span class="cl"><span class="s">				//this works because add appends to the end of the list
</span></span></span><span class="line"><span class="cl"><span class="s">			}
</span></span></span><span class="line"><span class="cl"><span class="s">		}
</span></span></span><span class="line"><span class="cl"><span class="s">		return ans; 
</span></span></span><span class="line"><span class="cl"><span class="s">	}
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-121-1"><a class="lnlinks" href="#hl-121-1">1</a>
</span><span class="lnt" id="hl-121-2"><a class="lnlinks" href="#hl-121-2">2</a>
</span><span class="lnt" id="hl-121-3"><a class="lnlinks" href="#hl-121-3">3</a>
</span><span class="lnt" id="hl-121-4"><a class="lnlinks" href="#hl-121-4">4</a>
</span><span class="lnt" id="hl-121-5"><a class="lnlinks" href="#hl-121-5">5</a>
</span><span class="lnt" id="hl-121-6"><a class="lnlinks" href="#hl-121-6">6</a>
</span><span class="lnt" id="hl-121-7"><a class="lnlinks" href="#hl-121-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
</span></span><span class="line"><span class="cl">					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
</span></span><span class="line"><span class="cl">					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
</span></span><span class="line"><span class="cl">					total number digits in the input 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="18-4sum">18-4Sum</h1>
<p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such
that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target</p>
<p><em>Note:</em>
The solution set must not contain duplicate quadruplets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-122-1"><a class="lnlinks" href="#hl-122-1"> 1</a>
</span><span class="lnt" id="hl-122-2"><a class="lnlinks" href="#hl-122-2"> 2</a>
</span><span class="lnt" id="hl-122-3"><a class="lnlinks" href="#hl-122-3"> 3</a>
</span><span class="lnt" id="hl-122-4"><a class="lnlinks" href="#hl-122-4"> 4</a>
</span><span class="lnt" id="hl-122-5"><a class="lnlinks" href="#hl-122-5"> 5</a>
</span><span class="lnt" id="hl-122-6"><a class="lnlinks" href="#hl-122-6"> 6</a>
</span><span class="lnt" id="hl-122-7"><a class="lnlinks" href="#hl-122-7"> 7</a>
</span><span class="lnt" id="hl-122-8"><a class="lnlinks" href="#hl-122-8"> 8</a>
</span><span class="lnt" id="hl-122-9"><a class="lnlinks" href="#hl-122-9"> 9</a>
</span><span class="lnt" id="hl-122-10"><a class="lnlinks" href="#hl-122-10">10</a>
</span><span class="lnt" id="hl-122-11"><a class="lnlinks" href="#hl-122-11">11</a>
</span><span class="lnt" id="hl-122-12"><a class="lnlinks" href="#hl-122-12">12</a>
</span><span class="lnt" id="hl-122-13"><a class="lnlinks" href="#hl-122-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums = [1, 0, -1, 0, -2, 2], and target = 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A solution set is: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  [-1,  0, 0, 1],
</span></span><span class="line"><span class="cl">  [-2, -1, 1, 2],
</span></span><span class="line"><span class="cl">  [-2,  0, 0, 2]
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="sorted-array-1">Sorted Array</h2>
<p>The idea is the same as the other numbered sum problems like 2sum and 3sum. We sort the array and then
proceed to interate through the values until we end up with a result that we are looking for.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-123-1"><a class="lnlinks" href="#hl-123-1"> 1</a>
</span><span class="lnt" id="hl-123-2"><a class="lnlinks" href="#hl-123-2"> 2</a>
</span><span class="lnt" id="hl-123-3"><a class="lnlinks" href="#hl-123-3"> 3</a>
</span><span class="lnt" id="hl-123-4"><a class="lnlinks" href="#hl-123-4"> 4</a>
</span><span class="lnt" id="hl-123-5"><a class="lnlinks" href="#hl-123-5"> 5</a>
</span><span class="lnt" id="hl-123-6"><a class="lnlinks" href="#hl-123-6"> 6</a>
</span><span class="lnt" id="hl-123-7"><a class="lnlinks" href="#hl-123-7"> 7</a>
</span><span class="lnt" id="hl-123-8"><a class="lnlinks" href="#hl-123-8"> 8</a>
</span><span class="lnt" id="hl-123-9"><a class="lnlinks" href="#hl-123-9"> 9</a>
</span><span class="lnt" id="hl-123-10"><a class="lnlinks" href="#hl-123-10">10</a>
</span><span class="lnt" id="hl-123-11"><a class="lnlinks" href="#hl-123-11">11</a>
</span><span class="lnt" id="hl-123-12"><a class="lnlinks" href="#hl-123-12">12</a>
</span><span class="lnt" id="hl-123-13"><a class="lnlinks" href="#hl-123-13">13</a>
</span><span class="lnt" id="hl-123-14"><a class="lnlinks" href="#hl-123-14">14</a>
</span><span class="lnt" id="hl-123-15"><a class="lnlinks" href="#hl-123-15">15</a>
</span><span class="lnt" id="hl-123-16"><a class="lnlinks" href="#hl-123-16">16</a>
</span><span class="lnt" id="hl-123-17"><a class="lnlinks" href="#hl-123-17">17</a>
</span><span class="lnt" id="hl-123-18"><a class="lnlinks" href="#hl-123-18">18</a>
</span><span class="lnt" id="hl-123-19"><a class="lnlinks" href="#hl-123-19">19</a>
</span><span class="lnt" id="hl-123-20"><a class="lnlinks" href="#hl-123-20">20</a>
</span><span class="lnt" id="hl-123-21"><a class="lnlinks" href="#hl-123-21">21</a>
</span><span class="lnt" id="hl-123-22"><a class="lnlinks" href="#hl-123-22">22</a>
</span><span class="lnt" id="hl-123-23"><a class="lnlinks" href="#hl-123-23">23</a>
</span><span class="lnt" id="hl-123-24"><a class="lnlinks" href="#hl-123-24">24</a>
</span><span class="lnt" id="hl-123-25"><a class="lnlinks" href="#hl-123-25">25</a>
</span><span class="lnt" id="hl-123-26"><a class="lnlinks" href="#hl-123-26">26</a>
</span><span class="lnt" id="hl-123-27"><a class="lnlinks" href="#hl-123-27">27</a>
</span><span class="lnt" id="hl-123-28"><a class="lnlinks" href="#hl-123-28">28</a>
</span><span class="lnt" id="hl-123-29"><a class="lnlinks" href="#hl-123-29">29</a>
</span><span class="lnt" id="hl-123-30"><a class="lnlinks" href="#hl-123-30">30</a>
</span><span class="lnt" id="hl-123-31"><a class="lnlinks" href="#hl-123-31">31</a>
</span><span class="lnt" id="hl-123-32"><a class="lnlinks" href="#hl-123-32">32</a>
</span><span class="lnt" id="hl-123-33"><a class="lnlinks" href="#hl-123-33">33</a>
</span><span class="lnt" id="hl-123-34"><a class="lnlinks" href="#hl-123-34">34</a>
</span><span class="lnt" id="hl-123-35"><a class="lnlinks" href="#hl-123-35">35</a>
</span><span class="lnt" id="hl-123-36"><a class="lnlinks" href="#hl-123-36">36</a>
</span><span class="lnt" id="hl-123-37"><a class="lnlinks" href="#hl-123-37">37</a>
</span><span class="lnt" id="hl-123-38"><a class="lnlinks" href="#hl-123-38">38</a>
</span><span class="lnt" id="hl-123-39"><a class="lnlinks" href="#hl-123-39">39</a>
</span><span class="lnt" id="hl-123-40"><a class="lnlinks" href="#hl-123-40">40</a>
</span><span class="lnt" id="hl-123-41"><a class="lnlinks" href="#hl-123-41">41</a>
</span><span class="lnt" id="hl-123-42"><a class="lnlinks" href="#hl-123-42">42</a>
</span><span class="lnt" id="hl-123-43"><a class="lnlinks" href="#hl-123-43">43</a>
</span><span class="lnt" id="hl-123-44"><a class="lnlinks" href="#hl-123-44">44</a>
</span><span class="lnt" id="hl-123-45"><a class="lnlinks" href="#hl-123-45">45</a>
</span><span class="lnt" id="hl-123-46"><a class="lnlinks" href="#hl-123-46">46</a>
</span><span class="lnt" id="hl-123-47"><a class="lnlinks" href="#hl-123-47">47</a>
</span><span class="lnt" id="hl-123-48"><a class="lnlinks" href="#hl-123-48">48</a>
</span><span class="lnt" id="hl-123-49"><a class="lnlinks" href="#hl-123-49">49</a>
</span><span class="lnt" id="hl-123-50"><a class="lnlinks" href="#hl-123-50">50</a>
</span><span class="lnt" id="hl-123-51"><a class="lnlinks" href="#hl-123-51">51</a>
</span><span class="lnt" id="hl-123-52"><a class="lnlinks" href="#hl-123-52">52</a>
</span><span class="lnt" id="hl-123-53"><a class="lnlinks" href="#hl-123-53">53</a>
</span><span class="lnt" id="hl-123-54"><a class="lnlinks" href="#hl-123-54">54</a>
</span><span class="lnt" id="hl-123-55"><a class="lnlinks" href="#hl-123-55">55</a>
</span><span class="lnt" id="hl-123-56"><a class="lnlinks" href="#hl-123-56">56</a>
</span><span class="lnt" id="hl-123-57"><a class="lnlinks" href="#hl-123-57">57</a>
</span><span class="lnt" id="hl-123-58"><a class="lnlinks" href="#hl-123-58">58</a>
</span><span class="lnt" id="hl-123-59"><a class="lnlinks" href="#hl-123-59">59</a>
</span><span class="lnt" id="hl-123-60"><a class="lnlinks" href="#hl-123-60">60</a>
</span><span class="lnt" id="hl-123-61"><a class="lnlinks" href="#hl-123-61">61</a>
</span><span class="lnt" id="hl-123-62"><a class="lnlinks" href="#hl-123-62">62</a>
</span><span class="lnt" id="hl-123-63"><a class="lnlinks" href="#hl-123-63">63</a>
</span><span class="lnt" id="hl-123-64"><a class="lnlinks" href="#hl-123-64">64</a>
</span><span class="lnt" id="hl-123-65"><a class="lnlinks" href="#hl-123-65">65</a>
</span><span class="lnt" id="hl-123-66"><a class="lnlinks" href="#hl-123-66">66</a>
</span><span class="lnt" id="hl-123-67"><a class="lnlinks" href="#hl-123-67">67</a>
</span><span class="lnt" id="hl-123-68"><a class="lnlinks" href="#hl-123-68">68</a>
</span><span class="lnt" id="hl-123-69"><a class="lnlinks" href="#hl-123-69">69</a>
</span><span class="lnt" id="hl-123-70"><a class="lnlinks" href="#hl-123-70">70</a>
</span><span class="lnt" id="hl-123-71"><a class="lnlinks" href="#hl-123-71">71</a>
</span><span class="lnt" id="hl-123-72"><a class="lnlinks" href="#hl-123-72">72</a>
</span><span class="lnt" id="hl-123-73"><a class="lnlinks" href="#hl-123-73">73</a>
</span><span class="lnt" id="hl-123-74"><a class="lnlinks" href="#hl-123-74">74</a>
</span><span class="lnt" id="hl-123-75"><a class="lnlinks" href="#hl-123-75">75</a>
</span><span class="lnt" id="hl-123-76"><a class="lnlinks" href="#hl-123-76">76</a>
</span><span class="lnt" id="hl-123-77"><a class="lnlinks" href="#hl-123-77">77</a>
</span><span class="lnt" id="hl-123-78"><a class="lnlinks" href="#hl-123-78">78</a>
</span><span class="lnt" id="hl-123-79"><a class="lnlinks" href="#hl-123-79">79</a>
</span><span class="lnt" id="hl-123-80"><a class="lnlinks" href="#hl-123-80">80</a>
</span><span class="lnt" id="hl-123-81"><a class="lnlinks" href="#hl-123-81">81</a>
</span><span class="lnt" id="hl-123-82"><a class="lnlinks" href="#hl-123-82">82</a>
</span><span class="lnt" id="hl-123-83"><a class="lnlinks" href="#hl-123-83">83</a>
</span><span class="lnt" id="hl-123-84"><a class="lnlinks" href="#hl-123-84">84</a>
</span><span class="lnt" id="hl-123-85"><a class="lnlinks" href="#hl-123-85">85</a>
</span><span class="lnt" id="hl-123-86"><a class="lnlinks" href="#hl-123-86">86</a>
</span><span class="lnt" id="hl-123-87"><a class="lnlinks" href="#hl-123-87">87</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">fourSum</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">num</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">&lt;</span><span class="n">4</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">num</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">   </span><span class="c1">//picking the first candidate must leave room</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						       </span><span class="c1">//for the other values </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">3</span><span class="o">]&gt;</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">//first candidate too large, search finished</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">]&lt;</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">//first candidate too small </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">//prevents duplicate in ans list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">&lt;</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">   </span><span class="c1">//picking the second candidate must</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">								 </span><span class="c1">//leave room for other values </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">2</span><span class="o">]&gt;</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="c1">//second candidate too large</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]&lt;</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="c1">//second candidate too small</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="c1">//prevents duplicate results in ans list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="o">=</span><span class="n">num</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">//two pointer search</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">while</span><span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="o">=</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="o">==</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">ans</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">Arrays</span><span class="p">.</span><span class="na">asList</span><span class="p">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]</span><span class="p">,</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">while</span><span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">							</span><span class="n">low</span><span class="o">++</span><span class="p">;</span><span class="w"> </span><span class="c1">//skipping over duplicates</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="k">while</span><span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">							</span><span class="n">high</span><span class="o">--</span><span class="p">;</span><span class="w"> </span><span class="c1">//skipping over duplicates </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">low</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">high</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="c1">//moving window</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">low</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">high</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="19-remove-nth-node-from-end-of-list">19-Remove Nth Node From End of List</h1>
<p>Given a linked list, remove the n-th node from the end of the list and return its head</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-124-1"><a class="lnlinks" href="#hl-124-1">1</a>
</span><span class="lnt" id="hl-124-2"><a class="lnlinks" href="#hl-124-2">2</a>
</span><span class="lnt" id="hl-124-3"><a class="lnlinks" href="#hl-124-3">3</a>
</span><span class="lnt" id="hl-124-4"><a class="lnlinks" href="#hl-124-4">4</a>
</span><span class="lnt" id="hl-124-5"><a class="lnlinks" href="#hl-124-5">5</a>
</span><span class="lnt" id="hl-124-6"><a class="lnlinks" href="#hl-124-6">6</a>
</span><span class="lnt" id="hl-124-7"><a class="lnlinks" href="#hl-124-7">7</a>
</span><span class="lnt" id="hl-124-8"><a class="lnlinks" href="#hl-124-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, and n=2 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">After removing the second node from the end, the linked list becomes 
</span></span><span class="line"><span class="cl">		   
</span></span><span class="line"><span class="cl">		   1 -&gt; 2 -&gt; 3 -&gt; 5
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong>
Given n will always be valid</p>
<p><strong>Follow up:</strong>
Could you do this in one pass?</p>
<p><br><br></p>
<h2 id="two-pass-algorithm">Two Pass Algorithm</h2>
<p><strong>Intuition</strong></p>
<p>We notice that the problem could be simply reduced to another one: Remove the (L-n+1)th node from the
beginning of the list, where L is the list length. This problem is easy to solve once we found the
list length L.</p>
<p><br><br>
<strong>Algorithm</strong></p>
<p>First we will add an auxiliary &ldquo;dummy&rdquo; node, which points to the list head. The &ldquo;dummy&rdquo; node is used to
simplify some corner cases such as a list with only one node or removing the head of the list. On the
first pass, find the list length L. Then we set a pointer to the dummy node and start to move it
through the list till it comes to the (L-n)th node. We relink next pointer of the (L-n)th node to the
(L-n+2)th node and we are done.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-125-1"><a class="lnlinks" href="#hl-125-1">1</a>
</span><span class="lnt" id="hl-125-2"><a class="lnlinks" href="#hl-125-2">2</a>
</span><span class="lnt" id="hl-125-3"><a class="lnlinks" href="#hl-125-3">3</a>
</span><span class="lnt" id="hl-125-4"><a class="lnlinks" href="#hl-125-4">4</a>
</span><span class="lnt" id="hl-125-5"><a class="lnlinks" href="#hl-125-5">5</a>
</span><span class="lnt" id="hl-125-6"><a class="lnlinks" href="#hl-125-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	D -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		    |
</span></span><span class="line"><span class="cl">		    v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D -&gt; 1 -&gt; 2 -&gt; 4 -&gt; NULL
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-126-1"><a class="lnlinks" href="#hl-126-1"> 1</a>
</span><span class="lnt" id="hl-126-2"><a class="lnlinks" href="#hl-126-2"> 2</a>
</span><span class="lnt" id="hl-126-3"><a class="lnlinks" href="#hl-126-3"> 3</a>
</span><span class="lnt" id="hl-126-4"><a class="lnlinks" href="#hl-126-4"> 4</a>
</span><span class="lnt" id="hl-126-5"><a class="lnlinks" href="#hl-126-5"> 5</a>
</span><span class="lnt" id="hl-126-6"><a class="lnlinks" href="#hl-126-6"> 6</a>
</span><span class="lnt" id="hl-126-7"><a class="lnlinks" href="#hl-126-7"> 7</a>
</span><span class="lnt" id="hl-126-8"><a class="lnlinks" href="#hl-126-8"> 8</a>
</span><span class="lnt" id="hl-126-9"><a class="lnlinks" href="#hl-126-9"> 9</a>
</span><span class="lnt" id="hl-126-10"><a class="lnlinks" href="#hl-126-10">10</a>
</span><span class="lnt" id="hl-126-11"><a class="lnlinks" href="#hl-126-11">11</a>
</span><span class="lnt" id="hl-126-12"><a class="lnlinks" href="#hl-126-12">12</a>
</span><span class="lnt" id="hl-126-13"><a class="lnlinks" href="#hl-126-13">13</a>
</span><span class="lnt" id="hl-126-14"><a class="lnlinks" href="#hl-126-14">14</a>
</span><span class="lnt" id="hl-126-15"><a class="lnlinks" href="#hl-126-15">15</a>
</span><span class="lnt" id="hl-126-16"><a class="lnlinks" href="#hl-126-16">16</a>
</span><span class="lnt" id="hl-126-17"><a class="lnlinks" href="#hl-126-17">17</a>
</span><span class="lnt" id="hl-126-18"><a class="lnlinks" href="#hl-126-18">18</a>
</span><span class="lnt" id="hl-126-19"><a class="lnlinks" href="#hl-126-19">19</a>
</span><span class="lnt" id="hl-126-20"><a class="lnlinks" href="#hl-126-20">20</a>
</span><span class="lnt" id="hl-126-21"><a class="lnlinks" href="#hl-126-21">21</a>
</span><span class="lnt" id="hl-126-22"><a class="lnlinks" href="#hl-126-22">22</a>
</span><span class="lnt" id="hl-126-23"><a class="lnlinks" href="#hl-126-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ListNode</span><span class="w"> </span><span class="n">dummy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ListNode</span><span class="w"> </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">length</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">length</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dummy</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">length</span><span class="o">&gt;</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">length</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="o">=</span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-127-1"><a class="lnlinks" href="#hl-127-1">1</a>
</span><span class="lnt" id="hl-127-2"><a class="lnlinks" href="#hl-127-2">2</a>
</span><span class="lnt" id="hl-127-3"><a class="lnlinks" href="#hl-127-3">3</a>
</span><span class="lnt" id="hl-127-4"><a class="lnlinks" href="#hl-127-4">4</a>
</span><span class="lnt" id="hl-127-5"><a class="lnlinks" href="#hl-127-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Time</span> <span class="n">Complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> 	<span class="n">The</span> <span class="n">algorithm</span> <span class="n">makes</span> <span class="n">two</span> <span class="n">traversals</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span><span class="p">,</span> <span class="n">first</span> <span class="n">to</span> <span class="n">calculate</span> <span class="n">the</span> 
</span></span><span class="line"><span class="cl">				<span class="n">list</span> <span class="n">length</span> <span class="n">L</span> <span class="ow">and</span> <span class="n">second</span> <span class="n">to</span> <span class="n">find</span> <span class="n">the</span> <span class="p">(</span><span class="n">L</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="n">th</span> <span class="n">node</span><span class="o">.</span> <span class="n">There</span> <span class="n">are</span> <span class="mi">2</span><span class="n">L</span><span class="o">-</span><span class="n">n</span> 
</span></span><span class="line"><span class="cl">				<span class="n">operations</span> <span class="ow">and</span> <span class="n">time</span> <span class="n">complexity</span> <span class="n">is</span> <span class="n">O</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Space</span> <span class="n">Complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 	<span class="n">We</span> <span class="n">only</span> <span class="n">used</span> <span class="n">constant</span> <span class="n">extra</span> <span class="n">space</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="one-pass-algorithm">One Pass Algorithm</h2>
<p>The previous algorithm could be optimized to one pass. Instead of one pointer, we could use two
pointers. The first pointer advances the list by n+1 steps from the beginning, while the second pointer
starts from the beginning of the list. Now, both pointers are separated by exactly n nodes. We maintain
this constant gap by advancing both pointers together until the first pointer arrives past the last
node. The second pointer will be pointing at the nth node counting from the last. We relink the next
pointer of the node referenced by the second pointer to point to the node&rsquo;s next next node.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-128-1"><a class="lnlinks" href="#hl-128-1"> 1</a>
</span><span class="lnt" id="hl-128-2"><a class="lnlinks" href="#hl-128-2"> 2</a>
</span><span class="lnt" id="hl-128-3"><a class="lnlinks" href="#hl-128-3"> 3</a>
</span><span class="lnt" id="hl-128-4"><a class="lnlinks" href="#hl-128-4"> 4</a>
</span><span class="lnt" id="hl-128-5"><a class="lnlinks" href="#hl-128-5"> 5</a>
</span><span class="lnt" id="hl-128-6"><a class="lnlinks" href="#hl-128-6"> 6</a>
</span><span class="lnt" id="hl-128-7"><a class="lnlinks" href="#hl-128-7"> 7</a>
</span><span class="lnt" id="hl-128-8"><a class="lnlinks" href="#hl-128-8"> 8</a>
</span><span class="lnt" id="hl-128-9"><a class="lnlinks" href="#hl-128-9"> 9</a>
</span><span class="lnt" id="hl-128-10"><a class="lnlinks" href="#hl-128-10">10</a>
</span><span class="lnt" id="hl-128-11"><a class="lnlinks" href="#hl-128-11">11</a>
</span><span class="lnt" id="hl-128-12"><a class="lnlinks" href="#hl-128-12">12</a>
</span><span class="lnt" id="hl-128-13"><a class="lnlinks" href="#hl-128-13">13</a>
</span><span class="lnt" id="hl-128-14"><a class="lnlinks" href="#hl-128-14">14</a>
</span><span class="lnt" id="hl-128-15"><a class="lnlinks" href="#hl-128-15">15</a>
</span><span class="lnt" id="hl-128-16"><a class="lnlinks" href="#hl-128-16">16</a>
</span><span class="lnt" id="hl-128-17"><a class="lnlinks" href="#hl-128-17">17</a>
</span><span class="lnt" id="hl-128-18"><a class="lnlinks" href="#hl-128-18">18</a>
</span><span class="lnt" id="hl-128-19"><a class="lnlinks" href="#hl-128-19">19</a>
</span><span class="lnt" id="hl-128-20"><a class="lnlinks" href="#hl-128-20">20</a>
</span><span class="lnt" id="hl-128-21"><a class="lnlinks" href="#hl-128-21">21</a>
</span><span class="lnt" id="hl-128-22"><a class="lnlinks" href="#hl-128-22">22</a>
</span><span class="lnt" id="hl-128-23"><a class="lnlinks" href="#hl-128-23">23</a>
</span><span class="lnt" id="hl-128-24"><a class="lnlinks" href="#hl-128-24">24</a>
</span><span class="lnt" id="hl-128-25"><a class="lnlinks" href="#hl-128-25">25</a>
</span><span class="lnt" id="hl-128-26"><a class="lnlinks" href="#hl-128-26">26</a>
</span><span class="lnt" id="hl-128-27"><a class="lnlinks" href="#hl-128-27">27</a>
</span><span class="lnt" id="hl-128-28"><a class="lnlinks" href="#hl-128-28">28</a>
</span><span class="lnt" id="hl-128-29"><a class="lnlinks" href="#hl-128-29">29</a>
</span><span class="lnt" id="hl-128-30"><a class="lnlinks" href="#hl-128-30">30</a>
</span><span class="lnt" id="hl-128-31"><a class="lnlinks" href="#hl-128-31">31</a>
</span><span class="lnt" id="hl-128-32"><a class="lnlinks" href="#hl-128-32">32</a>
</span><span class="lnt" id="hl-128-33"><a class="lnlinks" href="#hl-128-33">33</a>
</span><span class="lnt" id="hl-128-34"><a class="lnlinks" href="#hl-128-34">34</a>
</span><span class="lnt" id="hl-128-35"><a class="lnlinks" href="#hl-128-35">35</a>
</span><span class="lnt" id="hl-128-36"><a class="lnlinks" href="#hl-128-36">36</a>
</span><span class="lnt" id="hl-128-37"><a class="lnlinks" href="#hl-128-37">37</a>
</span><span class="lnt" id="hl-128-38"><a class="lnlinks" href="#hl-128-38">38</a>
</span><span class="lnt" id="hl-128-39"><a class="lnlinks" href="#hl-128-39">39</a>
</span><span class="lnt" id="hl-128-40"><a class="lnlinks" href="#hl-128-40">40</a>
</span><span class="lnt" id="hl-128-41"><a class="lnlinks" href="#hl-128-41">41</a>
</span><span class="lnt" id="hl-128-42"><a class="lnlinks" href="#hl-128-42">42</a>
</span><span class="lnt" id="hl-128-43"><a class="lnlinks" href="#hl-128-43">43</a>
</span><span class="lnt" id="hl-128-44"><a class="lnlinks" href="#hl-128-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Maintaining N=2 nodes apart between the first and second pointer 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       first 	 Head 
</span></span><span class="line"><span class="cl">       second 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Move the first pointer N+1 steps 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     |
</span></span><span class="line"><span class="cl">			     v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      second     Head       First
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Move the first and second pointers together until the first pointer arrives past the last node 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     |
</span></span><span class="line"><span class="cl">			     v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		 Head      Second           First
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Second pointer points to the nth node counting from last so link node to the node&#39;s next next node 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				  |
</span></span><span class="line"><span class="cl">				  v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt;   -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">	         
</span></span><span class="line"><span class="cl">		 Head      Second           First
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-129-1"><a class="lnlinks" href="#hl-129-1"> 1</a>
</span><span class="lnt" id="hl-129-2"><a class="lnlinks" href="#hl-129-2"> 2</a>
</span><span class="lnt" id="hl-129-3"><a class="lnlinks" href="#hl-129-3"> 3</a>
</span><span class="lnt" id="hl-129-4"><a class="lnlinks" href="#hl-129-4"> 4</a>
</span><span class="lnt" id="hl-129-5"><a class="lnlinks" href="#hl-129-5"> 5</a>
</span><span class="lnt" id="hl-129-6"><a class="lnlinks" href="#hl-129-6"> 6</a>
</span><span class="lnt" id="hl-129-7"><a class="lnlinks" href="#hl-129-7"> 7</a>
</span><span class="lnt" id="hl-129-8"><a class="lnlinks" href="#hl-129-8"> 8</a>
</span><span class="lnt" id="hl-129-9"><a class="lnlinks" href="#hl-129-9"> 9</a>
</span><span class="lnt" id="hl-129-10"><a class="lnlinks" href="#hl-129-10">10</a>
</span><span class="lnt" id="hl-129-11"><a class="lnlinks" href="#hl-129-11">11</a>
</span><span class="lnt" id="hl-129-12"><a class="lnlinks" href="#hl-129-12">12</a>
</span><span class="lnt" id="hl-129-13"><a class="lnlinks" href="#hl-129-13">13</a>
</span><span class="lnt" id="hl-129-14"><a class="lnlinks" href="#hl-129-14">14</a>
</span><span class="lnt" id="hl-129-15"><a class="lnlinks" href="#hl-129-15">15</a>
</span><span class="lnt" id="hl-129-16"><a class="lnlinks" href="#hl-129-16">16</a>
</span><span class="lnt" id="hl-129-17"><a class="lnlinks" href="#hl-129-17">17</a>
</span><span class="lnt" id="hl-129-18"><a class="lnlinks" href="#hl-129-18">18</a>
</span><span class="lnt" id="hl-129-19"><a class="lnlinks" href="#hl-129-19">19</a>
</span><span class="lnt" id="hl-129-20"><a class="lnlinks" href="#hl-129-20">20</a>
</span><span class="lnt" id="hl-129-21"><a class="lnlinks" href="#hl-129-21">21</a>
</span><span class="lnt" id="hl-129-22"><a class="lnlinks" href="#hl-129-22">22</a>
</span><span class="lnt" id="hl-129-23"><a class="lnlinks" href="#hl-129-23">23</a>
</span><span class="lnt" id="hl-129-24"><a class="lnlinks" href="#hl-129-24">24</a>
</span><span class="lnt" id="hl-129-25"><a class="lnlinks" href="#hl-129-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ListNode</span><span class="w"> </span><span class="n">dummy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ListNode</span><span class="w"> </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dummy</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">ListNode</span><span class="w"> </span><span class="n">second</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dummy</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//Moves the first pointer so that the first and second nodes are separated by n nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//Move first to the end, maintaining the gap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">second</span><span class="o">=</span><span class="n">second</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">second</span><span class="p">.</span><span class="na">next</span><span class="o">=</span><span class="n">second</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-130-1"><a class="lnlinks" href="#hl-130-1">1</a>
</span><span class="lnt" id="hl-130-2"><a class="lnlinks" href="#hl-130-2">2</a>
</span><span class="lnt" id="hl-130-3"><a class="lnlinks" href="#hl-130-3">3</a>
</span><span class="lnt" id="hl-130-4"><a class="lnlinks" href="#hl-130-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Time</span> <span class="n">Complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> 	<span class="n">The</span> <span class="n">algorithm</span> <span class="n">makes</span> <span class="n">one</span> <span class="n">traversal</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">of</span> <span class="n">L</span> <span class="n">nodes</span><span class="o">.</span> <span class="n">Therefore</span>
</span></span><span class="line"><span class="cl">				<span class="n">time</span> <span class="n">complexity</span> <span class="n">is</span> <span class="n">O</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Space</span> <span class="n">Complexity</span><span class="p">:</span> 	<span class="n">O</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>	<span class="n">Only</span> <span class="n">constant</span> <span class="n">extra</span> <span class="n">space</span> <span class="n">was</span> <span class="n">used</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="20-valid-parentheses">20-Valid Parentheses</h1>
<p>Given a string containing just the characters &lsquo;(&rsquo;, &lsquo;)&rsquo;, &lsquo;{&rsquo;, &lsquo;}&rsquo;, &lsquo;[&rsquo;, &lsquo;]&rsquo;, determine if the input
string is valid</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets</li>
<li>Open brackets must be closed in the correct order</li>
</ol>
<p>Note that an empty string is also considered valid</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-131-1"><a class="lnlinks" href="#hl-131-1">1</a>
</span><span class="lnt" id="hl-131-2"><a class="lnlinks" href="#hl-131-2">2</a>
</span><span class="lnt" id="hl-131-3"><a class="lnlinks" href="#hl-131-3">3</a>
</span><span class="lnt" id="hl-131-4"><a class="lnlinks" href="#hl-131-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;()&#34;
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-132-1"><a class="lnlinks" href="#hl-132-1">1</a>
</span><span class="lnt" id="hl-132-2"><a class="lnlinks" href="#hl-132-2">2</a>
</span><span class="lnt" id="hl-132-3"><a class="lnlinks" href="#hl-132-3">3</a>
</span><span class="lnt" id="hl-132-4"><a class="lnlinks" href="#hl-132-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;()[]{}&#34;
</span></span><span class="line"><span class="cl">Output: true 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-133-1"><a class="lnlinks" href="#hl-133-1">1</a>
</span><span class="lnt" id="hl-133-2"><a class="lnlinks" href="#hl-133-2">2</a>
</span><span class="lnt" id="hl-133-3"><a class="lnlinks" href="#hl-133-3">3</a>
</span><span class="lnt" id="hl-133-4"><a class="lnlinks" href="#hl-133-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;(]&#34;
</span></span><span class="line"><span class="cl">Output: false
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-134-1"><a class="lnlinks" href="#hl-134-1">1</a>
</span><span class="lnt" id="hl-134-2"><a class="lnlinks" href="#hl-134-2">2</a>
</span><span class="lnt" id="hl-134-3"><a class="lnlinks" href="#hl-134-3">3</a>
</span><span class="lnt" id="hl-134-4"><a class="lnlinks" href="#hl-134-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;([)]&#34;
</span></span><span class="line"><span class="cl">Output: false
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-135-1"><a class="lnlinks" href="#hl-135-1">1</a>
</span><span class="lnt" id="hl-135-2"><a class="lnlinks" href="#hl-135-2">2</a>
</span><span class="lnt" id="hl-135-3"><a class="lnlinks" href="#hl-135-3">3</a>
</span><span class="lnt" id="hl-135-4"><a class="lnlinks" href="#hl-135-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;{[]}&#34;
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="counting-method">Counting method</h2>
<p><strong>Intuition</strong></p>
<p>Imagine you are writing a small compiler for your college project and one of the tasks or sub-tasks for
the compiler would be to detect if the parenthesis are in place or not.</p>
<p>The algorithm we will look at in this article can be then used to process all the parenthesis in the
program your compiler is compiling and checking if all the parenthesis are in place. This makes
checking if a given string of parenthesis is valid or not, an important programming problem.</p>
<p>The expressions that we will deal with in this problem can consist of three different types of
parenthesis:</p>
<ul>
<li>()</li>
<li>{}</li>
<li>[]</li>
</ul>
<p>Before looking at how we can check if a given expression consisting of thes parenthesis is valid or
not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So,
the expressions we can encounter in this simplified version of the problem are:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-136-1"><a class="lnlinks" href="#hl-136-1">1</a>
</span><span class="lnt" id="hl-136-2"><a class="lnlinks" href="#hl-136-2">2</a>
</span><span class="lnt" id="hl-136-3"><a class="lnlinks" href="#hl-136-3">3</a>
</span><span class="lnt" id="hl-136-4"><a class="lnlinks" href="#hl-136-4">4</a>
</span><span class="lnt" id="hl-136-5"><a class="lnlinks" href="#hl-136-5">5</a>
</span><span class="lnt" id="hl-136-6"><a class="lnlinks" href="#hl-136-6">6</a>
</span><span class="lnt" id="hl-136-7"><a class="lnlinks" href="#hl-136-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(((((()))))) -- VALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">()()()()     -- VALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(((((((()    -- INVALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">((()(())))   -- VALID
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s look at a simple algorithm to deal with this problem</p>
<p><br><br></p>
<ol>
<li>
<p>We process the expression one bracket at a time starting from the left</p>
</li>
<li>
<p>Suppose we encounter an opening bracket ie. <code>(</code>, it may or may not be an invalid expression because
there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we
simply increment the counter keeping track of the left parenthesis till now. <code>left += 1</code></p>
</li>
<li>
<p>If we encounter a closing bracket, this has two meanings:</p>
<ul>
<li>
<p>There was no matching opening bracket for this closing bracket and in that case we have an invalid
expression. This is the case when <code>left==0</code> ie. when there are no unmatched left brackets
available</p>
</li>
<li>
<p>We had some unmatched opening bracket available to match this closing bracket. This is the case
when <code>left&gt;0</code> ie. we have unmatched left brackets available</p>
</li>
</ul>
</li>
<li>
<p>If we encounter a closing bracket ie. <code>)</code> when left==0, then we have an invalid expression on our
hands. Else, we decrement <code>left</code> thus reducing the number of unmatched left parenthesis available.</p>
</li>
<li>
<p>Continue processing the string until all parenthesis have been processed</p>
</li>
<li>
<p>If in the end we still have an unmatched left parenthesis available, this implies an invalid
expression</p>
</li>
</ol>
<p><br><br></p>
<p>The reason we discussed this particular algorithm here is because the approach for the approach for
the original problem derives its inspiration from this very solution.</p>
<p>If we try and follow the same approach for our original problem, then it simply won&rsquo;t work. The reason
a simple counter based approach works above is because all the parenthesis are of the same type. So
when we encounter a closing bracket, we simply assume a corresponding opening matching bracket
to be available ie. if <code>left&gt;0</code></p>
<p>But in our problem, if we encounter say <code>]</code>, we don&rsquo;t really know if there is a corresponding opening
<code>[</code> available or not. You could say:</p>
<blockquote>
<p>Why not maintain a separate counter for the different types of parenthesis?</p>
</blockquote>
<p>This doesn&rsquo;t work because the relative placement of the parenthesis also matters here eg: <code>[{]</code></p>
<p><br><br></p>
<p>If we simply keep counters here, then as soon as we encounter the closing square bracket, we would
know there is an unmatched opening square bracket available as well. But, the **closest unmatched
opening bracket available is a curly bracket and not a square bracket and hence the counting approach
breaks here.</p>
<p><br><br></p>
<h2 id="stacks">Stacks</h2>
<p>An interesting property about a valid parenthesis expression is that a sub-expression. (Not every
sub-expression) eg.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-137-1"><a class="lnlinks" href="#hl-137-1">1</a>
</span><span class="lnt" id="hl-137-2"><a class="lnlinks" href="#hl-137-2">2</a>
</span><span class="lnt" id="hl-137-3"><a class="lnlinks" href="#hl-137-3">3</a>
</span><span class="lnt" id="hl-137-4"><a class="lnlinks" href="#hl-137-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	{ [ [ ] { } ] } ( ) ( ) 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	  ^         ^
</span></span><span class="line"><span class="cl">	  |         |
</span></span></code></pre></td></tr></table>
</div>
</div><p>The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort
of a recursive structure to the problem. For example consider the expression enclosed within the
marked parenthesis in the diagram above. The opening bracket is at index <code>1</code> and the corresponding
closing bracket is at index <code>6</code>.</p>
<blockquote>
<p>What if whenever we encounter a matching pair of parenthesis in the expression we simply remove it
from the expression?</p>
</blockquote>
<p>Let&rsquo;s have a look at this idea below where we remove the smaller expressions one at a time from the
overall expression and since this is a valid expression, we would be left with an empty string in the
end.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-138-1"><a class="lnlinks" href="#hl-138-1">1</a>
</span><span class="lnt" id="hl-138-2"><a class="lnlinks" href="#hl-138-2">2</a>
</span><span class="lnt" id="hl-138-3"><a class="lnlinks" href="#hl-138-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">The stack data structure can come in handy here in representing this recursive structure of the 
</span></span><span class="line"><span class="cl">problem. We can&#39;t really process this from the inside out because we don&#39;t have an idea about the 
</span></span><span class="line"><span class="cl">overall structure. But, the stack can help us process this recursively ie. from outside to inwards.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Lets take a look at the algorithm for this problem using stacks as the intermediate data structure.</p>
<p><strong>Algorithm</strong></p>
<ol>
<li>Initialize a stack S.</li>
<li>Process each bracket of the expression one at a time</li>
<li>If we encounter an opening bracket, we simply push it onto the stack. This means we will process it
later, let us simply move onto the sub-expression ahead</li>
<li>If encounter a closing bracket, then we check the element on top of the stack. If the element at the
top of the stack is an opening bracket <code>of the same type</code>, then we pop it off the stack and continue
processing. Else, this implies an invalid expression</li>
<li>In the end, if we are left with a stack still having elements, then this implies an invalid
expression</li>
</ol>
<p>Lets take a look at the implementation for this algorithm</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-139-1"><a class="lnlinks" href="#hl-139-1"> 1</a>
</span><span class="lnt" id="hl-139-2"><a class="lnlinks" href="#hl-139-2"> 2</a>
</span><span class="lnt" id="hl-139-3"><a class="lnlinks" href="#hl-139-3"> 3</a>
</span><span class="lnt" id="hl-139-4"><a class="lnlinks" href="#hl-139-4"> 4</a>
</span><span class="lnt" id="hl-139-5"><a class="lnlinks" href="#hl-139-5"> 5</a>
</span><span class="lnt" id="hl-139-6"><a class="lnlinks" href="#hl-139-6"> 6</a>
</span><span class="lnt" id="hl-139-7"><a class="lnlinks" href="#hl-139-7"> 7</a>
</span><span class="lnt" id="hl-139-8"><a class="lnlinks" href="#hl-139-8"> 8</a>
</span><span class="lnt" id="hl-139-9"><a class="lnlinks" href="#hl-139-9"> 9</a>
</span><span class="lnt" id="hl-139-10"><a class="lnlinks" href="#hl-139-10">10</a>
</span><span class="lnt" id="hl-139-11"><a class="lnlinks" href="#hl-139-11">11</a>
</span><span class="lnt" id="hl-139-12"><a class="lnlinks" href="#hl-139-12">12</a>
</span><span class="lnt" id="hl-139-13"><a class="lnlinks" href="#hl-139-13">13</a>
</span><span class="lnt" id="hl-139-14"><a class="lnlinks" href="#hl-139-14">14</a>
</span><span class="lnt" id="hl-139-15"><a class="lnlinks" href="#hl-139-15">15</a>
</span><span class="lnt" id="hl-139-16"><a class="lnlinks" href="#hl-139-16">16</a>
</span><span class="lnt" id="hl-139-17"><a class="lnlinks" href="#hl-139-17">17</a>
</span><span class="lnt" id="hl-139-18"><a class="lnlinks" href="#hl-139-18">18</a>
</span><span class="lnt" id="hl-139-19"><a class="lnlinks" href="#hl-139-19">19</a>
</span><span class="lnt" id="hl-139-20"><a class="lnlinks" href="#hl-139-20">20</a>
</span><span class="lnt" id="hl-139-21"><a class="lnlinks" href="#hl-139-21">21</a>
</span><span class="lnt" id="hl-139-22"><a class="lnlinks" href="#hl-139-22">22</a>
</span><span class="lnt" id="hl-139-23"><a class="lnlinks" href="#hl-139-23">23</a>
</span><span class="lnt" id="hl-139-24"><a class="lnlinks" href="#hl-139-24">24</a>
</span><span class="lnt" id="hl-139-25"><a class="lnlinks" href="#hl-139-25">25</a>
</span><span class="lnt" id="hl-139-26"><a class="lnlinks" href="#hl-139-26">26</a>
</span><span class="lnt" id="hl-139-27"><a class="lnlinks" href="#hl-139-27">27</a>
</span><span class="lnt" id="hl-139-28"><a class="lnlinks" href="#hl-139-28">28</a>
</span><span class="lnt" id="hl-139-29"><a class="lnlinks" href="#hl-139-29">29</a>
</span><span class="lnt" id="hl-139-30"><a class="lnlinks" href="#hl-139-30">30</a>
</span><span class="lnt" id="hl-139-31"><a class="lnlinks" href="#hl-139-31">31</a>
</span><span class="lnt" id="hl-139-32"><a class="lnlinks" href="#hl-139-32">32</a>
</span><span class="lnt" id="hl-139-33"><a class="lnlinks" href="#hl-139-33">33</a>
</span><span class="lnt" id="hl-139-34"><a class="lnlinks" href="#hl-139-34">34</a>
</span><span class="lnt" id="hl-139-35"><a class="lnlinks" href="#hl-139-35">35</a>
</span><span class="lnt" id="hl-139-36"><a class="lnlinks" href="#hl-139-36">36</a>
</span><span class="lnt" id="hl-139-37"><a class="lnlinks" href="#hl-139-37">37</a>
</span><span class="lnt" id="hl-139-38"><a class="lnlinks" href="#hl-139-38">38</a>
</span><span class="lnt" id="hl-139-39"><a class="lnlinks" href="#hl-139-39">39</a>
</span><span class="lnt" id="hl-139-40"><a class="lnlinks" href="#hl-139-40">40</a>
</span><span class="lnt" id="hl-139-41"><a class="lnlinks" href="#hl-139-41">41</a>
</span><span class="lnt" id="hl-139-42"><a class="lnlinks" href="#hl-139-42">42</a>
</span><span class="lnt" id="hl-139-43"><a class="lnlinks" href="#hl-139-43">43</a>
</span><span class="lnt" id="hl-139-44"><a class="lnlinks" href="#hl-139-44">44</a>
</span><span class="lnt" id="hl-139-45"><a class="lnlinks" href="#hl-139-45">45</a>
</span><span class="lnt" id="hl-139-46"><a class="lnlinks" href="#hl-139-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//Hash table that takes care of the mappings</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="p">,</span><span class="w"> </span><span class="n">Character</span><span class="o">&gt;</span><span class="w"> </span><span class="n">mappings</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">//Initialize the hash map with mappings. This simply makes the code easier to read </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="nf">Solution</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="p">,</span><span class="w"> </span><span class="n">Character</span><span class="o">&gt;</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;)&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;(&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;}&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;{&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="sc">&#39;]&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;[&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isValid</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">// Initialize a stack to be used in the algorithm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="c1">// If the current character is a closing bracket </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="n">c</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">// Get the top element of the stack. If the stack is empty, set a dummy value of &#39;#&#39; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="kt">char</span><span class="w"> </span><span class="n">topElement</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">empty</span><span class="p">()</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="sc">&#39;#&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">pop</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">// If the mapping for this bracket doesn&#39;t match the stack&#39;s top element, return false. </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">topElement</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">this</span><span class="p">.</span><span class="na">mappings</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="c1">//If it was an opening bracket, push to the stack  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">stack</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">c</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="c1">//If the stack still contains elements, then it is an invalid expression. </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-140-1"><a class="lnlinks" href="#hl-140-1">1</a>
</span><span class="lnt" id="hl-140-2"><a class="lnlinks" href="#hl-140-2">2</a>
</span><span class="lnt" id="hl-140-3"><a class="lnlinks" href="#hl-140-3">3</a>
</span><span class="lnt" id="hl-140-4"><a class="lnlinks" href="#hl-140-4">4</a>
</span><span class="lnt" id="hl-140-5"><a class="lnlinks" href="#hl-140-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(n)	We simply traverse the given string one character at a time and push 
</span></span><span class="line"><span class="cl">				and pop operations on a stack take O(1) time 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(n)	In the worst case, when we push all opening brackets onto the stack, we
</span></span><span class="line"><span class="cl">				will end up pushing all the brackets onto the stack eg (((((((((((
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="21-merge-two-sorted-lists">21-Merge Two Sorted Lists</h1>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing
together the nodes of the first two lists.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-141-1"><a class="lnlinks" href="#hl-141-1">1</a>
</span><span class="lnt" id="hl-141-2"><a class="lnlinks" href="#hl-141-2">2</a>
</span><span class="lnt" id="hl-141-3"><a class="lnlinks" href="#hl-141-3">3</a>
</span><span class="lnt" id="hl-141-4"><a class="lnlinks" href="#hl-141-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4
</span></span><span class="line"><span class="cl">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="recursive">Recursive</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-142-1"><a class="lnlinks" href="#hl-142-1"> 1</a>
</span><span class="lnt" id="hl-142-2"><a class="lnlinks" href="#hl-142-2"> 2</a>
</span><span class="lnt" id="hl-142-3"><a class="lnlinks" href="#hl-142-3"> 3</a>
</span><span class="lnt" id="hl-142-4"><a class="lnlinks" href="#hl-142-4"> 4</a>
</span><span class="lnt" id="hl-142-5"><a class="lnlinks" href="#hl-142-5"> 5</a>
</span><span class="lnt" id="hl-142-6"><a class="lnlinks" href="#hl-142-6"> 6</a>
</span><span class="lnt" id="hl-142-7"><a class="lnlinks" href="#hl-142-7"> 7</a>
</span><span class="lnt" id="hl-142-8"><a class="lnlinks" href="#hl-142-8"> 8</a>
</span><span class="lnt" id="hl-142-9"><a class="lnlinks" href="#hl-142-9"> 9</a>
</span><span class="lnt" id="hl-142-10"><a class="lnlinks" href="#hl-142-10">10</a>
</span><span class="lnt" id="hl-142-11"><a class="lnlinks" href="#hl-142-11">11</a>
</span><span class="lnt" id="hl-142-12"><a class="lnlinks" href="#hl-142-12">12</a>
</span><span class="lnt" id="hl-142-13"><a class="lnlinks" href="#hl-142-13">13</a>
</span><span class="lnt" id="hl-142-14"><a class="lnlinks" href="#hl-142-14">14</a>
</span><span class="lnt" id="hl-142-15"><a class="lnlinks" href="#hl-142-15">15</a>
</span><span class="lnt" id="hl-142-16"><a class="lnlinks" href="#hl-142-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="n">l2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">l2</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">l1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">l1</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="na">next</span><span class="p">,</span><span class="w"> </span><span class="n">l2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">l1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">l2</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">next</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="n">l2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="non-recursive-1">Non-Recursive</h2>
<p>Similar approach and implemenation to the recursive solution above but a little more intuitive and
does not require memory being held on the stack (as the recursive program runs it has to store
variables on the stack so that when the program jumps back it is able to continue)</p>
<p>As with most other linked list solutions, a dummy node is utilized and two pointers are used to keep
track of where we are in the the two linked lists.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-143-1"><a class="lnlinks" href="#hl-143-1"> 1</a>
</span><span class="lnt" id="hl-143-2"><a class="lnlinks" href="#hl-143-2"> 2</a>
</span><span class="lnt" id="hl-143-3"><a class="lnlinks" href="#hl-143-3"> 3</a>
</span><span class="lnt" id="hl-143-4"><a class="lnlinks" href="#hl-143-4"> 4</a>
</span><span class="lnt" id="hl-143-5"><a class="lnlinks" href="#hl-143-5"> 5</a>
</span><span class="lnt" id="hl-143-6"><a class="lnlinks" href="#hl-143-6"> 6</a>
</span><span class="lnt" id="hl-143-7"><a class="lnlinks" href="#hl-143-7"> 7</a>
</span><span class="lnt" id="hl-143-8"><a class="lnlinks" href="#hl-143-8"> 8</a>
</span><span class="lnt" id="hl-143-9"><a class="lnlinks" href="#hl-143-9"> 9</a>
</span><span class="lnt" id="hl-143-10"><a class="lnlinks" href="#hl-143-10">10</a>
</span><span class="lnt" id="hl-143-11"><a class="lnlinks" href="#hl-143-11">11</a>
</span><span class="lnt" id="hl-143-12"><a class="lnlinks" href="#hl-143-12">12</a>
</span><span class="lnt" id="hl-143-13"><a class="lnlinks" href="#hl-143-13">13</a>
</span><span class="lnt" id="hl-143-14"><a class="lnlinks" href="#hl-143-14">14</a>
</span><span class="lnt" id="hl-143-15"><a class="lnlinks" href="#hl-143-15">15</a>
</span><span class="lnt" id="hl-143-16"><a class="lnlinks" href="#hl-143-16">16</a>
</span><span class="lnt" id="hl-143-17"><a class="lnlinks" href="#hl-143-17">17</a>
</span><span class="lnt" id="hl-143-18"><a class="lnlinks" href="#hl-143-18">18</a>
</span><span class="lnt" id="hl-143-19"><a class="lnlinks" href="#hl-143-19">19</a>
</span><span class="lnt" id="hl-143-20"><a class="lnlinks" href="#hl-143-20">20</a>
</span><span class="lnt" id="hl-143-21"><a class="lnlinks" href="#hl-143-21">21</a>
</span><span class="lnt" id="hl-143-22"><a class="lnlinks" href="#hl-143-22">22</a>
</span><span class="lnt" id="hl-143-23"><a class="lnlinks" href="#hl-143-23">23</a>
</span><span class="lnt" id="hl-143-24"><a class="lnlinks" href="#hl-143-24">24</a>
</span><span class="lnt" id="hl-143-25"><a class="lnlinks" href="#hl-143-25">25</a>
</span><span class="lnt" id="hl-143-26"><a class="lnlinks" href="#hl-143-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="n">l2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ListNode</span><span class="w"> </span><span class="n">returnNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">ListNode</span><span class="w"> </span><span class="n">headNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">returnNode</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">l2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">returnNode</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">l1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l1</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">returnNode</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">l2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">returnNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">returnNode</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">returnNode</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">returnNode</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l1</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">headNode</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="22-generate-parentheses">22-Generate Parentheses</h1>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-144-1"><a class="lnlinks" href="#hl-144-1"> 1</a>
</span><span class="lnt" id="hl-144-2"><a class="lnlinks" href="#hl-144-2"> 2</a>
</span><span class="lnt" id="hl-144-3"><a class="lnlinks" href="#hl-144-3"> 3</a>
</span><span class="lnt" id="hl-144-4"><a class="lnlinks" href="#hl-144-4"> 4</a>
</span><span class="lnt" id="hl-144-5"><a class="lnlinks" href="#hl-144-5"> 5</a>
</span><span class="lnt" id="hl-144-6"><a class="lnlinks" href="#hl-144-6"> 6</a>
</span><span class="lnt" id="hl-144-7"><a class="lnlinks" href="#hl-144-7"> 7</a>
</span><span class="lnt" id="hl-144-8"><a class="lnlinks" href="#hl-144-8"> 8</a>
</span><span class="lnt" id="hl-144-9"><a class="lnlinks" href="#hl-144-9"> 9</a>
</span><span class="lnt" id="hl-144-10"><a class="lnlinks" href="#hl-144-10">10</a>
</span><span class="lnt" id="hl-144-11"><a class="lnlinks" href="#hl-144-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">For example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given n=3, a solution set is: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  &#34;((()))&#34;,
</span></span><span class="line"><span class="cl">  &#34;(()())&#34;.
</span></span><span class="line"><span class="cl">  &#34;(())()&#34;,
</span></span><span class="line"><span class="cl">  &#34;()(())&#34;,
</span></span><span class="line"><span class="cl">  &#34;()()()&#34;
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="brute-force-4">Brute Force</h2>
<p><strong>Intuition</strong></p>
<p>We can generate all 2^(2n) sequences of <code>(</code> and <code>)</code> characters. Then we can check if each one is valid</p>
<br>
<p><strong>Algorithm</strong></p>
<p>To generate all sequences, we use recursion. All sequences of length <code>n</code> is just <code>(</code> plus all sequences
of length <code>n-1</code>, and then <code>)</code> plus all sequences of length <code>n-1</code>.</p>
<p>To check whether a sequence is valid, we keep track of <code>balance</code>, the net number of opening brackets
minuts closing brackets. If it falls below zero at any time, or doesn&rsquo;t end in zero, the sequence is
invalid - otherwise it is valid.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-145-1"><a class="lnlinks" href="#hl-145-1"> 1</a>
</span><span class="lnt" id="hl-145-2"><a class="lnlinks" href="#hl-145-2"> 2</a>
</span><span class="lnt" id="hl-145-3"><a class="lnlinks" href="#hl-145-3"> 3</a>
</span><span class="lnt" id="hl-145-4"><a class="lnlinks" href="#hl-145-4"> 4</a>
</span><span class="lnt" id="hl-145-5"><a class="lnlinks" href="#hl-145-5"> 5</a>
</span><span class="lnt" id="hl-145-6"><a class="lnlinks" href="#hl-145-6"> 6</a>
</span><span class="lnt" id="hl-145-7"><a class="lnlinks" href="#hl-145-7"> 7</a>
</span><span class="lnt" id="hl-145-8"><a class="lnlinks" href="#hl-145-8"> 8</a>
</span><span class="lnt" id="hl-145-9"><a class="lnlinks" href="#hl-145-9"> 9</a>
</span><span class="lnt" id="hl-145-10"><a class="lnlinks" href="#hl-145-10">10</a>
</span><span class="lnt" id="hl-145-11"><a class="lnlinks" href="#hl-145-11">11</a>
</span><span class="lnt" id="hl-145-12"><a class="lnlinks" href="#hl-145-12">12</a>
</span><span class="lnt" id="hl-145-13"><a class="lnlinks" href="#hl-145-13">13</a>
</span><span class="lnt" id="hl-145-14"><a class="lnlinks" href="#hl-145-14">14</a>
</span><span class="lnt" id="hl-145-15"><a class="lnlinks" href="#hl-145-15">15</a>
</span><span class="lnt" id="hl-145-16"><a class="lnlinks" href="#hl-145-16">16</a>
</span><span class="lnt" id="hl-145-17"><a class="lnlinks" href="#hl-145-17">17</a>
</span><span class="lnt" id="hl-145-18"><a class="lnlinks" href="#hl-145-18">18</a>
</span><span class="lnt" id="hl-145-19"><a class="lnlinks" href="#hl-145-19">19</a>
</span><span class="lnt" id="hl-145-20"><a class="lnlinks" href="#hl-145-20">20</a>
</span><span class="lnt" id="hl-145-21"><a class="lnlinks" href="#hl-145-21">21</a>
</span><span class="lnt" id="hl-145-22"><a class="lnlinks" href="#hl-145-22">22</a>
</span><span class="lnt" id="hl-145-23"><a class="lnlinks" href="#hl-145-23">23</a>
</span><span class="lnt" id="hl-145-24"><a class="lnlinks" href="#hl-145-24">24</a>
</span><span class="lnt" id="hl-145-25"><a class="lnlinks" href="#hl-145-25">25</a>
</span><span class="lnt" id="hl-145-26"><a class="lnlinks" href="#hl-145-26">26</a>
</span><span class="lnt" id="hl-145-27"><a class="lnlinks" href="#hl-145-27">27</a>
</span><span class="lnt" id="hl-145-28"><a class="lnlinks" href="#hl-145-28">28</a>
</span><span class="lnt" id="hl-145-29"><a class="lnlinks" href="#hl-145-29">29</a>
</span><span class="lnt" id="hl-145-30"><a class="lnlinks" href="#hl-145-30">30</a>
</span><span class="lnt" id="hl-145-31"><a class="lnlinks" href="#hl-145-31">31</a>
</span><span class="lnt" id="hl-145-32"><a class="lnlinks" href="#hl-145-32">32</a>
</span><span class="lnt" id="hl-145-33"><a class="lnlinks" href="#hl-145-33">33</a>
</span><span class="lnt" id="hl-145-34"><a class="lnlinks" href="#hl-145-34">34</a>
</span><span class="lnt" id="hl-145-35"><a class="lnlinks" href="#hl-145-35">35</a>
</span><span class="lnt" id="hl-145-36"><a class="lnlinks" href="#hl-145-36">36</a>
</span><span class="lnt" id="hl-145-37"><a class="lnlinks" href="#hl-145-37">37</a>
</span><span class="lnt" id="hl-145-38"><a class="lnlinks" href="#hl-145-38">38</a>
</span><span class="lnt" id="hl-145-39"><a class="lnlinks" href="#hl-145-39">39</a>
</span><span class="lnt" id="hl-145-40"><a class="lnlinks" href="#hl-145-40">40</a>
</span><span class="lnt" id="hl-145-41"><a class="lnlinks" href="#hl-145-41">41</a>
</span><span class="lnt" id="hl-145-42"><a class="lnlinks" href="#hl-145-42">42</a>
</span><span class="lnt" id="hl-145-43"><a class="lnlinks" href="#hl-145-43">43</a>
</span><span class="lnt" id="hl-145-44"><a class="lnlinks" href="#hl-145-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">generateParenthesis</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">combinations</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">generateAll</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">combinations</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">combinations</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">generateAll</span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">current</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">pos</span><span class="p">,</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">valid</span><span class="p">(</span><span class="n">current</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">current</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;(&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">generateAll</span><span class="p">(</span><span class="n">current</span><span class="p">,</span><span class="w"> </span><span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;)&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">generateAll</span><span class="p">(</span><span class="n">current</span><span class="p">,</span><span class="w"> </span><span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">valid</span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">current</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">balance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">current</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;(&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">balance</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="n">balance</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">if</span><span class="p">(</span><span class="n">balance</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">balance</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-146-1"><a class="lnlinks" href="#hl-146-1">1</a>
</span><span class="lnt" id="hl-146-2"><a class="lnlinks" href="#hl-146-2">2</a>
</span><span class="lnt" id="hl-146-3"><a class="lnlinks" href="#hl-146-3">3</a>
</span><span class="lnt" id="hl-146-4"><a class="lnlinks" href="#hl-146-4">4</a>
</span><span class="lnt" id="hl-146-5"><a class="lnlinks" href="#hl-146-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(2^2n * n)	For each of 2^2n sequences, we need to create an validate the 
</span></span><span class="line"><span class="cl">					sequence, which takes O(n) work in the worst case 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(2^2n * n) 	Naively, every sequence could be valid, see Closure number for
</span></span><span class="line"><span class="cl">					a tighter asymptotic bound 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="backtracking-1">Backtracking</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Instead of adding <code>(</code> or <code>)</code> every time as we do in the Brute Force algorithm, let&rsquo;s only add them
when we know it will remain a valid sequence. We can do this by keeping track of the number of opening
and closing brackets we have placed so far.</p>
<p>We can start an opening bracket if we still have one (of <code>n</code>) left to place. And we can start a closing
bracket if it would not exceed the number of opening brackets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-147-1"><a class="lnlinks" href="#hl-147-1"> 1</a>
</span><span class="lnt" id="hl-147-2"><a class="lnlinks" href="#hl-147-2"> 2</a>
</span><span class="lnt" id="hl-147-3"><a class="lnlinks" href="#hl-147-3"> 3</a>
</span><span class="lnt" id="hl-147-4"><a class="lnlinks" href="#hl-147-4"> 4</a>
</span><span class="lnt" id="hl-147-5"><a class="lnlinks" href="#hl-147-5"> 5</a>
</span><span class="lnt" id="hl-147-6"><a class="lnlinks" href="#hl-147-6"> 6</a>
</span><span class="lnt" id="hl-147-7"><a class="lnlinks" href="#hl-147-7"> 7</a>
</span><span class="lnt" id="hl-147-8"><a class="lnlinks" href="#hl-147-8"> 8</a>
</span><span class="lnt" id="hl-147-9"><a class="lnlinks" href="#hl-147-9"> 9</a>
</span><span class="lnt" id="hl-147-10"><a class="lnlinks" href="#hl-147-10">10</a>
</span><span class="lnt" id="hl-147-11"><a class="lnlinks" href="#hl-147-11">11</a>
</span><span class="lnt" id="hl-147-12"><a class="lnlinks" href="#hl-147-12">12</a>
</span><span class="lnt" id="hl-147-13"><a class="lnlinks" href="#hl-147-13">13</a>
</span><span class="lnt" id="hl-147-14"><a class="lnlinks" href="#hl-147-14">14</a>
</span><span class="lnt" id="hl-147-15"><a class="lnlinks" href="#hl-147-15">15</a>
</span><span class="lnt" id="hl-147-16"><a class="lnlinks" href="#hl-147-16">16</a>
</span><span class="lnt" id="hl-147-17"><a class="lnlinks" href="#hl-147-17">17</a>
</span><span class="lnt" id="hl-147-18"><a class="lnlinks" href="#hl-147-18">18</a>
</span><span class="lnt" id="hl-147-19"><a class="lnlinks" href="#hl-147-19">19</a>
</span><span class="lnt" id="hl-147-20"><a class="lnlinks" href="#hl-147-20">20</a>
</span><span class="lnt" id="hl-147-21"><a class="lnlinks" href="#hl-147-21">21</a>
</span><span class="lnt" id="hl-147-22"><a class="lnlinks" href="#hl-147-22">22</a>
</span><span class="lnt" id="hl-147-23"><a class="lnlinks" href="#hl-147-23">23</a>
</span><span class="lnt" id="hl-147-24"><a class="lnlinks" href="#hl-147-24">24</a>
</span><span class="lnt" id="hl-147-25"><a class="lnlinks" href="#hl-147-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">generateParenthesis</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">backtrack</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">backtrack</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">cur</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">open</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">close</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">max</span><span class="o">*</span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">ans</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">open</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">backtrack</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">cur</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;(&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">open</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">close</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">close</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">open</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">backtrack</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="w"> </span><span class="n">cur</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">open</span><span class="p">,</span><span class="w"> </span><span class="n">close</span><span class="w"> </span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<p>Our complexity analysis rests on understanding how many elements there are in <code>generateParenthesis(n)</code>.
This analysis is outside the scope of this article, but it turns out this is the nth Catalan number
1/(n+1) (2n choose n), which is bounded asymptotically by 4^n/(n* sqrt(n)).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-148-1"><a class="lnlinks" href="#hl-148-1">1</a>
</span><span class="lnt" id="hl-148-2"><a class="lnlinks" href="#hl-148-2">2</a>
</span><span class="lnt" id="hl-148-3"><a class="lnlinks" href="#hl-148-3">3</a>
</span><span class="lnt" id="hl-148-4"><a class="lnlinks" href="#hl-148-4">4</a>
</span><span class="lnt" id="hl-148-5"><a class="lnlinks" href="#hl-148-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O((4^n)/sqrt(n))	Each valid sequence has at most n steps during the 
</span></span><span class="line"><span class="cl">						backtracking procedure
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O((4^n)/sqrt(n))	As described above and using O(n) space to store the
</span></span><span class="line"><span class="cl">						sequence
</span></span></code></pre></td></tr></table>
</div>
</div><p>Another way to think about the runtime of backtracking algorithms on interviewers is O(b^d), where b is
the branching factor and d is the maximum depth of recursion.</p>
<p>Backtracking is characterized by a number of decisions b that can be made at each level of recursion.
If you visualize the recursion tree, this is the number of children each internal node has. You can
also think of b as standing for &ldquo;base&rdquo;, which helps us remember that b is the base of the exponential.</p>
<p>If we make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie.
each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit
each of these nodes, the runtime is O(b^d)</p>
<p><br><br></p>
<h2 id="closure-number">Closure Number</h2>
<p>To enumerate something, generally we would like to express it as a sum of disjoint subsets that are
easier to count.</p>
<p>Consider the <em>closure number</em> of a valid parentheses sequence <code>s</code>: the least <code>index &gt;= 0</code> so that
`S[0], S[1], &hellip; , S[2 * index + 1] is valid. Clearly, every parentheses sequence has a unique closure
number. We can try to enumerate them individually.</p>
<p><br><br></p>
<p><strong>Algorithm</strong></p>
<p>For each closure number c, we know the starting and ending brackets must be at index <code>0</code> and
<code>2 * c + 1</code>. Then, the <code>2 * c</code> elements between must be a valid sequence, plus the rest of the elements
must be a valid sequence.</p>
<p>This is just some minor improvement to the backtracking solution using the fact that for all valid
solutions the first char is always &lsquo;(&rsquo; and the lat char is always &lsquo;)&rsquo;. We initialize the starting
string to &lsquo;(&rsquo; and set the recursion bottom condition to string reaching length of <code>2 * n - 1</code> - we know
that we need to append a bracket at the end. There will not be much of an improvement in the runtime
however.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-149-1"><a class="lnlinks" href="#hl-149-1"> 1</a>
</span><span class="lnt" id="hl-149-2"><a class="lnlinks" href="#hl-149-2"> 2</a>
</span><span class="lnt" id="hl-149-3"><a class="lnlinks" href="#hl-149-3"> 3</a>
</span><span class="lnt" id="hl-149-4"><a class="lnlinks" href="#hl-149-4"> 4</a>
</span><span class="lnt" id="hl-149-5"><a class="lnlinks" href="#hl-149-5"> 5</a>
</span><span class="lnt" id="hl-149-6"><a class="lnlinks" href="#hl-149-6"> 6</a>
</span><span class="lnt" id="hl-149-7"><a class="lnlinks" href="#hl-149-7"> 7</a>
</span><span class="lnt" id="hl-149-8"><a class="lnlinks" href="#hl-149-8"> 8</a>
</span><span class="lnt" id="hl-149-9"><a class="lnlinks" href="#hl-149-9"> 9</a>
</span><span class="lnt" id="hl-149-10"><a class="lnlinks" href="#hl-149-10">10</a>
</span><span class="lnt" id="hl-149-11"><a class="lnlinks" href="#hl-149-11">11</a>
</span><span class="lnt" id="hl-149-12"><a class="lnlinks" href="#hl-149-12">12</a>
</span><span class="lnt" id="hl-149-13"><a class="lnlinks" href="#hl-149-13">13</a>
</span><span class="lnt" id="hl-149-14"><a class="lnlinks" href="#hl-149-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">generateParenthesis</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">ans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="p">();</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="n">ans</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">c</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">c</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">				</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">left</span><span class="p">:</span><span class="w"> </span><span class="n">generateParenthesis</span><span class="p">(</span><span class="n">c</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">					</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">right</span><span class="p">:</span><span class="w"> </span><span class="n">generateParenthesis</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">-</span><span class="n">c</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">						</span><span class="n">ans</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;)&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">ans</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-150-1"><a class="lnlinks" href="#hl-150-1">1</a>
</span><span class="lnt" id="hl-150-2"><a class="lnlinks" href="#hl-150-2">2</a>
</span><span class="lnt" id="hl-150-3"><a class="lnlinks" href="#hl-150-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O((4^n)/sqrt(n))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O((4^n)/sqrt(n))
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<h1 id="23-merge-k-sorted-lists">23-Merge k Sorted Lists</h1>
<p>Merge k sorted linked lists and return it as one sorted list. Analyze and descibe its complexity:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-151-1"><a class="lnlinks" href="#hl-151-1"> 1</a>
</span><span class="lnt" id="hl-151-2"><a class="lnlinks" href="#hl-151-2"> 2</a>
</span><span class="lnt" id="hl-151-3"><a class="lnlinks" href="#hl-151-3"> 3</a>
</span><span class="lnt" id="hl-151-4"><a class="lnlinks" href="#hl-151-4"> 4</a>
</span><span class="lnt" id="hl-151-5"><a class="lnlinks" href="#hl-151-5"> 5</a>
</span><span class="lnt" id="hl-151-6"><a class="lnlinks" href="#hl-151-6"> 6</a>
</span><span class="lnt" id="hl-151-7"><a class="lnlinks" href="#hl-151-7"> 7</a>
</span><span class="lnt" id="hl-151-8"><a class="lnlinks" href="#hl-151-8"> 8</a>
</span><span class="lnt" id="hl-151-9"><a class="lnlinks" href="#hl-151-9"> 9</a>
</span><span class="lnt" id="hl-151-10"><a class="lnlinks" href="#hl-151-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">	1 -&gt; 4 -&gt; 5,
</span></span><span class="line"><span class="cl">	1 -&gt; 3 -&gt; 4,
</span></span><span class="line"><span class="cl">	2 -&gt; 6
</span></span><span class="line"><span class="cl">]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br></p>
<h2 id="brute-force-5">Brute Force</h2>
<p><strong>Intuition and Algorithm</strong></p>
<ul>
<li>Traverse all the linked lists and collect the values of the nodes into an array</li>
<li>Sort and iterate over this array to get the proper value of nodes</li>
<li>Create a new sorted linked list and extend it with the new nodes</li>
</ul>
<p>As for sorting you can refer to the Algorithms/Data Structures CheatSheet for more about sorting algorithms.</p>
<p><br><br><br></p>
<hr>
<h1 id="146-lru-cache">146-LRU Cache</h1>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return <code>-1</code></p>
<p><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p><strong>Follow up:</strong>
Could both of these operations be done in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-152-1"><a class="lnlinks" href="#hl-152-1">1</a>
</span><span class="lnt" id="hl-152-2"><a class="lnlinks" href="#hl-152-2">2</a>
</span><span class="lnt" id="hl-152-3"><a class="lnlinks" href="#hl-152-3">3</a>
</span><span class="lnt" id="hl-152-4"><a class="lnlinks" href="#hl-152-4">4</a>
</span><span class="lnt" id="hl-152-5"><a class="lnlinks" href="#hl-152-5">5</a>
</span><span class="lnt" id="hl-152-6"><a class="lnlinks" href="#hl-152-6">6</a>
</span><span class="lnt" id="hl-152-7"><a class="lnlinks" href="#hl-152-7">7</a>
</span><span class="lnt" id="hl-152-8"><a class="lnlinks" href="#hl-152-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LRUCache cache = new LRUCache(2 /* capacity */);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cache.put(1, 1);
</span></span><span class="line"><span class="cl">cache.put(2, 2);
</span></span><span class="line"><span class="cl">cache.get(1); 			// returns 1 
</span></span><span class="line"><span class="cl">cache.put(3, 3); 		// evicts key 2
</span></span><span class="line"><span class="cl">cache.get(2);			// returns -1 (not found)
</span></span><span class="line"><span class="cl">	
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="lowest-common-ancestorhttpsleetcodecomproblemslowest-common-ancestor-of-a-binary-search-tree"><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">Lowest Common Ancestor</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-153-1"><a class="lnlinks" href="#hl-153-1"> 1</a>
</span><span class="lnt" id="hl-153-2"><a class="lnlinks" href="#hl-153-2"> 2</a>
</span><span class="lnt" id="hl-153-3"><a class="lnlinks" href="#hl-153-3"> 3</a>
</span><span class="lnt" id="hl-153-4"><a class="lnlinks" href="#hl-153-4"> 4</a>
</span><span class="lnt" id="hl-153-5"><a class="lnlinks" href="#hl-153-5"> 5</a>
</span><span class="lnt" id="hl-153-6"><a class="lnlinks" href="#hl-153-6"> 6</a>
</span><span class="lnt" id="hl-153-7"><a class="lnlinks" href="#hl-153-7"> 7</a>
</span><span class="lnt" id="hl-153-8"><a class="lnlinks" href="#hl-153-8"> 8</a>
</span><span class="lnt" id="hl-153-9"><a class="lnlinks" href="#hl-153-9"> 9</a>
</span><span class="lnt" id="hl-153-10"><a class="lnlinks" href="#hl-153-10">10</a>
</span><span class="lnt" id="hl-153-11"><a class="lnlinks" href="#hl-153-11">11</a>
</span><span class="lnt" id="hl-153-12"><a class="lnlinks" href="#hl-153-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="nf">lowestCommonAncestor</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">q</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">root</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">		</span><span class="c1">// Both located in left side.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">left</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">	</span><span class="c1">// Both located in right side</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">right</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">current</span><span class="p">;</span><span class="w">		</span><span class="c1">// Seperate branches, therefore current is lca.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="count-and-sayhttpsleetcodecomproblemscount-and-say"><a href="https://leetcode.com/problems/count-and-say/">Count And Say</a></h3>
<p>The updated version runs in 2ms and passes 96.85% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-154-1"><a class="lnlinks" href="#hl-154-1"> 1</a>
</span><span class="lnt" id="hl-154-2"><a class="lnlinks" href="#hl-154-2"> 2</a>
</span><span class="lnt" id="hl-154-3"><a class="lnlinks" href="#hl-154-3"> 3</a>
</span><span class="lnt" id="hl-154-4"><a class="lnlinks" href="#hl-154-4"> 4</a>
</span><span class="lnt" id="hl-154-5"><a class="lnlinks" href="#hl-154-5"> 5</a>
</span><span class="lnt" id="hl-154-6"><a class="lnlinks" href="#hl-154-6"> 6</a>
</span><span class="lnt" id="hl-154-7"><a class="lnlinks" href="#hl-154-7"> 7</a>
</span><span class="lnt" id="hl-154-8"><a class="lnlinks" href="#hl-154-8"> 8</a>
</span><span class="lnt" id="hl-154-9"><a class="lnlinks" href="#hl-154-9"> 9</a>
</span><span class="lnt" id="hl-154-10"><a class="lnlinks" href="#hl-154-10">10</a>
</span><span class="lnt" id="hl-154-11"><a class="lnlinks" href="#hl-154-11">11</a>
</span><span class="lnt" id="hl-154-12"><a class="lnlinks" href="#hl-154-12">12</a>
</span><span class="lnt" id="hl-154-13"><a class="lnlinks" href="#hl-154-13">13</a>
</span><span class="lnt" id="hl-154-14"><a class="lnlinks" href="#hl-154-14">14</a>
</span><span class="lnt" id="hl-154-15"><a class="lnlinks" href="#hl-154-15">15</a>
</span><span class="lnt" id="hl-154-16"><a class="lnlinks" href="#hl-154-16">16</a>
</span><span class="lnt" id="hl-154-17"><a class="lnlinks" href="#hl-154-17">17</a>
</span><span class="lnt" id="hl-154-18"><a class="lnlinks" href="#hl-154-18">18</a>
</span><span class="lnt" id="hl-154-19"><a class="lnlinks" href="#hl-154-19">19</a>
</span><span class="lnt" id="hl-154-20"><a class="lnlinks" href="#hl-154-20">20</a>
</span><span class="lnt" id="hl-154-21"><a class="lnlinks" href="#hl-154-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">countAndSay</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;1&#34;</span><span class="p">;</span><span class="w">		</span><span class="c1">// initial result</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">			</span><span class="c1">// to create intermediate strings efficiently.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">					</span><span class="c1">// length of the result string.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// We need to iterate n-1 times, because 1st result is 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">startIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// we will look at each index of result</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">	</span><span class="c1">// and store freq,char in the builder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">startIndex</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">char</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">startIndex</span><span class="o">++</span><span class="p">);</span><span class="w">	</span><span class="c1">// get the char at startIndex, and increment it, because we also want to look at the next character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">					</span><span class="c1">// intialize it&#39;s count to 1, we just saw it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">startIndex</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">startIndex</span><span class="p">)){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">count</span><span class="o">++</span><span class="p">;</span><span class="w">			</span><span class="c1">// If next also matches, increment count and startIndex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">startIndex</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">temp</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">count</span><span class="p">).</span><span class="na">append</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span><span class="w">	</span><span class="c1">// No more match, Add the freq and the char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">.</span><span class="na">toString</span><span class="p">();</span><span class="w">	</span><span class="c1">// Update result to generate the next cound-and-say</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="maximum-subarrayhttpsleetcodecomproblemsmaximum-subarray"><a href="https://leetcode.com/problems/maximum-subarray/">Maximum SubArray</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-155-1"><a class="lnlinks" href="#hl-155-1"> 1</a>
</span><span class="lnt" id="hl-155-2"><a class="lnlinks" href="#hl-155-2"> 2</a>
</span><span class="lnt" id="hl-155-3"><a class="lnlinks" href="#hl-155-3"> 3</a>
</span><span class="lnt" id="hl-155-4"><a class="lnlinks" href="#hl-155-4"> 4</a>
</span><span class="lnt" id="hl-155-5"><a class="lnlinks" href="#hl-155-5"> 5</a>
</span><span class="lnt" id="hl-155-6"><a class="lnlinks" href="#hl-155-6"> 6</a>
</span><span class="lnt" id="hl-155-7"><a class="lnlinks" href="#hl-155-7"> 7</a>
</span><span class="lnt" id="hl-155-8"><a class="lnlinks" href="#hl-155-8"> 8</a>
</span><span class="lnt" id="hl-155-9"><a class="lnlinks" href="#hl-155-9"> 9</a>
</span><span class="lnt" id="hl-155-10"><a class="lnlinks" href="#hl-155-10">10</a>
</span><span class="lnt" id="hl-155-11"><a class="lnlinks" href="#hl-155-11">11</a>
</span><span class="lnt" id="hl-155-12"><a class="lnlinks" href="#hl-155-12">12</a>
</span><span class="lnt" id="hl-155-13"><a class="lnlinks" href="#hl-155-13">13</a>
</span><span class="lnt" id="hl-155-14"><a class="lnlinks" href="#hl-155-14">14</a>
</span><span class="lnt" id="hl-155-15"><a class="lnlinks" href="#hl-155-15">15</a>
</span><span class="lnt" id="hl-155-16"><a class="lnlinks" href="#hl-155-16">16</a>
</span><span class="lnt" id="hl-155-17"><a class="lnlinks" href="#hl-155-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxSubArray</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">localMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// keeps track of max sum between the previous and current</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">globalMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// keeps track of global max sum.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    The idea is as follows:
</span></span></span><span class="line"><span class="cl"><span class="cm">    If the current element is greater than the previous local max, then we found an element that is a better option then before.
</span></span></span><span class="line"><span class="cl"><span class="cm">    Then, if that localmax changed and is greater than our global max, update our global max.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">localMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">localMax</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">globalMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">localMax</span><span class="p">,</span><span class="w"> </span><span class="n">globalMax</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">globalMax</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="plus-onehttpsleetcodecomproblemsplus-one"><a href="https://leetcode.com/problems/plus-one/">Plus One</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-156-1"><a class="lnlinks" href="#hl-156-1"> 1</a>
</span><span class="lnt" id="hl-156-2"><a class="lnlinks" href="#hl-156-2"> 2</a>
</span><span class="lnt" id="hl-156-3"><a class="lnlinks" href="#hl-156-3"> 3</a>
</span><span class="lnt" id="hl-156-4"><a class="lnlinks" href="#hl-156-4"> 4</a>
</span><span class="lnt" id="hl-156-5"><a class="lnlinks" href="#hl-156-5"> 5</a>
</span><span class="lnt" id="hl-156-6"><a class="lnlinks" href="#hl-156-6"> 6</a>
</span><span class="lnt" id="hl-156-7"><a class="lnlinks" href="#hl-156-7"> 7</a>
</span><span class="lnt" id="hl-156-8"><a class="lnlinks" href="#hl-156-8"> 8</a>
</span><span class="lnt" id="hl-156-9"><a class="lnlinks" href="#hl-156-9"> 9</a>
</span><span class="lnt" id="hl-156-10"><a class="lnlinks" href="#hl-156-10">10</a>
</span><span class="lnt" id="hl-156-11"><a class="lnlinks" href="#hl-156-11">11</a>
</span><span class="lnt" id="hl-156-12"><a class="lnlinks" href="#hl-156-12">12</a>
</span><span class="lnt" id="hl-156-13"><a class="lnlinks" href="#hl-156-13">13</a>
</span><span class="lnt" id="hl-156-14"><a class="lnlinks" href="#hl-156-14">14</a>
</span><span class="lnt" id="hl-156-15"><a class="lnlinks" href="#hl-156-15">15</a>
</span><span class="lnt" id="hl-156-16"><a class="lnlinks" href="#hl-156-16">16</a>
</span><span class="lnt" id="hl-156-17"><a class="lnlinks" href="#hl-156-17">17</a>
</span><span class="lnt" id="hl-156-18"><a class="lnlinks" href="#hl-156-18">18</a>
</span><span class="lnt" id="hl-156-19"><a class="lnlinks" href="#hl-156-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">plusOne</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">digits</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]++</span><span class="p">;</span><span class="w">			</span><span class="c1">// Add one to the last place.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">10</span><span class="p">)</span><span class="w">	</span><span class="c1">// If it became 10,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">)</span><span class="w">	</span><span class="c1">// Then add one to its previous place</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">10</span><span class="p">){</span><span class="w">	</span><span class="c1">// If that also results in 10, keep propogating that 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]++</span><span class="p">;</span><span class="w">		</span><span class="c1">// upstream</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">10</span><span class="p">){</span><span class="w">	</span><span class="c1">// If the index 0 is 10, then the number is a multiple of 10.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// So increase length by 1 and set index 0 to 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">digits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sqrt-of-xhttpsleetcodecomproblemssqrtx"><a href="https://leetcode.com/problems/sqrtx/">Sqrt of X</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-157-1"><a class="lnlinks" href="#hl-157-1"> 1</a>
</span><span class="lnt" id="hl-157-2"><a class="lnlinks" href="#hl-157-2"> 2</a>
</span><span class="lnt" id="hl-157-3"><a class="lnlinks" href="#hl-157-3"> 3</a>
</span><span class="lnt" id="hl-157-4"><a class="lnlinks" href="#hl-157-4"> 4</a>
</span><span class="lnt" id="hl-157-5"><a class="lnlinks" href="#hl-157-5"> 5</a>
</span><span class="lnt" id="hl-157-6"><a class="lnlinks" href="#hl-157-6"> 6</a>
</span><span class="lnt" id="hl-157-7"><a class="lnlinks" href="#hl-157-7"> 7</a>
</span><span class="lnt" id="hl-157-8"><a class="lnlinks" href="#hl-157-8"> 8</a>
</span><span class="lnt" id="hl-157-9"><a class="lnlinks" href="#hl-157-9"> 9</a>
</span><span class="lnt" id="hl-157-10"><a class="lnlinks" href="#hl-157-10">10</a>
</span><span class="lnt" id="hl-157-11"><a class="lnlinks" href="#hl-157-11">11</a>
</span><span class="lnt" id="hl-157-12"><a class="lnlinks" href="#hl-157-12">12</a>
</span><span class="lnt" id="hl-157-13"><a class="lnlinks" href="#hl-157-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">mySqrt</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">x1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">10</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">100</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="n">20</span><span class="p">;</span><span class="w">		</span><span class="c1">// Using Newton&#39;s method of computing square roots.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="w"> </span><span class="n">done</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">long</span><span class="w"> </span><span class="n">x2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">x1</span><span class="o">*</span><span class="n">x1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">2</span><span class="o">*</span><span class="n">x1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">x1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">done</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">x1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x1</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="climbing-stairshttpsleetcodecomproblemsclimbing-stairs"><a href="https://leetcode.com/problems/climbing-stairs/">Climbing Stairs</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-158-1"><a class="lnlinks" href="#hl-158-1"> 1</a>
</span><span class="lnt" id="hl-158-2"><a class="lnlinks" href="#hl-158-2"> 2</a>
</span><span class="lnt" id="hl-158-3"><a class="lnlinks" href="#hl-158-3"> 3</a>
</span><span class="lnt" id="hl-158-4"><a class="lnlinks" href="#hl-158-4"> 4</a>
</span><span class="lnt" id="hl-158-5"><a class="lnlinks" href="#hl-158-5"> 5</a>
</span><span class="lnt" id="hl-158-6"><a class="lnlinks" href="#hl-158-6"> 6</a>
</span><span class="lnt" id="hl-158-7"><a class="lnlinks" href="#hl-158-7"> 7</a>
</span><span class="lnt" id="hl-158-8"><a class="lnlinks" href="#hl-158-8"> 8</a>
</span><span class="lnt" id="hl-158-9"><a class="lnlinks" href="#hl-158-9"> 9</a>
</span><span class="lnt" id="hl-158-10"><a class="lnlinks" href="#hl-158-10">10</a>
</span><span class="lnt" id="hl-158-11"><a class="lnlinks" href="#hl-158-11">11</a>
</span><span class="lnt" id="hl-158-12"><a class="lnlinks" href="#hl-158-12">12</a>
</span><span class="lnt" id="hl-158-13"><a class="lnlinks" href="#hl-158-13">13</a>
</span><span class="lnt" id="hl-158-14"><a class="lnlinks" href="#hl-158-14">14</a>
</span><span class="lnt" id="hl-158-15"><a class="lnlinks" href="#hl-158-15">15</a>
</span><span class="lnt" id="hl-158-16"><a class="lnlinks" href="#hl-158-16">16</a>
</span><span class="lnt" id="hl-158-17"><a class="lnlinks" href="#hl-158-17">17</a>
</span><span class="lnt" id="hl-158-18"><a class="lnlinks" href="#hl-158-18">18</a>
</span><span class="lnt" id="hl-158-19"><a class="lnlinks" href="#hl-158-19">19</a>
</span><span class="lnt" id="hl-158-20"><a class="lnlinks" href="#hl-158-20">20</a>
</span><span class="lnt" id="hl-158-21"><a class="lnlinks" href="#hl-158-21">21</a>
</span><span class="lnt" id="hl-158-22"><a class="lnlinks" href="#hl-158-22">22</a>
</span><span class="lnt" id="hl-158-23"><a class="lnlinks" href="#hl-158-23">23</a>
</span><span class="lnt" id="hl-158-24"><a class="lnlinks" href="#hl-158-24">24</a>
</span><span class="lnt" id="hl-158-25"><a class="lnlinks" href="#hl-158-25">25</a>
</span><span class="lnt" id="hl-158-26"><a class="lnlinks" href="#hl-158-26">26</a>
</span><span class="lnt" id="hl-158-27"><a class="lnlinks" href="#hl-158-27">27</a>
</span><span class="lnt" id="hl-158-28"><a class="lnlinks" href="#hl-158-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">climbStairs</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">		</span><span class="c1">// I chose n &lt; 4 because climbStairs(0 &lt;= n &lt;= 3) = n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">dp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">4</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//return naiveDP(n, dp);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">efficientDP</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">naiveDP</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">dp</span><span class="o">[]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// If already computed, return it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ways</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">naiveDP</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">dp</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">naiveDP</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="n">dp</span><span class="p">);</span><span class="w">	</span><span class="c1">// Just like Fibonacci.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ways</span><span class="p">;</span><span class="w">		</span><span class="c1">// Save it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ways</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">efficientDP</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">dp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// Initialize dp of length n+1 to store n&#39;th way.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">4</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">					</span><span class="c1">// climbStairs(0 &lt;= n &lt;= 3) = n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">	</span><span class="c1">// climbStairs(n) = climbStairs(n-1) + climbstairs(n-2);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">]</span><span class="p">;</span><span class="w">  </span><span class="c1">// So fetch those values from the dp array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="remove-duplicates-from-sorted-listhttpsleetcodecomproblemsremove-duplicates-from-sorted-list"><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">Remove Duplicates from sorted list</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-159-1"><a class="lnlinks" href="#hl-159-1"> 1</a>
</span><span class="lnt" id="hl-159-2"><a class="lnlinks" href="#hl-159-2"> 2</a>
</span><span class="lnt" id="hl-159-3"><a class="lnlinks" href="#hl-159-3"> 3</a>
</span><span class="lnt" id="hl-159-4"><a class="lnlinks" href="#hl-159-4"> 4</a>
</span><span class="lnt" id="hl-159-5"><a class="lnlinks" href="#hl-159-5"> 5</a>
</span><span class="lnt" id="hl-159-6"><a class="lnlinks" href="#hl-159-6"> 6</a>
</span><span class="lnt" id="hl-159-7"><a class="lnlinks" href="#hl-159-7"> 7</a>
</span><span class="lnt" id="hl-159-8"><a class="lnlinks" href="#hl-159-8"> 8</a>
</span><span class="lnt" id="hl-159-9"><a class="lnlinks" href="#hl-159-9"> 9</a>
</span><span class="lnt" id="hl-159-10"><a class="lnlinks" href="#hl-159-10">10</a>
</span><span class="lnt" id="hl-159-11"><a class="lnlinks" href="#hl-159-11">11</a>
</span><span class="lnt" id="hl-159-12"><a class="lnlinks" href="#hl-159-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">deleteDuplicates</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// while we haven&#39;t reached the tail</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// if current&#39;s next is the same as current, skip and update its next</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="same-treehttpsleetcodecomproblemssame-tree"><a href="https://leetcode.com/problems/same-tree/">Same Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-160-1"><a class="lnlinks" href="#hl-160-1"> 1</a>
</span><span class="lnt" id="hl-160-2"><a class="lnlinks" href="#hl-160-2"> 2</a>
</span><span class="lnt" id="hl-160-3"><a class="lnlinks" href="#hl-160-3"> 3</a>
</span><span class="lnt" id="hl-160-4"><a class="lnlinks" href="#hl-160-4"> 4</a>
</span><span class="lnt" id="hl-160-5"><a class="lnlinks" href="#hl-160-5"> 5</a>
</span><span class="lnt" id="hl-160-6"><a class="lnlinks" href="#hl-160-6"> 6</a>
</span><span class="lnt" id="hl-160-7"><a class="lnlinks" href="#hl-160-7"> 7</a>
</span><span class="lnt" id="hl-160-8"><a class="lnlinks" href="#hl-160-8"> 8</a>
</span><span class="lnt" id="hl-160-9"><a class="lnlinks" href="#hl-160-9"> 9</a>
</span><span class="lnt" id="hl-160-10"><a class="lnlinks" href="#hl-160-10">10</a>
</span><span class="lnt" id="hl-160-11"><a class="lnlinks" href="#hl-160-11">11</a>
</span><span class="lnt" id="hl-160-12"><a class="lnlinks" href="#hl-160-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSameTree</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">q</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// Two empty trees</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// If one of the node is null, the two trees can&#39;t be equal.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">p</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// If the values in the two nodes are same, compare its&#39;s left and right sub-tree.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">isSameTree</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">left</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">isSameTree</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">		</span><span class="c1">// If nothing worked out, they can&#39;t be same.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="symmetric-treehttpsleetcodecomproblemssymmetric-tree"><a href="https://leetcode.com/problems/symmetric-tree/">Symmetric Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-161-1"><a class="lnlinks" href="#hl-161-1"> 1</a>
</span><span class="lnt" id="hl-161-2"><a class="lnlinks" href="#hl-161-2"> 2</a>
</span><span class="lnt" id="hl-161-3"><a class="lnlinks" href="#hl-161-3"> 3</a>
</span><span class="lnt" id="hl-161-4"><a class="lnlinks" href="#hl-161-4"> 4</a>
</span><span class="lnt" id="hl-161-5"><a class="lnlinks" href="#hl-161-5"> 5</a>
</span><span class="lnt" id="hl-161-6"><a class="lnlinks" href="#hl-161-6"> 6</a>
</span><span class="lnt" id="hl-161-7"><a class="lnlinks" href="#hl-161-7"> 7</a>
</span><span class="lnt" id="hl-161-8"><a class="lnlinks" href="#hl-161-8"> 8</a>
</span><span class="lnt" id="hl-161-9"><a class="lnlinks" href="#hl-161-9"> 9</a>
</span><span class="lnt" id="hl-161-10"><a class="lnlinks" href="#hl-161-10">10</a>
</span><span class="lnt" id="hl-161-11"><a class="lnlinks" href="#hl-161-11">11</a>
</span><span class="lnt" id="hl-161-12"><a class="lnlinks" href="#hl-161-12">12</a>
</span><span class="lnt" id="hl-161-13"><a class="lnlinks" href="#hl-161-13">13</a>
</span><span class="lnt" id="hl-161-14"><a class="lnlinks" href="#hl-161-14">14</a>
</span><span class="lnt" id="hl-161-15"><a class="lnlinks" href="#hl-161-15">15</a>
</span><span class="lnt" id="hl-161-16"><a class="lnlinks" href="#hl-161-16">16</a>
</span><span class="lnt" id="hl-161-17"><a class="lnlinks" href="#hl-161-17">17</a>
</span><span class="lnt" id="hl-161-18"><a class="lnlinks" href="#hl-161-18">18</a>
</span><span class="lnt" id="hl-161-19"><a class="lnlinks" href="#hl-161-19">19</a>
</span><span class="lnt" id="hl-161-20"><a class="lnlinks" href="#hl-161-20">20</a>
</span><span class="lnt" id="hl-161-21"><a class="lnlinks" href="#hl-161-21">21</a>
</span><span class="lnt" id="hl-161-22"><a class="lnlinks" href="#hl-161-22">22</a>
</span><span class="lnt" id="hl-161-23"><a class="lnlinks" href="#hl-161-23">23</a>
</span><span class="lnt" id="hl-161-24"><a class="lnlinks" href="#hl-161-24">24</a>
</span><span class="lnt" id="hl-161-25"><a class="lnlinks" href="#hl-161-25">25</a>
</span><span class="lnt" id="hl-161-26"><a class="lnlinks" href="#hl-161-26">26</a>
</span><span class="lnt" id="hl-161-27"><a class="lnlinks" href="#hl-161-27">27</a>
</span><span class="lnt" id="hl-161-28"><a class="lnlinks" href="#hl-161-28">28</a>
</span><span class="lnt" id="hl-161-29"><a class="lnlinks" href="#hl-161-29">29</a>
</span><span class="lnt" id="hl-161-30"><a class="lnlinks" href="#hl-161-30">30</a>
</span><span class="lnt" id="hl-161-31"><a class="lnlinks" href="#hl-161-31">31</a>
</span><span class="lnt" id="hl-161-32"><a class="lnlinks" href="#hl-161-32">32</a>
</span><span class="lnt" id="hl-161-33"><a class="lnlinks" href="#hl-161-33">33</a>
</span><span class="lnt" id="hl-161-34"><a class="lnlinks" href="#hl-161-34">34</a>
</span><span class="lnt" id="hl-161-35"><a class="lnlinks" href="#hl-161-35">35</a>
</span><span class="lnt" id="hl-161-36"><a class="lnlinks" href="#hl-161-36">36</a>
</span><span class="lnt" id="hl-161-37"><a class="lnlinks" href="#hl-161-37">37</a>
</span><span class="lnt" id="hl-161-38"><a class="lnlinks" href="#hl-161-38">38</a>
</span><span class="lnt" id="hl-161-39"><a class="lnlinks" href="#hl-161-39">39</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSymmetric</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">isSymmetricIterative</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSymmetricIterative</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span><span class="w"> </span><span class="n">track</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">		</span><span class="c1">// Add the root twice so we can compare its left and right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">track</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">track</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">		</span><span class="c1">// Remove 2 nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">track</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// If they are both null, skip it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">y</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">				</span><span class="c1">// If values don&#39;t match or one is null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">		</span><span class="c1">// Otherwise add them in this order -&gt; LRRL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">		</span><span class="c1">// because we need to compare left most with the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">		</span><span class="c1">// right most, then inner left with inner right.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">track</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">		</span><span class="c1">// Everything&#39;s all right, so they must be symmetric.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSymmetricRecursive</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">helperRecursive</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">helperRecursive</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// Base Case: Both or one is null, so true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">y</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">helperRecursive</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">.</span><span class="na">right</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">helperRecursive</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">.</span><span class="na">left</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Check if values match and 1.left matches with the 2.right and 1.right matches with 2.left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="max-depth-of-binary-treehttpsleetcodecomproblemsmaximum-depth-of-binary-tree"><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">Max Depth of Binary Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-162-1"><a class="lnlinks" href="#hl-162-1">1</a>
</span><span class="lnt" id="hl-162-2"><a class="lnlinks" href="#hl-162-2">2</a>
</span><span class="lnt" id="hl-162-3"><a class="lnlinks" href="#hl-162-3">3</a>
</span><span class="lnt" id="hl-162-4"><a class="lnlinks" href="#hl-162-4">4</a>
</span><span class="lnt" id="hl-162-5"><a class="lnlinks" href="#hl-162-5">5</a>
</span><span class="lnt" id="hl-162-6"><a class="lnlinks" href="#hl-162-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">If root is null, height is 0 else add 1 and find if the left or the right has a greater depth.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxDepth</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">),</span><span class="w"> </span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="convert-sorted-array-to-binary-search-treehttpsleetcodecomproblemsconvert-sorted-array-to-binary-search-tree"><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">Convert Sorted Array to Binary Search Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-163-1"><a class="lnlinks" href="#hl-163-1"> 1</a>
</span><span class="lnt" id="hl-163-2"><a class="lnlinks" href="#hl-163-2"> 2</a>
</span><span class="lnt" id="hl-163-3"><a class="lnlinks" href="#hl-163-3"> 3</a>
</span><span class="lnt" id="hl-163-4"><a class="lnlinks" href="#hl-163-4"> 4</a>
</span><span class="lnt" id="hl-163-5"><a class="lnlinks" href="#hl-163-5"> 5</a>
</span><span class="lnt" id="hl-163-6"><a class="lnlinks" href="#hl-163-6"> 6</a>
</span><span class="lnt" id="hl-163-7"><a class="lnlinks" href="#hl-163-7"> 7</a>
</span><span class="lnt" id="hl-163-8"><a class="lnlinks" href="#hl-163-8"> 8</a>
</span><span class="lnt" id="hl-163-9"><a class="lnlinks" href="#hl-163-9"> 9</a>
</span><span class="lnt" id="hl-163-10"><a class="lnlinks" href="#hl-163-10">10</a>
</span><span class="lnt" id="hl-163-11"><a class="lnlinks" href="#hl-163-11">11</a>
</span><span class="lnt" id="hl-163-12"><a class="lnlinks" href="#hl-163-12">12</a>
</span><span class="lnt" id="hl-163-13"><a class="lnlinks" href="#hl-163-13">13</a>
</span><span class="lnt" id="hl-163-14"><a class="lnlinks" href="#hl-163-14">14</a>
</span><span class="lnt" id="hl-163-15"><a class="lnlinks" href="#hl-163-15">15</a>
</span><span class="lnt" id="hl-163-16"><a class="lnlinks" href="#hl-163-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="nf">sortedArrayToBST</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">aux</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="nf">aux</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w">					</span><span class="c1">// Either empty, or return a null node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">			</span><span class="c1">// Create a node with the middle value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">TreeNode</span><span class="p">(</span><span class="n">n</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aux</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// Compute the left (which is the mid in left side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aux</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="p">);</span><span class="w">	</span><span class="c1">// Compute the right (which is the mid in right side)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">root</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="balanced-binary-treehttpsleetcodecomproblemsbalanced-binary-tree"><a href="https://leetcode.com/problems/balanced-binary-tree/">Balanced Binary Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-164-1"><a class="lnlinks" href="#hl-164-1"> 1</a>
</span><span class="lnt" id="hl-164-2"><a class="lnlinks" href="#hl-164-2"> 2</a>
</span><span class="lnt" id="hl-164-3"><a class="lnlinks" href="#hl-164-3"> 3</a>
</span><span class="lnt" id="hl-164-4"><a class="lnlinks" href="#hl-164-4"> 4</a>
</span><span class="lnt" id="hl-164-5"><a class="lnlinks" href="#hl-164-5"> 5</a>
</span><span class="lnt" id="hl-164-6"><a class="lnlinks" href="#hl-164-6"> 6</a>
</span><span class="lnt" id="hl-164-7"><a class="lnlinks" href="#hl-164-7"> 7</a>
</span><span class="lnt" id="hl-164-8"><a class="lnlinks" href="#hl-164-8"> 8</a>
</span><span class="lnt" id="hl-164-9"><a class="lnlinks" href="#hl-164-9"> 9</a>
</span><span class="lnt" id="hl-164-10"><a class="lnlinks" href="#hl-164-10">10</a>
</span><span class="lnt" id="hl-164-11"><a class="lnlinks" href="#hl-164-11">11</a>
</span><span class="lnt" id="hl-164-12"><a class="lnlinks" href="#hl-164-12">12</a>
</span><span class="lnt" id="hl-164-13"><a class="lnlinks" href="#hl-164-13">13</a>
</span><span class="lnt" id="hl-164-14"><a class="lnlinks" href="#hl-164-14">14</a>
</span><span class="lnt" id="hl-164-15"><a class="lnlinks" href="#hl-164-15">15</a>
</span><span class="lnt" id="hl-164-16"><a class="lnlinks" href="#hl-164-16">16</a>
</span><span class="lnt" id="hl-164-17"><a class="lnlinks" href="#hl-164-17">17</a>
</span><span class="lnt" id="hl-164-18"><a class="lnlinks" href="#hl-164-18">18</a>
</span><span class="lnt" id="hl-164-19"><a class="lnlinks" href="#hl-164-19">19</a>
</span><span class="lnt" id="hl-164-20"><a class="lnlinks" href="#hl-164-20">20</a>
</span><span class="lnt" id="hl-164-21"><a class="lnlinks" href="#hl-164-21">21</a>
</span><span class="lnt" id="hl-164-22"><a class="lnlinks" href="#hl-164-22">22</a>
</span><span class="lnt" id="hl-164-23"><a class="lnlinks" href="#hl-164-23">23</a>
</span><span class="lnt" id="hl-164-24"><a class="lnlinks" href="#hl-164-24">24</a>
</span><span class="lnt" id="hl-164-25"><a class="lnlinks" href="#hl-164-25">25</a>
</span><span class="lnt" id="hl-164-26"><a class="lnlinks" href="#hl-164-26">26</a>
</span><span class="lnt" id="hl-164-27"><a class="lnlinks" href="#hl-164-27">27</a>
</span><span class="lnt" id="hl-164-28"><a class="lnlinks" href="#hl-164-28">28</a>
</span><span class="lnt" id="hl-164-29"><a class="lnlinks" href="#hl-164-29">29</a>
</span><span class="lnt" id="hl-164-30"><a class="lnlinks" href="#hl-164-30">30</a>
</span><span class="lnt" id="hl-164-31"><a class="lnlinks" href="#hl-164-31">31</a>
</span><span class="lnt" id="hl-164-32"><a class="lnlinks" href="#hl-164-32">32</a>
</span><span class="lnt" id="hl-164-33"><a class="lnlinks" href="#hl-164-33">33</a>
</span><span class="lnt" id="hl-164-34"><a class="lnlinks" href="#hl-164-34">34</a>
</span><span class="lnt" id="hl-164-35"><a class="lnlinks" href="#hl-164-35">35</a>
</span><span class="lnt" id="hl-164-36"><a class="lnlinks" href="#hl-164-36">36</a>
</span><span class="lnt" id="hl-164-37"><a class="lnlinks" href="#hl-164-37">37</a>
</span><span class="lnt" id="hl-164-38"><a class="lnlinks" href="#hl-164-38">38</a>
</span><span class="lnt" id="hl-164-39"><a class="lnlinks" href="#hl-164-39">39</a>
</span><span class="lnt" id="hl-164-40"><a class="lnlinks" href="#hl-164-40">40</a>
</span><span class="lnt" id="hl-164-41"><a class="lnlinks" href="#hl-164-41">41</a>
</span><span class="lnt" id="hl-164-42"><a class="lnlinks" href="#hl-164-42">42</a>
</span><span class="lnt" id="hl-164-43"><a class="lnlinks" href="#hl-164-43">43</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isBalanced</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">isBalancedBottomUp</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isBalancedTopDown</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// if difference between root&#39;s left and right is &gt; 1, they&#39;re not balanced</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">((</span><span class="n">getHeight</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">getHeight</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">)))</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// otherwise, we need to check if the left and right subtree are also balanced.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">isBalanced</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">isBalanced</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getHeight</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Standard height of a binary tree calculator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">getHeight</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">),</span><span class="w"> </span><span class="n">getHeight</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isBalancedBottomUp</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">getHeight2</span><span class="p">(</span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">	</span><span class="c1">// -1 means not balanced.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getHeight2</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">lHeight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getHeight2</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">	</span><span class="c1">// Get the height of left and right tree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">rHeight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getHeight2</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// If at any point there was a height difference of more than 1 or previous node&#39;s leftheight || rightheight returned -1, return -1 to let the next node know there was an imbalance.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">(</span><span class="n">lHeight</span><span class="o">-</span><span class="n">rHeight</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">lHeight</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">rHeight</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">lHeight</span><span class="p">,</span><span class="w"> </span><span class="n">rHeight</span><span class="p">);</span><span class="w"> </span><span class="c1">// Else carry on with the normal procedure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-depth-of-binary-treehttpsleetcodecomproblemsminimum-depth-of-binary-tree"><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/">Minimum Depth of Binary Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-165-1"><a class="lnlinks" href="#hl-165-1"> 1</a>
</span><span class="lnt" id="hl-165-2"><a class="lnlinks" href="#hl-165-2"> 2</a>
</span><span class="lnt" id="hl-165-3"><a class="lnlinks" href="#hl-165-3"> 3</a>
</span><span class="lnt" id="hl-165-4"><a class="lnlinks" href="#hl-165-4"> 4</a>
</span><span class="lnt" id="hl-165-5"><a class="lnlinks" href="#hl-165-5"> 5</a>
</span><span class="lnt" id="hl-165-6"><a class="lnlinks" href="#hl-165-6"> 6</a>
</span><span class="lnt" id="hl-165-7"><a class="lnlinks" href="#hl-165-7"> 7</a>
</span><span class="lnt" id="hl-165-8"><a class="lnlinks" href="#hl-165-8"> 8</a>
</span><span class="lnt" id="hl-165-9"><a class="lnlinks" href="#hl-165-9"> 9</a>
</span><span class="lnt" id="hl-165-10"><a class="lnlinks" href="#hl-165-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">minDepth</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Base case</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Left is null, find minheight from right side</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">minDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Right is null, find minheight from left side</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">minDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Else, both are not null, so compute min height from the two sides.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">minDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">),</span><span class="w"> </span><span class="n">minDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="path-sumhttpsleetcodecomproblemspath-sum"><a href="https://leetcode.com/problems/path-sum/">Path Sum</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-166-1"><a class="lnlinks" href="#hl-166-1">1</a>
</span><span class="lnt" id="hl-166-2"><a class="lnlinks" href="#hl-166-2">2</a>
</span><span class="lnt" id="hl-166-3"><a class="lnlinks" href="#hl-166-3">3</a>
</span><span class="lnt" id="hl-166-4"><a class="lnlinks" href="#hl-166-4">4</a>
</span><span class="lnt" id="hl-166-5"><a class="lnlinks" href="#hl-166-5">5</a>
</span><span class="lnt" id="hl-166-6"><a class="lnlinks" href="#hl-166-6">6</a>
</span><span class="lnt" id="hl-166-7"><a class="lnlinks" href="#hl-166-7">7</a>
</span><span class="lnt" id="hl-166-8"><a class="lnlinks" href="#hl-166-8">8</a>
</span><span class="lnt" id="hl-166-9"><a class="lnlinks" href="#hl-166-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">hasPathSum</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">	</span><span class="c1">// No sum exist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sum</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">	</span><span class="c1">// Sum decreases</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">	</span><span class="c1">// If we are at a leaf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">	</span><span class="c1">// Check if the sum is 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">hasPathSum</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Otherwise look if you can make sum = 0 by exploring the left or right side.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pascals-trianglehttpsleetcodecomproblemspascals-triangle"><a href="https://leetcode.com/problems/pascals-triangle/">Pascal&rsquo;s Triangle</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-167-1"><a class="lnlinks" href="#hl-167-1"> 1</a>
</span><span class="lnt" id="hl-167-2"><a class="lnlinks" href="#hl-167-2"> 2</a>
</span><span class="lnt" id="hl-167-3"><a class="lnlinks" href="#hl-167-3"> 3</a>
</span><span class="lnt" id="hl-167-4"><a class="lnlinks" href="#hl-167-4"> 4</a>
</span><span class="lnt" id="hl-167-5"><a class="lnlinks" href="#hl-167-5"> 5</a>
</span><span class="lnt" id="hl-167-6"><a class="lnlinks" href="#hl-167-6"> 6</a>
</span><span class="lnt" id="hl-167-7"><a class="lnlinks" href="#hl-167-7"> 7</a>
</span><span class="lnt" id="hl-167-8"><a class="lnlinks" href="#hl-167-8"> 8</a>
</span><span class="lnt" id="hl-167-9"><a class="lnlinks" href="#hl-167-9"> 9</a>
</span><span class="lnt" id="hl-167-10"><a class="lnlinks" href="#hl-167-10">10</a>
</span><span class="lnt" id="hl-167-11"><a class="lnlinks" href="#hl-167-11">11</a>
</span><span class="lnt" id="hl-167-12"><a class="lnlinks" href="#hl-167-12">12</a>
</span><span class="lnt" id="hl-167-13"><a class="lnlinks" href="#hl-167-13">13</a>
</span><span class="lnt" id="hl-167-14"><a class="lnlinks" href="#hl-167-14">14</a>
</span><span class="lnt" id="hl-167-15"><a class="lnlinks" href="#hl-167-15">15</a>
</span><span class="lnt" id="hl-167-16"><a class="lnlinks" href="#hl-167-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">generate</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">numRows</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">pt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">numRows</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">	</span><span class="c1">// Need to add all n rows</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">		</span><span class="c1">// temp list to store values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w">		</span><span class="c1">// First and last values are always 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">temp</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">	</span><span class="c1">// Else, get the previous row and surrounding two values and add them</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">temp</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="p">).</span><span class="na">get</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">pt</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="p">).</span><span class="na">get</span><span class="p">(</span><span class="n">j</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pt</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span><span class="w">		</span><span class="c1">// Add it to pt.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">pt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="valid-palindromehttpsleetcodecomproblemsvalid-palindrome"><a href="https://leetcode.com/problems/valid-palindrome/">Valid Palindrome</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-168-1"><a class="lnlinks" href="#hl-168-1"> 1</a>
</span><span class="lnt" id="hl-168-2"><a class="lnlinks" href="#hl-168-2"> 2</a>
</span><span class="lnt" id="hl-168-3"><a class="lnlinks" href="#hl-168-3"> 3</a>
</span><span class="lnt" id="hl-168-4"><a class="lnlinks" href="#hl-168-4"> 4</a>
</span><span class="lnt" id="hl-168-5"><a class="lnlinks" href="#hl-168-5"> 5</a>
</span><span class="lnt" id="hl-168-6"><a class="lnlinks" href="#hl-168-6"> 6</a>
</span><span class="lnt" id="hl-168-7"><a class="lnlinks" href="#hl-168-7"> 7</a>
</span><span class="lnt" id="hl-168-8"><a class="lnlinks" href="#hl-168-8"> 8</a>
</span><span class="lnt" id="hl-168-9"><a class="lnlinks" href="#hl-168-9"> 9</a>
</span><span class="lnt" id="hl-168-10"><a class="lnlinks" href="#hl-168-10">10</a>
</span><span class="lnt" id="hl-168-11"><a class="lnlinks" href="#hl-168-11">11</a>
</span><span class="lnt" id="hl-168-12"><a class="lnlinks" href="#hl-168-12">12</a>
</span><span class="lnt" id="hl-168-13"><a class="lnlinks" href="#hl-168-13">13</a>
</span><span class="lnt" id="hl-168-14"><a class="lnlinks" href="#hl-168-14">14</a>
</span><span class="lnt" id="hl-168-15"><a class="lnlinks" href="#hl-168-15">15</a>
</span><span class="lnt" id="hl-168-16"><a class="lnlinks" href="#hl-168-16">16</a>
</span><span class="lnt" id="hl-168-17"><a class="lnlinks" href="#hl-168-17">17</a>
</span><span class="lnt" id="hl-168-18"><a class="lnlinks" href="#hl-168-18">18</a>
</span><span class="lnt" id="hl-168-19"><a class="lnlinks" href="#hl-168-19">19</a>
</span><span class="lnt" id="hl-168-20"><a class="lnlinks" href="#hl-168-20">20</a>
</span><span class="lnt" id="hl-168-21"><a class="lnlinks" href="#hl-168-21">21</a>
</span><span class="lnt" id="hl-168-22"><a class="lnlinks" href="#hl-168-22">22</a>
</span><span class="lnt" id="hl-168-23"><a class="lnlinks" href="#hl-168-23">23</a>
</span><span class="lnt" id="hl-168-24"><a class="lnlinks" href="#hl-168-24">24</a>
</span><span class="lnt" id="hl-168-25"><a class="lnlinks" href="#hl-168-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPalindrome</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">		</span><span class="c1">// Only do this is s is not empty</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toLowerCase</span><span class="p">();</span><span class="w">	</span><span class="c1">// Convert it to lowercase</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// Initialize left and right pointers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w">	</span><span class="c1">// continue while we haven&#39;t hit the middle of the string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// If char at left is not a letter or a number, skip it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">Character</span><span class="p">.</span><span class="na">isLetter</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">left</span><span class="p">))</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">Character</span><span class="p">.</span><span class="na">isDigit</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">left</span><span class="p">)))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Same with char at right.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">Character</span><span class="p">.</span><span class="na">isLetter</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">right</span><span class="p">))</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">Character</span><span class="p">.</span><span class="na">isDigit</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">right</span><span class="p">)))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">right</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">//Char&#39;s are now alphanumeric.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">left</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">right</span><span class="p">))</span><span class="w">	</span><span class="c1">// If they don&#39;t match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">	</span><span class="c1">// return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">	</span><span class="c1">// They matched, so try to match the inner string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">right</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">	</span><span class="c1">// No mismatch found, return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-ii"><a href="https://leetcode.com/problems/pascals-triangle-ii/">Pascal&rsquo;s Triangle II</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-169-1"><a class="lnlinks" href="#hl-169-1">1</a>
</span><span class="lnt" id="hl-169-2"><a class="lnlinks" href="#hl-169-2">2</a>
</span><span class="lnt" id="hl-169-3"><a class="lnlinks" href="#hl-169-3">3</a>
</span><span class="lnt" id="hl-169-4"><a class="lnlinks" href="#hl-169-4">4</a>
</span><span class="lnt" id="hl-169-5"><a class="lnlinks" href="#hl-169-5">5</a>
</span><span class="lnt" id="hl-169-6"><a class="lnlinks" href="#hl-169-6">6</a>
</span><span class="lnt" id="hl-169-7"><a class="lnlinks" href="#hl-169-7">7</a>
</span><span class="lnt" id="hl-169-8"><a class="lnlinks" href="#hl-169-8">8</a>
</span><span class="lnt" id="hl-169-9"><a class="lnlinks" href="#hl-169-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getRow</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">rowIndex</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">row</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// First is always 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// Using the nth row formula to compute the coeeficients. You can google &#34;nth row Pascal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rowIndex</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">row</span><span class="p">.</span><span class="na">add</span><span class="p">((</span><span class="kt">int</span><span class="p">)(</span><span class="n">1</span><span class="p">.</span><span class="na">0</span><span class="o">*</span><span class="n">row</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">rowIndex</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">)));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">row</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-170-1"><a class="lnlinks" href="#hl-170-1"> 1</a>
</span><span class="lnt" id="hl-170-2"><a class="lnlinks" href="#hl-170-2"> 2</a>
</span><span class="lnt" id="hl-170-3"><a class="lnlinks" href="#hl-170-3"> 3</a>
</span><span class="lnt" id="hl-170-4"><a class="lnlinks" href="#hl-170-4"> 4</a>
</span><span class="lnt" id="hl-170-5"><a class="lnlinks" href="#hl-170-5"> 5</a>
</span><span class="lnt" id="hl-170-6"><a class="lnlinks" href="#hl-170-6"> 6</a>
</span><span class="lnt" id="hl-170-7"><a class="lnlinks" href="#hl-170-7"> 7</a>
</span><span class="lnt" id="hl-170-8"><a class="lnlinks" href="#hl-170-8"> 8</a>
</span><span class="lnt" id="hl-170-9"><a class="lnlinks" href="#hl-170-9"> 9</a>
</span><span class="lnt" id="hl-170-10"><a class="lnlinks" href="#hl-170-10">10</a>
</span><span class="lnt" id="hl-170-11"><a class="lnlinks" href="#hl-170-11">11</a>
</span><span class="lnt" id="hl-170-12"><a class="lnlinks" href="#hl-170-12">12</a>
</span><span class="lnt" id="hl-170-13"><a class="lnlinks" href="#hl-170-13">13</a>
</span><span class="lnt" id="hl-170-14"><a class="lnlinks" href="#hl-170-14">14</a>
</span><span class="lnt" id="hl-170-15"><a class="lnlinks" href="#hl-170-15">15</a>
</span><span class="lnt" id="hl-170-16"><a class="lnlinks" href="#hl-170-16">16</a>
</span><span class="lnt" id="hl-170-17"><a class="lnlinks" href="#hl-170-17">17</a>
</span><span class="lnt" id="hl-170-18"><a class="lnlinks" href="#hl-170-18">18</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if the price you are looking at right now in the array minus the minimum observed so far is greater than the maximum profit you recorded, update the max.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxProfit</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">prices</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prices</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// Empty array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prices</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">prices</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">max</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-ii"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">Best Time to Buy and Sell Stock II</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-171-1"><a class="lnlinks" href="#hl-171-1"> 1</a>
</span><span class="lnt" id="hl-171-2"><a class="lnlinks" href="#hl-171-2"> 2</a>
</span><span class="lnt" id="hl-171-3"><a class="lnlinks" href="#hl-171-3"> 3</a>
</span><span class="lnt" id="hl-171-4"><a class="lnlinks" href="#hl-171-4"> 4</a>
</span><span class="lnt" id="hl-171-5"><a class="lnlinks" href="#hl-171-5"> 5</a>
</span><span class="lnt" id="hl-171-6"><a class="lnlinks" href="#hl-171-6"> 6</a>
</span><span class="lnt" id="hl-171-7"><a class="lnlinks" href="#hl-171-7"> 7</a>
</span><span class="lnt" id="hl-171-8"><a class="lnlinks" href="#hl-171-8"> 8</a>
</span><span class="lnt" id="hl-171-9"><a class="lnlinks" href="#hl-171-9"> 9</a>
</span><span class="lnt" id="hl-171-10"><a class="lnlinks" href="#hl-171-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you observe a valley and consecutive peak, make the trade by buying the stock on the valley day and selling it on the peak day.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxProfit</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">prices</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">prices</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="p">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="single-numberhttpsleetcodecomproblemssingle-number"><a href="https://leetcode.com/problems/single-number/">Single Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-172-1"><a class="lnlinks" href="#hl-172-1">1</a>
</span><span class="lnt" id="hl-172-2"><a class="lnlinks" href="#hl-172-2">2</a>
</span><span class="lnt" id="hl-172-3"><a class="lnlinks" href="#hl-172-3">3</a>
</span><span class="lnt" id="hl-172-4"><a class="lnlinks" href="#hl-172-4">4</a>
</span><span class="lnt" id="hl-172-5"><a class="lnlinks" href="#hl-172-5">5</a>
</span><span class="lnt" id="hl-172-6"><a class="lnlinks" href="#hl-172-6">6</a>
</span><span class="lnt" id="hl-172-7"><a class="lnlinks" href="#hl-172-7">7</a>
</span><span class="lnt" id="hl-172-8"><a class="lnlinks" href="#hl-172-8">8</a>
</span><span class="lnt" id="hl-172-9"><a class="lnlinks" href="#hl-172-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that XOR of two same numbers returns 0 and XOR with 0 returns the same number. So if there is only one element that doesn&#39;t have a pair, all the remaining will XOR with themselves at one point and give 0 but not the singleton element.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">singleNumber</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="linked-list-cyclehttpsleetcodecomproblemslinked-list-cycle"><a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-173-1"><a class="lnlinks" href="#hl-173-1"> 1</a>
</span><span class="lnt" id="hl-173-2"><a class="lnlinks" href="#hl-173-2"> 2</a>
</span><span class="lnt" id="hl-173-3"><a class="lnlinks" href="#hl-173-3"> 3</a>
</span><span class="lnt" id="hl-173-4"><a class="lnlinks" href="#hl-173-4"> 4</a>
</span><span class="lnt" id="hl-173-5"><a class="lnlinks" href="#hl-173-5"> 5</a>
</span><span class="lnt" id="hl-173-6"><a class="lnlinks" href="#hl-173-6"> 6</a>
</span><span class="lnt" id="hl-173-7"><a class="lnlinks" href="#hl-173-7"> 7</a>
</span><span class="lnt" id="hl-173-8"><a class="lnlinks" href="#hl-173-8"> 8</a>
</span><span class="lnt" id="hl-173-9"><a class="lnlinks" href="#hl-173-9"> 9</a>
</span><span class="lnt" id="hl-173-10"><a class="lnlinks" href="#hl-173-10">10</a>
</span><span class="lnt" id="hl-173-11"><a class="lnlinks" href="#hl-173-11">11</a>
</span><span class="lnt" id="hl-173-12"><a class="lnlinks" href="#hl-173-12">12</a>
</span><span class="lnt" id="hl-173-13"><a class="lnlinks" href="#hl-173-13">13</a>
</span><span class="lnt" id="hl-173-14"><a class="lnlinks" href="#hl-173-14">14</a>
</span><span class="lnt" id="hl-173-15"><a class="lnlinks" href="#hl-173-15">15</a>
</span><span class="lnt" id="hl-173-16"><a class="lnlinks" href="#hl-173-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Using the slow-fast runner technique.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">hasCycle</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">	</span><span class="c1">// Slow runner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">second</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">		</span><span class="c1">// Fast Runner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// while second is not at the end or it isn&#39;t the tail</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">second</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">second</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">second</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">first</span><span class="p">)</span><span class="w">	</span><span class="c1">// If fast made a full loop and met up with slow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">		</span><span class="c1">// We got a cycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">		</span><span class="c1">// Slow moves one step</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">second</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">second</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">	</span><span class="c1">// Second advances two.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">		</span><span class="c1">// We don&#39;t have a cycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="min-stackhttpsleetcodecomproblemsmin-stack"><a href="https://leetcode.com/problems/min-stack/">Min Stack</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-174-1"><a class="lnlinks" href="#hl-174-1"> 1</a>
</span><span class="lnt" id="hl-174-2"><a class="lnlinks" href="#hl-174-2"> 2</a>
</span><span class="lnt" id="hl-174-3"><a class="lnlinks" href="#hl-174-3"> 3</a>
</span><span class="lnt" id="hl-174-4"><a class="lnlinks" href="#hl-174-4"> 4</a>
</span><span class="lnt" id="hl-174-5"><a class="lnlinks" href="#hl-174-5"> 5</a>
</span><span class="lnt" id="hl-174-6"><a class="lnlinks" href="#hl-174-6"> 6</a>
</span><span class="lnt" id="hl-174-7"><a class="lnlinks" href="#hl-174-7"> 7</a>
</span><span class="lnt" id="hl-174-8"><a class="lnlinks" href="#hl-174-8"> 8</a>
</span><span class="lnt" id="hl-174-9"><a class="lnlinks" href="#hl-174-9"> 9</a>
</span><span class="lnt" id="hl-174-10"><a class="lnlinks" href="#hl-174-10">10</a>
</span><span class="lnt" id="hl-174-11"><a class="lnlinks" href="#hl-174-11">11</a>
</span><span class="lnt" id="hl-174-12"><a class="lnlinks" href="#hl-174-12">12</a>
</span><span class="lnt" id="hl-174-13"><a class="lnlinks" href="#hl-174-13">13</a>
</span><span class="lnt" id="hl-174-14"><a class="lnlinks" href="#hl-174-14">14</a>
</span><span class="lnt" id="hl-174-15"><a class="lnlinks" href="#hl-174-15">15</a>
</span><span class="lnt" id="hl-174-16"><a class="lnlinks" href="#hl-174-16">16</a>
</span><span class="lnt" id="hl-174-17"><a class="lnlinks" href="#hl-174-17">17</a>
</span><span class="lnt" id="hl-174-18"><a class="lnlinks" href="#hl-174-18">18</a>
</span><span class="lnt" id="hl-174-19"><a class="lnlinks" href="#hl-174-19">19</a>
</span><span class="lnt" id="hl-174-20"><a class="lnlinks" href="#hl-174-20">20</a>
</span><span class="lnt" id="hl-174-21"><a class="lnlinks" href="#hl-174-21">21</a>
</span><span class="lnt" id="hl-174-22"><a class="lnlinks" href="#hl-174-22">22</a>
</span><span class="lnt" id="hl-174-23"><a class="lnlinks" href="#hl-174-23">23</a>
</span><span class="lnt" id="hl-174-24"><a class="lnlinks" href="#hl-174-24">24</a>
</span><span class="lnt" id="hl-174-25"><a class="lnlinks" href="#hl-174-25">25</a>
</span><span class="lnt" id="hl-174-26"><a class="lnlinks" href="#hl-174-26">26</a>
</span><span class="lnt" id="hl-174-27"><a class="lnlinks" href="#hl-174-27">27</a>
</span><span class="lnt" id="hl-174-28"><a class="lnlinks" href="#hl-174-28">28</a>
</span><span class="lnt" id="hl-174-29"><a class="lnlinks" href="#hl-174-29">29</a>
</span><span class="lnt" id="hl-174-30"><a class="lnlinks" href="#hl-174-30">30</a>
</span><span class="lnt" id="hl-174-31"><a class="lnlinks" href="#hl-174-31">31</a>
</span><span class="lnt" id="hl-174-32"><a class="lnlinks" href="#hl-174-32">32</a>
</span><span class="lnt" id="hl-174-33"><a class="lnlinks" href="#hl-174-33">33</a>
</span><span class="lnt" id="hl-174-34"><a class="lnlinks" href="#hl-174-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MinStack</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">MinStack</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Stack</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">push</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="w">		</span><span class="c1">// Push the value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">		</span><span class="c1">// If that value is minimum than we have, update min</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">min</span><span class="p">);</span><span class="w">	</span><span class="c1">// Push the minimum on top of the stack for constant time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">						</span><span class="c1">// minimum retrieval.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">pop</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">pop</span><span class="p">();</span><span class="w">		</span><span class="c1">// Pop the minimum.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">pop</span><span class="p">();</span><span class="w">		</span><span class="c1">// Pop the actual element meant to be popped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w">	</span><span class="c1">// If empty, min is Max int value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">peek</span><span class="p">();</span><span class="w">	</span><span class="c1">// Otherwise, min would be the top most element since we</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">							</span><span class="c1">// always push the minimum on top of any element we push.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">top</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">elementAt</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">-</span><span class="n">2</span><span class="p">);</span><span class="w">	</span><span class="c1">// Top element is actually at second last</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">				</span><span class="c1">// index since the last element is the minimum.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getMin</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="intersection-of-two-linked-listshttpsleetcodecomproblemsintersection-of-two-linked-lists"><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">Intersection of Two Linked Lists</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-175-1"><a class="lnlinks" href="#hl-175-1"> 1</a>
</span><span class="lnt" id="hl-175-2"><a class="lnlinks" href="#hl-175-2"> 2</a>
</span><span class="lnt" id="hl-175-3"><a class="lnlinks" href="#hl-175-3"> 3</a>
</span><span class="lnt" id="hl-175-4"><a class="lnlinks" href="#hl-175-4"> 4</a>
</span><span class="lnt" id="hl-175-5"><a class="lnlinks" href="#hl-175-5"> 5</a>
</span><span class="lnt" id="hl-175-6"><a class="lnlinks" href="#hl-175-6"> 6</a>
</span><span class="lnt" id="hl-175-7"><a class="lnlinks" href="#hl-175-7"> 7</a>
</span><span class="lnt" id="hl-175-8"><a class="lnlinks" href="#hl-175-8"> 8</a>
</span><span class="lnt" id="hl-175-9"><a class="lnlinks" href="#hl-175-9"> 9</a>
</span><span class="lnt" id="hl-175-10"><a class="lnlinks" href="#hl-175-10">10</a>
</span><span class="lnt" id="hl-175-11"><a class="lnlinks" href="#hl-175-11">11</a>
</span><span class="lnt" id="hl-175-12"><a class="lnlinks" href="#hl-175-12">12</a>
</span><span class="lnt" id="hl-175-13"><a class="lnlinks" href="#hl-175-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if you are done traversing any of the lists, make it&#39;s pointer point to the head of the other list and start iterating. The reasoning is that the second time they iterate, they will have traversed exactly the same distance (it&#39;s length plus the other list&#39;s head to the intersecting node) and will meet at the intersecting node.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">getIntersectionNode</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">headA</span><span class="p">,</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="n">headB</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">pA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">headA</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">pB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">headB</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">pA</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">pB</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pA</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">headB</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">pA</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pB</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">headA</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">pB</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">pA</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="two-sum-ii---input-array-is-sortedhttpsleetcodecomproblemstwo-sum-ii-input-array-is-sorted"><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two Sum II - Input array is sorted</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-176-1"><a class="lnlinks" href="#hl-176-1"> 1</a>
</span><span class="lnt" id="hl-176-2"><a class="lnlinks" href="#hl-176-2"> 2</a>
</span><span class="lnt" id="hl-176-3"><a class="lnlinks" href="#hl-176-3"> 3</a>
</span><span class="lnt" id="hl-176-4"><a class="lnlinks" href="#hl-176-4"> 4</a>
</span><span class="lnt" id="hl-176-5"><a class="lnlinks" href="#hl-176-5"> 5</a>
</span><span class="lnt" id="hl-176-6"><a class="lnlinks" href="#hl-176-6"> 6</a>
</span><span class="lnt" id="hl-176-7"><a class="lnlinks" href="#hl-176-7"> 7</a>
</span><span class="lnt" id="hl-176-8"><a class="lnlinks" href="#hl-176-8"> 8</a>
</span><span class="lnt" id="hl-176-9"><a class="lnlinks" href="#hl-176-9"> 9</a>
</span><span class="lnt" id="hl-176-10"><a class="lnlinks" href="#hl-176-10">10</a>
</span><span class="lnt" id="hl-176-11"><a class="lnlinks" href="#hl-176-11">11</a>
</span><span class="lnt" id="hl-176-12"><a class="lnlinks" href="#hl-176-12">12</a>
</span><span class="lnt" id="hl-176-13"><a class="lnlinks" href="#hl-176-13">13</a>
</span><span class="lnt" id="hl-176-14"><a class="lnlinks" href="#hl-176-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">numbers</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w">	</span><span class="c1">// Narrow down the window from both sides until they add up.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">numbers</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">numbers</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w">	</span><span class="c1">// We overshot, so decrease the window from right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">right</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w">	</span><span class="c1">// Undershot, increase windows from left so next sum is more</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">break</span><span class="p">;</span><span class="w">				</span><span class="c1">// Found the two numbers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="p">{</span><span class="n">left</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="p">};</span><span class="w">	</span><span class="c1">// +1 because LeetCode followed 1-n indexing.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="excel-sheet-column-titlehttpsleetcodecomproblemsexcel-sheet-column-title"><a href="https://leetcode.com/problems/excel-sheet-column-title/">Excel Sheet Column Title</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-177-1"><a class="lnlinks" href="#hl-177-1"> 1</a>
</span><span class="lnt" id="hl-177-2"><a class="lnlinks" href="#hl-177-2"> 2</a>
</span><span class="lnt" id="hl-177-3"><a class="lnlinks" href="#hl-177-3"> 3</a>
</span><span class="lnt" id="hl-177-4"><a class="lnlinks" href="#hl-177-4"> 4</a>
</span><span class="lnt" id="hl-177-5"><a class="lnlinks" href="#hl-177-5"> 5</a>
</span><span class="lnt" id="hl-177-6"><a class="lnlinks" href="#hl-177-6"> 6</a>
</span><span class="lnt" id="hl-177-7"><a class="lnlinks" href="#hl-177-7"> 7</a>
</span><span class="lnt" id="hl-177-8"><a class="lnlinks" href="#hl-177-8"> 8</a>
</span><span class="lnt" id="hl-177-9"><a class="lnlinks" href="#hl-177-9"> 9</a>
</span><span class="lnt" id="hl-177-10"><a class="lnlinks" href="#hl-177-10">10</a>
</span><span class="lnt" id="hl-177-11"><a class="lnlinks" href="#hl-177-11">11</a>
</span><span class="lnt" id="hl-177-12"><a class="lnlinks" href="#hl-177-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">convertToTitle</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="cm">/* 1 is A and 26 is Z, so n-1 to change it to 0-25 scheme. Then, % 26 to find how
</span></span></span><span class="line"><span class="cl"><span class="cm">        much it is off on a full alphabet cycle, add 65 (ASCII for A) and convert it to char
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">String</span><span class="p">.</span><span class="na">valueOf</span><span class="p">((</span><span class="kt">char</span><span class="p">)(</span><span class="n">65</span><span class="o">+</span><span class="p">((</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="o">%</span><span class="n">26</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">26</span><span class="p">;</span><span class="w">	</span><span class="c1">// Subtract 1 and divide by 26 to get prepare for the next character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="majority-elementhttpsleetcodecomproblemsmajority-element"><a href="https://leetcode.com/problems/majority-element/">Majority Element</a></h3>
<p>Uses <a href="https://www.geeksforgeeks.org/majority-element/">Moore&rsquo;s Algorithm</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-178-1"><a class="lnlinks" href="#hl-178-1"> 1</a>
</span><span class="lnt" id="hl-178-2"><a class="lnlinks" href="#hl-178-2"> 2</a>
</span><span class="lnt" id="hl-178-3"><a class="lnlinks" href="#hl-178-3"> 3</a>
</span><span class="lnt" id="hl-178-4"><a class="lnlinks" href="#hl-178-4"> 4</a>
</span><span class="lnt" id="hl-178-5"><a class="lnlinks" href="#hl-178-5"> 5</a>
</span><span class="lnt" id="hl-178-6"><a class="lnlinks" href="#hl-178-6"> 6</a>
</span><span class="lnt" id="hl-178-7"><a class="lnlinks" href="#hl-178-7"> 7</a>
</span><span class="lnt" id="hl-178-8"><a class="lnlinks" href="#hl-178-8"> 8</a>
</span><span class="lnt" id="hl-178-9"><a class="lnlinks" href="#hl-178-9"> 9</a>
</span><span class="lnt" id="hl-178-10"><a class="lnlinks" href="#hl-178-10">10</a>
</span><span class="lnt" id="hl-178-11"><a class="lnlinks" href="#hl-178-11">11</a>
</span><span class="lnt" id="hl-178-12"><a class="lnlinks" href="#hl-178-12">12</a>
</span><span class="lnt" id="hl-178-13"><a class="lnlinks" href="#hl-178-13">13</a>
</span><span class="lnt" id="hl-178-14"><a class="lnlinks" href="#hl-178-14">14</a>
</span><span class="lnt" id="hl-178-15"><a class="lnlinks" href="#hl-178-15">15</a>
</span><span class="lnt" id="hl-178-16"><a class="lnlinks" href="#hl-178-16">16</a>
</span><span class="lnt" id="hl-178-17"><a class="lnlinks" href="#hl-178-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// This is the implementation of Moore&#39;s Algorithm for O(n) complexity.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">majorityElement</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">major</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">major</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="excel-sheet-column-numberhttpsleetcodecomproblemsexcel-sheet-column-number"><a href="https://leetcode.com/problems/excel-sheet-column-number/">Excel Sheet Column Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-179-1"><a class="lnlinks" href="#hl-179-1"> 1</a>
</span><span class="lnt" id="hl-179-2"><a class="lnlinks" href="#hl-179-2"> 2</a>
</span><span class="lnt" id="hl-179-3"><a class="lnlinks" href="#hl-179-3"> 3</a>
</span><span class="lnt" id="hl-179-4"><a class="lnlinks" href="#hl-179-4"> 4</a>
</span><span class="lnt" id="hl-179-5"><a class="lnlinks" href="#hl-179-5"> 5</a>
</span><span class="lnt" id="hl-179-6"><a class="lnlinks" href="#hl-179-6"> 6</a>
</span><span class="lnt" id="hl-179-7"><a class="lnlinks" href="#hl-179-7"> 7</a>
</span><span class="lnt" id="hl-179-8"><a class="lnlinks" href="#hl-179-8"> 8</a>
</span><span class="lnt" id="hl-179-9"><a class="lnlinks" href="#hl-179-9"> 9</a>
</span><span class="lnt" id="hl-179-10"><a class="lnlinks" href="#hl-179-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Start from the end of String s, compute the ASCII for the char, +1 for 1-26 Alphabet-Scheme (hence -64 instead of -65) and multiply it to 26^{distance from the end of the string}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">titleToNumber</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">total</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-</span><span class="n">64</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">26</span><span class="p">,</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">total</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="factorial-trailing-zeroeshttpsleetcodecomproblemsfactorial-trailing-zeroes"><a href="https://leetcode.com/problems/factorial-trailing-zeroes/">Factorial Trailing Zeroes</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-180-1"><a class="lnlinks" href="#hl-180-1"> 1</a>
</span><span class="lnt" id="hl-180-2"><a class="lnlinks" href="#hl-180-2"> 2</a>
</span><span class="lnt" id="hl-180-3"><a class="lnlinks" href="#hl-180-3"> 3</a>
</span><span class="lnt" id="hl-180-4"><a class="lnlinks" href="#hl-180-4"> 4</a>
</span><span class="lnt" id="hl-180-5"><a class="lnlinks" href="#hl-180-5"> 5</a>
</span><span class="lnt" id="hl-180-6"><a class="lnlinks" href="#hl-180-6"> 6</a>
</span><span class="lnt" id="hl-180-7"><a class="lnlinks" href="#hl-180-7"> 7</a>
</span><span class="lnt" id="hl-180-8"><a class="lnlinks" href="#hl-180-8"> 8</a>
</span><span class="lnt" id="hl-180-9"><a class="lnlinks" href="#hl-180-9"> 9</a>
</span><span class="lnt" id="hl-180-10"><a class="lnlinks" href="#hl-180-10">10</a>
</span><span class="lnt" id="hl-180-11"><a class="lnlinks" href="#hl-180-11">11</a>
</span><span class="lnt" id="hl-180-12"><a class="lnlinks" href="#hl-180-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that every factorial that has 5 as a multiple also has 2 to multiply to 10. So if we can count the number of times we can divide n by 5, should gives us the number of trailing zeroes. O(log(n) base 5) complexity.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">trailingZeroes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">res</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="combine-two-tableshttpsleetcodecomproblemscombine-two-tables"><a href="https://leetcode.com/problems/combine-two-tables/">Combine Two Tables</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-181-1"><a class="lnlinks" href="#hl-181-1">1</a>
</span><span class="lnt" id="hl-181-2"><a class="lnlinks" href="#hl-181-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">FirstName</span><span class="p">,</span><span class="w"> </span><span class="n">LastName</span><span class="p">,</span><span class="w"> </span><span class="n">City</span><span class="p">,</span><span class="w"> </span><span class="n">State</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">Address</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">Address</span><span class="p">.</span><span class="n">personId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">personId</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="second-highest-salaryhttpsleetcodecomproblemssecond-highest-salary"><a href="https://leetcode.com/problems/second-highest-salary/">Second Highest Salary</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-182-1"><a class="lnlinks" href="#hl-182-1">1</a>
</span><span class="lnt" id="hl-182-2"><a class="lnlinks" href="#hl-182-2">2</a>
</span><span class="lnt" id="hl-182-3"><a class="lnlinks" href="#hl-182-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">SecondHighestSalary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">employee</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="employees-earning-more-than-their-managershttpsleetcodecomproblemsemployees-earning-more-than-their-managers"><a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/">Employees Earning More Than Their Managers</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-183-1"><a class="lnlinks" href="#hl-183-1">1</a>
</span><span class="lnt" id="hl-183-2"><a class="lnlinks" href="#hl-183-2">2</a>
</span><span class="lnt" id="hl-183-3"><a class="lnlinks" href="#hl-183-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">Name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">emp</span><span class="p">,</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">man</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">managerId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">Id</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">salary</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">salary</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="duplicate-emailshttpsleetcodecomproblemsduplicate-emails"><a href="https://leetcode.com/problems/duplicate-emails/">Duplicate Emails</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-184-1"><a class="lnlinks" href="#hl-184-1">1</a>
</span><span class="lnt" id="hl-184-2"><a class="lnlinks" href="#hl-184-2">2</a>
</span><span class="lnt" id="hl-184-3"><a class="lnlinks" href="#hl-184-3">3</a>
</span><span class="lnt" id="hl-184-4"><a class="lnlinks" href="#hl-184-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">email</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">having</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="customers-who-never-orderhttpsleetcodecomproblemscustomers-who-never-order"><a href="https://leetcode.com/problems/customers-who-never-order/">Customers Who Never Order</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-185-1"><a class="lnlinks" href="#hl-185-1">1</a>
</span><span class="lnt" id="hl-185-2"><a class="lnlinks" href="#hl-185-2">2</a>
</span><span class="lnt" id="hl-185-3"><a class="lnlinks" href="#hl-185-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">customers</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">customerId</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">orders</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rotate-arrayhttpsleetcodecomproblemsrotate-array"><a href="https://leetcode.com/problems/rotate-array/">Rotate Array</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-186-1"><a class="lnlinks" href="#hl-186-1"> 1</a>
</span><span class="lnt" id="hl-186-2"><a class="lnlinks" href="#hl-186-2"> 2</a>
</span><span class="lnt" id="hl-186-3"><a class="lnlinks" href="#hl-186-3"> 3</a>
</span><span class="lnt" id="hl-186-4"><a class="lnlinks" href="#hl-186-4"> 4</a>
</span><span class="lnt" id="hl-186-5"><a class="lnlinks" href="#hl-186-5"> 5</a>
</span><span class="lnt" id="hl-186-6"><a class="lnlinks" href="#hl-186-6"> 6</a>
</span><span class="lnt" id="hl-186-7"><a class="lnlinks" href="#hl-186-7"> 7</a>
</span><span class="lnt" id="hl-186-8"><a class="lnlinks" href="#hl-186-8"> 8</a>
</span><span class="lnt" id="hl-186-9"><a class="lnlinks" href="#hl-186-9"> 9</a>
</span><span class="lnt" id="hl-186-10"><a class="lnlinks" href="#hl-186-10">10</a>
</span><span class="lnt" id="hl-186-11"><a class="lnlinks" href="#hl-186-11">11</a>
</span><span class="lnt" id="hl-186-12"><a class="lnlinks" href="#hl-186-12">12</a>
</span><span class="lnt" id="hl-186-13"><a class="lnlinks" href="#hl-186-13">13</a>
</span><span class="lnt" id="hl-186-14"><a class="lnlinks" href="#hl-186-14">14</a>
</span><span class="lnt" id="hl-186-15"><a class="lnlinks" href="#hl-186-15">15</a>
</span><span class="lnt" id="hl-186-16"><a class="lnlinks" href="#hl-186-16">16</a>
</span><span class="lnt" id="hl-186-17"><a class="lnlinks" href="#hl-186-17">17</a>
</span><span class="lnt" id="hl-186-18"><a class="lnlinks" href="#hl-186-18">18</a>
</span><span class="lnt" id="hl-186-19"><a class="lnlinks" href="#hl-186-19">19</a>
</span><span class="lnt" id="hl-186-20"><a class="lnlinks" href="#hl-186-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">rotate</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">k</span><span class="w"> </span><span class="o">%=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">		</span><span class="c1">// k == nums.length ? Then it&#39;s a full rotation and no change</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">k</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// First reverse the full array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">				</span><span class="c1">// Then reverse element from index 0 to k-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// Then reverse all elements from k to end of Array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Reverse function that reverses the array from specified indices.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">reverse</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">end</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">start</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">end</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="delete-duplicate-emailshttpsleetcodecomproblemsdelete-duplicate-emails"><a href="https://leetcode.com/problems/delete-duplicate-emails/">Delete Duplicate Emails</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-187-1"><a class="lnlinks" href="#hl-187-1">1</a>
</span><span class="lnt" id="hl-187-2"><a class="lnlinks" href="#hl-187-2">2</a>
</span><span class="lnt" id="hl-187-3"><a class="lnlinks" href="#hl-187-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">delete</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">min</span><span class="p">(</span><span class="n">Id</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">Email</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rising-temperaturehttpsleetcodecomproblemsrising-temperature"><a href="https://leetcode.com/problems/rising-temperature/">Rising Temperature</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-188-1"><a class="lnlinks" href="#hl-188-1">1</a>
</span><span class="lnt" id="hl-188-2"><a class="lnlinks" href="#hl-188-2">2</a>
</span><span class="lnt" id="hl-188-3"><a class="lnlinks" href="#hl-188-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w1</span><span class="p">,</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="nf">Datediff</span><span class="p">(</span><span class="n">w2</span><span class="p">.</span><span class="n">recorddate</span><span class="p">,</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">recorddate</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">temperature</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">temperature</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="x-of-a-kind-in-a-deck-of-cardshttpsleetcodecomproblemsx-of-a-kind-in-a-deck-of-cards"><a href="https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/">X of a Kind in a Deck of Cards</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-189-1"><a class="lnlinks" href="#hl-189-1"> 1</a>
</span><span class="lnt" id="hl-189-2"><a class="lnlinks" href="#hl-189-2"> 2</a>
</span><span class="lnt" id="hl-189-3"><a class="lnlinks" href="#hl-189-3"> 3</a>
</span><span class="lnt" id="hl-189-4"><a class="lnlinks" href="#hl-189-4"> 4</a>
</span><span class="lnt" id="hl-189-5"><a class="lnlinks" href="#hl-189-5"> 5</a>
</span><span class="lnt" id="hl-189-6"><a class="lnlinks" href="#hl-189-6"> 6</a>
</span><span class="lnt" id="hl-189-7"><a class="lnlinks" href="#hl-189-7"> 7</a>
</span><span class="lnt" id="hl-189-8"><a class="lnlinks" href="#hl-189-8"> 8</a>
</span><span class="lnt" id="hl-189-9"><a class="lnlinks" href="#hl-189-9"> 9</a>
</span><span class="lnt" id="hl-189-10"><a class="lnlinks" href="#hl-189-10">10</a>
</span><span class="lnt" id="hl-189-11"><a class="lnlinks" href="#hl-189-11">11</a>
</span><span class="lnt" id="hl-189-12"><a class="lnlinks" href="#hl-189-12">12</a>
</span><span class="lnt" id="hl-189-13"><a class="lnlinks" href="#hl-189-13">13</a>
</span><span class="lnt" id="hl-189-14"><a class="lnlinks" href="#hl-189-14">14</a>
</span><span class="lnt" id="hl-189-15"><a class="lnlinks" href="#hl-189-15">15</a>
</span><span class="lnt" id="hl-189-16"><a class="lnlinks" href="#hl-189-16">16</a>
</span><span class="lnt" id="hl-189-17"><a class="lnlinks" href="#hl-189-17">17</a>
</span><span class="lnt" id="hl-189-18"><a class="lnlinks" href="#hl-189-18">18</a>
</span><span class="lnt" id="hl-189-19"><a class="lnlinks" href="#hl-189-19">19</a>
</span><span class="lnt" id="hl-189-20"><a class="lnlinks" href="#hl-189-20">20</a>
</span><span class="lnt" id="hl-189-21"><a class="lnlinks" href="#hl-189-21">21</a>
</span><span class="lnt" id="hl-189-22"><a class="lnlinks" href="#hl-189-22">22</a>
</span><span class="lnt" id="hl-189-23"><a class="lnlinks" href="#hl-189-23">23</a>
</span><span class="lnt" id="hl-189-24"><a class="lnlinks" href="#hl-189-24">24</a>
</span><span class="lnt" id="hl-189-25"><a class="lnlinks" href="#hl-189-25">25</a>
</span><span class="lnt" id="hl-189-26"><a class="lnlinks" href="#hl-189-26">26</a>
</span><span class="lnt" id="hl-189-27"><a class="lnlinks" href="#hl-189-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">hasGroupsSizeX</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">deck</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">deck</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">		</span><span class="c1">// Record the frequencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">freq</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="n">freq</span><span class="p">.</span><span class="na">getOrDefault</span><span class="p">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="n">0</span><span class="p">)</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">deck = [1,1,2,2,2,2,3,3,3,3,3,3]
</span></span></span><span class="line"><span class="cl"><span class="cm">number 1 has len of 2, number 2 has len of 4, number 3 has len of 6, they share a Greatest common divisor of 2, which means diving them into group of size X = 2, will be valid. Thus we just have to ensure each length (of a number) shares a Greatest Common Divisor that&#39;s &gt;= 2.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">hcf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">freq</span><span class="p">.</span><span class="na">keySet</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">hcf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gcd</span><span class="p">(</span><span class="n">hcf</span><span class="p">,</span><span class="w"> </span><span class="n">freq</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">hcf</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">gcd</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-integerhttpsleetcodecomproblemsreverse-integersolution"><a href="https://leetcode.com/problems/reverse-integer/solution/">Reverse Integer</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-190-1"><a class="lnlinks" href="#hl-190-1"> 1</a>
</span><span class="lnt" id="hl-190-2"><a class="lnlinks" href="#hl-190-2"> 2</a>
</span><span class="lnt" id="hl-190-3"><a class="lnlinks" href="#hl-190-3"> 3</a>
</span><span class="lnt" id="hl-190-4"><a class="lnlinks" href="#hl-190-4"> 4</a>
</span><span class="lnt" id="hl-190-5"><a class="lnlinks" href="#hl-190-5"> 5</a>
</span><span class="lnt" id="hl-190-6"><a class="lnlinks" href="#hl-190-6"> 6</a>
</span><span class="lnt" id="hl-190-7"><a class="lnlinks" href="#hl-190-7"> 7</a>
</span><span class="lnt" id="hl-190-8"><a class="lnlinks" href="#hl-190-8"> 8</a>
</span><span class="lnt" id="hl-190-9"><a class="lnlinks" href="#hl-190-9"> 9</a>
</span><span class="lnt" id="hl-190-10"><a class="lnlinks" href="#hl-190-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">reverse</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sign</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">sign</span><span class="p">;</span><span class="w">							</span><span class="c1">// Make x positive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">10</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">				</span><span class="c1">// Start adding from the end.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">x</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">n</span><span class="o">*</span><span class="n">sign</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">	</span><span class="c1">// Try converting to int from long, if no change,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// Return n * sign, else 0 cause overflow.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-two-numbershttpsleetcodecomproblemsadd-two-numberssubmissions"><a href="https://leetcode.com/problems/add-two-numbers/submissions/">Add Two Numbers</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-191-1"><a class="lnlinks" href="#hl-191-1"> 1</a>
</span><span class="lnt" id="hl-191-2"><a class="lnlinks" href="#hl-191-2"> 2</a>
</span><span class="lnt" id="hl-191-3"><a class="lnlinks" href="#hl-191-3"> 3</a>
</span><span class="lnt" id="hl-191-4"><a class="lnlinks" href="#hl-191-4"> 4</a>
</span><span class="lnt" id="hl-191-5"><a class="lnlinks" href="#hl-191-5"> 5</a>
</span><span class="lnt" id="hl-191-6"><a class="lnlinks" href="#hl-191-6"> 6</a>
</span><span class="lnt" id="hl-191-7"><a class="lnlinks" href="#hl-191-7"> 7</a>
</span><span class="lnt" id="hl-191-8"><a class="lnlinks" href="#hl-191-8"> 8</a>
</span><span class="lnt" id="hl-191-9"><a class="lnlinks" href="#hl-191-9"> 9</a>
</span><span class="lnt" id="hl-191-10"><a class="lnlinks" href="#hl-191-10">10</a>
</span><span class="lnt" id="hl-191-11"><a class="lnlinks" href="#hl-191-11">11</a>
</span><span class="lnt" id="hl-191-12"><a class="lnlinks" href="#hl-191-12">12</a>
</span><span class="lnt" id="hl-191-13"><a class="lnlinks" href="#hl-191-13">13</a>
</span><span class="lnt" id="hl-191-14"><a class="lnlinks" href="#hl-191-14">14</a>
</span><span class="lnt" id="hl-191-15"><a class="lnlinks" href="#hl-191-15">15</a>
</span><span class="lnt" id="hl-191-16"><a class="lnlinks" href="#hl-191-16">16</a>
</span><span class="lnt" id="hl-191-17"><a class="lnlinks" href="#hl-191-17">17</a>
</span><span class="lnt" id="hl-191-18"><a class="lnlinks" href="#hl-191-18">18</a>
</span><span class="lnt" id="hl-191-19"><a class="lnlinks" href="#hl-191-19">19</a>
</span><span class="lnt" id="hl-191-20"><a class="lnlinks" href="#hl-191-20">20</a>
</span><span class="lnt" id="hl-191-21"><a class="lnlinks" href="#hl-191-21">21</a>
</span><span class="lnt" id="hl-191-22"><a class="lnlinks" href="#hl-191-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">l1</span><span class="p">,</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="n">l2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">carry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">							</span><span class="c1">// To record the carry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">							</span><span class="c1">// To record the total of two vals</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">dummy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">		</span><span class="c1">// Dummy&#39;s next is the actual head</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dummy</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">do</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">						</span><span class="c1">// If one of the node is null, we set it to a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">l1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">			</span><span class="c1">// dummy value of 0 so we can adjust for</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">l2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">						</span><span class="c1">// different length of the two lists.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">l2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l1</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">carry</span><span class="p">;</span><span class="w">		</span><span class="c1">// Add the two vals and the carry.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">carry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">			</span><span class="c1">// Record the carry for the next iteration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">sum</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="p">);</span><span class="w">	</span><span class="c1">// next node&#39;s value is sum % 10.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">					</span><span class="c1">// advance current, l1 and l2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">l1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l1</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">l2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">l2</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="p">(</span><span class="n">l1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">l2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">carry</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">							</span><span class="c1">// In the end, if carry is 1, it was from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">carry</span><span class="p">);</span><span class="w">	</span><span class="c1">// from adding last terms, so make next node 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">						</span><span class="c1">// Return the actual head.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-substring-without-repeating-charactershttpsleetcodecomproblemslongest-substring-without-repeating-characters"><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-192-1"><a class="lnlinks" href="#hl-192-1"> 1</a>
</span><span class="lnt" id="hl-192-2"><a class="lnlinks" href="#hl-192-2"> 2</a>
</span><span class="lnt" id="hl-192-3"><a class="lnlinks" href="#hl-192-3"> 3</a>
</span><span class="lnt" id="hl-192-4"><a class="lnlinks" href="#hl-192-4"> 4</a>
</span><span class="lnt" id="hl-192-5"><a class="lnlinks" href="#hl-192-5"> 5</a>
</span><span class="lnt" id="hl-192-6"><a class="lnlinks" href="#hl-192-6"> 6</a>
</span><span class="lnt" id="hl-192-7"><a class="lnlinks" href="#hl-192-7"> 7</a>
</span><span class="lnt" id="hl-192-8"><a class="lnlinks" href="#hl-192-8"> 8</a>
</span><span class="lnt" id="hl-192-9"><a class="lnlinks" href="#hl-192-9"> 9</a>
</span><span class="lnt" id="hl-192-10"><a class="lnlinks" href="#hl-192-10">10</a>
</span><span class="lnt" id="hl-192-11"><a class="lnlinks" href="#hl-192-11">11</a>
</span><span class="lnt" id="hl-192-12"><a class="lnlinks" href="#hl-192-12">12</a>
</span><span class="lnt" id="hl-192-13"><a class="lnlinks" href="#hl-192-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">]</span><span class="p">;</span><span class="w">					</span><span class="c1">// To store the occurence of characters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">maxLength</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">		</span><span class="c1">// Check the most recent index of character.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">maxLength</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">maxLength</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// That minus current pointer gives length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// Record the index of the next character.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">maxLength</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="house-robberhttpsleetcodecomproblemshouse-robber"><a href="https://leetcode.com/problems/house-robber">House Robber</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-193-1"><a class="lnlinks" href="#hl-193-1"> 1</a>
</span><span class="lnt" id="hl-193-2"><a class="lnlinks" href="#hl-193-2"> 2</a>
</span><span class="lnt" id="hl-193-3"><a class="lnlinks" href="#hl-193-3"> 3</a>
</span><span class="lnt" id="hl-193-4"><a class="lnlinks" href="#hl-193-4"> 4</a>
</span><span class="lnt" id="hl-193-5"><a class="lnlinks" href="#hl-193-5"> 5</a>
</span><span class="lnt" id="hl-193-6"><a class="lnlinks" href="#hl-193-6"> 6</a>
</span><span class="lnt" id="hl-193-7"><a class="lnlinks" href="#hl-193-7"> 7</a>
</span><span class="lnt" id="hl-193-8"><a class="lnlinks" href="#hl-193-8"> 8</a>
</span><span class="lnt" id="hl-193-9"><a class="lnlinks" href="#hl-193-9"> 9</a>
</span><span class="lnt" id="hl-193-10"><a class="lnlinks" href="#hl-193-10">10</a>
</span><span class="lnt" id="hl-193-11"><a class="lnlinks" href="#hl-193-11">11</a>
</span><span class="lnt" id="hl-193-12"><a class="lnlinks" href="#hl-193-12">12</a>
</span><span class="lnt" id="hl-193-13"><a class="lnlinks" href="#hl-193-13">13</a>
</span><span class="lnt" id="hl-193-14"><a class="lnlinks" href="#hl-193-14">14</a>
</span><span class="lnt" id="hl-193-15"><a class="lnlinks" href="#hl-193-15">15</a>
</span><span class="lnt" id="hl-193-16"><a class="lnlinks" href="#hl-193-16">16</a>
</span><span class="lnt" id="hl-193-17"><a class="lnlinks" href="#hl-193-17">17</a>
</span><span class="lnt" id="hl-193-18"><a class="lnlinks" href="#hl-193-18">18</a>
</span><span class="lnt" id="hl-193-19"><a class="lnlinks" href="#hl-193-19">19</a>
</span><span class="lnt" id="hl-193-20"><a class="lnlinks" href="#hl-193-20">20</a>
</span><span class="lnt" id="hl-193-21"><a class="lnlinks" href="#hl-193-21">21</a>
</span><span class="lnt" id="hl-193-22"><a class="lnlinks" href="#hl-193-22">22</a>
</span><span class="lnt" id="hl-193-23"><a class="lnlinks" href="#hl-193-23">23</a>
</span><span class="lnt" id="hl-193-24"><a class="lnlinks" href="#hl-193-24">24</a>
</span><span class="lnt" id="hl-193-25"><a class="lnlinks" href="#hl-193-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea is that if you are robbing house i, the maximum loot may come from by robbing the i-2th house or by robbing the i-3th house. Therefore rob both and then find the path that gave the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Example: loot = [1,9,3,8,4,3,6,4,3,5,7,6]
</span></span></span><span class="line"><span class="cl"><span class="cm">Profit DP = [1,9,4,17,13,20,23,24,26,29,33,35]
</span></span></span><span class="line"><span class="cl"><span class="cm">Here,
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[2] = loot[2] + loot[1]
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[4] = loot[4] + max(dp[2], dp[1])
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[5] = loot[5] + max(dp[3], dp[2]) and so on.
</span></span></span><span class="line"><span class="cl"><span class="cm">In the end, just compare the last two elements to check which path gave us the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Some people might not prefer modifying the original nums array. In that case, you can initialize another dp array of same length, initialize the first two elements as dp[0] = nums[0] and dp[1] = nums[1] and dp[3] = nums[0] + nums[2] and then performing the same loop. In that case, you would be using O(n) space.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">rob</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">			</span><span class="c1">// 3 Base Case</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">]</span><span class="p">;</span><span class="w">				</span><span class="c1">// House 3 profit is rob House 1 and 3.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">3</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="happy-numberhttpsleetcodecomproblemshappy-numbersubmissions"><a href="https://leetcode.com/problems/happy-number/submissions/">Happy Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-194-1"><a class="lnlinks" href="#hl-194-1"> 1</a>
</span><span class="lnt" id="hl-194-2"><a class="lnlinks" href="#hl-194-2"> 2</a>
</span><span class="lnt" id="hl-194-3"><a class="lnlinks" href="#hl-194-3"> 3</a>
</span><span class="lnt" id="hl-194-4"><a class="lnlinks" href="#hl-194-4"> 4</a>
</span><span class="lnt" id="hl-194-5"><a class="lnlinks" href="#hl-194-5"> 5</a>
</span><span class="lnt" id="hl-194-6"><a class="lnlinks" href="#hl-194-6"> 6</a>
</span><span class="lnt" id="hl-194-7"><a class="lnlinks" href="#hl-194-7"> 7</a>
</span><span class="lnt" id="hl-194-8"><a class="lnlinks" href="#hl-194-8"> 8</a>
</span><span class="lnt" id="hl-194-9"><a class="lnlinks" href="#hl-194-9"> 9</a>
</span><span class="lnt" id="hl-194-10"><a class="lnlinks" href="#hl-194-10">10</a>
</span><span class="lnt" id="hl-194-11"><a class="lnlinks" href="#hl-194-11">11</a>
</span><span class="lnt" id="hl-194-12"><a class="lnlinks" href="#hl-194-12">12</a>
</span><span class="lnt" id="hl-194-13"><a class="lnlinks" href="#hl-194-13">13</a>
</span><span class="lnt" id="hl-194-14"><a class="lnlinks" href="#hl-194-14">14</a>
</span><span class="lnt" id="hl-194-15"><a class="lnlinks" href="#hl-194-15">15</a>
</span><span class="lnt" id="hl-194-16"><a class="lnlinks" href="#hl-194-16">16</a>
</span><span class="lnt" id="hl-194-17"><a class="lnlinks" href="#hl-194-17">17</a>
</span><span class="lnt" id="hl-194-18"><a class="lnlinks" href="#hl-194-18">18</a>
</span><span class="lnt" id="hl-194-19"><a class="lnlinks" href="#hl-194-19">19</a>
</span><span class="lnt" id="hl-194-20"><a class="lnlinks" href="#hl-194-20">20</a>
</span><span class="lnt" id="hl-194-21"><a class="lnlinks" href="#hl-194-21">21</a>
</span><span class="lnt" id="hl-194-22"><a class="lnlinks" href="#hl-194-22">22</a>
</span><span class="lnt" id="hl-194-23"><a class="lnlinks" href="#hl-194-23">23</a>
</span><span class="lnt" id="hl-194-24"><a class="lnlinks" href="#hl-194-24">24</a>
</span><span class="lnt" id="hl-194-25"><a class="lnlinks" href="#hl-194-25">25</a>
</span><span class="lnt" id="hl-194-26"><a class="lnlinks" href="#hl-194-26">26</a>
</span><span class="lnt" id="hl-194-27"><a class="lnlinks" href="#hl-194-27">27</a>
</span><span class="lnt" id="hl-194-28"><a class="lnlinks" href="#hl-194-28">28</a>
</span><span class="lnt" id="hl-194-29"><a class="lnlinks" href="#hl-194-29">29</a>
</span><span class="lnt" id="hl-194-30"><a class="lnlinks" href="#hl-194-30">30</a>
</span><span class="lnt" id="hl-194-31"><a class="lnlinks" href="#hl-194-31">31</a>
</span><span class="lnt" id="hl-194-32"><a class="lnlinks" href="#hl-194-32">32</a>
</span><span class="lnt" id="hl-194-33"><a class="lnlinks" href="#hl-194-33">33</a>
</span><span class="lnt" id="hl-194-34"><a class="lnlinks" href="#hl-194-34">34</a>
</span><span class="lnt" id="hl-194-35"><a class="lnlinks" href="#hl-194-35">35</a>
</span><span class="lnt" id="hl-194-36"><a class="lnlinks" href="#hl-194-36">36</a>
</span><span class="lnt" id="hl-194-37"><a class="lnlinks" href="#hl-194-37">37</a>
</span><span class="lnt" id="hl-194-38"><a class="lnlinks" href="#hl-194-38">38</a>
</span><span class="lnt" id="hl-194-39"><a class="lnlinks" href="#hl-194-39">39</a>
</span><span class="lnt" id="hl-194-40"><a class="lnlinks" href="#hl-194-40">40</a>
</span><span class="lnt" id="hl-194-41"><a class="lnlinks" href="#hl-194-41">41</a>
</span><span class="lnt" id="hl-194-42"><a class="lnlinks" href="#hl-194-42">42</a>
</span><span class="lnt" id="hl-194-43"><a class="lnlinks" href="#hl-194-43">43</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isHappy</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">isHappyConstantSpace</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">		</span><span class="c1">// Much faster than set method</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//return isHappySet(n);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isHappyConstantSpace</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">numSeenLessThan10</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">		</span><span class="c1">// If I see 10 single digits, then it means that I am</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">					</span><span class="c1">// now starting to see repititions.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">)</span><span class="w">					</span><span class="c1">// Each time I see a num &lt; 10, increment the counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">numSeenLessThan10</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">numSeenLessThan10</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">9</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getSquare</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">			</span><span class="c1">// Get the total of square of its digits.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you see a repition, it can&#39;t be a happy number, so keep track of digit square obtained so far. If they hit 1, well and good, otherwise there will be some repition, so return false.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isHappySet</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">seen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">		</span><span class="c1">// Keep track of numbers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getSquare</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">							</span><span class="c1">// Get the sum of digits square</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">									</span><span class="c1">// If it&#39;s 1, it&#39;s a happy number</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">seen</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="n">n</span><span class="p">))</span><span class="w">					</span><span class="c1">// If it&#39;s a repition of something</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">							</span><span class="c1">// seen before, it&#39;s not a happy no.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">seen</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">							</span><span class="c1">// If not seen, add it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getSquare</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">		</span><span class="c1">// Add the squares of the digits.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">digit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">total</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">digit</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">digit</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">n</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">total</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="remove-linked-list-elementshttpsleetcodecomproblemsremove-linked-list-elements"><a href="https://leetcode.com/problems/remove-linked-list-elements/">Remove Linked List Elements</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-195-1"><a class="lnlinks" href="#hl-195-1"> 1</a>
</span><span class="lnt" id="hl-195-2"><a class="lnlinks" href="#hl-195-2"> 2</a>
</span><span class="lnt" id="hl-195-3"><a class="lnlinks" href="#hl-195-3"> 3</a>
</span><span class="lnt" id="hl-195-4"><a class="lnlinks" href="#hl-195-4"> 4</a>
</span><span class="lnt" id="hl-195-5"><a class="lnlinks" href="#hl-195-5"> 5</a>
</span><span class="lnt" id="hl-195-6"><a class="lnlinks" href="#hl-195-6"> 6</a>
</span><span class="lnt" id="hl-195-7"><a class="lnlinks" href="#hl-195-7"> 7</a>
</span><span class="lnt" id="hl-195-8"><a class="lnlinks" href="#hl-195-8"> 8</a>
</span><span class="lnt" id="hl-195-9"><a class="lnlinks" href="#hl-195-9"> 9</a>
</span><span class="lnt" id="hl-195-10"><a class="lnlinks" href="#hl-195-10">10</a>
</span><span class="lnt" id="hl-195-11"><a class="lnlinks" href="#hl-195-11">11</a>
</span><span class="lnt" id="hl-195-12"><a class="lnlinks" href="#hl-195-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">removeElements</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">				</span><span class="c1">// While head contains the val, skip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">head</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">								</span><span class="c1">// the head</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">	</span><span class="c1">// While we have something to iterate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">					</span><span class="c1">// If current&#39;s val match, skip the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">			</span><span class="c1">// next node.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">						</span><span class="c1">// Else advance to the next node.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="count-primeshttpsleetcodecomproblemscount-primessubmissions"><a href="https://leetcode.com/problems/count-primes/submissions/">Count Primes</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-196-1"><a class="lnlinks" href="#hl-196-1"> 1</a>
</span><span class="lnt" id="hl-196-2"><a class="lnlinks" href="#hl-196-2"> 2</a>
</span><span class="lnt" id="hl-196-3"><a class="lnlinks" href="#hl-196-3"> 3</a>
</span><span class="lnt" id="hl-196-4"><a class="lnlinks" href="#hl-196-4"> 4</a>
</span><span class="lnt" id="hl-196-5"><a class="lnlinks" href="#hl-196-5"> 5</a>
</span><span class="lnt" id="hl-196-6"><a class="lnlinks" href="#hl-196-6"> 6</a>
</span><span class="lnt" id="hl-196-7"><a class="lnlinks" href="#hl-196-7"> 7</a>
</span><span class="lnt" id="hl-196-8"><a class="lnlinks" href="#hl-196-8"> 8</a>
</span><span class="lnt" id="hl-196-9"><a class="lnlinks" href="#hl-196-9"> 9</a>
</span><span class="lnt" id="hl-196-10"><a class="lnlinks" href="#hl-196-10">10</a>
</span><span class="lnt" id="hl-196-11"><a class="lnlinks" href="#hl-196-11">11</a>
</span><span class="lnt" id="hl-196-12"><a class="lnlinks" href="#hl-196-12">12</a>
</span><span class="lnt" id="hl-196-13"><a class="lnlinks" href="#hl-196-13">13</a>
</span><span class="lnt" id="hl-196-14"><a class="lnlinks" href="#hl-196-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">countPrimes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">							</span><span class="c1">// No prime numbers for numbers &lt; 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// Using Sieve of Eratosthenes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">			</span><span class="c1">// Start from i = 2 to sqrt(n)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w">						</span><span class="c1">// If store[i] = false, then mark all its</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="c1">// multiples in the store as true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">store</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">			</span><span class="c1">// True = not a prime, false = prime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">				</span><span class="c1">// Loop through the array, count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">count</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="isomorphic-stringshttpsleetcodecomproblemsisomorphic-stringssubmissions"><a href="https://leetcode.com/problems/isomorphic-strings/submissions/">Isomorphic Strings</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-197-1"><a class="lnlinks" href="#hl-197-1"> 1</a>
</span><span class="lnt" id="hl-197-2"><a class="lnlinks" href="#hl-197-2"> 2</a>
</span><span class="lnt" id="hl-197-3"><a class="lnlinks" href="#hl-197-3"> 3</a>
</span><span class="lnt" id="hl-197-4"><a class="lnlinks" href="#hl-197-4"> 4</a>
</span><span class="lnt" id="hl-197-5"><a class="lnlinks" href="#hl-197-5"> 5</a>
</span><span class="lnt" id="hl-197-6"><a class="lnlinks" href="#hl-197-6"> 6</a>
</span><span class="lnt" id="hl-197-7"><a class="lnlinks" href="#hl-197-7"> 7</a>
</span><span class="lnt" id="hl-197-8"><a class="lnlinks" href="#hl-197-8"> 8</a>
</span><span class="lnt" id="hl-197-9"><a class="lnlinks" href="#hl-197-9"> 9</a>
</span><span class="lnt" id="hl-197-10"><a class="lnlinks" href="#hl-197-10">10</a>
</span><span class="lnt" id="hl-197-11"><a class="lnlinks" href="#hl-197-11">11</a>
</span><span class="lnt" id="hl-197-12"><a class="lnlinks" href="#hl-197-12">12</a>
</span><span class="lnt" id="hl-197-13"><a class="lnlinks" href="#hl-197-13">13</a>
</span><span class="lnt" id="hl-197-14"><a class="lnlinks" href="#hl-197-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isIsomorphic</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w">			</span><span class="c1">// Can&#39;t be isomorphic is string lengths do not</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">						</span><span class="c1">// match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">hashS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// To store String s&#39; match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">hashT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// To store String t&#39;s match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">charS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="w"> </span><span class="n">charT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">]</span><span class="p">)</span><span class="w">	</span><span class="c1">// If the values at respective characters index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">					</span><span class="c1">// do not match, return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">			</span><span class="c1">// Otherwise, mark those index with the same</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">			</span><span class="c1">// arbitrary value. I chose a simple (i+1) to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">										</span><span class="c1">// to mark both the hash with the same value.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">							</span><span class="c1">// Everything worked out, return true;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-linkedlisthttpsleetcodecomproblemsreverse-linked-listsolution"><a href="https://leetcode.com/problems/reverse-linked-list/solution/">Reverse LinkedList</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-198-1"><a class="lnlinks" href="#hl-198-1"> 1</a>
</span><span class="lnt" id="hl-198-2"><a class="lnlinks" href="#hl-198-2"> 2</a>
</span><span class="lnt" id="hl-198-3"><a class="lnlinks" href="#hl-198-3"> 3</a>
</span><span class="lnt" id="hl-198-4"><a class="lnlinks" href="#hl-198-4"> 4</a>
</span><span class="lnt" id="hl-198-5"><a class="lnlinks" href="#hl-198-5"> 5</a>
</span><span class="lnt" id="hl-198-6"><a class="lnlinks" href="#hl-198-6"> 6</a>
</span><span class="lnt" id="hl-198-7"><a class="lnlinks" href="#hl-198-7"> 7</a>
</span><span class="lnt" id="hl-198-8"><a class="lnlinks" href="#hl-198-8"> 8</a>
</span><span class="lnt" id="hl-198-9"><a class="lnlinks" href="#hl-198-9"> 9</a>
</span><span class="lnt" id="hl-198-10"><a class="lnlinks" href="#hl-198-10">10</a>
</span><span class="lnt" id="hl-198-11"><a class="lnlinks" href="#hl-198-11">11</a>
</span><span class="lnt" id="hl-198-12"><a class="lnlinks" href="#hl-198-12">12</a>
</span><span class="lnt" id="hl-198-13"><a class="lnlinks" href="#hl-198-13">13</a>
</span><span class="lnt" id="hl-198-14"><a class="lnlinks" href="#hl-198-14">14</a>
</span><span class="lnt" id="hl-198-15"><a class="lnlinks" href="#hl-198-15">15</a>
</span><span class="lnt" id="hl-198-16"><a class="lnlinks" href="#hl-198-16">16</a>
</span><span class="lnt" id="hl-198-17"><a class="lnlinks" href="#hl-198-17">17</a>
</span><span class="lnt" id="hl-198-18"><a class="lnlinks" href="#hl-198-18">18</a>
</span><span class="lnt" id="hl-198-19"><a class="lnlinks" href="#hl-198-19">19</a>
</span><span class="lnt" id="hl-198-20"><a class="lnlinks" href="#hl-198-20">20</a>
</span><span class="lnt" id="hl-198-21"><a class="lnlinks" href="#hl-198-21">21</a>
</span><span class="lnt" id="hl-198-22"><a class="lnlinks" href="#hl-198-22">22</a>
</span><span class="lnt" id="hl-198-23"><a class="lnlinks" href="#hl-198-23">23</a>
</span><span class="lnt" id="hl-198-24"><a class="lnlinks" href="#hl-198-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Recursive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">	</span><span class="c1">// Very tricky. Refer to the demo below</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reverseList</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">node</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">//Iterative</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">						</span><span class="c1">// No point in reversing empty or 1-sized list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">nextNode</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">curr</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">					</span><span class="c1">// While we haven&#39;t reached the tail</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nextNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">				</span><span class="c1">// Store the next node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev</span><span class="p">;</span><span class="w">					</span><span class="c1">// Current&#39;s next becomes it&#39;s previous</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">;</span><span class="w">						</span><span class="c1">// Advance previous to current.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nextNode</span><span class="p">;</span><span class="w">					</span><span class="c1">// Make current the actual next node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">prev</span><span class="p">;</span><span class="w">							</span><span class="c1">// Current is at null, so it&#39;s previous is the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// new head.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/reverse-a-linked-list-image.webp" alt="reverse Linked list"  />
</p>
<h3 id="contains-duplicatehttpsleetcodecomproblemscontains-duplicatesubmissions"><a href="https://leetcode.com/problems/contains-duplicate/submissions/">Contains Duplicate</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-199-1"><a class="lnlinks" href="#hl-199-1"> 1</a>
</span><span class="lnt" id="hl-199-2"><a class="lnlinks" href="#hl-199-2"> 2</a>
</span><span class="lnt" id="hl-199-3"><a class="lnlinks" href="#hl-199-3"> 3</a>
</span><span class="lnt" id="hl-199-4"><a class="lnlinks" href="#hl-199-4"> 4</a>
</span><span class="lnt" id="hl-199-5"><a class="lnlinks" href="#hl-199-5"> 5</a>
</span><span class="lnt" id="hl-199-6"><a class="lnlinks" href="#hl-199-6"> 6</a>
</span><span class="lnt" id="hl-199-7"><a class="lnlinks" href="#hl-199-7"> 7</a>
</span><span class="lnt" id="hl-199-8"><a class="lnlinks" href="#hl-199-8"> 8</a>
</span><span class="lnt" id="hl-199-9"><a class="lnlinks" href="#hl-199-9"> 9</a>
</span><span class="lnt" id="hl-199-10"><a class="lnlinks" href="#hl-199-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">containsDuplicate</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">							</span><span class="c1">// There can&#39;t be any duplicates.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// Store unique values.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">store</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">))</span><span class="w">						</span><span class="c1">// Add func returns true if n was&#39;nt present,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">						</span><span class="c1">// false if duplicate. Therefore if it was a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">											</span><span class="c1">// duplicate, return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">								</span><span class="c1">// No duplicates, so return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="contains-duplicate-iihttpsleetcodecomproblemscontains-duplicate-ii"><a href="https://leetcode.com/problems/contains-duplicate-ii/">Contains Duplicate II</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-200-1"><a class="lnlinks" href="#hl-200-1"> 1</a>
</span><span class="lnt" id="hl-200-2"><a class="lnlinks" href="#hl-200-2"> 2</a>
</span><span class="lnt" id="hl-200-3"><a class="lnlinks" href="#hl-200-3"> 3</a>
</span><span class="lnt" id="hl-200-4"><a class="lnlinks" href="#hl-200-4"> 4</a>
</span><span class="lnt" id="hl-200-5"><a class="lnlinks" href="#hl-200-5"> 5</a>
</span><span class="lnt" id="hl-200-6"><a class="lnlinks" href="#hl-200-6"> 6</a>
</span><span class="lnt" id="hl-200-7"><a class="lnlinks" href="#hl-200-7"> 7</a>
</span><span class="lnt" id="hl-200-8"><a class="lnlinks" href="#hl-200-8"> 8</a>
</span><span class="lnt" id="hl-200-9"><a class="lnlinks" href="#hl-200-9"> 9</a>
</span><span class="lnt" id="hl-200-10"><a class="lnlinks" href="#hl-200-10">10</a>
</span><span class="lnt" id="hl-200-11"><a class="lnlinks" href="#hl-200-11">11</a>
</span><span class="lnt" id="hl-200-12"><a class="lnlinks" href="#hl-200-12">12</a>
</span><span class="lnt" id="hl-200-13"><a class="lnlinks" href="#hl-200-13">13</a>
</span><span class="lnt" id="hl-200-14"><a class="lnlinks" href="#hl-200-14">14</a>
</span><span class="lnt" id="hl-200-15"><a class="lnlinks" href="#hl-200-15">15</a>
</span><span class="lnt" id="hl-200-16"><a class="lnlinks" href="#hl-200-16">16</a>
</span><span class="lnt" id="hl-200-17"><a class="lnlinks" href="#hl-200-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">containsNearbyDuplicate</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// Use a rotating window of size k</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">right</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">){</span><span class="w">				</span><span class="c1">// While we haven&#39;t processed everything</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">store</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">))</span><span class="w">		</span><span class="c1">// If our current window contains duplicate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">store</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">);</span><span class="w">					</span><span class="c1">// No duplicates in the window</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">right</span><span class="o">++</span><span class="p">;</span><span class="w">								</span><span class="c1">// Increase right to visit the new element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">right</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">k</span><span class="p">){</span><span class="w">					</span><span class="c1">// If window becomes &gt; k</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">store</span><span class="p">.</span><span class="na">remove</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">);</span><span class="w">			</span><span class="c1">// remove the number on the left side of</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">								</span><span class="c1">// the window and increase the left counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">										</span><span class="c1">// for new window from the next index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">								</span><span class="c1">// No duplicates found in any window.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-stack-using-queueshttpsleetcodecomproblemsimplement-stack-using-queues"><a href="https://leetcode.com/problems/implement-stack-using-queues/">Implement Stack Using Queues</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-201-1"><a class="lnlinks" href="#hl-201-1"> 1</a>
</span><span class="lnt" id="hl-201-2"><a class="lnlinks" href="#hl-201-2"> 2</a>
</span><span class="lnt" id="hl-201-3"><a class="lnlinks" href="#hl-201-3"> 3</a>
</span><span class="lnt" id="hl-201-4"><a class="lnlinks" href="#hl-201-4"> 4</a>
</span><span class="lnt" id="hl-201-5"><a class="lnlinks" href="#hl-201-5"> 5</a>
</span><span class="lnt" id="hl-201-6"><a class="lnlinks" href="#hl-201-6"> 6</a>
</span><span class="lnt" id="hl-201-7"><a class="lnlinks" href="#hl-201-7"> 7</a>
</span><span class="lnt" id="hl-201-8"><a class="lnlinks" href="#hl-201-8"> 8</a>
</span><span class="lnt" id="hl-201-9"><a class="lnlinks" href="#hl-201-9"> 9</a>
</span><span class="lnt" id="hl-201-10"><a class="lnlinks" href="#hl-201-10">10</a>
</span><span class="lnt" id="hl-201-11"><a class="lnlinks" href="#hl-201-11">11</a>
</span><span class="lnt" id="hl-201-12"><a class="lnlinks" href="#hl-201-12">12</a>
</span><span class="lnt" id="hl-201-13"><a class="lnlinks" href="#hl-201-13">13</a>
</span><span class="lnt" id="hl-201-14"><a class="lnlinks" href="#hl-201-14">14</a>
</span><span class="lnt" id="hl-201-15"><a class="lnlinks" href="#hl-201-15">15</a>
</span><span class="lnt" id="hl-201-16"><a class="lnlinks" href="#hl-201-16">16</a>
</span><span class="lnt" id="hl-201-17"><a class="lnlinks" href="#hl-201-17">17</a>
</span><span class="lnt" id="hl-201-18"><a class="lnlinks" href="#hl-201-18">18</a>
</span><span class="lnt" id="hl-201-19"><a class="lnlinks" href="#hl-201-19">19</a>
</span><span class="lnt" id="hl-201-20"><a class="lnlinks" href="#hl-201-20">20</a>
</span><span class="lnt" id="hl-201-21"><a class="lnlinks" href="#hl-201-21">21</a>
</span><span class="lnt" id="hl-201-22"><a class="lnlinks" href="#hl-201-22">22</a>
</span><span class="lnt" id="hl-201-23"><a class="lnlinks" href="#hl-201-23">23</a>
</span><span class="lnt" id="hl-201-24"><a class="lnlinks" href="#hl-201-24">24</a>
</span><span class="lnt" id="hl-201-25"><a class="lnlinks" href="#hl-201-25">25</a>
</span><span class="lnt" id="hl-201-26"><a class="lnlinks" href="#hl-201-26">26</a>
</span><span class="lnt" id="hl-201-27"><a class="lnlinks" href="#hl-201-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MyStack</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** Initialize your data structure here. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">MyStack</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayDeque</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** Push element x onto stack. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">push</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** Removes the element on top of the stack and returns that element. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">pop</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">removeLast</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** Get the top element. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">top</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">peekLast</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** Returns whether the stack is empty. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="invert-binary-treehttpsleetcodecomproblemsinvert-binary-tree"><a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-202-1"><a class="lnlinks" href="#hl-202-1"> 1</a>
</span><span class="lnt" id="hl-202-2"><a class="lnlinks" href="#hl-202-2"> 2</a>
</span><span class="lnt" id="hl-202-3"><a class="lnlinks" href="#hl-202-3"> 3</a>
</span><span class="lnt" id="hl-202-4"><a class="lnlinks" href="#hl-202-4"> 4</a>
</span><span class="lnt" id="hl-202-5"><a class="lnlinks" href="#hl-202-5"> 5</a>
</span><span class="lnt" id="hl-202-6"><a class="lnlinks" href="#hl-202-6"> 6</a>
</span><span class="lnt" id="hl-202-7"><a class="lnlinks" href="#hl-202-7"> 7</a>
</span><span class="lnt" id="hl-202-8"><a class="lnlinks" href="#hl-202-8"> 8</a>
</span><span class="lnt" id="hl-202-9"><a class="lnlinks" href="#hl-202-9"> 9</a>
</span><span class="lnt" id="hl-202-10"><a class="lnlinks" href="#hl-202-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="nf">invertTree</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">;</span><span class="w">		</span><span class="c1">// Swap the left and right nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">			</span><span class="c1">// Then swap the subsequent trees of those nodes.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">root</span><span class="p">;</span><span class="w">					</span><span class="c1">// Return the original root.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fibonacci-numberhttpsleetcodecomproblemsfibonacci-number"><a href="https://leetcode.com/problems/fibonacci-number/">Fibonacci Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-203-1"><a class="lnlinks" href="#hl-203-1"> 1</a>
</span><span class="lnt" id="hl-203-2"><a class="lnlinks" href="#hl-203-2"> 2</a>
</span><span class="lnt" id="hl-203-3"><a class="lnlinks" href="#hl-203-3"> 3</a>
</span><span class="lnt" id="hl-203-4"><a class="lnlinks" href="#hl-203-4"> 4</a>
</span><span class="lnt" id="hl-203-5"><a class="lnlinks" href="#hl-203-5"> 5</a>
</span><span class="lnt" id="hl-203-6"><a class="lnlinks" href="#hl-203-6"> 6</a>
</span><span class="lnt" id="hl-203-7"><a class="lnlinks" href="#hl-203-7"> 7</a>
</span><span class="lnt" id="hl-203-8"><a class="lnlinks" href="#hl-203-8"> 8</a>
</span><span class="lnt" id="hl-203-9"><a class="lnlinks" href="#hl-203-9"> 9</a>
</span><span class="lnt" id="hl-203-10"><a class="lnlinks" href="#hl-203-10">10</a>
</span><span class="lnt" id="hl-203-11"><a class="lnlinks" href="#hl-203-11">11</a>
</span><span class="lnt" id="hl-203-12"><a class="lnlinks" href="#hl-203-12">12</a>
</span><span class="lnt" id="hl-203-13"><a class="lnlinks" href="#hl-203-13">13</a>
</span><span class="lnt" id="hl-203-14"><a class="lnlinks" href="#hl-203-14">14</a>
</span><span class="lnt" id="hl-203-15"><a class="lnlinks" href="#hl-203-15">15</a>
</span><span class="lnt" id="hl-203-16"><a class="lnlinks" href="#hl-203-16">16</a>
</span><span class="lnt" id="hl-203-17"><a class="lnlinks" href="#hl-203-17">17</a>
</span><span class="lnt" id="hl-203-18"><a class="lnlinks" href="#hl-203-18">18</a>
</span><span class="lnt" id="hl-203-19"><a class="lnlinks" href="#hl-203-19">19</a>
</span><span class="lnt" id="hl-203-20"><a class="lnlinks" href="#hl-203-20">20</a>
</span><span class="lnt" id="hl-203-21"><a class="lnlinks" href="#hl-203-21">21</a>
</span><span class="lnt" id="hl-203-22"><a class="lnlinks" href="#hl-203-22">22</a>
</span><span class="lnt" id="hl-203-23"><a class="lnlinks" href="#hl-203-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Iterative</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fib</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">N</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">						</span><span class="c1">// fib(0) = 0; fib(1) = 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">N</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">f0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">f1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">fn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">N</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">fn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">f1</span><span class="p">;</span><span class="w">				</span><span class="c1">// fib(n) = fib(n-1) + fib(n-2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">f0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f1</span><span class="p">;</span><span class="w">					</span><span class="c1">// f0 becomes f1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">f1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fn</span><span class="p">;</span><span class="w">					</span><span class="c1">// f1 becomes fn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">f1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Dynamic Programming</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fibDP</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">N</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">N</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">dp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">N</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// To store intermediate result</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">dp</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">						</span><span class="c1">// fib(0) = 0; fib(1) = 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">N</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// fib(i) = fib(i-1) + fib(i-2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dp</span><span class="o">[</span><span class="n">N</span><span class="o">]</span><span class="p">;</span><span class="w">					</span><span class="c1">// Return the last number in the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kth-largest-elementhttpsleetcodecomproblemskth-largest-element-in-an-array"><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">kth Largest Element</a></h3>
<ol>
<li>The minheap algorithm has $O(n lg n) $ complexity and $O(1)$ space. The idea here is that we use a minheap to keep only the k greatest elements. If size becomes more than k, we remove the smallest element at the top of the heap. Thereby, at the end, our kth largest element will be at the top.</li>
<li>QuickSelect Algorithm performs in $O(n)$ best case, $O(n^2)$ worst case when the pivot chosen is always the largest, so we use a random pivot.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-204-1"><a class="lnlinks" href="#hl-204-1"> 1</a>
</span><span class="lnt" id="hl-204-2"><a class="lnlinks" href="#hl-204-2"> 2</a>
</span><span class="lnt" id="hl-204-3"><a class="lnlinks" href="#hl-204-3"> 3</a>
</span><span class="lnt" id="hl-204-4"><a class="lnlinks" href="#hl-204-4"> 4</a>
</span><span class="lnt" id="hl-204-5"><a class="lnlinks" href="#hl-204-5"> 5</a>
</span><span class="lnt" id="hl-204-6"><a class="lnlinks" href="#hl-204-6"> 6</a>
</span><span class="lnt" id="hl-204-7"><a class="lnlinks" href="#hl-204-7"> 7</a>
</span><span class="lnt" id="hl-204-8"><a class="lnlinks" href="#hl-204-8"> 8</a>
</span><span class="lnt" id="hl-204-9"><a class="lnlinks" href="#hl-204-9"> 9</a>
</span><span class="lnt" id="hl-204-10"><a class="lnlinks" href="#hl-204-10">10</a>
</span><span class="lnt" id="hl-204-11"><a class="lnlinks" href="#hl-204-11">11</a>
</span><span class="lnt" id="hl-204-12"><a class="lnlinks" href="#hl-204-12">12</a>
</span><span class="lnt" id="hl-204-13"><a class="lnlinks" href="#hl-204-13">13</a>
</span><span class="lnt" id="hl-204-14"><a class="lnlinks" href="#hl-204-14">14</a>
</span><span class="lnt" id="hl-204-15"><a class="lnlinks" href="#hl-204-15">15</a>
</span><span class="lnt" id="hl-204-16"><a class="lnlinks" href="#hl-204-16">16</a>
</span><span class="lnt" id="hl-204-17"><a class="lnlinks" href="#hl-204-17">17</a>
</span><span class="lnt" id="hl-204-18"><a class="lnlinks" href="#hl-204-18">18</a>
</span><span class="lnt" id="hl-204-19"><a class="lnlinks" href="#hl-204-19">19</a>
</span><span class="lnt" id="hl-204-20"><a class="lnlinks" href="#hl-204-20">20</a>
</span><span class="lnt" id="hl-204-21"><a class="lnlinks" href="#hl-204-21">21</a>
</span><span class="lnt" id="hl-204-22"><a class="lnlinks" href="#hl-204-22">22</a>
</span><span class="lnt" id="hl-204-23"><a class="lnlinks" href="#hl-204-23">23</a>
</span><span class="lnt" id="hl-204-24"><a class="lnlinks" href="#hl-204-24">24</a>
</span><span class="lnt" id="hl-204-25"><a class="lnlinks" href="#hl-204-25">25</a>
</span><span class="lnt" id="hl-204-26"><a class="lnlinks" href="#hl-204-26">26</a>
</span><span class="lnt" id="hl-204-27"><a class="lnlinks" href="#hl-204-27">27</a>
</span><span class="lnt" id="hl-204-28"><a class="lnlinks" href="#hl-204-28">28</a>
</span><span class="lnt" id="hl-204-29"><a class="lnlinks" href="#hl-204-29">29</a>
</span><span class="lnt" id="hl-204-30"><a class="lnlinks" href="#hl-204-30">30</a>
</span><span class="lnt" id="hl-204-31"><a class="lnlinks" href="#hl-204-31">31</a>
</span><span class="lnt" id="hl-204-32"><a class="lnlinks" href="#hl-204-32">32</a>
</span><span class="lnt" id="hl-204-33"><a class="lnlinks" href="#hl-204-33">33</a>
</span><span class="lnt" id="hl-204-34"><a class="lnlinks" href="#hl-204-34">34</a>
</span><span class="lnt" id="hl-204-35"><a class="lnlinks" href="#hl-204-35">35</a>
</span><span class="lnt" id="hl-204-36"><a class="lnlinks" href="#hl-204-36">36</a>
</span><span class="lnt" id="hl-204-37"><a class="lnlinks" href="#hl-204-37">37</a>
</span><span class="lnt" id="hl-204-38"><a class="lnlinks" href="#hl-204-38">38</a>
</span><span class="lnt" id="hl-204-39"><a class="lnlinks" href="#hl-204-39">39</a>
</span><span class="lnt" id="hl-204-40"><a class="lnlinks" href="#hl-204-40">40</a>
</span><span class="lnt" id="hl-204-41"><a class="lnlinks" href="#hl-204-41">41</a>
</span><span class="lnt" id="hl-204-42"><a class="lnlinks" href="#hl-204-42">42</a>
</span><span class="lnt" id="hl-204-43"><a class="lnlinks" href="#hl-204-43">43</a>
</span><span class="lnt" id="hl-204-44"><a class="lnlinks" href="#hl-204-44">44</a>
</span><span class="lnt" id="hl-204-45"><a class="lnlinks" href="#hl-204-45">45</a>
</span><span class="lnt" id="hl-204-46"><a class="lnlinks" href="#hl-204-46">46</a>
</span><span class="lnt" id="hl-204-47"><a class="lnlinks" href="#hl-204-47">47</a>
</span><span class="lnt" id="hl-204-48"><a class="lnlinks" href="#hl-204-48">48</a>
</span><span class="lnt" id="hl-204-49"><a class="lnlinks" href="#hl-204-49">49</a>
</span><span class="lnt" id="hl-204-50"><a class="lnlinks" href="#hl-204-50">50</a>
</span><span class="lnt" id="hl-204-51"><a class="lnlinks" href="#hl-204-51">51</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// MinHeap Algorithm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">kthLargest</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">PriorityQueue</span><span class="o">&lt;&gt;</span><span class="p">((</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">n1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">n2</span><span class="p">);</span><span class="w">	</span><span class="c1">// Initialize minheap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">				</span><span class="c1">// Add number one by one</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">k</span><span class="p">)</span><span class="w">		</span><span class="c1">// If size is greater than k</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">			</span><span class="c1">// Remove the topmost element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">			</span><span class="c1">// The topmost element is our answer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// QuickSelect Algorithm - Hoare&#39;s Partition Scheme</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">kthLargest</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">quickselect</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">k</span><span class="p">);</span><span class="c1">// kth largest is (n-k)th largest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">quickselect</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w">					</span><span class="c1">// Array contains only 1 element, that&#39;s the answer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="k">return</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">Random</span><span class="w"> </span><span class="n">rand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Random</span><span class="p">();</span><span class="w">				</span><span class="c1">// Choose a random pivot between left and right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">pivotIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rand</span><span class="p">.</span><span class="na">nextInt</span><span class="p">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="p">);</span><span class="w">	</span><span class="c1">// but not left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">pivotIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">partition</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="p">,</span><span class="w"> </span><span class="n">pivotIndex</span><span class="p">);</span><span class="w">	</span><span class="c1">// Partition, and find it&#39;s correct index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">k</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">pivotIndex</span><span class="p">)</span><span class="w">					</span><span class="c1">// That index is equal to kth statistic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="k">return</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">k</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivotIndex</span><span class="p">)</span><span class="w">			</span><span class="c1">// If it&#39;s less than the index, our ans lies in the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="k">return</span><span class="w"> </span><span class="n">quickselect</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">pivotIndex</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="p">);</span><span class="w">	</span><span class="c1">// left side</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="k">return</span><span class="w"> </span><span class="n">quickselect</span><span class="p">(</span><span class="n">pivotIndex</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="p">);</span><span class="w">	</span><span class="c1">// Otherwise, it&#39;s on the right side.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">partition</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">pivotIndex</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// Partition element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">swap</span><span class="p">(</span><span class="n">pivotIndex</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="p">);</span><span class="w">				</span><span class="c1">// Move that element to the end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">wall</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">					</span><span class="c1">// wall is initially before everything</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">left</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivot</span><span class="p">)</span><span class="w">				</span><span class="c1">// If the current element is &lt; than the pivot, then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    		</span><span class="n">swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="o">++</span><span class="n">wall</span><span class="p">);</span><span class="w">			</span><span class="c1">// we need to swap it with the element next to wall.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">swap</span><span class="p">(</span><span class="n">right</span><span class="p">,</span><span class="w"> </span><span class="o">++</span><span class="n">wall</span><span class="p">);</span><span class="w">					</span><span class="c1">// Lastly, swap the element at wall and the end.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">wall</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-twohttpsleetcodecomproblemspower-of-two"><a href="https://leetcode.com/problems/power-of-two/">Power Of Two</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-205-1"><a class="lnlinks" href="#hl-205-1"> 1</a>
</span><span class="lnt" id="hl-205-2"><a class="lnlinks" href="#hl-205-2"> 2</a>
</span><span class="lnt" id="hl-205-3"><a class="lnlinks" href="#hl-205-3"> 3</a>
</span><span class="lnt" id="hl-205-4"><a class="lnlinks" href="#hl-205-4"> 4</a>
</span><span class="lnt" id="hl-205-5"><a class="lnlinks" href="#hl-205-5"> 5</a>
</span><span class="lnt" id="hl-205-6"><a class="lnlinks" href="#hl-205-6"> 6</a>
</span><span class="lnt" id="hl-205-7"><a class="lnlinks" href="#hl-205-7"> 7</a>
</span><span class="lnt" id="hl-205-8"><a class="lnlinks" href="#hl-205-8"> 8</a>
</span><span class="lnt" id="hl-205-9"><a class="lnlinks" href="#hl-205-9"> 9</a>
</span><span class="lnt" id="hl-205-10"><a class="lnlinks" href="#hl-205-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPowerOfTwo</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">		</span><span class="c1">// n &lt; 0 cannot be powers of 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">2</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// If n is odd, it can&#39;t be a power of 2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">			</span><span class="c1">// It is a multiple of 2, so divide it by 2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">			</span><span class="c1">// n came out to be 1 which is a power of 2, so return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="valid-sudokuhttpsleetcodecomproblemsvalid-sudoku"><a href="https://leetcode.com/problems/valid-sudoku/">Valid Sudoku</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-206-1"><a class="lnlinks" href="#hl-206-1"> 1</a>
</span><span class="lnt" id="hl-206-2"><a class="lnlinks" href="#hl-206-2"> 2</a>
</span><span class="lnt" id="hl-206-3"><a class="lnlinks" href="#hl-206-3"> 3</a>
</span><span class="lnt" id="hl-206-4"><a class="lnlinks" href="#hl-206-4"> 4</a>
</span><span class="lnt" id="hl-206-5"><a class="lnlinks" href="#hl-206-5"> 5</a>
</span><span class="lnt" id="hl-206-6"><a class="lnlinks" href="#hl-206-6"> 6</a>
</span><span class="lnt" id="hl-206-7"><a class="lnlinks" href="#hl-206-7"> 7</a>
</span><span class="lnt" id="hl-206-8"><a class="lnlinks" href="#hl-206-8"> 8</a>
</span><span class="lnt" id="hl-206-9"><a class="lnlinks" href="#hl-206-9"> 9</a>
</span><span class="lnt" id="hl-206-10"><a class="lnlinks" href="#hl-206-10">10</a>
</span><span class="lnt" id="hl-206-11"><a class="lnlinks" href="#hl-206-11">11</a>
</span><span class="lnt" id="hl-206-12"><a class="lnlinks" href="#hl-206-12">12</a>
</span><span class="lnt" id="hl-206-13"><a class="lnlinks" href="#hl-206-13">13</a>
</span><span class="lnt" id="hl-206-14"><a class="lnlinks" href="#hl-206-14">14</a>
</span><span class="lnt" id="hl-206-15"><a class="lnlinks" href="#hl-206-15">15</a>
</span><span class="lnt" id="hl-206-16"><a class="lnlinks" href="#hl-206-16">16</a>
</span><span class="lnt" id="hl-206-17"><a class="lnlinks" href="#hl-206-17">17</a>
</span><span class="lnt" id="hl-206-18"><a class="lnlinks" href="#hl-206-18">18</a>
</span><span class="lnt" id="hl-206-19"><a class="lnlinks" href="#hl-206-19">19</a>
</span><span class="lnt" id="hl-206-20"><a class="lnlinks" href="#hl-206-20">20</a>
</span><span class="lnt" id="hl-206-21"><a class="lnlinks" href="#hl-206-21">21</a>
</span><span class="lnt" id="hl-206-22"><a class="lnlinks" href="#hl-206-22">22</a>
</span><span class="lnt" id="hl-206-23"><a class="lnlinks" href="#hl-206-23">23</a>
</span><span class="lnt" id="hl-206-24"><a class="lnlinks" href="#hl-206-24">24</a>
</span><span class="lnt" id="hl-206-25"><a class="lnlinks" href="#hl-206-25">25</a>
</span><span class="lnt" id="hl-206-26"><a class="lnlinks" href="#hl-206-26">26</a>
</span><span class="lnt" id="hl-206-27"><a class="lnlinks" href="#hl-206-27">27</a>
</span><span class="lnt" id="hl-206-28"><a class="lnlinks" href="#hl-206-28">28</a>
</span><span class="lnt" id="hl-206-29"><a class="lnlinks" href="#hl-206-29">29</a>
</span><span class="lnt" id="hl-206-30"><a class="lnlinks" href="#hl-206-30">30</a>
</span><span class="lnt" id="hl-206-31"><a class="lnlinks" href="#hl-206-31">31</a>
</span><span class="lnt" id="hl-206-32"><a class="lnlinks" href="#hl-206-32">32</a>
</span><span class="lnt" id="hl-206-33"><a class="lnlinks" href="#hl-206-33">33</a>
</span><span class="lnt" id="hl-206-34"><a class="lnlinks" href="#hl-206-34">34</a>
</span><span class="lnt" id="hl-206-35"><a class="lnlinks" href="#hl-206-35">35</a>
</span><span class="lnt" id="hl-206-36"><a class="lnlinks" href="#hl-206-36">36</a>
</span><span class="lnt" id="hl-206-37"><a class="lnlinks" href="#hl-206-37">37</a>
</span><span class="lnt" id="hl-206-38"><a class="lnlinks" href="#hl-206-38">38</a>
</span><span class="lnt" id="hl-206-39"><a class="lnlinks" href="#hl-206-39">39</a>
</span><span class="lnt" id="hl-206-40"><a class="lnlinks" href="#hl-206-40">40</a>
</span><span class="lnt" id="hl-206-41"><a class="lnlinks" href="#hl-206-41">41</a>
</span><span class="lnt" id="hl-206-42"><a class="lnlinks" href="#hl-206-42">42</a>
</span><span class="lnt" id="hl-206-43"><a class="lnlinks" href="#hl-206-43">43</a>
</span><span class="lnt" id="hl-206-44"><a class="lnlinks" href="#hl-206-44">44</a>
</span><span class="lnt" id="hl-206-45"><a class="lnlinks" href="#hl-206-45">45</a>
</span><span class="lnt" id="hl-206-46"><a class="lnlinks" href="#hl-206-46">46</a>
</span><span class="lnt" id="hl-206-47"><a class="lnlinks" href="#hl-206-47">47</a>
</span><span class="lnt" id="hl-206-48"><a class="lnlinks" href="#hl-206-48">48</a>
</span><span class="lnt" id="hl-206-49"><a class="lnlinks" href="#hl-206-49">49</a>
</span><span class="lnt" id="hl-206-50"><a class="lnlinks" href="#hl-206-50">50</a>
</span><span class="lnt" id="hl-206-51"><a class="lnlinks" href="#hl-206-51">51</a>
</span><span class="lnt" id="hl-206-52"><a class="lnlinks" href="#hl-206-52">52</a>
</span><span class="lnt" id="hl-206-53"><a class="lnlinks" href="#hl-206-53">53</a>
</span><span class="lnt" id="hl-206-54"><a class="lnlinks" href="#hl-206-54">54</a>
</span><span class="lnt" id="hl-206-55"><a class="lnlinks" href="#hl-206-55">55</a>
</span><span class="lnt" id="hl-206-56"><a class="lnlinks" href="#hl-206-56">56</a>
</span><span class="lnt" id="hl-206-57"><a class="lnlinks" href="#hl-206-57">57</a>
</span><span class="lnt" id="hl-206-58"><a class="lnlinks" href="#hl-206-58">58</a>
</span><span class="lnt" id="hl-206-59"><a class="lnlinks" href="#hl-206-59">59</a>
</span><span class="lnt" id="hl-206-60"><a class="lnlinks" href="#hl-206-60">60</a>
</span><span class="lnt" id="hl-206-61"><a class="lnlinks" href="#hl-206-61">61</a>
</span><span class="lnt" id="hl-206-62"><a class="lnlinks" href="#hl-206-62">62</a>
</span><span class="lnt" id="hl-206-63"><a class="lnlinks" href="#hl-206-63">63</a>
</span><span class="lnt" id="hl-206-64"><a class="lnlinks" href="#hl-206-64">64</a>
</span><span class="lnt" id="hl-206-65"><a class="lnlinks" href="#hl-206-65">65</a>
</span><span class="lnt" id="hl-206-66"><a class="lnlinks" href="#hl-206-66">66</a>
</span><span class="lnt" id="hl-206-67"><a class="lnlinks" href="#hl-206-67">67</a>
</span><span class="lnt" id="hl-206-68"><a class="lnlinks" href="#hl-206-68">68</a>
</span><span class="lnt" id="hl-206-69"><a class="lnlinks" href="#hl-206-69">69</a>
</span><span class="lnt" id="hl-206-70"><a class="lnlinks" href="#hl-206-70">70</a>
</span><span class="lnt" id="hl-206-71"><a class="lnlinks" href="#hl-206-71">71</a>
</span><span class="lnt" id="hl-206-72"><a class="lnlinks" href="#hl-206-72">72</a>
</span><span class="lnt" id="hl-206-73"><a class="lnlinks" href="#hl-206-73">73</a>
</span><span class="lnt" id="hl-206-74"><a class="lnlinks" href="#hl-206-74">74</a>
</span><span class="lnt" id="hl-206-75"><a class="lnlinks" href="#hl-206-75">75</a>
</span><span class="lnt" id="hl-206-76"><a class="lnlinks" href="#hl-206-76">76</a>
</span><span class="lnt" id="hl-206-77"><a class="lnlinks" href="#hl-206-77">77</a>
</span><span class="lnt" id="hl-206-78"><a class="lnlinks" href="#hl-206-78">78</a>
</span><span class="lnt" id="hl-206-79"><a class="lnlinks" href="#hl-206-79">79</a>
</span><span class="lnt" id="hl-206-80"><a class="lnlinks" href="#hl-206-80">80</a>
</span><span class="lnt" id="hl-206-81"><a class="lnlinks" href="#hl-206-81">81</a>
</span><span class="lnt" id="hl-206-82"><a class="lnlinks" href="#hl-206-82">82</a>
</span><span class="lnt" id="hl-206-83"><a class="lnlinks" href="#hl-206-83">83</a>
</span><span class="lnt" id="hl-206-84"><a class="lnlinks" href="#hl-206-84">84</a>
</span><span class="lnt" id="hl-206-85"><a class="lnlinks" href="#hl-206-85">85</a>
</span><span class="lnt" id="hl-206-86"><a class="lnlinks" href="#hl-206-86">86</a>
</span><span class="lnt" id="hl-206-87"><a class="lnlinks" href="#hl-206-87">87</a>
</span><span class="lnt" id="hl-206-88"><a class="lnlinks" href="#hl-206-88">88</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">char</span><span class="o">[][]</span><span class="w"> </span><span class="n">board</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isValidSudoku</span><span class="p">(</span><span class="kt">char</span><span class="o">[][]</span><span class="w"> </span><span class="n">board</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">this</span><span class="p">.</span><span class="na">board</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">return</span><span class="w"> </span><span class="n">rowCheck</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">colCheck</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">boxCheck</span><span class="p">();</span><span class="w">	</span><span class="c1">// Check row first, then column and at</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">												</span><span class="c1">// last, boxes because they are time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                                </span><span class="c1">// consuming.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">onePassCheck</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// 1 HashSet for each row</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// 1 HashSet for each column</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span><span class="w"> </span><span class="n">boxes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// 1 HashSet for each box.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">columns</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">boxes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">){</span><span class="w">							</span><span class="c1">// -2 = &#39;.&#39;		</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="kt">int</span><span class="w"> </span><span class="n">boxIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">/</span><span class="n">3</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">j</span><span class="o">/</span><span class="n">3</span><span class="p">;</span><span class="w">	</span><span class="c1">// Calculate which box we are in.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">!</span><span class="n">columns</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">!</span><span class="n">boxes</span><span class="o">[</span><span class="n">boxIndex</span><span class="o">]</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">					</span><span class="c1">// If the row set or the column set or the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">										</span><span class="c1">// box set contains that val, return false.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">rowCheck</span><span class="p">(){</span><span class="w">						</span><span class="c1">// Horizontal check</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">row</span><span class="p">:</span><span class="w"> </span><span class="n">board</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">row</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">){</span><span class="w">								</span><span class="c1">// val = -2 means &#39;.&#39; in the board</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w">							</span><span class="c1">// If val already seen, invalid sudoku</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">						</span><span class="c1">// else, Mark that index as seen.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">colCheck</span><span class="p">(){</span><span class="w">						</span><span class="c1">// Vertical Check.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">board</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">col</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">board</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">boxCheck</span><span class="p">(){</span><span class="w">					</span><span class="c1">// For the 9 sub boxes, let the single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">+=</span><span class="n">3</span><span class="p">){</span><span class="w">				</span><span class="c1">// box checker check it&#39;s validity.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">+=</span><span class="n">3</span><span class="p">)</span><span class="w">				</span><span class="c1">// If any of the subbox was invalid,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">singleBoxCheck</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="w">				</span><span class="c1">// we abort and return false.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">singleBoxCheck</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">topRightRow</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">topRightCol</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">				</span><span class="c1">// Each sub box has 3 rows and 3 columns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="o">[</span><span class="n">topRightRow</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">topRightCol</span><span class="o">+</span><span class="n">j</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">	</span><span class="c1">// This gives us the value at </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">){</span><span class="w">							</span><span class="c1">// each cell in the sub box and we fill the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w">						</span><span class="c1">// arr with all values that are seen.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">						</span><span class="c1">// If seen twice, return false;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-queue-using-stackhttpsleetcodecomproblemsimplement-queue-using-stackssubmissions"><a href="https://leetcode.com/problems/implement-queue-using-stacks/submissions/">Implement Queue Using Stack</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-207-1"><a class="lnlinks" href="#hl-207-1"> 1</a>
</span><span class="lnt" id="hl-207-2"><a class="lnlinks" href="#hl-207-2"> 2</a>
</span><span class="lnt" id="hl-207-3"><a class="lnlinks" href="#hl-207-3"> 3</a>
</span><span class="lnt" id="hl-207-4"><a class="lnlinks" href="#hl-207-4"> 4</a>
</span><span class="lnt" id="hl-207-5"><a class="lnlinks" href="#hl-207-5"> 5</a>
</span><span class="lnt" id="hl-207-6"><a class="lnlinks" href="#hl-207-6"> 6</a>
</span><span class="lnt" id="hl-207-7"><a class="lnlinks" href="#hl-207-7"> 7</a>
</span><span class="lnt" id="hl-207-8"><a class="lnlinks" href="#hl-207-8"> 8</a>
</span><span class="lnt" id="hl-207-9"><a class="lnlinks" href="#hl-207-9"> 9</a>
</span><span class="lnt" id="hl-207-10"><a class="lnlinks" href="#hl-207-10">10</a>
</span><span class="lnt" id="hl-207-11"><a class="lnlinks" href="#hl-207-11">11</a>
</span><span class="lnt" id="hl-207-12"><a class="lnlinks" href="#hl-207-12">12</a>
</span><span class="lnt" id="hl-207-13"><a class="lnlinks" href="#hl-207-13">13</a>
</span><span class="lnt" id="hl-207-14"><a class="lnlinks" href="#hl-207-14">14</a>
</span><span class="lnt" id="hl-207-15"><a class="lnlinks" href="#hl-207-15">15</a>
</span><span class="lnt" id="hl-207-16"><a class="lnlinks" href="#hl-207-16">16</a>
</span><span class="lnt" id="hl-207-17"><a class="lnlinks" href="#hl-207-17">17</a>
</span><span class="lnt" id="hl-207-18"><a class="lnlinks" href="#hl-207-18">18</a>
</span><span class="lnt" id="hl-207-19"><a class="lnlinks" href="#hl-207-19">19</a>
</span><span class="lnt" id="hl-207-20"><a class="lnlinks" href="#hl-207-20">20</a>
</span><span class="lnt" id="hl-207-21"><a class="lnlinks" href="#hl-207-21">21</a>
</span><span class="lnt" id="hl-207-22"><a class="lnlinks" href="#hl-207-22">22</a>
</span><span class="lnt" id="hl-207-23"><a class="lnlinks" href="#hl-207-23">23</a>
</span><span class="lnt" id="hl-207-24"><a class="lnlinks" href="#hl-207-24">24</a>
</span><span class="lnt" id="hl-207-25"><a class="lnlinks" href="#hl-207-25">25</a>
</span><span class="lnt" id="hl-207-26"><a class="lnlinks" href="#hl-207-26">26</a>
</span><span class="lnt" id="hl-207-27"><a class="lnlinks" href="#hl-207-27">27</a>
</span><span class="lnt" id="hl-207-28"><a class="lnlinks" href="#hl-207-28">28</a>
</span><span class="lnt" id="hl-207-29"><a class="lnlinks" href="#hl-207-29">29</a>
</span><span class="lnt" id="hl-207-30"><a class="lnlinks" href="#hl-207-30">30</a>
</span><span class="lnt" id="hl-207-31"><a class="lnlinks" href="#hl-207-31">31</a>
</span><span class="lnt" id="hl-207-32"><a class="lnlinks" href="#hl-207-32">32</a>
</span><span class="lnt" id="hl-207-33"><a class="lnlinks" href="#hl-207-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Since we reverse stack1 into stack2, stack2 is basically our queue, so if stack2 isn&#39;t empty, then the topmost element is what we need when we pop or peek. If it is empty, then again fill it with whatever&#39;s there is stack1, and it again becomes the correct queue.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="nf">MyQueue</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stack1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Stack</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stack2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Stack</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">push</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">stack1</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="w">			</span><span class="c1">// Push onto stack1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">pop</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">peek</span><span class="p">();</span><span class="w">					</span><span class="c1">// First call the peek function, to make sure stack 2 isn&#39;t</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">stack2</span><span class="p">.</span><span class="na">pop</span><span class="p">();</span><span class="w">	</span><span class="c1">// empty. Then, the topmost element of stack2 is what we want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/** Get the front element. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">peek</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">stack2</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()){</span><span class="w">			
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">stack1</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">stack2</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">stack1</span><span class="p">.</span><span class="na">pop</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">stack2</span><span class="p">.</span><span class="na">peek</span><span class="p">();</span><span class="w">	</span><span class="c1">// stack2 is basically the queue, so return whatever&#39;s on the top</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/** Returns whether the queue is empty. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">stack1</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">stack2</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="palindrome-linkedlisthttpsleetcodecomproblemspalindrome-linked-listsubmissions"><a href="https://leetcode.com/problems/palindrome-linked-list/submissions/">Palindrome LinkedList</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-208-1"><a class="lnlinks" href="#hl-208-1"> 1</a>
</span><span class="lnt" id="hl-208-2"><a class="lnlinks" href="#hl-208-2"> 2</a>
</span><span class="lnt" id="hl-208-3"><a class="lnlinks" href="#hl-208-3"> 3</a>
</span><span class="lnt" id="hl-208-4"><a class="lnlinks" href="#hl-208-4"> 4</a>
</span><span class="lnt" id="hl-208-5"><a class="lnlinks" href="#hl-208-5"> 5</a>
</span><span class="lnt" id="hl-208-6"><a class="lnlinks" href="#hl-208-6"> 6</a>
</span><span class="lnt" id="hl-208-7"><a class="lnlinks" href="#hl-208-7"> 7</a>
</span><span class="lnt" id="hl-208-8"><a class="lnlinks" href="#hl-208-8"> 8</a>
</span><span class="lnt" id="hl-208-9"><a class="lnlinks" href="#hl-208-9"> 9</a>
</span><span class="lnt" id="hl-208-10"><a class="lnlinks" href="#hl-208-10">10</a>
</span><span class="lnt" id="hl-208-11"><a class="lnlinks" href="#hl-208-11">11</a>
</span><span class="lnt" id="hl-208-12"><a class="lnlinks" href="#hl-208-12">12</a>
</span><span class="lnt" id="hl-208-13"><a class="lnlinks" href="#hl-208-13">13</a>
</span><span class="lnt" id="hl-208-14"><a class="lnlinks" href="#hl-208-14">14</a>
</span><span class="lnt" id="hl-208-15"><a class="lnlinks" href="#hl-208-15">15</a>
</span><span class="lnt" id="hl-208-16"><a class="lnlinks" href="#hl-208-16">16</a>
</span><span class="lnt" id="hl-208-17"><a class="lnlinks" href="#hl-208-17">17</a>
</span><span class="lnt" id="hl-208-18"><a class="lnlinks" href="#hl-208-18">18</a>
</span><span class="lnt" id="hl-208-19"><a class="lnlinks" href="#hl-208-19">19</a>
</span><span class="lnt" id="hl-208-20"><a class="lnlinks" href="#hl-208-20">20</a>
</span><span class="lnt" id="hl-208-21"><a class="lnlinks" href="#hl-208-21">21</a>
</span><span class="lnt" id="hl-208-22"><a class="lnlinks" href="#hl-208-22">22</a>
</span><span class="lnt" id="hl-208-23"><a class="lnlinks" href="#hl-208-23">23</a>
</span><span class="lnt" id="hl-208-24"><a class="lnlinks" href="#hl-208-24">24</a>
</span><span class="lnt" id="hl-208-25"><a class="lnlinks" href="#hl-208-25">25</a>
</span><span class="lnt" id="hl-208-26"><a class="lnlinks" href="#hl-208-26">26</a>
</span><span class="lnt" id="hl-208-27"><a class="lnlinks" href="#hl-208-27">27</a>
</span><span class="lnt" id="hl-208-28"><a class="lnlinks" href="#hl-208-28">28</a>
</span><span class="lnt" id="hl-208-29"><a class="lnlinks" href="#hl-208-29">29</a>
</span><span class="lnt" id="hl-208-30"><a class="lnlinks" href="#hl-208-30">30</a>
</span><span class="lnt" id="hl-208-31"><a class="lnlinks" href="#hl-208-31">31</a>
</span><span class="lnt" id="hl-208-32"><a class="lnlinks" href="#hl-208-32">32</a>
</span><span class="lnt" id="hl-208-33"><a class="lnlinks" href="#hl-208-33">33</a>
</span><span class="lnt" id="hl-208-34"><a class="lnlinks" href="#hl-208-34">34</a>
</span><span class="lnt" id="hl-208-35"><a class="lnlinks" href="#hl-208-35">35</a>
</span><span class="lnt" id="hl-208-36"><a class="lnlinks" href="#hl-208-36">36</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPalindrome</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// Size 0 or 1 list, must be unique.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">					</span><span class="c1">// Size 2 list, compare the head and tail</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">head</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">		</span><span class="c1">// values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">middleNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">					</span><span class="c1">// Standard Rabbit-Tortoise pointers.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">fastPointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">				</span><span class="c1">// Fast pointer jumps twice so by the time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// it reaches the end of the list, middlenode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">						</span><span class="c1">// is at the middle of the linkedlist.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">nextNode</span><span class="p">;</span><span class="w">							</span><span class="c1">// These three nodes are for reversing the </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// first half of the list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">fastPointer</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">fastPointer</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">middleNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">middleNode</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">			</span><span class="c1">// Advance middle once, fastpointer twice</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">fastPointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fastPointer</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nextNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">					</span><span class="c1">// Reverse the curr node, but first store the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev</span><span class="p">;</span><span class="w">						</span><span class="c1">// next newNode. By doing this, we would have</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">;</span><span class="w">							</span><span class="c1">// reversed exactly half of the list because</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nextNode</span><span class="p">;</span><span class="w">						</span><span class="c1">// fastpointer advacnes at double the speed.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">fastPointer</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">					</span><span class="c1">// If faspointer isn&#39;t null, then we have an</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">middleNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">middleNode</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">			</span><span class="c1">// odd length list, so advance middle once,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// List looks like 1-&gt;2-&gt;3-&gt;2-&gt;1 instead of</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">middleNode</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">					</span><span class="c1">// 1-&gt;2-&gt;3-&gt;3-&gt;2-&gt;1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">middleNode</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">prev</span><span class="p">.</span><span class="na">val</span><span class="p">)</span><span class="w">			</span><span class="c1">// While middle isn&#39;t null, check middlenode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">						</span><span class="c1">// val and prev val. Prev is basically the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">middleNode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">middleNode</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">			</span><span class="c1">// the point where the list reverses.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">						</span><span class="c1">// Advance middle and next.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">								</span><span class="c1">// Values matched, so return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">												</span><span class="c1">// Reversed list looks like this:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// 1&lt;-2&lt;-3&lt;-prev middle-&gt;3-&gt;2-&gt;1 in even len</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// 1&lt;-2&lt;-prev middle-&gt;2-&gt;1 in odd lengths.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="delete-node-in-a-linked-listhttpsleetcodecomproblemsdelete-node-in-a-linked-listsubmissions"><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/submissions/">Delete Node in a Linked List</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-209-1"><a class="lnlinks" href="#hl-209-1">1</a>
</span><span class="lnt" id="hl-209-2"><a class="lnlinks" href="#hl-209-2">2</a>
</span><span class="lnt" id="hl-209-3"><a class="lnlinks" href="#hl-209-3">3</a>
</span><span class="lnt" id="hl-209-4"><a class="lnlinks" href="#hl-209-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">deleteNode</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">		</span><span class="c1">// Node&#39;s value becomes its next node&#39;s value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">  	</span><span class="c1">// Node&#39;s next is it&#39;s next&#39;s next.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-anagramhttpsleetcodecomproblemsvalid-anagramsubmissions"><a href="https://leetcode.com/problems/valid-anagram/submissions/">Is Anagram</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-210-1"><a class="lnlinks" href="#hl-210-1"> 1</a>
</span><span class="lnt" id="hl-210-2"><a class="lnlinks" href="#hl-210-2"> 2</a>
</span><span class="lnt" id="hl-210-3"><a class="lnlinks" href="#hl-210-3"> 3</a>
</span><span class="lnt" id="hl-210-4"><a class="lnlinks" href="#hl-210-4"> 4</a>
</span><span class="lnt" id="hl-210-5"><a class="lnlinks" href="#hl-210-5"> 5</a>
</span><span class="lnt" id="hl-210-6"><a class="lnlinks" href="#hl-210-6"> 6</a>
</span><span class="lnt" id="hl-210-7"><a class="lnlinks" href="#hl-210-7"> 7</a>
</span><span class="lnt" id="hl-210-8"><a class="lnlinks" href="#hl-210-8"> 8</a>
</span><span class="lnt" id="hl-210-9"><a class="lnlinks" href="#hl-210-9"> 9</a>
</span><span class="lnt" id="hl-210-10"><a class="lnlinks" href="#hl-210-10">10</a>
</span><span class="lnt" id="hl-210-11"><a class="lnlinks" href="#hl-210-11">11</a>
</span><span class="lnt" id="hl-210-12"><a class="lnlinks" href="#hl-210-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isAnagram</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w">			</span><span class="c1">// Can&#39;t be anagram if size aren&#39;t the same</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">]</span><span class="p">;</span><span class="w">				</span><span class="c1">// Acts like a hashmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">	</span><span class="c1">// Increment the count by 1 in the store for the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">store</span><span class="o">[</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++</span><span class="p">;</span><span class="w">			</span><span class="c1">// index = position of char in the alphabet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">	</span><span class="c1">// Loop throught the second string, decrement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">--</span><span class="n">store</span><span class="o">[</span><span class="n">t</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">	</span><span class="c1">// count of each character in store by 1, but if</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">					</span><span class="c1">// it goes below 0, then it means that character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">										</span><span class="c1">// occurred more than it did in s. So false.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">							</span><span class="c1">// Everything matched, so return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-pathshttpsleetcodecomproblemsbinary-tree-paths"><a href="https://leetcode.com/problems/binary-tree-paths/">Binary Tree Paths</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-211-1"><a class="lnlinks" href="#hl-211-1"> 1</a>
</span><span class="lnt" id="hl-211-2"><a class="lnlinks" href="#hl-211-2"> 2</a>
</span><span class="lnt" id="hl-211-3"><a class="lnlinks" href="#hl-211-3"> 3</a>
</span><span class="lnt" id="hl-211-4"><a class="lnlinks" href="#hl-211-4"> 4</a>
</span><span class="lnt" id="hl-211-5"><a class="lnlinks" href="#hl-211-5"> 5</a>
</span><span class="lnt" id="hl-211-6"><a class="lnlinks" href="#hl-211-6"> 6</a>
</span><span class="lnt" id="hl-211-7"><a class="lnlinks" href="#hl-211-7"> 7</a>
</span><span class="lnt" id="hl-211-8"><a class="lnlinks" href="#hl-211-8"> 8</a>
</span><span class="lnt" id="hl-211-9"><a class="lnlinks" href="#hl-211-9"> 9</a>
</span><span class="lnt" id="hl-211-10"><a class="lnlinks" href="#hl-211-10">10</a>
</span><span class="lnt" id="hl-211-11"><a class="lnlinks" href="#hl-211-11">11</a>
</span><span class="lnt" id="hl-211-12"><a class="lnlinks" href="#hl-211-12">12</a>
</span><span class="lnt" id="hl-211-13"><a class="lnlinks" href="#hl-211-13">13</a>
</span><span class="lnt" id="hl-211-14"><a class="lnlinks" href="#hl-211-14">14</a>
</span><span class="lnt" id="hl-211-15"><a class="lnlinks" href="#hl-211-15">15</a>
</span><span class="lnt" id="hl-211-16"><a class="lnlinks" href="#hl-211-16">16</a>
</span><span class="lnt" id="hl-211-17"><a class="lnlinks" href="#hl-211-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">paths</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">binaryTreePaths</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">					</span><span class="c1">// No paths</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">rootval</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">		</span><span class="c1">// Converting int to string.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">rootval</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">paths</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">traverse</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// It&#39;s a leaf, and you found a path</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">paths</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w">									</span><span class="c1">// so add it to the list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">								</span><span class="c1">// Left side is traversable, so</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&gt;&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">	</span><span class="c1">// visit it and record its value.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">								</span><span class="c1">// Same as above, but for right side.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;-&gt;&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-digitshttpsleetcodecomproblemsadd-digits"><a href="https://leetcode.com/problems/add-digits/">Add Digits</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-212-1"><a class="lnlinks" href="#hl-212-1"> 1</a>
</span><span class="lnt" id="hl-212-2"><a class="lnlinks" href="#hl-212-2"> 2</a>
</span><span class="lnt" id="hl-212-3"><a class="lnlinks" href="#hl-212-3"> 3</a>
</span><span class="lnt" id="hl-212-4"><a class="lnlinks" href="#hl-212-4"> 4</a>
</span><span class="lnt" id="hl-212-5"><a class="lnlinks" href="#hl-212-5"> 5</a>
</span><span class="lnt" id="hl-212-6"><a class="lnlinks" href="#hl-212-6"> 6</a>
</span><span class="lnt" id="hl-212-7"><a class="lnlinks" href="#hl-212-7"> 7</a>
</span><span class="lnt" id="hl-212-8"><a class="lnlinks" href="#hl-212-8"> 8</a>
</span><span class="lnt" id="hl-212-9"><a class="lnlinks" href="#hl-212-9"> 9</a>
</span><span class="lnt" id="hl-212-10"><a class="lnlinks" href="#hl-212-10">10</a>
</span><span class="lnt" id="hl-212-11"><a class="lnlinks" href="#hl-212-11">11</a>
</span><span class="lnt" id="hl-212-12"><a class="lnlinks" href="#hl-212-12">12</a>
</span><span class="lnt" id="hl-212-13"><a class="lnlinks" href="#hl-212-13">13</a>
</span><span class="lnt" id="hl-212-14"><a class="lnlinks" href="#hl-212-14">14</a>
</span><span class="lnt" id="hl-212-15"><a class="lnlinks" href="#hl-212-15">15</a>
</span><span class="lnt" id="hl-212-16"><a class="lnlinks" href="#hl-212-16">16</a>
</span><span class="lnt" id="hl-212-17"><a class="lnlinks" href="#hl-212-17">17</a>
</span><span class="lnt" id="hl-212-18"><a class="lnlinks" href="#hl-212-18">18</a>
</span><span class="lnt" id="hl-212-19"><a class="lnlinks" href="#hl-212-19">19</a>
</span><span class="lnt" id="hl-212-20"><a class="lnlinks" href="#hl-212-20">20</a>
</span><span class="lnt" id="hl-212-21"><a class="lnlinks" href="#hl-212-21">21</a>
</span><span class="lnt" id="hl-212-22"><a class="lnlinks" href="#hl-212-22">22</a>
</span><span class="lnt" id="hl-212-23"><a class="lnlinks" href="#hl-212-23">23</a>
</span><span class="lnt" id="hl-212-24"><a class="lnlinks" href="#hl-212-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">constantTime</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">			</span><span class="c1">// Already a single digit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// If perfectly divisible by 9, then sum will be 9.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">			</span><span class="c1">// Otherwise, the result is going to be n % 9.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">iterative</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">9</span><span class="p">){</span><span class="w">				</span><span class="c1">// While number isn&#39;t between 2-9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sumOfDigits</span><span class="p">(</span><span class="n">num</span><span class="p">);</span><span class="w">		</span><span class="c1">// make num = sum of it&#39;s digits.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">sumOfDigits</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">		</span><span class="c1">// Standard method to add the digits of a number.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">				</span><span class="c1">// Extract the last digit, add it to sum.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">					</span><span class="c1">// Divide the num by 10.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="largest-perimeter-trianglehttpsleetcodecomproblemslargest-perimeter-triangle"><a href="https://leetcode.com/problems/largest-perimeter-triangle/">Largest Perimeter Triangle</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-213-1"><a class="lnlinks" href="#hl-213-1">1</a>
</span><span class="lnt" id="hl-213-2"><a class="lnlinks" href="#hl-213-2">2</a>
</span><span class="lnt" id="hl-213-3"><a class="lnlinks" href="#hl-213-3">3</a>
</span><span class="lnt" id="hl-213-4"><a class="lnlinks" href="#hl-213-4">4</a>
</span><span class="lnt" id="hl-213-5"><a class="lnlinks" href="#hl-213-5">5</a>
</span><span class="lnt" id="hl-213-6"><a class="lnlinks" href="#hl-213-6">6</a>
</span><span class="lnt" id="hl-213-7"><a class="lnlinks" href="#hl-213-7">7</a>
</span><span class="lnt" id="hl-213-8"><a class="lnlinks" href="#hl-213-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">largestPerimeter</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">A</span><span class="p">);</span><span class="w">							</span><span class="c1">// Sort so the largest sides are at the end.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="o">--</span><span class="n">i</span><span class="p">)</span><span class="w">	</span><span class="c1">// Triangle inequality Theorem : a + b &gt; c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">]</span><span class="p">)</span><span class="w">			</span><span class="c1">// If sum of last two is greater than the last</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// we found out max perimeter, otherwise</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">								</span><span class="c1">// decrease i by i, then check the next three</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// triplets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">											</span><span class="c1">// In the end if nothing works out, we return 0.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ugly-numberhttpsleetcodecomproblemsugly-numbersubmissions"><a href="https://leetcode.com/problems/ugly-number/submissions/">Ugly Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-214-1"><a class="lnlinks" href="#hl-214-1"> 1</a>
</span><span class="lnt" id="hl-214-2"><a class="lnlinks" href="#hl-214-2"> 2</a>
</span><span class="lnt" id="hl-214-3"><a class="lnlinks" href="#hl-214-3"> 3</a>
</span><span class="lnt" id="hl-214-4"><a class="lnlinks" href="#hl-214-4"> 4</a>
</span><span class="lnt" id="hl-214-5"><a class="lnlinks" href="#hl-214-5"> 5</a>
</span><span class="lnt" id="hl-214-6"><a class="lnlinks" href="#hl-214-6"> 6</a>
</span><span class="lnt" id="hl-214-7"><a class="lnlinks" href="#hl-214-7"> 7</a>
</span><span class="lnt" id="hl-214-8"><a class="lnlinks" href="#hl-214-8"> 8</a>
</span><span class="lnt" id="hl-214-9"><a class="lnlinks" href="#hl-214-9"> 9</a>
</span><span class="lnt" id="hl-214-10"><a class="lnlinks" href="#hl-214-10">10</a>
</span><span class="lnt" id="hl-214-11"><a class="lnlinks" href="#hl-214-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isUgly</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">		</span><span class="c1">// Negative numbers are automatically non ugly</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">	</span><span class="c1">// Keep dividing number by 2 till it is divisible</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">	</span><span class="c1">// Keep dividing by 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">	</span><span class="c1">// and 5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">5</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// If num isn&#39;t 1, that means that there are other prime factors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">							</span><span class="c1">// except 2,3 and 5.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="missing-numberhttpsleetcodecomproblemsmissing-number"><a href="https://leetcode.com/problems/missing-number/">Missing Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-215-1"><a class="lnlinks" href="#hl-215-1">1</a>
</span><span class="lnt" id="hl-215-2"><a class="lnlinks" href="#hl-215-2">2</a>
</span><span class="lnt" id="hl-215-3"><a class="lnlinks" href="#hl-215-3">3</a>
</span><span class="lnt" id="hl-215-4"><a class="lnlinks" href="#hl-215-4">4</a>
</span><span class="lnt" id="hl-215-5"><a class="lnlinks" href="#hl-215-5">5</a>
</span><span class="lnt" id="hl-215-6"><a class="lnlinks" href="#hl-215-6">6</a>
</span><span class="lnt" id="hl-215-7"><a class="lnlinks" href="#hl-215-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">missingNumber</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">			</span><span class="c1">// Since it&#39;s given that the array contains</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">nsum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">*</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="p">))</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">	</span><span class="c1">// all numbers from 0-n, we use the formula</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">arraySum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">						</span><span class="c1">// to compute sum of n numbers.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">		</span><span class="c1">// Then we loop through the array to compute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">arraySum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">					</span><span class="c1">// the sum of the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">nsum</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">arraySum</span><span class="p">;</span><span class="w">						</span><span class="c1">// Subtract the array sum from the required</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">												</span><span class="c1">// sum, and that gives us the missing number</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-bad-versionhttpsleetcodecomproblemsfirst-bad-versionsubmissions"><a href="https://leetcode.com/problems/first-bad-version/submissions/">Is Bad Version</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-216-1"><a class="lnlinks" href="#hl-216-1"> 1</a>
</span><span class="lnt" id="hl-216-2"><a class="lnlinks" href="#hl-216-2"> 2</a>
</span><span class="lnt" id="hl-216-3"><a class="lnlinks" href="#hl-216-3"> 3</a>
</span><span class="lnt" id="hl-216-4"><a class="lnlinks" href="#hl-216-4"> 4</a>
</span><span class="lnt" id="hl-216-5"><a class="lnlinks" href="#hl-216-5"> 5</a>
</span><span class="lnt" id="hl-216-6"><a class="lnlinks" href="#hl-216-6"> 6</a>
</span><span class="lnt" id="hl-216-7"><a class="lnlinks" href="#hl-216-7"> 7</a>
</span><span class="lnt" id="hl-216-8"><a class="lnlinks" href="#hl-216-8"> 8</a>
</span><span class="lnt" id="hl-216-9"><a class="lnlinks" href="#hl-216-9"> 9</a>
</span><span class="lnt" id="hl-216-10"><a class="lnlinks" href="#hl-216-10">10</a>
</span><span class="lnt" id="hl-216-11"><a class="lnlinks" href="#hl-216-11">11</a>
</span><span class="lnt" id="hl-216-12"><a class="lnlinks" href="#hl-216-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">firstBadVersion</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">		</span><span class="c1">// Basic Binary Search Algorithm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">low</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">		</span><span class="c1">// high - low to prefent integer overflow.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isBadVersion</span><span class="p">(</span><span class="n">mid</span><span class="p">))</span><span class="w">			</span><span class="c1">// if the model at mid was bad version, then we</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">					</span><span class="c1">// could possibly have a bad version before it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// If it wasn&#39;t, then our first bad version lies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">									</span><span class="c1">// beyond the middle element.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="move-zeroeshttpsleetcodecomproblemsmove-zeroessolution"><a href="https://leetcode.com/problems/move-zeroes/solution/">Move Zeroes</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-217-1"><a class="lnlinks" href="#hl-217-1"> 1</a>
</span><span class="lnt" id="hl-217-2"><a class="lnlinks" href="#hl-217-2"> 2</a>
</span><span class="lnt" id="hl-217-3"><a class="lnlinks" href="#hl-217-3"> 3</a>
</span><span class="lnt" id="hl-217-4"><a class="lnlinks" href="#hl-217-4"> 4</a>
</span><span class="lnt" id="hl-217-5"><a class="lnlinks" href="#hl-217-5"> 5</a>
</span><span class="lnt" id="hl-217-6"><a class="lnlinks" href="#hl-217-6"> 6</a>
</span><span class="lnt" id="hl-217-7"><a class="lnlinks" href="#hl-217-7"> 7</a>
</span><span class="lnt" id="hl-217-8"><a class="lnlinks" href="#hl-217-8"> 8</a>
</span><span class="lnt" id="hl-217-9"><a class="lnlinks" href="#hl-217-9"> 9</a>
</span><span class="lnt" id="hl-217-10"><a class="lnlinks" href="#hl-217-10">10</a>
</span><span class="lnt" id="hl-217-11"><a class="lnlinks" href="#hl-217-11">11</a>
</span><span class="lnt" id="hl-217-12"><a class="lnlinks" href="#hl-217-12">12</a>
</span><span class="lnt" id="hl-217-13"><a class="lnlinks" href="#hl-217-13">13</a>
</span><span class="lnt" id="hl-217-14"><a class="lnlinks" href="#hl-217-14">14</a>
</span><span class="lnt" id="hl-217-15"><a class="lnlinks" href="#hl-217-15">15</a>
</span><span class="lnt" id="hl-217-16"><a class="lnlinks" href="#hl-217-16">16</a>
</span><span class="lnt" id="hl-217-17"><a class="lnlinks" href="#hl-217-17">17</a>
</span><span class="lnt" id="hl-217-18"><a class="lnlinks" href="#hl-217-18">18</a>
</span><span class="lnt" id="hl-217-19"><a class="lnlinks" href="#hl-217-19">19</a>
</span><span class="lnt" id="hl-217-20"><a class="lnlinks" href="#hl-217-20">20</a>
</span><span class="lnt" id="hl-217-21"><a class="lnlinks" href="#hl-217-21">21</a>
</span><span class="lnt" id="hl-217-22"><a class="lnlinks" href="#hl-217-22">22</a>
</span><span class="lnt" id="hl-217-23"><a class="lnlinks" href="#hl-217-23">23</a>
</span><span class="lnt" id="hl-217-24"><a class="lnlinks" href="#hl-217-24">24</a>
</span><span class="lnt" id="hl-217-25"><a class="lnlinks" href="#hl-217-25">25</a>
</span><span class="lnt" id="hl-217-26"><a class="lnlinks" href="#hl-217-26">26</a>
</span><span class="lnt" id="hl-217-27"><a class="lnlinks" href="#hl-217-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that we know the end of the array is going to contain zeroes. So first, iterate over the array, if you find any non-zero value, copy it down to the front of the array. Then we you are done, length of the array minus the last index where you copied the non-zero element is the number of zeroes you need to fill in. So iterate from that last non-zero index to the end of the array and fill in zeroes.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">moveZeroes</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">lastNonZeroIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="o">[</span><span class="n">lastNonZeroIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lastNonZeroIndex</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">This solution is an extension of the above, but a better one because we only swap elements when needed and do not do any unnecessary writes. Start from the beginning of the array, maintain the last position of non-zero value you saw, and the current element. If you see a non-zero value, swap the current value with the index just after the last non-zero index you have, and then increment the non-zero index by 1 because you just found a new non-zero value. This helps us prepare for the next non-zero value we find and copy it at this index+1. By doing so, we are basically partitioning the array into non-zeroes and zero values.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">moveZeroes</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">lastNonZeroIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">lastNonZeroIndex</span><span class="o">++</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="word-patternhttpsleetcodecomproblemsword-pattern"><a href="https://leetcode.com/problems/word-pattern/">Word Pattern</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-218-1"><a class="lnlinks" href="#hl-218-1"> 1</a>
</span><span class="lnt" id="hl-218-2"><a class="lnlinks" href="#hl-218-2"> 2</a>
</span><span class="lnt" id="hl-218-3"><a class="lnlinks" href="#hl-218-3"> 3</a>
</span><span class="lnt" id="hl-218-4"><a class="lnlinks" href="#hl-218-4"> 4</a>
</span><span class="lnt" id="hl-218-5"><a class="lnlinks" href="#hl-218-5"> 5</a>
</span><span class="lnt" id="hl-218-6"><a class="lnlinks" href="#hl-218-6"> 6</a>
</span><span class="lnt" id="hl-218-7"><a class="lnlinks" href="#hl-218-7"> 7</a>
</span><span class="lnt" id="hl-218-8"><a class="lnlinks" href="#hl-218-8"> 8</a>
</span><span class="lnt" id="hl-218-9"><a class="lnlinks" href="#hl-218-9"> 9</a>
</span><span class="lnt" id="hl-218-10"><a class="lnlinks" href="#hl-218-10">10</a>
</span><span class="lnt" id="hl-218-11"><a class="lnlinks" href="#hl-218-11">11</a>
</span><span class="lnt" id="hl-218-12"><a class="lnlinks" href="#hl-218-12">12</a>
</span><span class="lnt" id="hl-218-13"><a class="lnlinks" href="#hl-218-13">13</a>
</span><span class="lnt" id="hl-218-14"><a class="lnlinks" href="#hl-218-14">14</a>
</span><span class="lnt" id="hl-218-15"><a class="lnlinks" href="#hl-218-15">15</a>
</span><span class="lnt" id="hl-218-16"><a class="lnlinks" href="#hl-218-16">16</a>
</span><span class="lnt" id="hl-218-17"><a class="lnlinks" href="#hl-218-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">wordPattern</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">pattern</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">words</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">split</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">		</span><span class="c1">// Split str into words</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">words</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w">	</span><span class="c1">// If length of pattern and words mismatch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">						</span><span class="c1">// then pattern do not match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">patternStore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// Map pattern char to word</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">Character</span><span class="o">&gt;</span><span class="w"> </span><span class="n">wordMap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">		</span><span class="c1">// Map word to pattern char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">words</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pattern</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">					</span><span class="c1">// Get the char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">patternStore</span><span class="p">.</span><span class="na">putIfAbsent</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">		</span><span class="c1">// Put it in patternStore if absent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">patternStore</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="na">equals</span><span class="p">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">))</span><span class="w">	</span><span class="c1">// If it was already there and it doesn&#39;t</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">							</span><span class="c1">// map to words[i], we have a violation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">wordMap</span><span class="p">.</span><span class="na">putIfAbsent</span><span class="p">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">c</span><span class="p">);</span><span class="w">			</span><span class="c1">// Now check the other way around. If</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">wordMap</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w">				</span><span class="c1">// words is absent in the map, map it to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">							</span><span class="c1">// the char. If present, then fetch it&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">												</span><span class="c1">// mapping and check if both match to c.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">							</span><span class="c1">// No violation, so return true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="can-win-nimhttpsleetcodecomproblemsnim-game"><a href="https://leetcode.com/problems/nim-game/">Can Win Nim</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-219-1"><a class="lnlinks" href="#hl-219-1">1</a>
</span><span class="lnt" id="hl-219-2"><a class="lnlinks" href="#hl-219-2">2</a>
</span><span class="lnt" id="hl-219-3"><a class="lnlinks" href="#hl-219-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">canWinNim</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">4</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// You can always win the game if n is not divisible by 4.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-threehttpsleetcodecomproblemspower-of-three"><a href="https://leetcode.com/problems/power-of-three/">Power Of Three</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-220-1"><a class="lnlinks" href="#hl-220-1">1</a>
</span><span class="lnt" id="hl-220-2"><a class="lnlinks" href="#hl-220-2">2</a>
</span><span class="lnt" id="hl-220-3"><a class="lnlinks" href="#hl-220-3">3</a>
</span><span class="lnt" id="hl-220-4"><a class="lnlinks" href="#hl-220-4">4</a>
</span><span class="lnt" id="hl-220-5"><a class="lnlinks" href="#hl-220-5">5</a>
</span><span class="lnt" id="hl-220-6"><a class="lnlinks" href="#hl-220-6">6</a>
</span><span class="lnt" id="hl-220-7"><a class="lnlinks" href="#hl-220-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPowerOfThree</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">				</span><span class="c1">// If negative, it can&#39;t be a power of 3.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// While n is divisible by 3, keep dividing it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">			</span><span class="c1">// In the end, if it was a power of 3, then n should be 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-fourhttpsleetcodecomproblemspower-of-foursubmissions"><a href="https://leetcode.com/problems/power-of-four/submissions/">Power of Four</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-221-1"><a class="lnlinks" href="#hl-221-1">1</a>
</span><span class="lnt" id="hl-221-2"><a class="lnlinks" href="#hl-221-2">2</a>
</span><span class="lnt" id="hl-221-3"><a class="lnlinks" href="#hl-221-3">3</a>
</span><span class="lnt" id="hl-221-4"><a class="lnlinks" href="#hl-221-4">4</a>
</span><span class="lnt" id="hl-221-5"><a class="lnlinks" href="#hl-221-5">5</a>
</span><span class="lnt" id="hl-221-6"><a class="lnlinks" href="#hl-221-6">6</a>
</span><span class="lnt" id="hl-221-7"><a class="lnlinks" href="#hl-221-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">You can also use the iterative method that I have used in Power of Two and Power of Three problems. I just wanted to try a different approach here. This is a constant time function.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPowerOfFour</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">pow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="o">/</span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">4</span><span class="p">);</span><span class="w">	</span><span class="c1">// Calculate x in 4^x = num using logs.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">pow</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pow</span><span class="p">;</span><span class="w">					</span><span class="c1">// Making sure that x is an integer and not a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// fractional exponent.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-stringhttpsleetcodecomproblemsreverse-string"><a href="https://leetcode.com/problems/reverse-string/">Reverse String</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-222-1"><a class="lnlinks" href="#hl-222-1"> 1</a>
</span><span class="lnt" id="hl-222-2"><a class="lnlinks" href="#hl-222-2"> 2</a>
</span><span class="lnt" id="hl-222-3"><a class="lnlinks" href="#hl-222-3"> 3</a>
</span><span class="lnt" id="hl-222-4"><a class="lnlinks" href="#hl-222-4"> 4</a>
</span><span class="lnt" id="hl-222-5"><a class="lnlinks" href="#hl-222-5"> 5</a>
</span><span class="lnt" id="hl-222-6"><a class="lnlinks" href="#hl-222-6"> 6</a>
</span><span class="lnt" id="hl-222-7"><a class="lnlinks" href="#hl-222-7"> 7</a>
</span><span class="lnt" id="hl-222-8"><a class="lnlinks" href="#hl-222-8"> 8</a>
</span><span class="lnt" id="hl-222-9"><a class="lnlinks" href="#hl-222-9"> 9</a>
</span><span class="lnt" id="hl-222-10"><a class="lnlinks" href="#hl-222-10">10</a>
</span><span class="lnt" id="hl-222-11"><a class="lnlinks" href="#hl-222-11">11</a>
</span><span class="lnt" id="hl-222-12"><a class="lnlinks" href="#hl-222-12">12</a>
</span><span class="lnt" id="hl-222-13"><a class="lnlinks" href="#hl-222-13">13</a>
</span><span class="lnt" id="hl-222-14"><a class="lnlinks" href="#hl-222-14">14</a>
</span><span class="lnt" id="hl-222-15"><a class="lnlinks" href="#hl-222-15">15</a>
</span><span class="lnt" id="hl-222-16"><a class="lnlinks" href="#hl-222-16">16</a>
</span><span class="lnt" id="hl-222-17"><a class="lnlinks" href="#hl-222-17">17</a>
</span><span class="lnt" id="hl-222-18"><a class="lnlinks" href="#hl-222-18">18</a>
</span><span class="lnt" id="hl-222-19"><a class="lnlinks" href="#hl-222-19">19</a>
</span><span class="lnt" id="hl-222-20"><a class="lnlinks" href="#hl-222-20">20</a>
</span><span class="lnt" id="hl-222-21"><a class="lnlinks" href="#hl-222-21">21</a>
</span><span class="lnt" id="hl-222-22"><a class="lnlinks" href="#hl-222-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">1 Liner solution. Basically, create a StringBuilder of the string, the builder already has a reverse method, so reverse it and then return it&#39;s toString.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">reverseString</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="na">reverse</span><span class="p">().</span><span class="na">toString</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Golfing aside, here is how one is expected to solve it in an interview.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">reverseString</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">array</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">		</span><span class="c1">// Create a char array of the string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">array</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">				</span><span class="c1">// length of the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">	</span><span class="c1">// We only need to iterate over half the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="kt">char</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// Swap the 0th index element with (len-1)th,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// 1st index element with (len-2)th, until you get</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">			</span><span class="c1">// to the middle element.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">array</span><span class="p">);</span><span class="w">			</span><span class="c1">// Return a new string with the reversed array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-strstrhttpsleetcodecomproblemsimplement-strstrsubmissions"><a href="https://leetcode.com/problems/implement-strstr/submissions/">Implement strStr()</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-223-1"><a class="lnlinks" href="#hl-223-1"> 1</a>
</span><span class="lnt" id="hl-223-2"><a class="lnlinks" href="#hl-223-2"> 2</a>
</span><span class="lnt" id="hl-223-3"><a class="lnlinks" href="#hl-223-3"> 3</a>
</span><span class="lnt" id="hl-223-4"><a class="lnlinks" href="#hl-223-4"> 4</a>
</span><span class="lnt" id="hl-223-5"><a class="lnlinks" href="#hl-223-5"> 5</a>
</span><span class="lnt" id="hl-223-6"><a class="lnlinks" href="#hl-223-6"> 6</a>
</span><span class="lnt" id="hl-223-7"><a class="lnlinks" href="#hl-223-7"> 7</a>
</span><span class="lnt" id="hl-223-8"><a class="lnlinks" href="#hl-223-8"> 8</a>
</span><span class="lnt" id="hl-223-9"><a class="lnlinks" href="#hl-223-9"> 9</a>
</span><span class="lnt" id="hl-223-10"><a class="lnlinks" href="#hl-223-10">10</a>
</span><span class="lnt" id="hl-223-11"><a class="lnlinks" href="#hl-223-11">11</a>
</span><span class="lnt" id="hl-223-12"><a class="lnlinks" href="#hl-223-12">12</a>
</span><span class="lnt" id="hl-223-13"><a class="lnlinks" href="#hl-223-13">13</a>
</span><span class="lnt" id="hl-223-14"><a class="lnlinks" href="#hl-223-14">14</a>
</span><span class="lnt" id="hl-223-15"><a class="lnlinks" href="#hl-223-15">15</a>
</span><span class="lnt" id="hl-223-16"><a class="lnlinks" href="#hl-223-16">16</a>
</span><span class="lnt" id="hl-223-17"><a class="lnlinks" href="#hl-223-17">17</a>
</span><span class="lnt" id="hl-223-18"><a class="lnlinks" href="#hl-223-18">18</a>
</span><span class="lnt" id="hl-223-19"><a class="lnlinks" href="#hl-223-19">19</a>
</span><span class="lnt" id="hl-223-20"><a class="lnlinks" href="#hl-223-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is that you only need to iterate haystack length - needle length, and then check the substring of size = needle length in haystack from each index. If you are successfully able to match each character of the needle in the corresponding substring in haystack, return the index you start from. 
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">strStr</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">haystack</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">needle</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">needle</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">haystack</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w">	</span><span class="c1">// Needle length can&#39;t be &gt; than haystack</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">hl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">haystack</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">nl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">needle</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nl</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">								</span><span class="c1">// Empty strings are always a match starting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">								</span><span class="c1">// from 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">hl</span><span class="o">-</span><span class="n">nl</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">			</span><span class="c1">// Iterate haystack length - needle length.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nl</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">haystack</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">needle</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">);</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">)}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">nl</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">						</span><span class="c1">// We are checking how far from i can we</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">						</span><span class="c1">// match. If i matched with j, increment j</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">										</span><span class="c1">// and then match the character i+1 to j.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">											</span><span class="c1">// If that matches, increment j and match i+2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">									</span><span class="c1">// j == n-1 checked wether or not if we were</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">												</span><span class="c1">// able to match the full needle string, if</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// yes, then i is our index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// in the end, nothing matched, so return -1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-vowels-of-a-stringhttpsleetcodecomproblemsreverse-vowels-of-a-string"><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">Reverse Vowels of a String</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-224-1"><a class="lnlinks" href="#hl-224-1"> 1</a>
</span><span class="lnt" id="hl-224-2"><a class="lnlinks" href="#hl-224-2"> 2</a>
</span><span class="lnt" id="hl-224-3"><a class="lnlinks" href="#hl-224-3"> 3</a>
</span><span class="lnt" id="hl-224-4"><a class="lnlinks" href="#hl-224-4"> 4</a>
</span><span class="lnt" id="hl-224-5"><a class="lnlinks" href="#hl-224-5"> 5</a>
</span><span class="lnt" id="hl-224-6"><a class="lnlinks" href="#hl-224-6"> 6</a>
</span><span class="lnt" id="hl-224-7"><a class="lnlinks" href="#hl-224-7"> 7</a>
</span><span class="lnt" id="hl-224-8"><a class="lnlinks" href="#hl-224-8"> 8</a>
</span><span class="lnt" id="hl-224-9"><a class="lnlinks" href="#hl-224-9"> 9</a>
</span><span class="lnt" id="hl-224-10"><a class="lnlinks" href="#hl-224-10">10</a>
</span><span class="lnt" id="hl-224-11"><a class="lnlinks" href="#hl-224-11">11</a>
</span><span class="lnt" id="hl-224-12"><a class="lnlinks" href="#hl-224-12">12</a>
</span><span class="lnt" id="hl-224-13"><a class="lnlinks" href="#hl-224-13">13</a>
</span><span class="lnt" id="hl-224-14"><a class="lnlinks" href="#hl-224-14">14</a>
</span><span class="lnt" id="hl-224-15"><a class="lnlinks" href="#hl-224-15">15</a>
</span><span class="lnt" id="hl-224-16"><a class="lnlinks" href="#hl-224-16">16</a>
</span><span class="lnt" id="hl-224-17"><a class="lnlinks" href="#hl-224-17">17</a>
</span><span class="lnt" id="hl-224-18"><a class="lnlinks" href="#hl-224-18">18</a>
</span><span class="lnt" id="hl-224-19"><a class="lnlinks" href="#hl-224-19">19</a>
</span><span class="lnt" id="hl-224-20"><a class="lnlinks" href="#hl-224-20">20</a>
</span><span class="lnt" id="hl-224-21"><a class="lnlinks" href="#hl-224-21">21</a>
</span><span class="lnt" id="hl-224-22"><a class="lnlinks" href="#hl-224-22">22</a>
</span><span class="lnt" id="hl-224-23"><a class="lnlinks" href="#hl-224-23">23</a>
</span><span class="lnt" id="hl-224-24"><a class="lnlinks" href="#hl-224-24">24</a>
</span><span class="lnt" id="hl-224-25"><a class="lnlinks" href="#hl-224-25">25</a>
</span><span class="lnt" id="hl-224-26"><a class="lnlinks" href="#hl-224-26">26</a>
</span><span class="lnt" id="hl-224-27"><a class="lnlinks" href="#hl-224-27">27</a>
</span><span class="lnt" id="hl-224-28"><a class="lnlinks" href="#hl-224-28">28</a>
</span><span class="lnt" id="hl-224-29"><a class="lnlinks" href="#hl-224-29">29</a>
</span><span class="lnt" id="hl-224-30"><a class="lnlinks" href="#hl-224-30">30</a>
</span><span class="lnt" id="hl-224-31"><a class="lnlinks" href="#hl-224-31">31</a>
</span><span class="lnt" id="hl-224-32"><a class="lnlinks" href="#hl-224-32">32</a>
</span><span class="lnt" id="hl-224-33"><a class="lnlinks" href="#hl-224-33">33</a>
</span><span class="lnt" id="hl-224-34"><a class="lnlinks" href="#hl-224-34">34</a>
</span><span class="lnt" id="hl-224-35"><a class="lnlinks" href="#hl-224-35">35</a>
</span><span class="lnt" id="hl-224-36"><a class="lnlinks" href="#hl-224-36">36</a>
</span><span class="lnt" id="hl-224-37"><a class="lnlinks" href="#hl-224-37">37</a>
</span><span class="lnt" id="hl-224-38"><a class="lnlinks" href="#hl-224-38">38</a>
</span><span class="lnt" id="hl-224-39"><a class="lnlinks" href="#hl-224-39">39</a>
</span><span class="lnt" id="hl-224-40"><a class="lnlinks" href="#hl-224-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">reverseVowels</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">					</span><span class="c1">// No need to reverse a string of length 0 or 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">	</span><span class="c1">// Get the char array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">isVowel</span><span class="p">(</span><span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">))</span><span class="w">		</span><span class="c1">// While left is pointing to a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">										</span><span class="c1">// consonant, increment it/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">isVowel</span><span class="p">(</span><span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">))</span><span class="w">	</span><span class="c1">// While right is pointing to a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">right</span><span class="o">--</span><span class="p">;</span><span class="w">									</span><span class="c1">// consonant, decrement it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">;</span><span class="w">							</span><span class="c1">// Left and right are now pointing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">;</span><span class="w">							</span><span class="c1">// to vowels, so swap it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">								</span><span class="c1">// And then increment left and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">left</span><span class="o">++</span><span class="p">;</span><span class="w">											</span><span class="c1">// decrement right to process the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">right</span><span class="o">--</span><span class="p">;</span><span class="w">										</span><span class="c1">// inner string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">str</span><span class="p">);</span><span class="w">			</span><span class="c1">// Return a string from the reveresed array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isVowel</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">){</span><span class="w">	</span><span class="c1">// Function to check if a character is a vowel.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;e&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;i&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;o&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;u&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;E&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;I&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;O&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;U&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="intersection-of-two-arrayshttpsleetcodecomproblemsintersection-of-two-arrays"><a href="https://leetcode.com/problems/intersection-of-two-arrays/">Intersection of two arrays</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-225-1"><a class="lnlinks" href="#hl-225-1"> 1</a>
</span><span class="lnt" id="hl-225-2"><a class="lnlinks" href="#hl-225-2"> 2</a>
</span><span class="lnt" id="hl-225-3"><a class="lnlinks" href="#hl-225-3"> 3</a>
</span><span class="lnt" id="hl-225-4"><a class="lnlinks" href="#hl-225-4"> 4</a>
</span><span class="lnt" id="hl-225-5"><a class="lnlinks" href="#hl-225-5"> 5</a>
</span><span class="lnt" id="hl-225-6"><a class="lnlinks" href="#hl-225-6"> 6</a>
</span><span class="lnt" id="hl-225-7"><a class="lnlinks" href="#hl-225-7"> 7</a>
</span><span class="lnt" id="hl-225-8"><a class="lnlinks" href="#hl-225-8"> 8</a>
</span><span class="lnt" id="hl-225-9"><a class="lnlinks" href="#hl-225-9"> 9</a>
</span><span class="lnt" id="hl-225-10"><a class="lnlinks" href="#hl-225-10">10</a>
</span><span class="lnt" id="hl-225-11"><a class="lnlinks" href="#hl-225-11">11</a>
</span><span class="lnt" id="hl-225-12"><a class="lnlinks" href="#hl-225-12">12</a>
</span><span class="lnt" id="hl-225-13"><a class="lnlinks" href="#hl-225-13">13</a>
</span><span class="lnt" id="hl-225-14"><a class="lnlinks" href="#hl-225-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">intersection</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums1</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">set1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">();</span><span class="w">		</span><span class="c1">// Record all unique values in set 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set1</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">intersect</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">		</span><span class="c1">// We will use it to record intersection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums2</span><span class="p">)</span><span class="w">								</span><span class="c1">// For each value in nums2 array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">set1</span><span class="p">.</span><span class="na">contains</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="w">						</span><span class="c1">// If set1 contains it, we found an</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">intersect</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">						</span><span class="c1">// intersecting element, so add it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">intersect</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// We will now convert the set to an</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">										</span><span class="c1">// array and then return the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">:</span><span class="w"> </span><span class="n">intersect</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">res</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-perfect-squarehttpsleetcodecomproblemsvalid-perfect-square"><a href="https://leetcode.com/problems/valid-perfect-square/">Is Perfect Square</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-226-1"><a class="lnlinks" href="#hl-226-1"> 1</a>
</span><span class="lnt" id="hl-226-2"><a class="lnlinks" href="#hl-226-2"> 2</a>
</span><span class="lnt" id="hl-226-3"><a class="lnlinks" href="#hl-226-3"> 3</a>
</span><span class="lnt" id="hl-226-4"><a class="lnlinks" href="#hl-226-4"> 4</a>
</span><span class="lnt" id="hl-226-5"><a class="lnlinks" href="#hl-226-5"> 5</a>
</span><span class="lnt" id="hl-226-6"><a class="lnlinks" href="#hl-226-6"> 6</a>
</span><span class="lnt" id="hl-226-7"><a class="lnlinks" href="#hl-226-7"> 7</a>
</span><span class="lnt" id="hl-226-8"><a class="lnlinks" href="#hl-226-8"> 8</a>
</span><span class="lnt" id="hl-226-9"><a class="lnlinks" href="#hl-226-9"> 9</a>
</span><span class="lnt" id="hl-226-10"><a class="lnlinks" href="#hl-226-10">10</a>
</span><span class="lnt" id="hl-226-11"><a class="lnlinks" href="#hl-226-11">11</a>
</span><span class="lnt" id="hl-226-12"><a class="lnlinks" href="#hl-226-12">12</a>
</span><span class="lnt" id="hl-226-13"><a class="lnlinks" href="#hl-226-13">13</a>
</span><span class="lnt" id="hl-226-14"><a class="lnlinks" href="#hl-226-14">14</a>
</span><span class="lnt" id="hl-226-15"><a class="lnlinks" href="#hl-226-15">15</a>
</span><span class="lnt" id="hl-226-16"><a class="lnlinks" href="#hl-226-16">16</a>
</span><span class="lnt" id="hl-226-17"><a class="lnlinks" href="#hl-226-17">17</a>
</span><span class="lnt" id="hl-226-18"><a class="lnlinks" href="#hl-226-18">18</a>
</span><span class="lnt" id="hl-226-19"><a class="lnlinks" href="#hl-226-19">19</a>
</span><span class="lnt" id="hl-226-20"><a class="lnlinks" href="#hl-226-20">20</a>
</span><span class="lnt" id="hl-226-21"><a class="lnlinks" href="#hl-226-21">21</a>
</span><span class="lnt" id="hl-226-22"><a class="lnlinks" href="#hl-226-22">22</a>
</span><span class="lnt" id="hl-226-23"><a class="lnlinks" href="#hl-226-23">23</a>
</span><span class="lnt" id="hl-226-24"><a class="lnlinks" href="#hl-226-24">24</a>
</span><span class="lnt" id="hl-226-25"><a class="lnlinks" href="#hl-226-25">25</a>
</span><span class="lnt" id="hl-226-26"><a class="lnlinks" href="#hl-226-26">26</a>
</span><span class="lnt" id="hl-226-27"><a class="lnlinks" href="#hl-226-27">27</a>
</span><span class="lnt" id="hl-226-28"><a class="lnlinks" href="#hl-226-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is to close in on the square root using binary search algorithm. 
</span></span></span><span class="line"><span class="cl"><span class="cm">I handle 4 seperately because it&#39;s root is the only one where 4/3 &lt; it&#39;s square root. 
</span></span></span><span class="line"><span class="cl"><span class="cm">All other numbers square root is greater than its value/3.
</span></span></span><span class="line"><span class="cl"><span class="cm">So we create a lowerBound of 1 and an upperBound of num/3. Then if the middle value&#39;s square
</span></span></span><span class="line"><span class="cl"><span class="cm">overshoots, we make upperBound = mid-1, otherwise increment lowerBound to mid+1. This way, we
</span></span></span><span class="line"><span class="cl"><span class="cm">close on the square root from both sides, and if the middle values is the square root, it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">square will yield num.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isPerfectSquare</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">lowerBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">upperBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num</span><span class="o">/</span><span class="n">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">square</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">lowerBound</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">upperBound</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lowerBound</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">upperBound</span><span class="o">-</span><span class="n">lowerBound</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">square</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">*</span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">square</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">square</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">upperBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">lowerBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sum-of-two-integershttpsleetcodecomproblemssum-of-two-integers"><a href="https://leetcode.com/problems/sum-of-two-integers/">Sum of Two Integers</a></h3>
<p>I cannot explain it better than this <a href="https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution">post</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-227-1"><a class="lnlinks" href="#hl-227-1"> 1</a>
</span><span class="lnt" id="hl-227-2"><a class="lnlinks" href="#hl-227-2"> 2</a>
</span><span class="lnt" id="hl-227-3"><a class="lnlinks" href="#hl-227-3"> 3</a>
</span><span class="lnt" id="hl-227-4"><a class="lnlinks" href="#hl-227-4"> 4</a>
</span><span class="lnt" id="hl-227-5"><a class="lnlinks" href="#hl-227-5"> 5</a>
</span><span class="lnt" id="hl-227-6"><a class="lnlinks" href="#hl-227-6"> 6</a>
</span><span class="lnt" id="hl-227-7"><a class="lnlinks" href="#hl-227-7"> 7</a>
</span><span class="lnt" id="hl-227-8"><a class="lnlinks" href="#hl-227-8"> 8</a>
</span><span class="lnt" id="hl-227-9"><a class="lnlinks" href="#hl-227-9"> 9</a>
</span><span class="lnt" id="hl-227-10"><a class="lnlinks" href="#hl-227-10">10</a>
</span><span class="lnt" id="hl-227-11"><a class="lnlinks" href="#hl-227-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">carry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">carry</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">getSum</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="w"> </span><span class="n">carry</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="guess-number-higher-or-lowerhttpsleetcodecomproblemsguess-number-higher-or-lower"><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">Guess Number Higher or Lower</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-228-1"><a class="lnlinks" href="#hl-228-1"> 1</a>
</span><span class="lnt" id="hl-228-2"><a class="lnlinks" href="#hl-228-2"> 2</a>
</span><span class="lnt" id="hl-228-3"><a class="lnlinks" href="#hl-228-3"> 3</a>
</span><span class="lnt" id="hl-228-4"><a class="lnlinks" href="#hl-228-4"> 4</a>
</span><span class="lnt" id="hl-228-5"><a class="lnlinks" href="#hl-228-5"> 5</a>
</span><span class="lnt" id="hl-228-6"><a class="lnlinks" href="#hl-228-6"> 6</a>
</span><span class="lnt" id="hl-228-7"><a class="lnlinks" href="#hl-228-7"> 7</a>
</span><span class="lnt" id="hl-228-8"><a class="lnlinks" href="#hl-228-8"> 8</a>
</span><span class="lnt" id="hl-228-9"><a class="lnlinks" href="#hl-228-9"> 9</a>
</span><span class="lnt" id="hl-228-10"><a class="lnlinks" href="#hl-228-10">10</a>
</span><span class="lnt" id="hl-228-11"><a class="lnlinks" href="#hl-228-11">11</a>
</span><span class="lnt" id="hl-228-12"><a class="lnlinks" href="#hl-228-12">12</a>
</span><span class="lnt" id="hl-228-13"><a class="lnlinks" href="#hl-228-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">guessNumber</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">				</span><span class="c1">// Standard binary search algorithm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">2</span><span class="p">;</span><span class="w">		</span><span class="c1">// Arbitrary result, but not 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">high</span><span class="o">-</span><span class="n">low</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">			</span><span class="c1">// Check the mid.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guess</span><span class="p">(</span><span class="n">mid</span><span class="p">);</span><span class="w">				</span><span class="c1">// Check if our guess is correct</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">					</span><span class="c1">// If result == -1, then we overshot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">					</span><span class="c1">// So we can discard all values &gt; mid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">result</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">				</span><span class="c1">// If result == 1, we undershot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">					</span><span class="c1">// Need to discard all the values &lt; mid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">								</span><span class="c1">// Result == 0, so return the mid.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ransom-notehttpsleetcodecomproblemsransom-notesubmissions"><a href="https://leetcode.com/problems/ransom-note/submissions/">Ransom Note</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-229-1"><a class="lnlinks" href="#hl-229-1"> 1</a>
</span><span class="lnt" id="hl-229-2"><a class="lnlinks" href="#hl-229-2"> 2</a>
</span><span class="lnt" id="hl-229-3"><a class="lnlinks" href="#hl-229-3"> 3</a>
</span><span class="lnt" id="hl-229-4"><a class="lnlinks" href="#hl-229-4"> 4</a>
</span><span class="lnt" id="hl-229-5"><a class="lnlinks" href="#hl-229-5"> 5</a>
</span><span class="lnt" id="hl-229-6"><a class="lnlinks" href="#hl-229-6"> 6</a>
</span><span class="lnt" id="hl-229-7"><a class="lnlinks" href="#hl-229-7"> 7</a>
</span><span class="lnt" id="hl-229-8"><a class="lnlinks" href="#hl-229-8"> 8</a>
</span><span class="lnt" id="hl-229-9"><a class="lnlinks" href="#hl-229-9"> 9</a>
</span><span class="lnt" id="hl-229-10"><a class="lnlinks" href="#hl-229-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">canConstruct</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">ransomNote</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">magazine</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">magazine</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">		</span><span class="c1">// First, fill the store with available</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++</span><span class="p">;</span><span class="w">							</span><span class="c1">// characters from the magazine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">ransomNote</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">		</span><span class="c1">// Then, scan through the note, decrement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">--</span><span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">					</span><span class="c1">// each char&#39;s index by 1 because we used</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">						</span><span class="c1">// it. If it&#39;s frequency drops below 0,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">								</span><span class="c1">// then it means that we need more chars</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">												</span><span class="c1">// than available. In the end, return</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">												</span><span class="c1">// true if everything worked out.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="first-unique-character-in-a-stringhttpsleetcodecomproblemsfirst-unique-character-in-a-stringsubmissions"><a href="https://leetcode.com/problems/first-unique-character-in-a-string/submissions/">First Unique Character in a String</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-230-1"><a class="lnlinks" href="#hl-230-1"> 1</a>
</span><span class="lnt" id="hl-230-2"><a class="lnlinks" href="#hl-230-2"> 2</a>
</span><span class="lnt" id="hl-230-3"><a class="lnlinks" href="#hl-230-3"> 3</a>
</span><span class="lnt" id="hl-230-4"><a class="lnlinks" href="#hl-230-4"> 4</a>
</span><span class="lnt" id="hl-230-5"><a class="lnlinks" href="#hl-230-5"> 5</a>
</span><span class="lnt" id="hl-230-6"><a class="lnlinks" href="#hl-230-6"> 6</a>
</span><span class="lnt" id="hl-230-7"><a class="lnlinks" href="#hl-230-7"> 7</a>
</span><span class="lnt" id="hl-230-8"><a class="lnlinks" href="#hl-230-8"> 8</a>
</span><span class="lnt" id="hl-230-9"><a class="lnlinks" href="#hl-230-9"> 9</a>
</span><span class="lnt" id="hl-230-10"><a class="lnlinks" href="#hl-230-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">firstUniqChar</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// Preprocess freq array to maintain freq of each</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">chars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">		</span><span class="c1">// character in the string s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">chars</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">chars</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">	</span><span class="c1">// Make a second pass through the chars of the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">freq</span><span class="o">[</span><span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">		</span><span class="c1">// string in order, and if any of the char&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">						</span><span class="c1">// frequency is 1, that&#39;s our unique char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">								</span><span class="c1">// Otherwise, no unique character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-the-differencehttpsleetcodecomproblemsfind-the-difference"><a href="https://leetcode.com/problems/find-the-difference/">Find the Difference</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-231-1"><a class="lnlinks" href="#hl-231-1"> 1</a>
</span><span class="lnt" id="hl-231-2"><a class="lnlinks" href="#hl-231-2"> 2</a>
</span><span class="lnt" id="hl-231-3"><a class="lnlinks" href="#hl-231-3"> 3</a>
</span><span class="lnt" id="hl-231-4"><a class="lnlinks" href="#hl-231-4"> 4</a>
</span><span class="lnt" id="hl-231-5"><a class="lnlinks" href="#hl-231-5"> 5</a>
</span><span class="lnt" id="hl-231-6"><a class="lnlinks" href="#hl-231-6"> 6</a>
</span><span class="lnt" id="hl-231-7"><a class="lnlinks" href="#hl-231-7"> 7</a>
</span><span class="lnt" id="hl-231-8"><a class="lnlinks" href="#hl-231-8"> 8</a>
</span><span class="lnt" id="hl-231-9"><a class="lnlinks" href="#hl-231-9"> 9</a>
</span><span class="lnt" id="hl-231-10"><a class="lnlinks" href="#hl-231-10">10</a>
</span><span class="lnt" id="hl-231-11"><a class="lnlinks" href="#hl-231-11">11</a>
</span><span class="lnt" id="hl-231-12"><a class="lnlinks" href="#hl-231-12">12</a>
</span><span class="lnt" id="hl-231-13"><a class="lnlinks" href="#hl-231-13">13</a>
</span><span class="lnt" id="hl-231-14"><a class="lnlinks" href="#hl-231-14">14</a>
</span><span class="lnt" id="hl-231-15"><a class="lnlinks" href="#hl-231-15">15</a>
</span><span class="lnt" id="hl-231-16"><a class="lnlinks" href="#hl-231-16">16</a>
</span><span class="lnt" id="hl-231-17"><a class="lnlinks" href="#hl-231-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea here is same as the problem where we are required to find a unique int
</span></span></span><span class="line"><span class="cl"><span class="cm">in an array containing duplicates except one. We use the xor operator between each character
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string s and t, and the ones that are duplicate will xor to give 0. XOR of any element
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 is the element itself, and XOR of two same elements gives 0. This way, since string s
</span></span></span><span class="line"><span class="cl"><span class="cm">and t basically has pairs of repeating characters except one, the unique element will XOR
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 and give us it&#39;s ASCII code. The only thing we need to take care of is to now shift it
</span></span></span><span class="line"><span class="cl"><span class="cm">up by 26, so we add &#39;a&#39; and convert it to char.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="nf">findTheDifference</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">xor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xor</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">xor</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">xor</span><span class="o">+</span><span class="sc">&#39;a&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="nth-digithttpsleetcodecomproblemsnth-digit"><a href="https://leetcode.com/problems/nth-digit/">Nth Digit</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-232-1"><a class="lnlinks" href="#hl-232-1"> 1</a>
</span><span class="lnt" id="hl-232-2"><a class="lnlinks" href="#hl-232-2"> 2</a>
</span><span class="lnt" id="hl-232-3"><a class="lnlinks" href="#hl-232-3"> 3</a>
</span><span class="lnt" id="hl-232-4"><a class="lnlinks" href="#hl-232-4"> 4</a>
</span><span class="lnt" id="hl-232-5"><a class="lnlinks" href="#hl-232-5"> 5</a>
</span><span class="lnt" id="hl-232-6"><a class="lnlinks" href="#hl-232-6"> 6</a>
</span><span class="lnt" id="hl-232-7"><a class="lnlinks" href="#hl-232-7"> 7</a>
</span><span class="lnt" id="hl-232-8"><a class="lnlinks" href="#hl-232-8"> 8</a>
</span><span class="lnt" id="hl-232-9"><a class="lnlinks" href="#hl-232-9"> 9</a>
</span><span class="lnt" id="hl-232-10"><a class="lnlinks" href="#hl-232-10">10</a>
</span><span class="lnt" id="hl-232-11"><a class="lnlinks" href="#hl-232-11">11</a>
</span><span class="lnt" id="hl-232-12"><a class="lnlinks" href="#hl-232-12">12</a>
</span><span class="lnt" id="hl-232-13"><a class="lnlinks" href="#hl-232-13">13</a>
</span><span class="lnt" id="hl-232-14"><a class="lnlinks" href="#hl-232-14">14</a>
</span><span class="lnt" id="hl-232-15"><a class="lnlinks" href="#hl-232-15">15</a>
</span><span class="lnt" id="hl-232-16"><a class="lnlinks" href="#hl-232-16">16</a>
</span><span class="lnt" id="hl-232-17"><a class="lnlinks" href="#hl-232-17">17</a>
</span><span class="lnt" id="hl-232-18"><a class="lnlinks" href="#hl-232-18">18</a>
</span><span class="lnt" id="hl-232-19"><a class="lnlinks" href="#hl-232-19">19</a>
</span><span class="lnt" id="hl-232-20"><a class="lnlinks" href="#hl-232-20">20</a>
</span><span class="lnt" id="hl-232-21"><a class="lnlinks" href="#hl-232-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">Notice that # of digits between 0-9 is 1*9, 10-99 is 2*90, 100-999 is 3*900. If we generalize
</span></span></span><span class="line"><span class="cl"><span class="cm">it, it is exactly equal to 9 * (num of digits in the number) * 10^{# of digits - 1}.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findNthDigit</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// First we need to figure out how many digits there are</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">upperBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w">		</span><span class="c1">// in the number.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">upperBound</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="n">upperBound</span><span class="p">;</span><span class="w">		</span><span class="c1">// If n is a two digit number, subtract the 9 single digit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">pow</span><span class="p">;</span><span class="w">					</span><span class="c1">// numbers, if 3 digit, subtract the first 189 digits.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">upperBound</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">10</span><span class="p">,</span><span class="w"> </span><span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">pow</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">							</span><span class="c1">// pow allows us to track how many digits there are in num.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">10</span><span class="p">,</span><span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="o">/</span><span class="n">pow</span><span class="p">;</span><span class="w">		</span><span class="c1">// Calculate which number we want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pow</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">pow</span><span class="p">;</span><span class="w">				</span><span class="c1">// Calculate which index we want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">position</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w">					</span><span class="c1">// Divide num that many times</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w">									</span><span class="c1">// num % 10 gives us that digit.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sum-of-left-leaveshttpsleetcodecomproblemssum-of-left-leaves"><a href="https://leetcode.com/problems/sum-of-left-leaves/">Sum of Left Leaves</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-233-1"><a class="lnlinks" href="#hl-233-1"> 1</a>
</span><span class="lnt" id="hl-233-2"><a class="lnlinks" href="#hl-233-2"> 2</a>
</span><span class="lnt" id="hl-233-3"><a class="lnlinks" href="#hl-233-3"> 3</a>
</span><span class="lnt" id="hl-233-4"><a class="lnlinks" href="#hl-233-4"> 4</a>
</span><span class="lnt" id="hl-233-5"><a class="lnlinks" href="#hl-233-5"> 5</a>
</span><span class="lnt" id="hl-233-6"><a class="lnlinks" href="#hl-233-6"> 6</a>
</span><span class="lnt" id="hl-233-7"><a class="lnlinks" href="#hl-233-7"> 7</a>
</span><span class="lnt" id="hl-233-8"><a class="lnlinks" href="#hl-233-8"> 8</a>
</span><span class="lnt" id="hl-233-9"><a class="lnlinks" href="#hl-233-9"> 9</a>
</span><span class="lnt" id="hl-233-10"><a class="lnlinks" href="#hl-233-10">10</a>
</span><span class="lnt" id="hl-233-11"><a class="lnlinks" href="#hl-233-11">11</a>
</span><span class="lnt" id="hl-233-12"><a class="lnlinks" href="#hl-233-12">12</a>
</span><span class="lnt" id="hl-233-13"><a class="lnlinks" href="#hl-233-13">13</a>
</span><span class="lnt" id="hl-233-14"><a class="lnlinks" href="#hl-233-14">14</a>
</span><span class="lnt" id="hl-233-15"><a class="lnlinks" href="#hl-233-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">sumOfLeftLeaves</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">		</span><span class="c1">// Empty tree, therefore total is 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// Initialize sum.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Look ahead and check. If left is not null but left is a leaf, then sum is the value of the left leaf.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// But if left is null or left is an inner node, then we need to explore it, so sum is whatever the subtree from the left node returns.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sumOfLeftLeaves</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// We computed the sum of the left side. Now we need to traverse the right side and fetch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// the sum, so total sum is sum of the left side as computed above + sum returned by</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// traversing the right side.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">sumOfLeftLeaves</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-palindromehttpsleetcodecomproblemslongest-palindrome"><a href="https://leetcode.com/problems/longest-palindrome/">Longest Palindrome</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-234-1"><a class="lnlinks" href="#hl-234-1"> 1</a>
</span><span class="lnt" id="hl-234-2"><a class="lnlinks" href="#hl-234-2"> 2</a>
</span><span class="lnt" id="hl-234-3"><a class="lnlinks" href="#hl-234-3"> 3</a>
</span><span class="lnt" id="hl-234-4"><a class="lnlinks" href="#hl-234-4"> 4</a>
</span><span class="lnt" id="hl-234-5"><a class="lnlinks" href="#hl-234-5"> 5</a>
</span><span class="lnt" id="hl-234-6"><a class="lnlinks" href="#hl-234-6"> 6</a>
</span><span class="lnt" id="hl-234-7"><a class="lnlinks" href="#hl-234-7"> 7</a>
</span><span class="lnt" id="hl-234-8"><a class="lnlinks" href="#hl-234-8"> 8</a>
</span><span class="lnt" id="hl-234-9"><a class="lnlinks" href="#hl-234-9"> 9</a>
</span><span class="lnt" id="hl-234-10"><a class="lnlinks" href="#hl-234-10">10</a>
</span><span class="lnt" id="hl-234-11"><a class="lnlinks" href="#hl-234-11">11</a>
</span><span class="lnt" id="hl-234-12"><a class="lnlinks" href="#hl-234-12">12</a>
</span><span class="lnt" id="hl-234-13"><a class="lnlinks" href="#hl-234-13">13</a>
</span><span class="lnt" id="hl-234-14"><a class="lnlinks" href="#hl-234-14">14</a>
</span><span class="lnt" id="hl-234-15"><a class="lnlinks" href="#hl-234-15">15</a>
</span><span class="lnt" id="hl-234-16"><a class="lnlinks" href="#hl-234-16">16</a>
</span><span class="lnt" id="hl-234-17"><a class="lnlinks" href="#hl-234-17">17</a>
</span><span class="lnt" id="hl-234-18"><a class="lnlinks" href="#hl-234-18">18</a>
</span><span class="lnt" id="hl-234-19"><a class="lnlinks" href="#hl-234-19">19</a>
</span><span class="lnt" id="hl-234-20"><a class="lnlinks" href="#hl-234-20">20</a>
</span><span class="lnt" id="hl-234-21"><a class="lnlinks" href="#hl-234-21">21</a>
</span><span class="lnt" id="hl-234-22"><a class="lnlinks" href="#hl-234-22">22</a>
</span><span class="lnt" id="hl-234-23"><a class="lnlinks" href="#hl-234-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">longestPalindrome</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// To record the frequency of each char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">]++</span><span class="p">;</span><span class="w">					</span><span class="c1">// Increment count by 1 for each character observed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">					</span><span class="c1">// length of the longest palindrome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="w"> </span><span class="n">isOdd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">			</span><span class="c1">// Check if our palindrome length is odd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">128</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">	</span><span class="c1">// Go through each character&#39;s index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">			</span><span class="c1">// Only if it has been observed atleast once</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// Store it&#39;s frequency</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">used</span><span class="p">;</span><span class="w">				</span><span class="c1">// Record how many of it&#39;s occurrences we will use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// If a perfect multiple of 2, we will use all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">used</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">used</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// If odd occurrences, then the max we can use to form a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">isOdd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">		</span><span class="c1">// valid palindrome is val-1. It also tells us that the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">						</span><span class="c1">// palindrome is going to be of odd length.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">len</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">used</span><span class="p">;</span><span class="w">			</span><span class="c1">// Finally, increment length by the number of chars used</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isOdd</span><span class="p">)</span><span class="w">						</span><span class="c1">// If length is odd, we can always insert any single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// character in the middle to keep the palindrome valid.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">						</span><span class="c1">// If the length is even, then we can&#39;t do anything.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fizz-buzzhttpsleetcodecomproblemsfizz-buzz"><a href="https://leetcode.com/problems/fizz-buzz/">Fizz Buzz</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-235-1"><a class="lnlinks" href="#hl-235-1"> 1</a>
</span><span class="lnt" id="hl-235-2"><a class="lnlinks" href="#hl-235-2"> 2</a>
</span><span class="lnt" id="hl-235-3"><a class="lnlinks" href="#hl-235-3"> 3</a>
</span><span class="lnt" id="hl-235-4"><a class="lnlinks" href="#hl-235-4"> 4</a>
</span><span class="lnt" id="hl-235-5"><a class="lnlinks" href="#hl-235-5"> 5</a>
</span><span class="lnt" id="hl-235-6"><a class="lnlinks" href="#hl-235-6"> 6</a>
</span><span class="lnt" id="hl-235-7"><a class="lnlinks" href="#hl-235-7"> 7</a>
</span><span class="lnt" id="hl-235-8"><a class="lnlinks" href="#hl-235-8"> 8</a>
</span><span class="lnt" id="hl-235-9"><a class="lnlinks" href="#hl-235-9"> 9</a>
</span><span class="lnt" id="hl-235-10"><a class="lnlinks" href="#hl-235-10">10</a>
</span><span class="lnt" id="hl-235-11"><a class="lnlinks" href="#hl-235-11">11</a>
</span><span class="lnt" id="hl-235-12"><a class="lnlinks" href="#hl-235-12">12</a>
</span><span class="lnt" id="hl-235-13"><a class="lnlinks" href="#hl-235-13">13</a>
</span><span class="lnt" id="hl-235-14"><a class="lnlinks" href="#hl-235-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">fizzBuzz</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">nums</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">				</span><span class="c1">// Loop from 1 to n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">15</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">						</span><span class="c1">// If i divisible by 15, add &#34;FizzBuzz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">5</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">					</span><span class="c1">// i&#39;s not a multiple of 15, check if it&#39;s a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="s">&#34;Buzz&#34;</span><span class="p">);</span><span class="w">					</span><span class="c1">// multiple of 5. If so, add &#34;Buzz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">					</span><span class="c1">// i&#39;s not a multiple of 5, check if it&#39;s a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="s">&#34;Fizz&#34;</span><span class="p">);</span><span class="w">					</span><span class="c1">// multiple of 3, if so, add &#34;Fizz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34;&#34;</span><span class="p">);</span><span class="w">						</span><span class="c1">// Otherwise, just add the String type of the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">											</span><span class="c1">// number</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="third-maximum-numberhttpsleetcodecomproblemsthird-maximum-number"><a href="https://leetcode.com/problems/third-maximum-number/">Third maximum Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-236-1"><a class="lnlinks" href="#hl-236-1"> 1</a>
</span><span class="lnt" id="hl-236-2"><a class="lnlinks" href="#hl-236-2"> 2</a>
</span><span class="lnt" id="hl-236-3"><a class="lnlinks" href="#hl-236-3"> 3</a>
</span><span class="lnt" id="hl-236-4"><a class="lnlinks" href="#hl-236-4"> 4</a>
</span><span class="lnt" id="hl-236-5"><a class="lnlinks" href="#hl-236-5"> 5</a>
</span><span class="lnt" id="hl-236-6"><a class="lnlinks" href="#hl-236-6"> 6</a>
</span><span class="lnt" id="hl-236-7"><a class="lnlinks" href="#hl-236-7"> 7</a>
</span><span class="lnt" id="hl-236-8"><a class="lnlinks" href="#hl-236-8"> 8</a>
</span><span class="lnt" id="hl-236-9"><a class="lnlinks" href="#hl-236-9"> 9</a>
</span><span class="lnt" id="hl-236-10"><a class="lnlinks" href="#hl-236-10">10</a>
</span><span class="lnt" id="hl-236-11"><a class="lnlinks" href="#hl-236-11">11</a>
</span><span class="lnt" id="hl-236-12"><a class="lnlinks" href="#hl-236-12">12</a>
</span><span class="lnt" id="hl-236-13"><a class="lnlinks" href="#hl-236-13">13</a>
</span><span class="lnt" id="hl-236-14"><a class="lnlinks" href="#hl-236-14">14</a>
</span><span class="lnt" id="hl-236-15"><a class="lnlinks" href="#hl-236-15">15</a>
</span><span class="lnt" id="hl-236-16"><a class="lnlinks" href="#hl-236-16">16</a>
</span><span class="lnt" id="hl-236-17"><a class="lnlinks" href="#hl-236-17">17</a>
</span><span class="lnt" id="hl-236-18"><a class="lnlinks" href="#hl-236-18">18</a>
</span><span class="lnt" id="hl-236-19"><a class="lnlinks" href="#hl-236-19">19</a>
</span><span class="lnt" id="hl-236-20"><a class="lnlinks" href="#hl-236-20">20</a>
</span><span class="lnt" id="hl-236-21"><a class="lnlinks" href="#hl-236-21">21</a>
</span><span class="lnt" id="hl-236-22"><a class="lnlinks" href="#hl-236-22">22</a>
</span><span class="lnt" id="hl-236-23"><a class="lnlinks" href="#hl-236-23">23</a>
</span><span class="lnt" id="hl-236-24"><a class="lnlinks" href="#hl-236-24">24</a>
</span><span class="lnt" id="hl-236-25"><a class="lnlinks" href="#hl-236-25">25</a>
</span><span class="lnt" id="hl-236-26"><a class="lnlinks" href="#hl-236-26">26</a>
</span><span class="lnt" id="hl-236-27"><a class="lnlinks" href="#hl-236-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">thirdMax</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// Empty array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">		</span><span class="c1">// Size 1 array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">		</span><span class="c1">// Size 2 array, check between 0th element or 1st element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">firstMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="p">;</span><span class="w">		</span><span class="c1">// Lowest values for all three</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">secondMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">thirdMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">					</span><span class="c1">// For each number in the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">firstMax</span><span class="p">){</span><span class="w">				</span><span class="c1">// If num &gt; than the largest, then old largest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">thirdMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">secondMax</span><span class="p">;</span><span class="w">		</span><span class="c1">// becomes second largest and second largest becomes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">secondMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">firstMax</span><span class="p">;</span><span class="w">		</span><span class="c1">// first largest, then update the largest.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">firstMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">secondMax</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">firstMax</span><span class="p">){</span><span class="w">	</span><span class="c1">// If num &gt; second and num is not is the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">thirdMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">secondMax</span><span class="p">;</span><span class="w">					</span><span class="c1">// same as first, first largets becomes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">secondMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">							</span><span class="c1">// second largest and update the second</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">thirdMax</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">secondMax</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">firstMax</span><span class="p">)</span><span class="w"> </span><span class="c1">// // If num &gt; third, we</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            	</span><span class="n">thirdMax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">						</span><span class="c1">// need to check that it is not the same</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">												</span><span class="c1">// as the first and second largest.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">thirdMax</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">Long</span><span class="p">.</span><span class="na">MIN_VALUE</span><span class="p">)</span><span class="w">					</span><span class="c1">// This check allows us to make sure that</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">firstMax</span><span class="p">;</span><span class="w">						</span><span class="c1">// we do indeed have a third max and is</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">thirdMax</span><span class="p">;</span><span class="w">							</span><span class="c1">// not what we initialized initially.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-two-stringshttpsleetcodecomproblemsadd-strings"><a href="https://leetcode.com/problems/add-strings/">Add Two Strings</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-237-1"><a class="lnlinks" href="#hl-237-1"> 1</a>
</span><span class="lnt" id="hl-237-2"><a class="lnlinks" href="#hl-237-2"> 2</a>
</span><span class="lnt" id="hl-237-3"><a class="lnlinks" href="#hl-237-3"> 3</a>
</span><span class="lnt" id="hl-237-4"><a class="lnlinks" href="#hl-237-4"> 4</a>
</span><span class="lnt" id="hl-237-5"><a class="lnlinks" href="#hl-237-5"> 5</a>
</span><span class="lnt" id="hl-237-6"><a class="lnlinks" href="#hl-237-6"> 6</a>
</span><span class="lnt" id="hl-237-7"><a class="lnlinks" href="#hl-237-7"> 7</a>
</span><span class="lnt" id="hl-237-8"><a class="lnlinks" href="#hl-237-8"> 8</a>
</span><span class="lnt" id="hl-237-9"><a class="lnlinks" href="#hl-237-9"> 9</a>
</span><span class="lnt" id="hl-237-10"><a class="lnlinks" href="#hl-237-10">10</a>
</span><span class="lnt" id="hl-237-11"><a class="lnlinks" href="#hl-237-11">11</a>
</span><span class="lnt" id="hl-237-12"><a class="lnlinks" href="#hl-237-12">12</a>
</span><span class="lnt" id="hl-237-13"><a class="lnlinks" href="#hl-237-13">13</a>
</span><span class="lnt" id="hl-237-14"><a class="lnlinks" href="#hl-237-14">14</a>
</span><span class="lnt" id="hl-237-15"><a class="lnlinks" href="#hl-237-15">15</a>
</span><span class="lnt" id="hl-237-16"><a class="lnlinks" href="#hl-237-16">16</a>
</span><span class="lnt" id="hl-237-17"><a class="lnlinks" href="#hl-237-17">17</a>
</span><span class="lnt" id="hl-237-18"><a class="lnlinks" href="#hl-237-18">18</a>
</span><span class="lnt" id="hl-237-19"><a class="lnlinks" href="#hl-237-19">19</a>
</span><span class="lnt" id="hl-237-20"><a class="lnlinks" href="#hl-237-20">20</a>
</span><span class="lnt" id="hl-237-21"><a class="lnlinks" href="#hl-237-21">21</a>
</span><span class="lnt" id="hl-237-22"><a class="lnlinks" href="#hl-237-22">22</a>
</span><span class="lnt" id="hl-237-23"><a class="lnlinks" href="#hl-237-23">23</a>
</span><span class="lnt" id="hl-237-24"><a class="lnlinks" href="#hl-237-24">24</a>
</span><span class="lnt" id="hl-237-25"><a class="lnlinks" href="#hl-237-25">25</a>
</span><span class="lnt" id="hl-237-26"><a class="lnlinks" href="#hl-237-26">26</a>
</span><span class="lnt" id="hl-237-27"><a class="lnlinks" href="#hl-237-27">27</a>
</span><span class="lnt" id="hl-237-28"><a class="lnlinks" href="#hl-237-28">28</a>
</span><span class="lnt" id="hl-237-29"><a class="lnlinks" href="#hl-237-29">29</a>
</span><span class="lnt" id="hl-237-30"><a class="lnlinks" href="#hl-237-30">30</a>
</span><span class="lnt" id="hl-237-31"><a class="lnlinks" href="#hl-237-31">31</a>
</span><span class="lnt" id="hl-237-32"><a class="lnlinks" href="#hl-237-32">32</a>
</span><span class="lnt" id="hl-237-33"><a class="lnlinks" href="#hl-237-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">addStrings</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">num1</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">num2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num1</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;0&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">num2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num2</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;0&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">num1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** We use a char array to maintain the digit at each index. We want the array to be of
</span></span></span><span class="line"><span class="cl"><span class="cm">    the size of the largest string + 1 to handle carry bit if any at the end. We start
</span></span></span><span class="line"><span class="cl"><span class="cm">    adding each digit of the string from the end, and place it in it&#39;s correct index at the
</span></span></span><span class="line"><span class="cl"><span class="cm">    end of the sum array. This way, we avoid reversing it and return the answer in constant
</span></span></span><span class="line"><span class="cl"><span class="cm">    time. Take care to convert the digit you compute by adding &#39;0&#39;. Lastly, if the carry bit
</span></span></span><span class="line"><span class="cl"><span class="cm">    is 1, we need to make the 0th index as 1, and return the string by using the sum array.
</span></span></span><span class="line"><span class="cl"><span class="cm">    If it&#39;s not 1, then the sum array has a leading 0 which we don&#39;t want. So we use Java&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">    String constructor that takes in the char array, startingIndex in that array and the
</span></span></span><span class="line"><span class="cl"><span class="cm">    number of elements of that array we want. So if the carry isn&#39;t 1, we technically want
</span></span></span><span class="line"><span class="cl"><span class="cm">    everything from index 1 and # of elements = sum.length - 1 because we discard 0 index.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">num1</span><span class="p">.</span><span class="na">length</span><span class="p">(),</span><span class="w"> </span><span class="n">num2</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sum</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">idx1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num1</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">idx2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num2</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">carry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">n1</span><span class="p">,</span><span class="w"> </span><span class="n">n2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">idx1</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">idx2</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">idx1</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">num1</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">idx1</span><span class="o">--</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">idx2</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">num2</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">idx2</span><span class="o">--</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">n2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">carry</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">carry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">total</span><span class="o">/</span><span class="n">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="o">[</span><span class="n">index</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">total</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">10</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">carry</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;1&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="construct-quad-treehttpsleetcodecomproblemsconstruct-quad-tree"><a href="https://leetcode.com/problems/construct-quad-tree/">Construct Quad Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-238-1"><a class="lnlinks" href="#hl-238-1"> 1</a>
</span><span class="lnt" id="hl-238-2"><a class="lnlinks" href="#hl-238-2"> 2</a>
</span><span class="lnt" id="hl-238-3"><a class="lnlinks" href="#hl-238-3"> 3</a>
</span><span class="lnt" id="hl-238-4"><a class="lnlinks" href="#hl-238-4"> 4</a>
</span><span class="lnt" id="hl-238-5"><a class="lnlinks" href="#hl-238-5"> 5</a>
</span><span class="lnt" id="hl-238-6"><a class="lnlinks" href="#hl-238-6"> 6</a>
</span><span class="lnt" id="hl-238-7"><a class="lnlinks" href="#hl-238-7"> 7</a>
</span><span class="lnt" id="hl-238-8"><a class="lnlinks" href="#hl-238-8"> 8</a>
</span><span class="lnt" id="hl-238-9"><a class="lnlinks" href="#hl-238-9"> 9</a>
</span><span class="lnt" id="hl-238-10"><a class="lnlinks" href="#hl-238-10">10</a>
</span><span class="lnt" id="hl-238-11"><a class="lnlinks" href="#hl-238-11">11</a>
</span><span class="lnt" id="hl-238-12"><a class="lnlinks" href="#hl-238-12">12</a>
</span><span class="lnt" id="hl-238-13"><a class="lnlinks" href="#hl-238-13">13</a>
</span><span class="lnt" id="hl-238-14"><a class="lnlinks" href="#hl-238-14">14</a>
</span><span class="lnt" id="hl-238-15"><a class="lnlinks" href="#hl-238-15">15</a>
</span><span class="lnt" id="hl-238-16"><a class="lnlinks" href="#hl-238-16">16</a>
</span><span class="lnt" id="hl-238-17"><a class="lnlinks" href="#hl-238-17">17</a>
</span><span class="lnt" id="hl-238-18"><a class="lnlinks" href="#hl-238-18">18</a>
</span><span class="lnt" id="hl-238-19"><a class="lnlinks" href="#hl-238-19">19</a>
</span><span class="lnt" id="hl-238-20"><a class="lnlinks" href="#hl-238-20">20</a>
</span><span class="lnt" id="hl-238-21"><a class="lnlinks" href="#hl-238-21">21</a>
</span><span class="lnt" id="hl-238-22"><a class="lnlinks" href="#hl-238-22">22</a>
</span><span class="lnt" id="hl-238-23"><a class="lnlinks" href="#hl-238-23">23</a>
</span><span class="lnt" id="hl-238-24"><a class="lnlinks" href="#hl-238-24">24</a>
</span><span class="lnt" id="hl-238-25"><a class="lnlinks" href="#hl-238-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">grid</span><span class="p">;</span><span class="w">					</span><span class="c1">// Store it once, instead of passing it over &amp; over.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">Node</span><span class="w"> </span><span class="nf">construct</span><span class="p">(</span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">_grid</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">grid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_grid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">helper</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="n">0</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="na">length</span><span class="p">);</span><span class="w">		</span><span class="c1">// Ask helper to build the tree.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">Node</span><span class="w"> </span><span class="nf">helper</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">top</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">						</span><span class="c1">// Base case: if empty grid or if we are done</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">					</span><span class="c1">// checking the full grid, return null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">][</span><span class="n">left</span><span class="o">]</span><span class="p">;</span><span class="w">			</span><span class="c1">// Get the topleft value, and start checking the box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">		</span><span class="c1">// of len*len. If at any point, the value doesn&#39;t</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">){</span><span class="w">	</span><span class="c1">// match the key, we have found a breakpoint from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">key</span><span class="p">){</span><span class="w">	</span><span class="c1">// where we need to break the grid into four</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">		</span><span class="c1">// grids, each of len = len/2. The topleft grid has</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w"> 	</span><span class="c1">// the same top and left point, the topright</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="n">helper</span><span class="p">(</span><span class="n">top</span><span class="p">,</span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="p">),</span><span class="w">	</span><span class="c1">// grid has left point shifted to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="n">helper</span><span class="p">(</span><span class="n">top</span><span class="p">,</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="p">),</span><span class="w">	</span><span class="c1">// the right by offset.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="n">helper</span><span class="p">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="n">left</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="p">),</span><span class="w">	</span><span class="c1">// The bottom left grid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="n">helper</span><span class="p">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="n">left</span><span class="o">+</span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="p">));</span><span class="w">	</span><span class="c1">// is shifted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">	</span><span class="c1">// downwards by offset with the same left point. The bottom right grid will</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">		</span><span class="c1">// have an index where it&#39;s top is shifted down by len/2 and left by left/2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">			</span><span class="c1">// We know that the node will have a value = true if 1 else false and it won&#39;t be a leaf, so true, false, topleft, topright, bottomleft, bottomright.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">);</span><span class="w">	</span><span class="c1">// Everything passed, so we return a new Node whose value is true if key is 1, else false and it will be a leaf, with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// no children, so 4 nulls.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="n-ary-tree-level-order-traversalhttpsleetcodecomproblemsn-ary-tree-level-order-traversal"><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/">N-ary Tree Level Order Traversal</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-239-1"><a class="lnlinks" href="#hl-239-1"> 1</a>
</span><span class="lnt" id="hl-239-2"><a class="lnlinks" href="#hl-239-2"> 2</a>
</span><span class="lnt" id="hl-239-3"><a class="lnlinks" href="#hl-239-3"> 3</a>
</span><span class="lnt" id="hl-239-4"><a class="lnlinks" href="#hl-239-4"> 4</a>
</span><span class="lnt" id="hl-239-5"><a class="lnlinks" href="#hl-239-5"> 5</a>
</span><span class="lnt" id="hl-239-6"><a class="lnlinks" href="#hl-239-6"> 6</a>
</span><span class="lnt" id="hl-239-7"><a class="lnlinks" href="#hl-239-7"> 7</a>
</span><span class="lnt" id="hl-239-8"><a class="lnlinks" href="#hl-239-8"> 8</a>
</span><span class="lnt" id="hl-239-9"><a class="lnlinks" href="#hl-239-9"> 9</a>
</span><span class="lnt" id="hl-239-10"><a class="lnlinks" href="#hl-239-10">10</a>
</span><span class="lnt" id="hl-239-11"><a class="lnlinks" href="#hl-239-11">11</a>
</span><span class="lnt" id="hl-239-12"><a class="lnlinks" href="#hl-239-12">12</a>
</span><span class="lnt" id="hl-239-13"><a class="lnlinks" href="#hl-239-13">13</a>
</span><span class="lnt" id="hl-239-14"><a class="lnlinks" href="#hl-239-14">14</a>
</span><span class="lnt" id="hl-239-15"><a class="lnlinks" href="#hl-239-15">15</a>
</span><span class="lnt" id="hl-239-16"><a class="lnlinks" href="#hl-239-16">16</a>
</span><span class="lnt" id="hl-239-17"><a class="lnlinks" href="#hl-239-17">17</a>
</span><span class="lnt" id="hl-239-18"><a class="lnlinks" href="#hl-239-18">18</a>
</span><span class="lnt" id="hl-239-19"><a class="lnlinks" href="#hl-239-19">19</a>
</span><span class="lnt" id="hl-239-20"><a class="lnlinks" href="#hl-239-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">levelOrder</span><span class="p">(</span><span class="n">Node</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// Result list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">								</span><span class="c1">// If root is null, return empty list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">				</span><span class="c1">// BFS Queue. Add the root.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()){</span><span class="w">							</span><span class="c1">// While q isn&#39;t empty</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">size</span><span class="p">();</span><span class="w">						</span><span class="c1">// Check how many elements in that level</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">size</span><span class="p">);</span><span class="c1">// level list to store elements.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">				</span><span class="c1">// Remove each node for whatever the size</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Node</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">						</span><span class="c1">// Add that node&#39;s value and add all of</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">level</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">						</span><span class="c1">// its children to the queue.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Node</span><span class="w"> </span><span class="n">child</span><span class="p">:</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">children</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">child</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">res</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">level</span><span class="p">);</span><span class="w">								</span><span class="c1">// Add the level array to the result</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">										</span><span class="c1">// Return the result list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-of-segments-in-a-stringhttpsleetcodecomproblemsnumber-of-segments-in-a-string"><a href="https://leetcode.com/problems/number-of-segments-in-a-string/">Number of Segments in a String</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-240-1"><a class="lnlinks" href="#hl-240-1"> 1</a>
</span><span class="lnt" id="hl-240-2"><a class="lnlinks" href="#hl-240-2"> 2</a>
</span><span class="lnt" id="hl-240-3"><a class="lnlinks" href="#hl-240-3"> 3</a>
</span><span class="lnt" id="hl-240-4"><a class="lnlinks" href="#hl-240-4"> 4</a>
</span><span class="lnt" id="hl-240-5"><a class="lnlinks" href="#hl-240-5"> 5</a>
</span><span class="lnt" id="hl-240-6"><a class="lnlinks" href="#hl-240-6"> 6</a>
</span><span class="lnt" id="hl-240-7"><a class="lnlinks" href="#hl-240-7"> 7</a>
</span><span class="lnt" id="hl-240-8"><a class="lnlinks" href="#hl-240-8"> 8</a>
</span><span class="lnt" id="hl-240-9"><a class="lnlinks" href="#hl-240-9"> 9</a>
</span><span class="lnt" id="hl-240-10"><a class="lnlinks" href="#hl-240-10">10</a>
</span><span class="lnt" id="hl-240-11"><a class="lnlinks" href="#hl-240-11">11</a>
</span><span class="lnt" id="hl-240-12"><a class="lnlinks" href="#hl-240-12">12</a>
</span><span class="lnt" id="hl-240-13"><a class="lnlinks" href="#hl-240-13">13</a>
</span><span class="lnt" id="hl-240-14"><a class="lnlinks" href="#hl-240-14">14</a>
</span><span class="lnt" id="hl-240-15"><a class="lnlinks" href="#hl-240-15">15</a>
</span><span class="lnt" id="hl-240-16"><a class="lnlinks" href="#hl-240-16">16</a>
</span><span class="lnt" id="hl-240-17"><a class="lnlinks" href="#hl-240-17">17</a>
</span><span class="lnt" id="hl-240-18"><a class="lnlinks" href="#hl-240-18">18</a>
</span><span class="lnt" id="hl-240-19"><a class="lnlinks" href="#hl-240-19">19</a>
</span><span class="lnt" id="hl-240-20"><a class="lnlinks" href="#hl-240-20">20</a>
</span><span class="lnt" id="hl-240-21"><a class="lnlinks" href="#hl-240-21">21</a>
</span><span class="lnt" id="hl-240-22"><a class="lnlinks" href="#hl-240-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">countSegments</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">					</span><span class="c1">// Empty String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">segments</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">						</span><span class="c1">// Record segments</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">				</span><span class="c1">// We will compare adjacent characters.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// Start looking at chars from index 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">			</span><span class="c1">// Get the current char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">prev</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39; &#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39; &#39;</span><span class="p">)</span><span class="w">		</span><span class="c1">// If previous char wasn&#39;t a space but the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">segments</span><span class="p">;</span><span class="w">						</span><span class="c1">// current char is, we found a segment.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">;</span><span class="w">						</span><span class="c1">// Make previous = current for next iteration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">This line is important. If prev was an empty space, that means that all we have been looking
</span></span></span><span class="line"><span class="cl"><span class="cm">at was empty spaces towards the end. So return whatever segments we found in the beginning
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string. But if prev wasn&#39;t a space, that means the char next to prev might have been
</span></span></span><span class="line"><span class="cl"><span class="cm">an empty space or just a normal character. In any case, we would want to include that last
</span></span></span><span class="line"><span class="cl"><span class="cm">segment, so we return segment+1.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">prev</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39; &#39;</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">segments</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">segments</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-level-order-traversalhttpsleetcodecomproblemsbinary-tree-level-order-traversal"><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-241-1"><a class="lnlinks" href="#hl-241-1"> 1</a>
</span><span class="lnt" id="hl-241-2"><a class="lnlinks" href="#hl-241-2"> 2</a>
</span><span class="lnt" id="hl-241-3"><a class="lnlinks" href="#hl-241-3"> 3</a>
</span><span class="lnt" id="hl-241-4"><a class="lnlinks" href="#hl-241-4"> 4</a>
</span><span class="lnt" id="hl-241-5"><a class="lnlinks" href="#hl-241-5"> 5</a>
</span><span class="lnt" id="hl-241-6"><a class="lnlinks" href="#hl-241-6"> 6</a>
</span><span class="lnt" id="hl-241-7"><a class="lnlinks" href="#hl-241-7"> 7</a>
</span><span class="lnt" id="hl-241-8"><a class="lnlinks" href="#hl-241-8"> 8</a>
</span><span class="lnt" id="hl-241-9"><a class="lnlinks" href="#hl-241-9"> 9</a>
</span><span class="lnt" id="hl-241-10"><a class="lnlinks" href="#hl-241-10">10</a>
</span><span class="lnt" id="hl-241-11"><a class="lnlinks" href="#hl-241-11">11</a>
</span><span class="lnt" id="hl-241-12"><a class="lnlinks" href="#hl-241-12">12</a>
</span><span class="lnt" id="hl-241-13"><a class="lnlinks" href="#hl-241-13">13</a>
</span><span class="lnt" id="hl-241-14"><a class="lnlinks" href="#hl-241-14">14</a>
</span><span class="lnt" id="hl-241-15"><a class="lnlinks" href="#hl-241-15">15</a>
</span><span class="lnt" id="hl-241-16"><a class="lnlinks" href="#hl-241-16">16</a>
</span><span class="lnt" id="hl-241-17"><a class="lnlinks" href="#hl-241-17">17</a>
</span><span class="lnt" id="hl-241-18"><a class="lnlinks" href="#hl-241-18">18</a>
</span><span class="lnt" id="hl-241-19"><a class="lnlinks" href="#hl-241-19">19</a>
</span><span class="lnt" id="hl-241-20"><a class="lnlinks" href="#hl-241-20">20</a>
</span><span class="lnt" id="hl-241-21"><a class="lnlinks" href="#hl-241-21">21</a>
</span><span class="lnt" id="hl-241-22"><a class="lnlinks" href="#hl-241-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">levelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">						</span><span class="c1">// Empty Tree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// BFS Queue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()){</span><span class="w">					</span><span class="c1">// While we have something to process</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">size</span><span class="p">();</span><span class="w">				</span><span class="c1">// Check how many elements at the current level</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">		</span><span class="c1">// Remove one element each time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">){</span><span class="w">				</span><span class="c1">// If not null, add it&#39;s val to the level list,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">level</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">		</span><span class="c1">// and it&#39;s left and right children to the queue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">			</span><span class="c1">// to process in order</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">level</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w">				</span><span class="c1">// If level list wasn&#39;t empty,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">level</span><span class="p">);</span><span class="w">				</span><span class="c1">// add it to the result list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="path-sum-iiihttpsleetcodecomproblemspath-sum-iiisubmissions"><a href="https://leetcode.com/problems/path-sum-iii/submissions/">Path Sum III</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-242-1"><a class="lnlinks" href="#hl-242-1"> 1</a>
</span><span class="lnt" id="hl-242-2"><a class="lnlinks" href="#hl-242-2"> 2</a>
</span><span class="lnt" id="hl-242-3"><a class="lnlinks" href="#hl-242-3"> 3</a>
</span><span class="lnt" id="hl-242-4"><a class="lnlinks" href="#hl-242-4"> 4</a>
</span><span class="lnt" id="hl-242-5"><a class="lnlinks" href="#hl-242-5"> 5</a>
</span><span class="lnt" id="hl-242-6"><a class="lnlinks" href="#hl-242-6"> 6</a>
</span><span class="lnt" id="hl-242-7"><a class="lnlinks" href="#hl-242-7"> 7</a>
</span><span class="lnt" id="hl-242-8"><a class="lnlinks" href="#hl-242-8"> 8</a>
</span><span class="lnt" id="hl-242-9"><a class="lnlinks" href="#hl-242-9"> 9</a>
</span><span class="lnt" id="hl-242-10"><a class="lnlinks" href="#hl-242-10">10</a>
</span><span class="lnt" id="hl-242-11"><a class="lnlinks" href="#hl-242-11">11</a>
</span><span class="lnt" id="hl-242-12"><a class="lnlinks" href="#hl-242-12">12</a>
</span><span class="lnt" id="hl-242-13"><a class="lnlinks" href="#hl-242-13">13</a>
</span><span class="lnt" id="hl-242-14"><a class="lnlinks" href="#hl-242-14">14</a>
</span><span class="lnt" id="hl-242-15"><a class="lnlinks" href="#hl-242-15">15</a>
</span><span class="lnt" id="hl-242-16"><a class="lnlinks" href="#hl-242-16">16</a>
</span><span class="lnt" id="hl-242-17"><a class="lnlinks" href="#hl-242-17">17</a>
</span><span class="lnt" id="hl-242-18"><a class="lnlinks" href="#hl-242-18">18</a>
</span><span class="lnt" id="hl-242-19"><a class="lnlinks" href="#hl-242-19">19</a>
</span><span class="lnt" id="hl-242-20"><a class="lnlinks" href="#hl-242-20">20</a>
</span><span class="lnt" id="hl-242-21"><a class="lnlinks" href="#hl-242-21">21</a>
</span><span class="lnt" id="hl-242-22"><a class="lnlinks" href="#hl-242-22">22</a>
</span><span class="lnt" id="hl-242-23"><a class="lnlinks" href="#hl-242-23">23</a>
</span><span class="lnt" id="hl-242-24"><a class="lnlinks" href="#hl-242-24">24</a>
</span><span class="lnt" id="hl-242-25"><a class="lnlinks" href="#hl-242-25">25</a>
</span><span class="lnt" id="hl-242-26"><a class="lnlinks" href="#hl-242-26">26</a>
</span><span class="lnt" id="hl-242-27"><a class="lnlinks" href="#hl-242-27">27</a>
</span><span class="lnt" id="hl-242-28"><a class="lnlinks" href="#hl-242-28">28</a>
</span><span class="lnt" id="hl-242-29"><a class="lnlinks" href="#hl-242-29">29</a>
</span><span class="lnt" id="hl-242-30"><a class="lnlinks" href="#hl-242-30">30</a>
</span><span class="lnt" id="hl-242-31"><a class="lnlinks" href="#hl-242-31">31</a>
</span><span class="lnt" id="hl-242-32"><a class="lnlinks" href="#hl-242-32">32</a>
</span><span class="lnt" id="hl-242-33"><a class="lnlinks" href="#hl-242-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">sumToWays</span><span class="p">;</span><span class="w">			</span><span class="c1">// Record how many ways there are to form sum</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">int</span><span class="w"> </span><span class="n">ways</span><span class="p">;</span><span class="w">										</span><span class="c1">// Total number of ways.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">pathSum</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sumToWays</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ways</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="n">1</span><span class="p">);</span><span class="w">							</span><span class="c1">// 1 way to form a sum of 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ways</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea here is as follows. Start with the root node, and keep a running total. We maintain
</span></span></span><span class="line"><span class="cl"><span class="cm">how many ways there to form a running sum. Then we check how many ways there are to form
</span></span></span><span class="line"><span class="cl"><span class="cm">(running sum) - (sum we are looking for). If there is a way to form it, then we increase the
</span></span></span><span class="line"><span class="cl"><span class="cm">number of ways to form sum. We then have to update the map to record how many ways can the
</span></span></span><span class="line"><span class="cl"><span class="cm">running sum be formed. If it&#39;s something we could form before, increment it, or else set it
</span></span></span><span class="line"><span class="cl"><span class="cm">to 1. Now, traverse the left side and then the right side. In the end, for each time we
</span></span></span><span class="line"><span class="cl"><span class="cm">incremented the count for a running sum, we need to decrement it because we are backtracking.
</span></span></span><span class="line"><span class="cl"><span class="cm">We are first going down, incrementing the count for runningSum, then we move up and decrement
</span></span></span><span class="line"><span class="cl"><span class="cm">it by 1 for each time we observed it. This is to maintain the Pre-Order traversal.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helper</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">runningSum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ways</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">getOrDefault</span><span class="p">(</span><span class="n">runningSum</span><span class="o">-</span><span class="n">sum</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">getOrDefault</span><span class="p">(</span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">runningSum</span><span class="p">,</span><span class="w"> </span><span class="n">sumToWays</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">runningSum</span><span class="p">)</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-all-anagrams-in-a-stringhttpsleetcodecomproblemsfind-all-anagrams-in-a-string"><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/">Find All Anagrams in a String</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-243-1"><a class="lnlinks" href="#hl-243-1"> 1</a>
</span><span class="lnt" id="hl-243-2"><a class="lnlinks" href="#hl-243-2"> 2</a>
</span><span class="lnt" id="hl-243-3"><a class="lnlinks" href="#hl-243-3"> 3</a>
</span><span class="lnt" id="hl-243-4"><a class="lnlinks" href="#hl-243-4"> 4</a>
</span><span class="lnt" id="hl-243-5"><a class="lnlinks" href="#hl-243-5"> 5</a>
</span><span class="lnt" id="hl-243-6"><a class="lnlinks" href="#hl-243-6"> 6</a>
</span><span class="lnt" id="hl-243-7"><a class="lnlinks" href="#hl-243-7"> 7</a>
</span><span class="lnt" id="hl-243-8"><a class="lnlinks" href="#hl-243-8"> 8</a>
</span><span class="lnt" id="hl-243-9"><a class="lnlinks" href="#hl-243-9"> 9</a>
</span><span class="lnt" id="hl-243-10"><a class="lnlinks" href="#hl-243-10">10</a>
</span><span class="lnt" id="hl-243-11"><a class="lnlinks" href="#hl-243-11">11</a>
</span><span class="lnt" id="hl-243-12"><a class="lnlinks" href="#hl-243-12">12</a>
</span><span class="lnt" id="hl-243-13"><a class="lnlinks" href="#hl-243-13">13</a>
</span><span class="lnt" id="hl-243-14"><a class="lnlinks" href="#hl-243-14">14</a>
</span><span class="lnt" id="hl-243-15"><a class="lnlinks" href="#hl-243-15">15</a>
</span><span class="lnt" id="hl-243-16"><a class="lnlinks" href="#hl-243-16">16</a>
</span><span class="lnt" id="hl-243-17"><a class="lnlinks" href="#hl-243-17">17</a>
</span><span class="lnt" id="hl-243-18"><a class="lnlinks" href="#hl-243-18">18</a>
</span><span class="lnt" id="hl-243-19"><a class="lnlinks" href="#hl-243-19">19</a>
</span><span class="lnt" id="hl-243-20"><a class="lnlinks" href="#hl-243-20">20</a>
</span><span class="lnt" id="hl-243-21"><a class="lnlinks" href="#hl-243-21">21</a>
</span><span class="lnt" id="hl-243-22"><a class="lnlinks" href="#hl-243-22">22</a>
</span><span class="lnt" id="hl-243-23"><a class="lnlinks" href="#hl-243-23">23</a>
</span><span class="lnt" id="hl-243-24"><a class="lnlinks" href="#hl-243-24">24</a>
</span><span class="lnt" id="hl-243-25"><a class="lnlinks" href="#hl-243-25">25</a>
</span><span class="lnt" id="hl-243-26"><a class="lnlinks" href="#hl-243-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findAnagrams</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">slen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">(),</span><span class="w"> </span><span class="n">plen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">slen</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">slen</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">plen</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">plen</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">]</span><span class="p">;</span><span class="w">				</span><span class="c1">// Store the freq of chars in p</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">sArr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">			</span><span class="c1">// Get the chars of the string s as an array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">end</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">slen</span><span class="p">){</span><span class="w">						</span><span class="c1">// While everything is not processed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">--</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">end</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// decrease the freq of the char at index end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">plen</span><span class="o">--</span><span class="p">;</span><span class="w">							</span><span class="c1">// if it&#39;s &gt; 0, then we matched something in p</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">											</span><span class="c1">// so decrease plen by 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">plen</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">					</span><span class="c1">// If plen goes to 0, we were able to match all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">+</span><span class="n">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="na">length</span><span class="p">())</span><span class="w">	</span><span class="c1">// chars of p. If length of the matched chars is</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">start</span><span class="p">);</span><span class="w">			</span><span class="c1">// equal to length p, we found a start point.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">	</span><span class="c1">// Check if the freq of char at start index is</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">plen</span><span class="o">++</span><span class="p">;</span><span class="w">						</span><span class="c1">// &gt;= 0. If it is, shift the window to the right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">++]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// but first restore the frequency of the char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">									</span><span class="c1">// at the index start.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">end</span><span class="o">++</span><span class="p">;</span><span class="w">								</span><span class="c1">// Get ready to inspect the new element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">							</span><span class="c1">// Return the answer.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="arranging-coinshttpsleetcodecomproblemsarranging-coins"><a href="https://leetcode.com/problems/arranging-coins/">Arranging Coins</a></h3>
<p>The idea is as follows. Sum of first n numbers is given by $\frac{n^2+n}{2}$. We need to find $n$ such that sum of $n$ numbers is closest to the number of coins we have. That is, $\frac{n^2+n}{2} = k$ where $k$ is the number of coins we have. So, everything boils down to solving the quadratic equation $n^2 + n - 2k = 0$. We use the quadratic formula where for any quadratic equation $ax^2 -bx + c$ is solved substituting for $a$, $b$ and $c$ in $x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2}$. Here, $a$ and $b$ are always going to be 1, while $c$ is always going to be $2k$. Substitute those, and solve the equation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-244-1"><a class="lnlinks" href="#hl-244-1"> 1</a>
</span><span class="lnt" id="hl-244-2"><a class="lnlinks" href="#hl-244-2"> 2</a>
</span><span class="lnt" id="hl-244-3"><a class="lnlinks" href="#hl-244-3"> 3</a>
</span><span class="lnt" id="hl-244-4"><a class="lnlinks" href="#hl-244-4"> 4</a>
</span><span class="lnt" id="hl-244-5"><a class="lnlinks" href="#hl-244-5"> 5</a>
</span><span class="lnt" id="hl-244-6"><a class="lnlinks" href="#hl-244-6"> 6</a>
</span><span class="lnt" id="hl-244-7"><a class="lnlinks" href="#hl-244-7"> 7</a>
</span><span class="lnt" id="hl-244-8"><a class="lnlinks" href="#hl-244-8"> 8</a>
</span><span class="lnt" id="hl-244-9"><a class="lnlinks" href="#hl-244-9"> 9</a>
</span><span class="lnt" id="hl-244-10"><a class="lnlinks" href="#hl-244-10">10</a>
</span><span class="lnt" id="hl-244-11"><a class="lnlinks" href="#hl-244-11">11</a>
</span><span class="lnt" id="hl-244-12"><a class="lnlinks" href="#hl-244-12">12</a>
</span><span class="lnt" id="hl-244-13"><a class="lnlinks" href="#hl-244-13">13</a>
</span><span class="lnt" id="hl-244-14"><a class="lnlinks" href="#hl-244-14">14</a>
</span><span class="lnt" id="hl-244-15"><a class="lnlinks" href="#hl-244-15">15</a>
</span><span class="lnt" id="hl-244-16"><a class="lnlinks" href="#hl-244-16">16</a>
</span><span class="lnt" id="hl-244-17"><a class="lnlinks" href="#hl-244-17">17</a>
</span><span class="lnt" id="hl-244-18"><a class="lnlinks" href="#hl-244-18">18</a>
</span><span class="lnt" id="hl-244-19"><a class="lnlinks" href="#hl-244-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">arrangeCoins</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// return solveQuadratic(n);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">iterative</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">solveQuadratic</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">Math</span><span class="p">.</span><span class="na">sqrt</span><span class="p">(</span><span class="n">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">8</span><span class="o">*</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">iterative</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">		</span><span class="c1">// Coins used, and level completed.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">					</span><span class="c1">// While coins left are greater than 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="o">-=</span><span class="n">used</span><span class="p">;</span><span class="w">					</span><span class="c1">// Calculcate remaining coins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">					</span><span class="c1">// If there are still some coins left,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">level</span><span class="p">;</span><span class="w">				</span><span class="c1">// we were able to fill the level.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">used</span><span class="p">;</span><span class="w">						</span><span class="c1">// Prepare used for the next level, which is plus 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">level</span><span class="p">;</span><span class="w">					</span><span class="c1">// Return level</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="hamming-distancehttpsleetcodecomproblemshamming-distance"><a href="https://leetcode.com/problems/hamming-distance/">Hamming Distance</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-245-1"><a class="lnlinks" href="#hl-245-1"> 1</a>
</span><span class="lnt" id="hl-245-2"><a class="lnlinks" href="#hl-245-2"> 2</a>
</span><span class="lnt" id="hl-245-3"><a class="lnlinks" href="#hl-245-3"> 3</a>
</span><span class="lnt" id="hl-245-4"><a class="lnlinks" href="#hl-245-4"> 4</a>
</span><span class="lnt" id="hl-245-5"><a class="lnlinks" href="#hl-245-5"> 5</a>
</span><span class="lnt" id="hl-245-6"><a class="lnlinks" href="#hl-245-6"> 6</a>
</span><span class="lnt" id="hl-245-7"><a class="lnlinks" href="#hl-245-7"> 7</a>
</span><span class="lnt" id="hl-245-8"><a class="lnlinks" href="#hl-245-8"> 8</a>
</span><span class="lnt" id="hl-245-9"><a class="lnlinks" href="#hl-245-9"> 9</a>
</span><span class="lnt" id="hl-245-10"><a class="lnlinks" href="#hl-245-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">hammingDistance</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">diff</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// Track differences</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">	</span><span class="c1">// While both of them aren&#39;t 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">		</span><span class="c1">// Check the bit of x and y by mod 2. If they are unequal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">diff</span><span class="o">++</span><span class="p">;</span><span class="w">				</span><span class="c1">// increment difference.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">x</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">					</span><span class="c1">// Divide x and y by 2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">y</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">diff</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="string-compressionhttpsleetcodecomproblemsstring-compression"><a href="https://leetcode.com/problems/string-compression/">String Compression</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-246-1"><a class="lnlinks" href="#hl-246-1"> 1</a>
</span><span class="lnt" id="hl-246-2"><a class="lnlinks" href="#hl-246-2"> 2</a>
</span><span class="lnt" id="hl-246-3"><a class="lnlinks" href="#hl-246-3"> 3</a>
</span><span class="lnt" id="hl-246-4"><a class="lnlinks" href="#hl-246-4"> 4</a>
</span><span class="lnt" id="hl-246-5"><a class="lnlinks" href="#hl-246-5"> 5</a>
</span><span class="lnt" id="hl-246-6"><a class="lnlinks" href="#hl-246-6"> 6</a>
</span><span class="lnt" id="hl-246-7"><a class="lnlinks" href="#hl-246-7"> 7</a>
</span><span class="lnt" id="hl-246-8"><a class="lnlinks" href="#hl-246-8"> 8</a>
</span><span class="lnt" id="hl-246-9"><a class="lnlinks" href="#hl-246-9"> 9</a>
</span><span class="lnt" id="hl-246-10"><a class="lnlinks" href="#hl-246-10">10</a>
</span><span class="lnt" id="hl-246-11"><a class="lnlinks" href="#hl-246-11">11</a>
</span><span class="lnt" id="hl-246-12"><a class="lnlinks" href="#hl-246-12">12</a>
</span><span class="lnt" id="hl-246-13"><a class="lnlinks" href="#hl-246-13">13</a>
</span><span class="lnt" id="hl-246-14"><a class="lnlinks" href="#hl-246-14">14</a>
</span><span class="lnt" id="hl-246-15"><a class="lnlinks" href="#hl-246-15">15</a>
</span><span class="lnt" id="hl-246-16"><a class="lnlinks" href="#hl-246-16">16</a>
</span><span class="lnt" id="hl-246-17"><a class="lnlinks" href="#hl-246-17">17</a>
</span><span class="lnt" id="hl-246-18"><a class="lnlinks" href="#hl-246-18">18</a>
</span><span class="lnt" id="hl-246-19"><a class="lnlinks" href="#hl-246-19">19</a>
</span><span class="lnt" id="hl-246-20"><a class="lnlinks" href="#hl-246-20">20</a>
</span><span class="lnt" id="hl-246-21"><a class="lnlinks" href="#hl-246-21">21</a>
</span><span class="lnt" id="hl-246-22"><a class="lnlinks" href="#hl-246-22">22</a>
</span><span class="lnt" id="hl-246-23"><a class="lnlinks" href="#hl-246-23">23</a>
</span><span class="lnt" id="hl-246-24"><a class="lnlinks" href="#hl-246-24">24</a>
</span><span class="lnt" id="hl-246-25"><a class="lnlinks" href="#hl-246-25">25</a>
</span><span class="lnt" id="hl-246-26"><a class="lnlinks" href="#hl-246-26">26</a>
</span><span class="lnt" id="hl-246-27"><a class="lnlinks" href="#hl-246-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">compress</span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">chars</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chars</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">			</span><span class="c1">// No need to reverse array of length 0 or 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">arrayIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// To maintain the length of new array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">					</span><span class="c1">// start index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">					</span><span class="c1">// end index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">end</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">start</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// Record the char we are looking at.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// count is 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">end</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">end</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">first</span><span class="p">){</span><span class="w">	</span><span class="c1">// while the char is the same</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">end</span><span class="p">;</span><span class="w">					</span><span class="c1">// increment end to check next char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">count</span><span class="p">;</span><span class="w">				</span><span class="c1">// and increment the count.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">end</span><span class="p">;</span><span class="w">				</span><span class="c1">// shift start to end to check next sequence of chars</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first</span><span class="p">;</span><span class="w">	</span><span class="c1">// our arrayIndex points to to the new array&#39;s </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">				</span><span class="c1">// indices. So copy the first char to arrayIndex.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">)</span><span class="w">	</span><span class="c1">//Only if count isn&#39;t 1, if count is less than 10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">count</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="p">);</span><span class="w">	</span><span class="c1">// then we simply convert count to char and write it next to the char we just overwrote.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">						</span><span class="c1">// Otherwise, it has many digits. So convert it to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">String</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">count</span><span class="p">).</span><span class="na">toCharArray</span><span class="p">()){</span><span class="w">	</span><span class="c1">// string and add all it&#39;s digit to the array one by one while increment arrayIndex.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">arrayIndex</span><span class="p">;</span><span class="w">			</span><span class="c1">// Wherever arrayIndex is, is the new length for the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-of-boomerangshttpsleetcodecomproblemsnumber-of-boomerangs"><a href="https://leetcode.com/problems/number-of-boomerangs/">Number of Boomerangs</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-247-1"><a class="lnlinks" href="#hl-247-1"> 1</a>
</span><span class="lnt" id="hl-247-2"><a class="lnlinks" href="#hl-247-2"> 2</a>
</span><span class="lnt" id="hl-247-3"><a class="lnlinks" href="#hl-247-3"> 3</a>
</span><span class="lnt" id="hl-247-4"><a class="lnlinks" href="#hl-247-4"> 4</a>
</span><span class="lnt" id="hl-247-5"><a class="lnlinks" href="#hl-247-5"> 5</a>
</span><span class="lnt" id="hl-247-6"><a class="lnlinks" href="#hl-247-6"> 6</a>
</span><span class="lnt" id="hl-247-7"><a class="lnlinks" href="#hl-247-7"> 7</a>
</span><span class="lnt" id="hl-247-8"><a class="lnlinks" href="#hl-247-8"> 8</a>
</span><span class="lnt" id="hl-247-9"><a class="lnlinks" href="#hl-247-9"> 9</a>
</span><span class="lnt" id="hl-247-10"><a class="lnlinks" href="#hl-247-10">10</a>
</span><span class="lnt" id="hl-247-11"><a class="lnlinks" href="#hl-247-11">11</a>
</span><span class="lnt" id="hl-247-12"><a class="lnlinks" href="#hl-247-12">12</a>
</span><span class="lnt" id="hl-247-13"><a class="lnlinks" href="#hl-247-13">13</a>
</span><span class="lnt" id="hl-247-14"><a class="lnlinks" href="#hl-247-14">14</a>
</span><span class="lnt" id="hl-247-15"><a class="lnlinks" href="#hl-247-15">15</a>
</span><span class="lnt" id="hl-247-16"><a class="lnlinks" href="#hl-247-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">numberOfBoomerangs</span><span class="p">(</span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">points</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">boomerangs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Double</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// To record points with same dist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">points</span><span class="p">){</span><span class="w">		</span><span class="c1">// Compute distance between one point and every other.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">map</span><span class="p">.</span><span class="na">clear</span><span class="p">()</span><span class="w">				</span><span class="c1">// clear map before each relative distance computation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">j</span><span class="p">:</span><span class="w"> </span><span class="n">points</span><span class="p">){</span><span class="w">	</span><span class="c1">// Compute distance with other points</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w">			</span><span class="c1">// Don&#39;t compare the same two points.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">double</span><span class="w"> </span><span class="n">dist</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">sqrt</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">i</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">,</span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">i</span><span class="o">[</span><span class="n">1</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">,</span><span class="n">2</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">prevCount</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">map</span><span class="p">.</span><span class="na">getOrDefault</span><span class="p">(</span><span class="n">dist</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">	</span><span class="c1">// Check how many points are equidistant from point i.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">boomerangs</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">prevCount</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">	</span><span class="c1">//  Number of boomerangs = whatever pairs there were before times 2, because you can form twice the number of different orders.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">map</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">dist</span><span class="p">,</span><span class="w"> </span><span class="n">prevCount</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// Increase the count of points observed for that distance.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">boomerangs</span><span class="p">;</span><span class="w">	</span><span class="c1">// return number of boomerangs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-all-numbers-disappeared-in-an-arrayhttpsleetcodecomproblemsfind-all-numbers-disappeared-in-an-array"><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">Find All Numbers Disappeared in an Array</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-248-1"><a class="lnlinks" href="#hl-248-1"> 1</a>
</span><span class="lnt" id="hl-248-2"><a class="lnlinks" href="#hl-248-2"> 2</a>
</span><span class="lnt" id="hl-248-3"><a class="lnlinks" href="#hl-248-3"> 3</a>
</span><span class="lnt" id="hl-248-4"><a class="lnlinks" href="#hl-248-4"> 4</a>
</span><span class="lnt" id="hl-248-5"><a class="lnlinks" href="#hl-248-5"> 5</a>
</span><span class="lnt" id="hl-248-6"><a class="lnlinks" href="#hl-248-6"> 6</a>
</span><span class="lnt" id="hl-248-7"><a class="lnlinks" href="#hl-248-7"> 7</a>
</span><span class="lnt" id="hl-248-8"><a class="lnlinks" href="#hl-248-8"> 8</a>
</span><span class="lnt" id="hl-248-9"><a class="lnlinks" href="#hl-248-9"> 9</a>
</span><span class="lnt" id="hl-248-10"><a class="lnlinks" href="#hl-248-10">10</a>
</span><span class="lnt" id="hl-248-11"><a class="lnlinks" href="#hl-248-11">11</a>
</span><span class="lnt" id="hl-248-12"><a class="lnlinks" href="#hl-248-12">12</a>
</span><span class="lnt" id="hl-248-13"><a class="lnlinks" href="#hl-248-13">13</a>
</span><span class="lnt" id="hl-248-14"><a class="lnlinks" href="#hl-248-14">14</a>
</span><span class="lnt" id="hl-248-15"><a class="lnlinks" href="#hl-248-15">15</a>
</span><span class="lnt" id="hl-248-16"><a class="lnlinks" href="#hl-248-16">16</a>
</span><span class="lnt" id="hl-248-17"><a class="lnlinks" href="#hl-248-17">17</a>
</span><span class="lnt" id="hl-248-18"><a class="lnlinks" href="#hl-248-18">18</a>
</span><span class="lnt" id="hl-248-19"><a class="lnlinks" href="#hl-248-19">19</a>
</span><span class="lnt" id="hl-248-20"><a class="lnlinks" href="#hl-248-20">20</a>
</span><span class="lnt" id="hl-248-21"><a class="lnlinks" href="#hl-248-21">21</a>
</span><span class="lnt" id="hl-248-22"><a class="lnlinks" href="#hl-248-22">22</a>
</span><span class="lnt" id="hl-248-23"><a class="lnlinks" href="#hl-248-23">23</a>
</span><span class="lnt" id="hl-248-24"><a class="lnlinks" href="#hl-248-24">24</a>
</span><span class="lnt" id="hl-248-25"><a class="lnlinks" href="#hl-248-25">25</a>
</span><span class="lnt" id="hl-248-26"><a class="lnlinks" href="#hl-248-26">26</a>
</span><span class="lnt" id="hl-248-27"><a class="lnlinks" href="#hl-248-27">27</a>
</span><span class="lnt" id="hl-248-28"><a class="lnlinks" href="#hl-248-28">28</a>
</span><span class="lnt" id="hl-248-29"><a class="lnlinks" href="#hl-248-29">29</a>
</span><span class="lnt" id="hl-248-30"><a class="lnlinks" href="#hl-248-30">30</a>
</span><span class="lnt" id="hl-248-31"><a class="lnlinks" href="#hl-248-31">31</a>
</span><span class="lnt" id="hl-248-32"><a class="lnlinks" href="#hl-248-32">32</a>
</span><span class="lnt" id="hl-248-33"><a class="lnlinks" href="#hl-248-33">33</a>
</span><span class="lnt" id="hl-248-34"><a class="lnlinks" href="#hl-248-34">34</a>
</span><span class="lnt" id="hl-248-35"><a class="lnlinks" href="#hl-248-35">35</a>
</span><span class="lnt" id="hl-248-36"><a class="lnlinks" href="#hl-248-36">36</a>
</span><span class="lnt" id="hl-248-37"><a class="lnlinks" href="#hl-248-37">37</a>
</span><span class="lnt" id="hl-248-38"><a class="lnlinks" href="#hl-248-38">38</a>
</span><span class="lnt" id="hl-248-39"><a class="lnlinks" href="#hl-248-39">39</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea is simple. For each number in the array, since it&#39;s gauranteed that that the values
</span></span></span><span class="line"><span class="cl"><span class="cm">lie are inclusive [1,n], we can look at the index value-1. So check that index, and mark
</span></span></span><span class="line"><span class="cl"><span class="cm">that value as negative. That is why I take the absolute value. Check value at that index, if
</span></span></span><span class="line"><span class="cl"><span class="cm">negative, it means we have visited it via some other duplicate value. But if it&#39;s positive,
</span></span></span><span class="line"><span class="cl"><span class="cm">then we are seeing it for the first time, so make it&#39;s value negative. Make a second pass.
</span></span></span><span class="line"><span class="cl"><span class="cm">For values that are still positive, that means those indices were never visited, hence left
</span></span></span><span class="line"><span class="cl"><span class="cm">positive. So add 1 to them and add it to the set. Eg:
</span></span></span><span class="line"><span class="cl"><span class="cm">	Given array a = [4,3,2,7,8,2,3,1],
</span></span></span><span class="line"><span class="cl"><span class="cm">1.	val = 4 =&gt; idx = 3 &amp; a[3] &gt; 0, therefore, a[3] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">2.	val = 3 =&gt; idx = 2 &amp; a[2] &gt; 0, therefore a[2] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">3.	val = -2 =&gt; idx = abs(-2)-1 = 1 &amp; a[1] &gt; 0, therefore a[1] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">4.	val = -7 =&gt; idx = abs(-7)-1 = 6 &amp; a[6] &gt; 0, therfore a[6] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">5.	val = 8 =&gt; idx = abs(8)-1 = 7 &amp; a[7] &gt; 0, therfore a[7] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">6.	val = 2 =&gt; idx = 1 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">7.	val = -3 =&gt; idx = abs(-3)-1 = 2 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">8.	val = -1 =&gt; idx = abs(-1)-1 = 0 &amp; a[0] &gt; 0, therefore a[0] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [-4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">Observation: Notice index 4 and 5 have positive values, since those values were never
</span></span></span><span class="line"><span class="cl"><span class="cm">encountered, so the values at those indexes never became negative. Hence missing values are
</span></span></span><span class="line"><span class="cl"><span class="cm">5 and 6.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findDisappearedNumbers</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">				</span><span class="c1">// For each number in the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">	</span><span class="c1">// Look at the index that the number corresponds to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">			</span><span class="c1">// If val is -ve, then it means we have encountered it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">  		</span><span class="c1">// If not, make it -ve.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">			</span><span class="c1">// Make another pass through the array, and the indices</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">		</span><span class="c1">// where value was positive, index+1 was missing from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">					</span><span class="c1">// the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="assign-cookieshttpsleetcodecomproblemsassign-cookies"><a href="https://leetcode.com/problems/assign-cookies/">Assign Cookies</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-249-1"><a class="lnlinks" href="#hl-249-1"> 1</a>
</span><span class="lnt" id="hl-249-2"><a class="lnlinks" href="#hl-249-2"> 2</a>
</span><span class="lnt" id="hl-249-3"><a class="lnlinks" href="#hl-249-3"> 3</a>
</span><span class="lnt" id="hl-249-4"><a class="lnlinks" href="#hl-249-4"> 4</a>
</span><span class="lnt" id="hl-249-5"><a class="lnlinks" href="#hl-249-5"> 5</a>
</span><span class="lnt" id="hl-249-6"><a class="lnlinks" href="#hl-249-6"> 6</a>
</span><span class="lnt" id="hl-249-7"><a class="lnlinks" href="#hl-249-7"> 7</a>
</span><span class="lnt" id="hl-249-8"><a class="lnlinks" href="#hl-249-8"> 8</a>
</span><span class="lnt" id="hl-249-9"><a class="lnlinks" href="#hl-249-9"> 9</a>
</span><span class="lnt" id="hl-249-10"><a class="lnlinks" href="#hl-249-10">10</a>
</span><span class="lnt" id="hl-249-11"><a class="lnlinks" href="#hl-249-11">11</a>
</span><span class="lnt" id="hl-249-12"><a class="lnlinks" href="#hl-249-12">12</a>
</span><span class="lnt" id="hl-249-13"><a class="lnlinks" href="#hl-249-13">13</a>
</span><span class="lnt" id="hl-249-14"><a class="lnlinks" href="#hl-249-14">14</a>
</span><span class="lnt" id="hl-249-15"><a class="lnlinks" href="#hl-249-15">15</a>
</span><span class="lnt" id="hl-249-16"><a class="lnlinks" href="#hl-249-16">16</a>
</span><span class="lnt" id="hl-249-17"><a class="lnlinks" href="#hl-249-17">17</a>
</span><span class="lnt" id="hl-249-18"><a class="lnlinks" href="#hl-249-18">18</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">We will employ a greedy algorithm where we first try to content children whose requirements
</span></span></span><span class="line"><span class="cl"><span class="cm">are small. We do this by sorting both the arrays, so we can match the child with least
</span></span></span><span class="line"><span class="cl"><span class="cm">requirement with the smallest cookie available.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findContentChildren</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">g</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">satisfied</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">g</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">){</span><span class="w">	</span><span class="c1">// While children are left and we have cookies,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">g</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">){</span><span class="w">		</span><span class="c1">// Check if the cookie at index j &gt;= child i&#39;s requirement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">satisfied</span><span class="o">++</span><span class="p">;</span><span class="w">		</span><span class="c1">// If so, increment the number of content child and we will</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">i</span><span class="o">++</span><span class="p">;</span><span class="w">				</span><span class="c1">// process the next child.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">						</span><span class="c1">// If cookie j &lt; child i&#39;s demand, check the next cookie by</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">j</span><span class="o">++</span><span class="p">;</span><span class="w">					</span><span class="c1">// incrementing j. If cookie j &gt; child i&#39;s demand, we will</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">							</span><span class="c1">// still need to increment j, hence outside the conditional.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">satisfied</span><span class="p">;</span><span class="w">			</span><span class="c1">// Return number of satisfied children</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="poor-pigshttpsleetcodecomproblemspoor-pigs"><a href="https://leetcode.com/problems/poor-pigs/">Poor Pigs</a></h3>
<p><a href="https://leetcode.com/problems/poor-pigs/discuss/94305/1-line-solution-with-detailed-problem-clarification-and-math-proof-(please-read-if-you-really-want-to-know-what-this-problem-means)">Link</a> to the solution explanation. This problem is phrased poorly and I had to read the comments by other users to understand what it required from me. The link I marked here explains the logic pretty good. But the simple logic is this: The number of rounds $r = \frac{Total Test Time}{Minutes To Die} +1$. Each pig has chances of dying in each round or staying alive till the end, so we plus 1. Now given the number of rounds $r$ and the number of samples $s$, how many volunteers $v$ will you need? $r^v = s$. Each round has some volunteers which in total at the end should be able to test out all the samples. Therefore, $v =\log_rs$.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-250-1"><a class="lnlinks" href="#hl-250-1">1</a>
</span><span class="lnt" id="hl-250-2"><a class="lnlinks" href="#hl-250-2">2</a>
</span><span class="lnt" id="hl-250-3"><a class="lnlinks" href="#hl-250-3">3</a>
</span><span class="lnt" id="hl-250-4"><a class="lnlinks" href="#hl-250-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">poorPigs</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">buckets</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">minutesToDie</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">minutesToTest</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">minutesToTest</span><span class="o">/</span><span class="n">minutesToDie</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// How many rounds can you perform?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">ceil</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">buckets</span><span class="p">)</span><span class="o">/</span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">base</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-pivot-indexhttpsleetcodecomproblemsfind-pivot-index"><a href="https://leetcode.com/problems/find-pivot-index/">Find Pivot Index</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-251-1"><a class="lnlinks" href="#hl-251-1"> 1</a>
</span><span class="lnt" id="hl-251-2"><a class="lnlinks" href="#hl-251-2"> 2</a>
</span><span class="lnt" id="hl-251-3"><a class="lnlinks" href="#hl-251-3"> 3</a>
</span><span class="lnt" id="hl-251-4"><a class="lnlinks" href="#hl-251-4"> 4</a>
</span><span class="lnt" id="hl-251-5"><a class="lnlinks" href="#hl-251-5"> 5</a>
</span><span class="lnt" id="hl-251-6"><a class="lnlinks" href="#hl-251-6"> 6</a>
</span><span class="lnt" id="hl-251-7"><a class="lnlinks" href="#hl-251-7"> 7</a>
</span><span class="lnt" id="hl-251-8"><a class="lnlinks" href="#hl-251-8"> 8</a>
</span><span class="lnt" id="hl-251-9"><a class="lnlinks" href="#hl-251-9"> 9</a>
</span><span class="lnt" id="hl-251-10"><a class="lnlinks" href="#hl-251-10">10</a>
</span><span class="lnt" id="hl-251-11"><a class="lnlinks" href="#hl-251-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">pivotIndex</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">leftSum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">		</span><span class="c1">// We will test each index as a pivot by sliding it -&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">				</span><span class="c1">// Precalculate the sum of the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// Check if the sum of the leftSide of i is</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">leftSum</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">leftSum</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w">	</span><span class="c1">// equal to totalSum - leftSideSum - pivot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">							</span><span class="c1">// which is i. If so, return i.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">leftSum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">						</span><span class="c1">// Otherwise add nums[i] to the leftSum and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">											</span><span class="c1">// slide pivot to the -&gt;.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">								</span><span class="c1">// No pivot found. Return -1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="squares-of-a-sorted-arrayhttpsleetcodecomproblemssquares-of-a-sorted-array"><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">Squares of a Sorted Array</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-252-1"><a class="lnlinks" href="#hl-252-1"> 1</a>
</span><span class="lnt" id="hl-252-2"><a class="lnlinks" href="#hl-252-2"> 2</a>
</span><span class="lnt" id="hl-252-3"><a class="lnlinks" href="#hl-252-3"> 3</a>
</span><span class="lnt" id="hl-252-4"><a class="lnlinks" href="#hl-252-4"> 4</a>
</span><span class="lnt" id="hl-252-5"><a class="lnlinks" href="#hl-252-5"> 5</a>
</span><span class="lnt" id="hl-252-6"><a class="lnlinks" href="#hl-252-6"> 6</a>
</span><span class="lnt" id="hl-252-7"><a class="lnlinks" href="#hl-252-7"> 7</a>
</span><span class="lnt" id="hl-252-8"><a class="lnlinks" href="#hl-252-8"> 8</a>
</span><span class="lnt" id="hl-252-9"><a class="lnlinks" href="#hl-252-9"> 9</a>
</span><span class="lnt" id="hl-252-10"><a class="lnlinks" href="#hl-252-10">10</a>
</span><span class="lnt" id="hl-252-11"><a class="lnlinks" href="#hl-252-11">11</a>
</span><span class="lnt" id="hl-252-12"><a class="lnlinks" href="#hl-252-12">12</a>
</span><span class="lnt" id="hl-252-13"><a class="lnlinks" href="#hl-252-13">13</a>
</span><span class="lnt" id="hl-252-14"><a class="lnlinks" href="#hl-252-14">14</a>
</span><span class="lnt" id="hl-252-15"><a class="lnlinks" href="#hl-252-15">15</a>
</span><span class="lnt" id="hl-252-16"><a class="lnlinks" href="#hl-252-16">16</a>
</span><span class="lnt" id="hl-252-17"><a class="lnlinks" href="#hl-252-17">17</a>
</span><span class="lnt" id="hl-252-18"><a class="lnlinks" href="#hl-252-18">18</a>
</span><span class="lnt" id="hl-252-19"><a class="lnlinks" href="#hl-252-19">19</a>
</span><span class="lnt" id="hl-252-20"><a class="lnlinks" href="#hl-252-20">20</a>
</span><span class="lnt" id="hl-252-21"><a class="lnlinks" href="#hl-252-21">21</a>
</span><span class="lnt" id="hl-252-22"><a class="lnlinks" href="#hl-252-22">22</a>
</span><span class="lnt" id="hl-252-23"><a class="lnlinks" href="#hl-252-23">23</a>
</span><span class="lnt" id="hl-252-24"><a class="lnlinks" href="#hl-252-24">24</a>
</span><span class="lnt" id="hl-252-25"><a class="lnlinks" href="#hl-252-25">25</a>
</span><span class="lnt" id="hl-252-26"><a class="lnlinks" href="#hl-252-26">26</a>
</span><span class="lnt" id="hl-252-27"><a class="lnlinks" href="#hl-252-27">27</a>
</span><span class="lnt" id="hl-252-28"><a class="lnlinks" href="#hl-252-28">28</a>
</span><span class="lnt" id="hl-252-29"><a class="lnlinks" href="#hl-252-29">29</a>
</span><span class="lnt" id="hl-252-30"><a class="lnlinks" href="#hl-252-30">30</a>
</span><span class="lnt" id="hl-252-31"><a class="lnlinks" href="#hl-252-31">31</a>
</span><span class="lnt" id="hl-252-32"><a class="lnlinks" href="#hl-252-32">32</a>
</span><span class="lnt" id="hl-252-33"><a class="lnlinks" href="#hl-252-33">33</a>
</span><span class="lnt" id="hl-252-34"><a class="lnlinks" href="#hl-252-34">34</a>
</span><span class="lnt" id="hl-252-35"><a class="lnlinks" href="#hl-252-35">35</a>
</span><span class="lnt" id="hl-252-36"><a class="lnlinks" href="#hl-252-36">36</a>
</span><span class="lnt" id="hl-252-37"><a class="lnlinks" href="#hl-252-37">37</a>
</span><span class="lnt" id="hl-252-38"><a class="lnlinks" href="#hl-252-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">sortedSquares</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">		</span><span class="c1">// Length of array A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// Pivot is the index where values goes from -ve to +ve.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">pivot</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">pivot</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="c1">// While values are -ve.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">pivot</span><span class="p">;</span><span class="w">			</span><span class="c1">// increment pivot. We exit when we find a positive.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">squares</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// Result array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// Keeps track of where to where to put elements in result array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pivot</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">			</span><span class="c1">// pivot = 0 means pivot didn&#39;t shift, there are only +ve values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w">		</span><span class="c1">// So fill in the array with squares of numbers.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="p">{</span><span class="w">					</span><span class="c1">// Otherwise we have a negative somewhere.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pivot</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">	</span><span class="c1">// So we will compare values left and right of the pivot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pivot</span><span class="p">;</span><span class="w">	</span><span class="c1">// and whichever&#39;s smaller fills up the array first.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">lsquare</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">rsquare</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">lsquare</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">rsquare</span><span class="p">){</span><span class="w">		</span><span class="c1">// left &lt; right, so add left square. decrement left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lsquare</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">--</span><span class="n">left</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rsquare</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">lsquare</span><span class="p">){</span><span class="w">	</span><span class="c1">// right &lt; left, add right square and increment.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rsquare</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">right</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lsquare</span><span class="p">;</span><span class="w">	</span><span class="c1">// both are equal. add both square and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rsquare</span><span class="p">;</span><span class="w">	</span><span class="c1">// decrement left, increment right.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">--</span><span class="n">left</span><span class="p">;</span><span class="w">						</span><span class="c1">// Continue doing this until we hit either end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">right</span><span class="p">;</span><span class="w">					</span><span class="c1">// of the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">								</span><span class="c1">// In the end we need to check if elements on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">									</span><span class="c1">// either side are left to be filled in.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">					</span><span class="c1">// Left side elements remain, so fill their</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">--]</span><span class="p">;</span><span class="w"> </span><span class="c1">// squares one by one till none left.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">right</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w">					</span><span class="c1">// Right side elements remain, so fill their</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">++]</span><span class="p">;</span><span class="w">	</span><span class="c1">// squares in</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">squares</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="repeated-substring-patternhttpsleetcodecomproblemsrepeated-substring-patternsubmissions"><a href="https://leetcode.com/problems/repeated-substring-pattern/submissions/">Repeated Substring Pattern</a></h3>
<p>We use the <a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/">KMP Algorithm</a> that allows us to match a string &rsquo;s&rsquo; with another string &lsquo;p&rsquo; to find the longest sequence of characters in &rsquo;s&rsquo; that match &lsquo;p&rsquo;. We can use a Naive Pattern match where we start from the beginning of the string and start comparing the characters of &rsquo;s&rsquo; with &lsquo;p&rsquo;. Initially, we keep the partition at index 0. If the character&rsquo;s match, we move partition to the right by 1 till we get to the end of the string. If something doesn&rsquo;t match, we don&rsquo;t move the partition but look at the next character to match. In the end, wherever the partition is, that&rsquo;s our longest length we could match with string &lsquo;p&rsquo;. The complexity of that is <i>O(len(p)(len(s)-len(p)+1))</i>.</p>
<p>KMP fixes it by skipping characters that we know already match. In this problem, we aren&rsquo;t matching with any other string but itself. So, we start from index 1 of the string and compare it from the beginning. If they match, we increase j by 1, note it down in lps array and then increase i by 1 to check the next character. j basically measures the longest chain of characters we were able to match. If we couldn&rsquo;t match character at index i and if streak was greater than 0, then our new streak becomes whatever it was in the previous round of matching characters. If the streak is 0, then we simply note down at index i in our lps array 0, meaning longest length measured upto index i was 0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-253-1"><a class="lnlinks" href="#hl-253-1"> 1</a>
</span><span class="lnt" id="hl-253-2"><a class="lnlinks" href="#hl-253-2"> 2</a>
</span><span class="lnt" id="hl-253-3"><a class="lnlinks" href="#hl-253-3"> 3</a>
</span><span class="lnt" id="hl-253-4"><a class="lnlinks" href="#hl-253-4"> 4</a>
</span><span class="lnt" id="hl-253-5"><a class="lnlinks" href="#hl-253-5"> 5</a>
</span><span class="lnt" id="hl-253-6"><a class="lnlinks" href="#hl-253-6"> 6</a>
</span><span class="lnt" id="hl-253-7"><a class="lnlinks" href="#hl-253-7"> 7</a>
</span><span class="lnt" id="hl-253-8"><a class="lnlinks" href="#hl-253-8"> 8</a>
</span><span class="lnt" id="hl-253-9"><a class="lnlinks" href="#hl-253-9"> 9</a>
</span><span class="lnt" id="hl-253-10"><a class="lnlinks" href="#hl-253-10">10</a>
</span><span class="lnt" id="hl-253-11"><a class="lnlinks" href="#hl-253-11">11</a>
</span><span class="lnt" id="hl-253-12"><a class="lnlinks" href="#hl-253-12">12</a>
</span><span class="lnt" id="hl-253-13"><a class="lnlinks" href="#hl-253-13">13</a>
</span><span class="lnt" id="hl-253-14"><a class="lnlinks" href="#hl-253-14">14</a>
</span><span class="lnt" id="hl-253-15"><a class="lnlinks" href="#hl-253-15">15</a>
</span><span class="lnt" id="hl-253-16"><a class="lnlinks" href="#hl-253-16">16</a>
</span><span class="lnt" id="hl-253-17"><a class="lnlinks" href="#hl-253-17">17</a>
</span><span class="lnt" id="hl-253-18"><a class="lnlinks" href="#hl-253-18">18</a>
</span><span class="lnt" id="hl-253-19"><a class="lnlinks" href="#hl-253-19">19</a>
</span><span class="lnt" id="hl-253-20"><a class="lnlinks" href="#hl-253-20">20</a>
</span><span class="lnt" id="hl-253-21"><a class="lnlinks" href="#hl-253-21">21</a>
</span><span class="lnt" id="hl-253-22"><a class="lnlinks" href="#hl-253-22">22</a>
</span><span class="lnt" id="hl-253-23"><a class="lnlinks" href="#hl-253-23">23</a>
</span><span class="lnt" id="hl-253-24"><a class="lnlinks" href="#hl-253-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">repeatedSubstringPattern</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">maxLength</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lps</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">maxLength</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">maxLength</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">lps</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">lps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// To match the string with itself.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">j</span><span class="p">)){</span><span class="w">	</span><span class="c1">// if the chars match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">;</span><span class="w">					</span><span class="c1">// we record that # of matches at index i was</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">i</span><span class="p">;</span><span class="w">							</span><span class="c1">// 1+j and increment i to check next character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">{</span><span class="w">								</span><span class="c1">// character did not match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">						</span><span class="c1">// If our matching streak &gt; 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lps</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">				</span><span class="c1">// our new streak becomes the previous round&#39;s streak</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">							</span><span class="c1">// Otherwise, streak is already 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// So we record that # of matches made at i is 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">									</span><span class="c1">// We increment i to check next index.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">lps</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">						</span><span class="c1">// Longest prefix length that was also a suffix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// is whatever was recorded at the end of array.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="island-perimeterhttpsleetcodecomproblemsisland-perimeter"><a href="https://leetcode.com/problems/island-perimeter/">Island Perimeter</a></h3>
<p>The idea is simple. Count the number of cells with value 1 which denotes the land. Check towards the left and up to that cell and check if it shares any edge with another cell with value 1. If it does record that. In the end, the formula for perimeter is 4 * (the number of land cells) - 2 * (overlapping edges).</p>
<p><strong>Reasoning:</strong> Perimeter of a square is 4 times the length of it&rsquo;s side. Here all squares are of length 1. So total perimeter is 4*(number of cells with value = 1). But we also need to account the edges that are common between two adjacent land cells. If one square shares an edge with another, we just lost one side from both the square, resulting in a loss of two sides. Therefore, we need to subtract twice the number of overlapping edges from the total perimeter to get  the total perimeter.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-254-1"><a class="lnlinks" href="#hl-254-1"> 1</a>
</span><span class="lnt" id="hl-254-2"><a class="lnlinks" href="#hl-254-2"> 2</a>
</span><span class="lnt" id="hl-254-3"><a class="lnlinks" href="#hl-254-3"> 3</a>
</span><span class="lnt" id="hl-254-4"><a class="lnlinks" href="#hl-254-4"> 4</a>
</span><span class="lnt" id="hl-254-5"><a class="lnlinks" href="#hl-254-5"> 5</a>
</span><span class="lnt" id="hl-254-6"><a class="lnlinks" href="#hl-254-6"> 6</a>
</span><span class="lnt" id="hl-254-7"><a class="lnlinks" href="#hl-254-7"> 7</a>
</span><span class="lnt" id="hl-254-8"><a class="lnlinks" href="#hl-254-8"> 8</a>
</span><span class="lnt" id="hl-254-9"><a class="lnlinks" href="#hl-254-9"> 9</a>
</span><span class="lnt" id="hl-254-10"><a class="lnlinks" href="#hl-254-10">10</a>
</span><span class="lnt" id="hl-254-11"><a class="lnlinks" href="#hl-254-11">11</a>
</span><span class="lnt" id="hl-254-12"><a class="lnlinks" href="#hl-254-12">12</a>
</span><span class="lnt" id="hl-254-13"><a class="lnlinks" href="#hl-254-13">13</a>
</span><span class="lnt" id="hl-254-14"><a class="lnlinks" href="#hl-254-14">14</a>
</span><span class="lnt" id="hl-254-15"><a class="lnlinks" href="#hl-254-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">islandPerimeter</span><span class="p">(</span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">grid</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">land</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">overlap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">grid</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">row</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">grid</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">col</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">land</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">row</span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">-</span><span class="n">1</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">	</span><span class="c1">// Check above the current cell.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">++</span><span class="n">overlap</span><span class="p">;</span><span class="w">		</span><span class="c1">// If it&#39;s a land, we need to record one overlap.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">col</span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">	</span><span class="c1">// Similarly, check to the left.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">++</span><span class="n">overlap</span><span class="p">;</span><span class="w">		</span><span class="c1">// If it&#39;s a land, we need to increment overlap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">4</span><span class="o">*</span><span class="n">land</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">2</span><span class="o">*</span><span class="n">overlap</span><span class="p">;</span><span class="w">		</span><span class="c1">// Check the reasoning above.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-complementhttpsleetcodecomproblemsnumber-complement"><a href="https://leetcode.com/problems/number-complement/">Number Complement</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-255-1"><a class="lnlinks" href="#hl-255-1"> 1</a>
</span><span class="lnt" id="hl-255-2"><a class="lnlinks" href="#hl-255-2"> 2</a>
</span><span class="lnt" id="hl-255-3"><a class="lnlinks" href="#hl-255-3"> 3</a>
</span><span class="lnt" id="hl-255-4"><a class="lnlinks" href="#hl-255-4"> 4</a>
</span><span class="lnt" id="hl-255-5"><a class="lnlinks" href="#hl-255-5"> 5</a>
</span><span class="lnt" id="hl-255-6"><a class="lnlinks" href="#hl-255-6"> 6</a>
</span><span class="lnt" id="hl-255-7"><a class="lnlinks" href="#hl-255-7"> 7</a>
</span><span class="lnt" id="hl-255-8"><a class="lnlinks" href="#hl-255-8"> 8</a>
</span><span class="lnt" id="hl-255-9"><a class="lnlinks" href="#hl-255-9"> 9</a>
</span><span class="lnt" id="hl-255-10"><a class="lnlinks" href="#hl-255-10">10</a>
</span><span class="lnt" id="hl-255-11"><a class="lnlinks" href="#hl-255-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findComplement</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pow2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// Easily keep track of power of 2.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">comp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// Complement number</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">			</span><span class="c1">// Since num gets divided by 2, it will be 0 in the end.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">bit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">	</span><span class="c1">// If bit is 0 then complement is 1 &amp; vice versa.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">comp</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">bit</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">pow2</span><span class="p">;</span><span class="w">		</span><span class="c1">// Multiply it by the appropriate power of 2 and add to comp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pow2</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">				</span><span class="c1">// Update power of 2 for next iteration.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">				</span><span class="c1">// Divide num by 2 to get the next bit.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">comp</span><span class="p">;</span><span class="w">				</span><span class="c1">// Comp is now the complement.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-watchhttpsleetcodecomproblemsbinary-watch"><a href="https://leetcode.com/problems/binary-watch/">Binary Watch</a></h3>
<p>The idea is as follows. We have 10 lights. First 4 represent hours. Namely 1, 2, 4 and 8, which are the first four powers of 2. The next 6 lights, represent minutes. Those are 1, 2, 4, 8, 16 and 32. These are powers of 2 from 0-5. So if we iterate from 1 to 9, powers of numbers 1-3 gives us hours and powers of numbers 4-9 minus 4 gives us minutes. So, if we have, let&rsquo;s say 2 lights, we need to find every combination of 2 lights. So in our helper function, we iterate from 1-9 to check every hour and minute combination. We also need to keep a track of the lights that we used, so we don&rsquo;t use the same light again. If hours are &gt; 11 or minutes are &gt; 59, we have an invalid time and we can abort. If the number of lights are 0, that means we found a valid time and we should add it to the result. Now, if the lights are not 0, then we need to check every possible combination from the last light used to 9. If i &lt; 4, then we are looking at an hourly combination, otherwise it&rsquo;s a minute combination. So we recurse with updated lights used, decrease the numOfLights since we used one, update respective hours or minutes until we hit base case.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-256-1"><a class="lnlinks" href="#hl-256-1"> 1</a>
</span><span class="lnt" id="hl-256-2"><a class="lnlinks" href="#hl-256-2"> 2</a>
</span><span class="lnt" id="hl-256-3"><a class="lnlinks" href="#hl-256-3"> 3</a>
</span><span class="lnt" id="hl-256-4"><a class="lnlinks" href="#hl-256-4"> 4</a>
</span><span class="lnt" id="hl-256-5"><a class="lnlinks" href="#hl-256-5"> 5</a>
</span><span class="lnt" id="hl-256-6"><a class="lnlinks" href="#hl-256-6"> 6</a>
</span><span class="lnt" id="hl-256-7"><a class="lnlinks" href="#hl-256-7"> 7</a>
</span><span class="lnt" id="hl-256-8"><a class="lnlinks" href="#hl-256-8"> 8</a>
</span><span class="lnt" id="hl-256-9"><a class="lnlinks" href="#hl-256-9"> 9</a>
</span><span class="lnt" id="hl-256-10"><a class="lnlinks" href="#hl-256-10">10</a>
</span><span class="lnt" id="hl-256-11"><a class="lnlinks" href="#hl-256-11">11</a>
</span><span class="lnt" id="hl-256-12"><a class="lnlinks" href="#hl-256-12">12</a>
</span><span class="lnt" id="hl-256-13"><a class="lnlinks" href="#hl-256-13">13</a>
</span><span class="lnt" id="hl-256-14"><a class="lnlinks" href="#hl-256-14">14</a>
</span><span class="lnt" id="hl-256-15"><a class="lnlinks" href="#hl-256-15">15</a>
</span><span class="lnt" id="hl-256-16"><a class="lnlinks" href="#hl-256-16">16</a>
</span><span class="lnt" id="hl-256-17"><a class="lnlinks" href="#hl-256-17">17</a>
</span><span class="lnt" id="hl-256-18"><a class="lnlinks" href="#hl-256-18">18</a>
</span><span class="lnt" id="hl-256-19"><a class="lnlinks" href="#hl-256-19">19</a>
</span><span class="lnt" id="hl-256-20"><a class="lnlinks" href="#hl-256-20">20</a>
</span><span class="lnt" id="hl-256-21"><a class="lnlinks" href="#hl-256-21">21</a>
</span><span class="lnt" id="hl-256-22"><a class="lnlinks" href="#hl-256-22">22</a>
</span><span class="lnt" id="hl-256-23"><a class="lnlinks" href="#hl-256-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">readBinaryWatch</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">num</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helper</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">lightsUsed</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">numOfLights</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">hrs</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">min</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">hrs</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">11</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">59</span><span class="p">)</span><span class="w">		</span><span class="c1">// Base case. Invalid time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">numOfLights</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">			</span><span class="c1">// All lights used, so add time to the list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">hrs</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;:&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="s">&#34;0&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">min</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lightsUsed</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">	</span><span class="c1">// Otherwise start recursing from number of prev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">4</span><span class="p">)</span><span class="w">							</span><span class="c1">// light used. i &lt; 4 means hours</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">helper</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">hrs</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">),</span><span class="w"> </span><span class="n">min</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">								</span><span class="c1">// i = [4,9] means minute. So recurse.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">helper</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">hrs</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">pow</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">4</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-moves-to-equal-array-elementshttpsleetcodecomproblemsminimum-moves-to-equal-array-elements"><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements/">Minimum Moves to Equal Array Elements</a></h3>
<p>This was an interesting problem. But after working out a few examples by hand, you can notice that it is always a question of bringing the minimum element in par with everyone. So if you know the minimum of the array, we can check how many steps it will take to bring the minimum in par with other element by calculating the distance between them. For example,</p>
<blockquote>
<p>Let the array be [1,2,3]</p>
<p>We can observe that the minimum here is 1. Let us list down all steps to make all elements equal.</p>
<ol>
<li>[2,2,4], Keeping the second element fixed. Notice that distance between the element where 1 was and where 3 was is till the same.</li>
<li>[3,3,4], Keeping the last element fixed.</li>
<li>[4,4,4], Keeping last element fixed.</li>
</ol>
<p>Here, we first tried to make 1 equal to it&rsquo;s neighbor, which required us 1 step. Now, once it becomes equal to 1, the problem is how to make the last element in the original array, which is 3 equal to 1. It requires 2 steps, resulting in a total of of 3. The reason is that the moment you decide to increment the minimum element to match the next element, you fix the neighboring element and have to increment everything else. This will make the minimum and its neighbor the same, but it will also keep the distance between the minimum and all other elements the same because we just incremented everything.</p>
<p>So, the total number of moves required is the distance between the elements of the array and the minimum.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-257-1"><a class="lnlinks" href="#hl-257-1"> 1</a>
</span><span class="lnt" id="hl-257-2"><a class="lnlinks" href="#hl-257-2"> 2</a>
</span><span class="lnt" id="hl-257-3"><a class="lnlinks" href="#hl-257-3"> 3</a>
</span><span class="lnt" id="hl-257-4"><a class="lnlinks" href="#hl-257-4"> 4</a>
</span><span class="lnt" id="hl-257-5"><a class="lnlinks" href="#hl-257-5"> 5</a>
</span><span class="lnt" id="hl-257-6"><a class="lnlinks" href="#hl-257-6"> 6</a>
</span><span class="lnt" id="hl-257-7"><a class="lnlinks" href="#hl-257-7"> 7</a>
</span><span class="lnt" id="hl-257-8"><a class="lnlinks" href="#hl-257-8"> 8</a>
</span><span class="lnt" id="hl-257-9"><a class="lnlinks" href="#hl-257-9"> 9</a>
</span><span class="lnt" id="hl-257-10"><a class="lnlinks" href="#hl-257-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">minMoves</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">moves</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">moves</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="o">-</span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">moves</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Now the above solution required two passes of the array. Can we do even better? Notice that in the end, all we are doing is finding the min and subtracting min from all the elements in the array. That means we are subtracting min <em>n</em> times where n is the length of the array. Why <em>n</em> times? Because there are <em>n</em> elements in the array. Shouldn&rsquo;t it be <em>(n-1)</em> times? No, because the distance of the min from min is 0. So we need to subtract min from itself too, so <em>n</em> times. We can achieve this by first calculating the total of the array while simultaneously keeping track of the minimum. Once done, all we need to do is subtract min <em>n</em> times from the sum, which is equivalent to subtracting min from each element. This results in a much overall better algorithm, requiring only 1 pass of the array.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-258-1"><a class="lnlinks" href="#hl-258-1">1</a>
</span><span class="lnt" id="hl-258-2"><a class="lnlinks" href="#hl-258-2">2</a>
</span><span class="lnt" id="hl-258-3"><a class="lnlinks" href="#hl-258-3">3</a>
</span><span class="lnt" id="hl-258-4"><a class="lnlinks" href="#hl-258-4">4</a>
</span><span class="lnt" id="hl-258-5"><a class="lnlinks" href="#hl-258-5">5</a>
</span><span class="lnt" id="hl-258-6"><a class="lnlinks" href="#hl-258-6">6</a>
</span><span class="lnt" id="hl-258-7"><a class="lnlinks" href="#hl-258-7">7</a>
</span><span class="lnt" id="hl-258-8"><a class="lnlinks" href="#hl-258-8">8</a>
</span><span class="lnt" id="hl-258-9"><a class="lnlinks" href="#hl-258-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">minMoves</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">min</span><span class="o">*</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="license-key-formattinghttpsleetcodecomproblemslicense-key-formatting"><a href="https://leetcode.com/problems/license-key-formatting/">License Key Formatting</a></h3>
<p>The idea is simple.</p>
<ol>
<li>I maintain a temporary array <em>s</em> that contains only the characters in string <em>S</em> after converting them to uppercase.</li>
<li>I maintain a variable <em>length</em> that counts how many characters I found in the string <em>S</em>. If length is 0, that means it contains only dashes (-).</li>
<li>Then I record the <em>offset</em>. <em>Offset</em> basically measures how many characters of the String <em>S</em> will be grouped unevenly in the beginning part of the string. I can check that by using the modulus operator and finding out the remainder. That many characters (of <em>length &lt; K</em>) will be in the beginning part of the string.</li>
<li>Next step is to calculate how many dashes I will need. It&rsquo;s basically <em>length / K</em>.</li>
<li>Then I create the char array that will hold the characters of the formatted key. It&rsquo;s length will be number of characters + the dashes we will need. We need to take care of a special case here. If the <em>offset</em> is 0, meaning I was able to divide characters in equal group, I need to subtract 1. Eg, let&rsquo;s say we had 8 characters and <em>K</em> was 4.  dashes = 8 / 4 = 2. We can divide 8 characters equally into 2 groups using only 1 dash. But since dashes was 2, it is clearly off by 1. This is the case when <em>offset</em> is 0.</li>
<li><em>kIndex</em> tracks where character is to be inserted in the key array.</li>
<li><em>used</em> tracks how many characters of the array <em>s</em>, which indirectly holds the characters of String <em>S</em>, are used.</li>
<li>First I copy down the characters of length <em>offset</em>. Because those are the ones of uneven length. <em>kIndex</em> and <em>used</em> variables are updated.</li>
<li>Last thing to do is to use all the remaining characters in array <em>s</em>, but we take <em>K</em> characters at a time, because we know that the segments are going to be of equal length. We also need to insert &lsquo;-&rsquo; after each segment, but only if <em>kIndex</em> is not at the beginning or at the end of the key array, because inserting it at those points is invalid.</li>
<li>Create a new string and return it.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-259-1"><a class="lnlinks" href="#hl-259-1"> 1</a>
</span><span class="lnt" id="hl-259-2"><a class="lnlinks" href="#hl-259-2"> 2</a>
</span><span class="lnt" id="hl-259-3"><a class="lnlinks" href="#hl-259-3"> 3</a>
</span><span class="lnt" id="hl-259-4"><a class="lnlinks" href="#hl-259-4"> 4</a>
</span><span class="lnt" id="hl-259-5"><a class="lnlinks" href="#hl-259-5"> 5</a>
</span><span class="lnt" id="hl-259-6"><a class="lnlinks" href="#hl-259-6"> 6</a>
</span><span class="lnt" id="hl-259-7"><a class="lnlinks" href="#hl-259-7"> 7</a>
</span><span class="lnt" id="hl-259-8"><a class="lnlinks" href="#hl-259-8"> 8</a>
</span><span class="lnt" id="hl-259-9"><a class="lnlinks" href="#hl-259-9"> 9</a>
</span><span class="lnt" id="hl-259-10"><a class="lnlinks" href="#hl-259-10">10</a>
</span><span class="lnt" id="hl-259-11"><a class="lnlinks" href="#hl-259-11">11</a>
</span><span class="lnt" id="hl-259-12"><a class="lnlinks" href="#hl-259-12">12</a>
</span><span class="lnt" id="hl-259-13"><a class="lnlinks" href="#hl-259-13">13</a>
</span><span class="lnt" id="hl-259-14"><a class="lnlinks" href="#hl-259-14">14</a>
</span><span class="lnt" id="hl-259-15"><a class="lnlinks" href="#hl-259-15">15</a>
</span><span class="lnt" id="hl-259-16"><a class="lnlinks" href="#hl-259-16">16</a>
</span><span class="lnt" id="hl-259-17"><a class="lnlinks" href="#hl-259-17">17</a>
</span><span class="lnt" id="hl-259-18"><a class="lnlinks" href="#hl-259-18">18</a>
</span><span class="lnt" id="hl-259-19"><a class="lnlinks" href="#hl-259-19">19</a>
</span><span class="lnt" id="hl-259-20"><a class="lnlinks" href="#hl-259-20">20</a>
</span><span class="lnt" id="hl-259-21"><a class="lnlinks" href="#hl-259-21">21</a>
</span><span class="lnt" id="hl-259-22"><a class="lnlinks" href="#hl-259-22">22</a>
</span><span class="lnt" id="hl-259-23"><a class="lnlinks" href="#hl-259-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">licenseKeyFormatting</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">S</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">K</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">S</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">S</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">s</span><span class="o">[</span><span class="n">length</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Character</span><span class="p">.</span><span class="na">toUpperCase</span><span class="p">(</span><span class="n">c</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">K</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">dashes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">K</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">length</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dashes</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">offset</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">kIndex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">used</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">used</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">offset</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">used</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">index</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">kIndex</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">kIndex</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">key</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">K</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="max-consecutive-oneshttpsleetcodecomproblemsmax-consecutive-ones"><a href="https://leetcode.com/problems/max-consecutive-ones/">Max Consecutive Ones</a></h3>
<p>Solution 1: I came up with this solution initially. 4 ms runtime and passes 99.97% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-260-1"><a class="lnlinks" href="#hl-260-1"> 1</a>
</span><span class="lnt" id="hl-260-2"><a class="lnlinks" href="#hl-260-2"> 2</a>
</span><span class="lnt" id="hl-260-3"><a class="lnlinks" href="#hl-260-3"> 3</a>
</span><span class="lnt" id="hl-260-4"><a class="lnlinks" href="#hl-260-4"> 4</a>
</span><span class="lnt" id="hl-260-5"><a class="lnlinks" href="#hl-260-5"> 5</a>
</span><span class="lnt" id="hl-260-6"><a class="lnlinks" href="#hl-260-6"> 6</a>
</span><span class="lnt" id="hl-260-7"><a class="lnlinks" href="#hl-260-7"> 7</a>
</span><span class="lnt" id="hl-260-8"><a class="lnlinks" href="#hl-260-8"> 8</a>
</span><span class="lnt" id="hl-260-9"><a class="lnlinks" href="#hl-260-9"> 9</a>
</span><span class="lnt" id="hl-260-10"><a class="lnlinks" href="#hl-260-10">10</a>
</span><span class="lnt" id="hl-260-11"><a class="lnlinks" href="#hl-260-11">11</a>
</span><span class="lnt" id="hl-260-12"><a class="lnlinks" href="#hl-260-12">12</a>
</span><span class="lnt" id="hl-260-13"><a class="lnlinks" href="#hl-260-13">13</a>
</span><span class="lnt" id="hl-260-14"><a class="lnlinks" href="#hl-260-14">14</a>
</span><span class="lnt" id="hl-260-15"><a class="lnlinks" href="#hl-260-15">15</a>
</span><span class="lnt" id="hl-260-16"><a class="lnlinks" href="#hl-260-16">16</a>
</span><span class="lnt" id="hl-260-17"><a class="lnlinks" href="#hl-260-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findMaxConsecutiveOnes</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">					</span><span class="c1">// Keep track of start of a streak, if any</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">					</span><span class="c1">// max length of the streak</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">){</span><span class="w">	</span><span class="c1">// While we are not at the end of the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">		</span><span class="c1">// Check if we have a 1 at start, if so</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">streak</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// initialize streak and check how long can we continue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">	</span><span class="c1">// that streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">streak</span><span class="p">;</span><span class="w">			</span><span class="c1">// Increment streak and left for each consecutive 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">start</span><span class="p">;</span><span class="w">			</span><span class="c1">// make sure you don&#39;t forget that start &lt; nums.length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">						</span><span class="c1">// before checking nums[start] to prevent out-of-bounds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">streak</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w">		</span><span class="c1">// Check if the current streak is better than the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">streak</span><span class="p">;</span><span class="w">		</span><span class="c1">// previous streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">start</span><span class="p">;</span><span class="w">					</span><span class="c1">// Increment start in either case to check for new</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">								</span><span class="c1">// streaks.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">max</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Solution 2: After analyzing the problem further, I noticed that 0 denotes the end of a streak. If we observe 1, we increment streak by 1. But if I see a 0, I reset my streak to 0. This solution too had a 4 ms runtime and passed 99.97% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-261-1"><a class="lnlinks" href="#hl-261-1"> 1</a>
</span><span class="lnt" id="hl-261-2"><a class="lnlinks" href="#hl-261-2"> 2</a>
</span><span class="lnt" id="hl-261-3"><a class="lnlinks" href="#hl-261-3"> 3</a>
</span><span class="lnt" id="hl-261-4"><a class="lnlinks" href="#hl-261-4"> 4</a>
</span><span class="lnt" id="hl-261-5"><a class="lnlinks" href="#hl-261-5"> 5</a>
</span><span class="lnt" id="hl-261-6"><a class="lnlinks" href="#hl-261-6"> 6</a>
</span><span class="lnt" id="hl-261-7"><a class="lnlinks" href="#hl-261-7"> 7</a>
</span><span class="lnt" id="hl-261-8"><a class="lnlinks" href="#hl-261-8"> 8</a>
</span><span class="lnt" id="hl-261-9"><a class="lnlinks" href="#hl-261-9"> 9</a>
</span><span class="lnt" id="hl-261-10"><a class="lnlinks" href="#hl-261-10">10</a>
</span><span class="lnt" id="hl-261-11"><a class="lnlinks" href="#hl-261-11">11</a>
</span><span class="lnt" id="hl-261-12"><a class="lnlinks" href="#hl-261-12">12</a>
</span><span class="lnt" id="hl-261-13"><a class="lnlinks" href="#hl-261-13">13</a>
</span><span class="lnt" id="hl-261-14"><a class="lnlinks" href="#hl-261-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findMaxConsecutiveOnes</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// Global max streak</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">streak</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// Local max streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">){</span><span class="w">			</span><span class="c1">// For each number in nums</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">			</span><span class="c1">// If we see a 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">streak</span><span class="p">;</span><span class="w">			</span><span class="c1">// increment our ongoing streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">streak</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w">	</span><span class="c1">// If the local streak &gt; global max</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">streak</span><span class="p">;</span><span class="w">	</span><span class="c1">// update global max streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">					</span><span class="c1">// otherwise we just saw a 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">streak</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">			</span><span class="c1">// So our streak resets to 0.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">max</span><span class="p">;</span><span class="w">					</span><span class="c1">// return the global max streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="permutationshttpsleetcodecomproblemspermutations"><a href="https://leetcode.com/problems/permutations/">Permutations</a></h3>
<p>The idea is as follows. Given an array a = {1,2,3}, we want to generate all it&rsquo;s possible combinations. What we are trying to do here is that we first take the element at index 0, and find permutations of the remaining thing. When we do that, we insert the element at index 0 in front of the list to get 1 permutation. Similarly, we then take the element at index 1, and permute the remaining contents of the array and insert the element at index 1 in the beginning of the array to get another permutation and so on. In this problem, we are asked to return a list of list, so we first copy the numbers of the array into an ArrayList. Let&rsquo;s run this code for the above example.</p>
<blockquote>
<p>Given nums = {1,2,3}, our ArrayList will be the same, al = [1,2,3]. Our result list is empty, result = [] and index = 0.</p>
<p><strong>helper([1,2,3], 0)</strong></p>
<blockquote>
<p>swap (0, 0) ‚Üí al = [1,2,3]</p>
<p><strong>helper(1,2,3, 1)</strong></p>
<blockquote>
<p>swap(1, 1) ‚Üí al = [1,2,3]</p>
<p><strong>helper([1,2,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) ‚Üí [1,2,3]</p>
<p><strong>helper([1,2,3], 3)</strong></p>
<blockquote>
<p>We update our result list now, because index == length. Therefore, result = [[1,2,3]]. Our recursive stack collapses and we move on to the next instruction, which is undo the step, al = [1,2,3].</p>
</blockquote>
</blockquote>
<p>swap(1, 2) ‚Üí al = [1,3,2]</p>
<p><strong>helper([1,3,2], 3)</strong></p>
<blockquote>
<p>Again, index == length, add it to the list. result = [[1,2,3], [1,3,2]]. Recursion stack collapses, we undo the swap, al = [1,2,3]</p>
</blockquote>
</blockquote>
<p>swap(0, 1) ‚Üí al = [2,1,3]</p>
<p><strong>helper([2,1,3], 1)</strong></p>
<blockquote>
<p>swap(1,1) ‚Üí al = [2,1,3]</p>
<p><strong>helper([2,1,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) ‚Üí al = [2,1,3]</p>
<p><strong>helper([2,1,3], 3)</strong></p>
<blockquote>
<p>index == length, add the current order to the list. result = [[1,2,3], [1,3,2], [2,1,3]]</p>
</blockquote>
</blockquote>
<p>swap(1, 2) ‚Üí al = [2,3,1]</p>
<p><strong>helper([2,3,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1]]</p>
</blockquote>
</blockquote>
<p>swap(0, 2) ‚Üí al = [3,2,1]</p>
<p><strong>helper([3,2,1], 2)</strong></p>
<blockquote>
<p>swap(2,2) ‚Üí al = [3,2,1]</p>
<p><strong>helper([3,2,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1]]</p>
</blockquote>
</blockquote>
<p>swap(1,2) ‚Üí al = [3,1,2]</p>
<p><strong>helper([3,1,2], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]]</p>
</blockquote>
</blockquote>
<p>All branches have been explored now, since the iteration ends and we return the result list.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-262-1"><a class="lnlinks" href="#hl-262-1"> 1</a>
</span><span class="lnt" id="hl-262-2"><a class="lnlinks" href="#hl-262-2"> 2</a>
</span><span class="lnt" id="hl-262-3"><a class="lnlinks" href="#hl-262-3"> 3</a>
</span><span class="lnt" id="hl-262-4"><a class="lnlinks" href="#hl-262-4"> 4</a>
</span><span class="lnt" id="hl-262-5"><a class="lnlinks" href="#hl-262-5"> 5</a>
</span><span class="lnt" id="hl-262-6"><a class="lnlinks" href="#hl-262-6"> 6</a>
</span><span class="lnt" id="hl-262-7"><a class="lnlinks" href="#hl-262-7"> 7</a>
</span><span class="lnt" id="hl-262-8"><a class="lnlinks" href="#hl-262-8"> 8</a>
</span><span class="lnt" id="hl-262-9"><a class="lnlinks" href="#hl-262-9"> 9</a>
</span><span class="lnt" id="hl-262-10"><a class="lnlinks" href="#hl-262-10">10</a>
</span><span class="lnt" id="hl-262-11"><a class="lnlinks" href="#hl-262-11">11</a>
</span><span class="lnt" id="hl-262-12"><a class="lnlinks" href="#hl-262-12">12</a>
</span><span class="lnt" id="hl-262-13"><a class="lnlinks" href="#hl-262-13">13</a>
</span><span class="lnt" id="hl-262-14"><a class="lnlinks" href="#hl-262-14">14</a>
</span><span class="lnt" id="hl-262-15"><a class="lnlinks" href="#hl-262-15">15</a>
</span><span class="lnt" id="hl-262-16"><a class="lnlinks" href="#hl-262-16">16</a>
</span><span class="lnt" id="hl-262-17"><a class="lnlinks" href="#hl-262-17">17</a>
</span><span class="lnt" id="hl-262-18"><a class="lnlinks" href="#hl-262-18">18</a>
</span><span class="lnt" id="hl-262-19"><a class="lnlinks" href="#hl-262-19">19</a>
</span><span class="lnt" id="hl-262-20"><a class="lnlinks" href="#hl-262-20">20</a>
</span><span class="lnt" id="hl-262-21"><a class="lnlinks" href="#hl-262-21">21</a>
</span><span class="lnt" id="hl-262-22"><a class="lnlinks" href="#hl-262-22">22</a>
</span><span class="lnt" id="hl-262-23"><a class="lnlinks" href="#hl-262-23">23</a>
</span><span class="lnt" id="hl-262-24"><a class="lnlinks" href="#hl-262-24">24</a>
</span><span class="lnt" id="hl-262-25"><a class="lnlinks" href="#hl-262-25">25</a>
</span><span class="lnt" id="hl-262-26"><a class="lnlinks" href="#hl-262-26">26</a>
</span><span class="lnt" id="hl-262-27"><a class="lnlinks" href="#hl-262-27">27</a>
</span><span class="lnt" id="hl-262-28"><a class="lnlinks" href="#hl-262-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">						</span><span class="c1">// To store the length of the input array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">		</span><span class="c1">// Result list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">permute</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">numList</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// Creating a copy of the nums array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">			</span><span class="c1">// because it&#39;s easier to create a list from a list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">numList</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">			</span><span class="c1">// Add everything to the list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">numList</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">			</span><span class="c1">// Call the aux function.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helper</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">order</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w">			</span><span class="c1">// If we have checked all the numbers in the array, add a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">order</span><span class="p">));</span><span class="w">	</span><span class="c1">// clone of the list to the array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// Otherwise from index to the end of the array,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">order</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="p">);</span><span class="w">	</span><span class="c1">// take one element, swap it with itself, then the next and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">helper</span><span class="p">(</span><span class="n">order</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">	</span><span class="c1">// so on. Recurse again, but on the next index we just swapped.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">order</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="p">);</span><span class="w">	</span><span class="c1">// Undo the swap so that it helps us in generating the next</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">							</span><span class="c1">// permutation.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">){</span><span class="w">	</span><span class="c1">// Swap elements in a list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">list</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">list</span><span class="p">.</span><span class="na">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">list</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">j</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">list</span><span class="p">.</span><span class="na">set</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="w"> </span><span class="n">temp</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="construct-the-rectanglehttpsleetcodecomproblemsconstruct-the-rectangle"><a href="https://leetcode.com/problems/construct-the-rectangle/">Construct the Rectangle</a></h3>
<p>The idea is very simple. We just need to iterate from width = sqrt(area) to 1 and check if area is perfectly divisible by width. If at any point, width is divisible, then that must be our minimum difference length and width, because we are diverging from the center on both sides. Width decreases while length keeps increasing. Think of it like this, for area = 24, we have many factors of 24, namely 1, 2, 3,4, 6, 8, 12, 24. It&rsquo;s sqrt when rounded down is 4. So we check for width = 4, is 24 perfectly divisible by 4? Yes, so divide it and whatever you get is going to be the minimal difference values. Suppose 4 and 6 weren&rsquo;t the factors for 24. In that case we decrease width by 1, which is 3. Check again, is 24 divisible by 3. Yes? Then that must be our answer. We are diverging away from the center on both sides equally, width to the left towards 1 and length to the right towards area . Therefore the moment we find one value that divides area perfectly, that&rsquo;s our required values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-263-1"><a class="lnlinks" href="#hl-263-1"> 1</a>
</span><span class="lnt" id="hl-263-2"><a class="lnlinks" href="#hl-263-2"> 2</a>
</span><span class="lnt" id="hl-263-3"><a class="lnlinks" href="#hl-263-3"> 3</a>
</span><span class="lnt" id="hl-263-4"><a class="lnlinks" href="#hl-263-4"> 4</a>
</span><span class="lnt" id="hl-263-5"><a class="lnlinks" href="#hl-263-5"> 5</a>
</span><span class="lnt" id="hl-263-6"><a class="lnlinks" href="#hl-263-6"> 6</a>
</span><span class="lnt" id="hl-263-7"><a class="lnlinks" href="#hl-263-7"> 7</a>
</span><span class="lnt" id="hl-263-8"><a class="lnlinks" href="#hl-263-8"> 8</a>
</span><span class="lnt" id="hl-263-9"><a class="lnlinks" href="#hl-263-9"> 9</a>
</span><span class="lnt" id="hl-263-10"><a class="lnlinks" href="#hl-263-10">10</a>
</span><span class="lnt" id="hl-263-11"><a class="lnlinks" href="#hl-263-11">11</a>
</span><span class="lnt" id="hl-263-12"><a class="lnlinks" href="#hl-263-12">12</a>
</span><span class="lnt" id="hl-263-13"><a class="lnlinks" href="#hl-263-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">constructRectangle</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">area</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">dimensions</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">area</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">};</span><span class="w">		</span><span class="c1">// We know that if nothing works out, n*1 is always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="w"> </span><span class="n">done</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">				</span><span class="c1">// going to be the answer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="na">sqrt</span><span class="p">(</span><span class="n">area</span><span class="p">);</span><span class="w">	</span><span class="c1">// We only need to check width from sqrt(area)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">){</span><span class="w">						</span><span class="c1">// While not done</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">area</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">		</span><span class="c1">// check if area is perfectly divisible by width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dimensions</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">width</span><span class="p">;</span><span class="w">		</span><span class="c1">// if so, we found our width and the length.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dimensions</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">area</span><span class="o">/</span><span class="n">width</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">done</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">				</span><span class="c1">// mark done as false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">--</span><span class="n">width</span><span class="p">;</span><span class="w">						</span><span class="c1">// otherwise decrease the length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dimensions</span><span class="p">;</span><span class="w">					</span><span class="c1">// return the dimensions found.</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merge-intervalshttpsleetcodecomproblemsmerge-intervals"><a href="https://leetcode.com/problems/merge-intervals/">Merge Intervals</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-264-1"><a class="lnlinks" href="#hl-264-1"> 1</a>
</span><span class="lnt" id="hl-264-2"><a class="lnlinks" href="#hl-264-2"> 2</a>
</span><span class="lnt" id="hl-264-3"><a class="lnlinks" href="#hl-264-3"> 3</a>
</span><span class="lnt" id="hl-264-4"><a class="lnlinks" href="#hl-264-4"> 4</a>
</span><span class="lnt" id="hl-264-5"><a class="lnlinks" href="#hl-264-5"> 5</a>
</span><span class="lnt" id="hl-264-6"><a class="lnlinks" href="#hl-264-6"> 6</a>
</span><span class="lnt" id="hl-264-7"><a class="lnlinks" href="#hl-264-7"> 7</a>
</span><span class="lnt" id="hl-264-8"><a class="lnlinks" href="#hl-264-8"> 8</a>
</span><span class="lnt" id="hl-264-9"><a class="lnlinks" href="#hl-264-9"> 9</a>
</span><span class="lnt" id="hl-264-10"><a class="lnlinks" href="#hl-264-10">10</a>
</span><span class="lnt" id="hl-264-11"><a class="lnlinks" href="#hl-264-11">11</a>
</span><span class="lnt" id="hl-264-12"><a class="lnlinks" href="#hl-264-12">12</a>
</span><span class="lnt" id="hl-264-13"><a class="lnlinks" href="#hl-264-13">13</a>
</span><span class="lnt" id="hl-264-14"><a class="lnlinks" href="#hl-264-14">14</a>
</span><span class="lnt" id="hl-264-15"><a class="lnlinks" href="#hl-264-15">15</a>
</span><span class="lnt" id="hl-264-16"><a class="lnlinks" href="#hl-264-16">16</a>
</span><span class="lnt" id="hl-264-17"><a class="lnlinks" href="#hl-264-17">17</a>
</span><span class="lnt" id="hl-264-18"><a class="lnlinks" href="#hl-264-18">18</a>
</span><span class="lnt" id="hl-264-19"><a class="lnlinks" href="#hl-264-19">19</a>
</span><span class="lnt" id="hl-264-20"><a class="lnlinks" href="#hl-264-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">merge</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span><span class="w"> </span><span class="n">intervals</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">intervals</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">intervals</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">intervals</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Collections</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">intervals</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="na">start</span><span class="o">-</span><span class="n">b</span><span class="p">.</span><span class="na">start</span><span class="p">);</span><span class="w">	</span><span class="c1">// Sort the list so we can </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">													</span><span class="c1">// compare adjacent intervals.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span><span class="w"> </span><span class="n">merged</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">merged</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">intervals</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">0</span><span class="p">));</span><span class="w">					</span><span class="c1">// Add the initial interval.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Interval</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">intervals</span><span class="p">){</span><span class="w">					</span><span class="c1">// For each interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Interval</span><span class="w"> </span><span class="n">last</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">merged</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">merged</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="c1">// Get the last added time.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="na">start</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">last</span><span class="p">.</span><span class="na">end</span><span class="p">)</span><span class="w">						</span><span class="c1">// If it&#39;s time is greater than the last</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">merged</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">							</span><span class="c1">// interval&#39;s end, it doesn&#39;t overlap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">{</span><span class="w">										</span><span class="c1">// otherwise it does.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">last</span><span class="p">.</span><span class="na">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">last</span><span class="p">.</span><span class="na">end</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="na">end</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">last</span><span class="p">.</span><span class="na">end</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="na">end</span><span class="p">;</span><span class="w">	</span><span class="c1">// So check which has greater end time, and make the last added interval&#39;s time equals that</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">merged</span><span class="p">.</span><span class="na">set</span><span class="p">(</span><span class="n">merged</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">last</span><span class="p">);</span><span class="w">		</span><span class="c1">// And set it as the last added interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">merged</span><span class="p">;</span><span class="w">									</span><span class="c1">// Return the merged list.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merged-sorted-listshttpsleetcodecomproblemsmerge-sorted-array"><a href="https://leetcode.com/problems/merge-sorted-array/">Merged sorted lists</a></h3>
<ol>
<li>counterA keeps track of which element we are looking at in array &lsquo;a&rsquo;. Same with counterB</li>
<li>counterK keeps track of where to insert the element in array &lsquo;a&rsquo;, since a has enough space. The problem states that it might have more than enough space, so we use only the spaces we need, which is the total of both their sizes. Since indexing in an array is 0-based, we subtract 1.</li>
<li>We insert elements from the end, since the end part of &lsquo;a&rsquo; is empty. We can insert from the front, but then we would need to shift elements to the right after each insertion from &lsquo;b&rsquo;.</li>
<li>If array values are equal, add them to the end, and decrease both their counter to check new values in the next iteration</li>
<li>If not equal, then check which one is greater, since the last part of the array should contain larger values. Whichever&rsquo;s greater, put it in &lsquo;a&rsquo; at index &lsquo;counterA&rsquo; and decrement the respective counter.</li>
<li>In the end, we might have some leftover elements either from &lsquo;a&rsquo; or &lsquo;b&rsquo; because we only process elements that are equal to the <strong>min(size(a), size(b))</strong>, until we run out of elements in one of the array. So, whichever array has elements pending, add it to the front of the array and return a.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-265-1"><a class="lnlinks" href="#hl-265-1"> 1</a>
</span><span class="lnt" id="hl-265-2"><a class="lnlinks" href="#hl-265-2"> 2</a>
</span><span class="lnt" id="hl-265-3"><a class="lnlinks" href="#hl-265-3"> 3</a>
</span><span class="lnt" id="hl-265-4"><a class="lnlinks" href="#hl-265-4"> 4</a>
</span><span class="lnt" id="hl-265-5"><a class="lnlinks" href="#hl-265-5"> 5</a>
</span><span class="lnt" id="hl-265-6"><a class="lnlinks" href="#hl-265-6"> 6</a>
</span><span class="lnt" id="hl-265-7"><a class="lnlinks" href="#hl-265-7"> 7</a>
</span><span class="lnt" id="hl-265-8"><a class="lnlinks" href="#hl-265-8"> 8</a>
</span><span class="lnt" id="hl-265-9"><a class="lnlinks" href="#hl-265-9"> 9</a>
</span><span class="lnt" id="hl-265-10"><a class="lnlinks" href="#hl-265-10">10</a>
</span><span class="lnt" id="hl-265-11"><a class="lnlinks" href="#hl-265-11">11</a>
</span><span class="lnt" id="hl-265-12"><a class="lnlinks" href="#hl-265-12">12</a>
</span><span class="lnt" id="hl-265-13"><a class="lnlinks" href="#hl-265-13">13</a>
</span><span class="lnt" id="hl-265-14"><a class="lnlinks" href="#hl-265-14">14</a>
</span><span class="lnt" id="hl-265-15"><a class="lnlinks" href="#hl-265-15">15</a>
</span><span class="lnt" id="hl-265-16"><a class="lnlinks" href="#hl-265-16">16</a>
</span><span class="lnt" id="hl-265-17"><a class="lnlinks" href="#hl-265-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">merge</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sizeA</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sizeB</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">counterA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sizeA</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">counterB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">counterK</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sizeA</span><span class="o">+</span><span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">counterA</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">counterB</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--]</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">counterA</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">counterB</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="next-greater-element-ihttpsleetcodecomproblemsnext-greater-element-i"><a href="https://leetcode.com/problems/next-greater-element-i/">Next Greater Element I</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-266-1"><a class="lnlinks" href="#hl-266-1"> 1</a>
</span><span class="lnt" id="hl-266-2"><a class="lnlinks" href="#hl-266-2"> 2</a>
</span><span class="lnt" id="hl-266-3"><a class="lnlinks" href="#hl-266-3"> 3</a>
</span><span class="lnt" id="hl-266-4"><a class="lnlinks" href="#hl-266-4"> 4</a>
</span><span class="lnt" id="hl-266-5"><a class="lnlinks" href="#hl-266-5"> 5</a>
</span><span class="lnt" id="hl-266-6"><a class="lnlinks" href="#hl-266-6"> 6</a>
</span><span class="lnt" id="hl-266-7"><a class="lnlinks" href="#hl-266-7"> 7</a>
</span><span class="lnt" id="hl-266-8"><a class="lnlinks" href="#hl-266-8"> 8</a>
</span><span class="lnt" id="hl-266-9"><a class="lnlinks" href="#hl-266-9"> 9</a>
</span><span class="lnt" id="hl-266-10"><a class="lnlinks" href="#hl-266-10">10</a>
</span><span class="lnt" id="hl-266-11"><a class="lnlinks" href="#hl-266-11">11</a>
</span><span class="lnt" id="hl-266-12"><a class="lnlinks" href="#hl-266-12">12</a>
</span><span class="lnt" id="hl-266-13"><a class="lnlinks" href="#hl-266-13">13</a>
</span><span class="lnt" id="hl-266-14"><a class="lnlinks" href="#hl-266-14">14</a>
</span><span class="lnt" id="hl-266-15"><a class="lnlinks" href="#hl-266-15">15</a>
</span><span class="lnt" id="hl-266-16"><a class="lnlinks" href="#hl-266-16">16</a>
</span><span class="lnt" id="hl-266-17"><a class="lnlinks" href="#hl-266-17">17</a>
</span><span class="lnt" id="hl-266-18"><a class="lnlinks" href="#hl-266-18">18</a>
</span><span class="lnt" id="hl-266-19"><a class="lnlinks" href="#hl-266-19">19</a>
</span><span class="lnt" id="hl-266-20"><a class="lnlinks" href="#hl-266-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">nextGreaterElement</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums1</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">	</span><span class="c1">// We use the hashmap to keep a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums2</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">				</span><span class="c1">// track of the index of each value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">index</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">							</span><span class="c1">// in nums 2. That way, when we want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">								</span><span class="c1">// to look for a value greater than a val in nums1, we know</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">nums1</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// which index to start iterating from.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums1</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// So for each val in nums1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">index</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">val</span><span class="p">);</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums2</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">){</span><span class="w">	</span><span class="c1">// Iterate from that value&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">val</span><span class="p">){</span><span class="w">			</span><span class="c1">// index in nums2 to the end, and see if you can</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// find any val &gt; nums1[i]. If you do, save it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">break</span><span class="p">;</span><span class="w">						</span><span class="c1">// in the result array and break the loop.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">		</span><span class="c1">// Now if we didn&#39;t find any value, then result[i] would be</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// 0, so we set that index to -1 in our result array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">				</span><span class="c1">// simply return the result array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="string-without-aaa-or-bbbhttpsleetcodecomproblemsstring-without-aaa-or-bbb"><a href="https://leetcode.com/problems/string-without-aaa-or-bbb/">String Without AAA or BBB</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-267-1"><a class="lnlinks" href="#hl-267-1"> 1</a>
</span><span class="lnt" id="hl-267-2"><a class="lnlinks" href="#hl-267-2"> 2</a>
</span><span class="lnt" id="hl-267-3"><a class="lnlinks" href="#hl-267-3"> 3</a>
</span><span class="lnt" id="hl-267-4"><a class="lnlinks" href="#hl-267-4"> 4</a>
</span><span class="lnt" id="hl-267-5"><a class="lnlinks" href="#hl-267-5"> 5</a>
</span><span class="lnt" id="hl-267-6"><a class="lnlinks" href="#hl-267-6"> 6</a>
</span><span class="lnt" id="hl-267-7"><a class="lnlinks" href="#hl-267-7"> 7</a>
</span><span class="lnt" id="hl-267-8"><a class="lnlinks" href="#hl-267-8"> 8</a>
</span><span class="lnt" id="hl-267-9"><a class="lnlinks" href="#hl-267-9"> 9</a>
</span><span class="lnt" id="hl-267-10"><a class="lnlinks" href="#hl-267-10">10</a>
</span><span class="lnt" id="hl-267-11"><a class="lnlinks" href="#hl-267-11">11</a>
</span><span class="lnt" id="hl-267-12"><a class="lnlinks" href="#hl-267-12">12</a>
</span><span class="lnt" id="hl-267-13"><a class="lnlinks" href="#hl-267-13">13</a>
</span><span class="lnt" id="hl-267-14"><a class="lnlinks" href="#hl-267-14">14</a>
</span><span class="lnt" id="hl-267-15"><a class="lnlinks" href="#hl-267-15">15</a>
</span><span class="lnt" id="hl-267-16"><a class="lnlinks" href="#hl-267-16">16</a>
</span><span class="lnt" id="hl-267-17"><a class="lnlinks" href="#hl-267-17">17</a>
</span><span class="lnt" id="hl-267-18"><a class="lnlinks" href="#hl-267-18">18</a>
</span><span class="lnt" id="hl-267-19"><a class="lnlinks" href="#hl-267-19">19</a>
</span><span class="lnt" id="hl-267-20"><a class="lnlinks" href="#hl-267-20">20</a>
</span><span class="lnt" id="hl-267-21"><a class="lnlinks" href="#hl-267-21">21</a>
</span><span class="lnt" id="hl-267-22"><a class="lnlinks" href="#hl-267-22">22</a>
</span><span class="lnt" id="hl-267-23"><a class="lnlinks" href="#hl-267-23">23</a>
</span><span class="lnt" id="hl-267-24"><a class="lnlinks" href="#hl-267-24">24</a>
</span><span class="lnt" id="hl-267-25"><a class="lnlinks" href="#hl-267-25">25</a>
</span><span class="lnt" id="hl-267-26"><a class="lnlinks" href="#hl-267-26">26</a>
</span><span class="lnt" id="hl-267-27"><a class="lnlinks" href="#hl-267-27">27</a>
</span><span class="lnt" id="hl-267-28"><a class="lnlinks" href="#hl-267-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">strWithout3a3b</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">B</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">				
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">ch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">A</span><span class="o">+</span><span class="n">B</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// We create an char array to store string chars</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="sc">&#39;b&#39;</span><span class="p">;</span><span class="w">	</span><span class="c1">// record the most frequent occurring element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="sc">&#39;b&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="p">;</span><span class="w">	</span><span class="c1">// and the least frequent occurring element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">			</span><span class="c1">// While we haven&#39;t added all of the elements</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// We check that if our current index &gt; 1 and our previoud two characters in the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// are the same, then we must have written the max occurring char, so it&#39;s time to write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// the minimum occurring element. We write it, and then decrement the specific A or B.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">2</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">min</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="p">)</span><span class="w">		</span><span class="c1">// If the minimum freq element is &#39;a&#39;, decrement A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">A</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">B</span><span class="o">--</span><span class="p">;</span><span class="w">			</span><span class="c1">// otherwise decrement B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">B</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">A</span><span class="p">){</span><span class="w">		</span><span class="c1">// Otherwise, if B occurs more than A, then set char to B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;b&#39;</span><span class="p">;</span><span class="w">	</span><span class="c1">// decrement B and increment index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">B</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">{</span><span class="w">					</span><span class="c1">// A occurs more, so add A to the char array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;a&#39;</span><span class="p">;</span><span class="w">	</span><span class="c1">// Increment index, decrement A count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">A</span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span><span class="w">		</span><span class="c1">// Create a string from the char array and return it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="keyboard-rowhttpsleetcodecomproblemskeyboard-row"><a href="https://leetcode.com/problems/keyboard-row/">Keyboard Row</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-268-1"><a class="lnlinks" href="#hl-268-1"> 1</a>
</span><span class="lnt" id="hl-268-2"><a class="lnlinks" href="#hl-268-2"> 2</a>
</span><span class="lnt" id="hl-268-3"><a class="lnlinks" href="#hl-268-3"> 3</a>
</span><span class="lnt" id="hl-268-4"><a class="lnlinks" href="#hl-268-4"> 4</a>
</span><span class="lnt" id="hl-268-5"><a class="lnlinks" href="#hl-268-5"> 5</a>
</span><span class="lnt" id="hl-268-6"><a class="lnlinks" href="#hl-268-6"> 6</a>
</span><span class="lnt" id="hl-268-7"><a class="lnlinks" href="#hl-268-7"> 7</a>
</span><span class="lnt" id="hl-268-8"><a class="lnlinks" href="#hl-268-8"> 8</a>
</span><span class="lnt" id="hl-268-9"><a class="lnlinks" href="#hl-268-9"> 9</a>
</span><span class="lnt" id="hl-268-10"><a class="lnlinks" href="#hl-268-10">10</a>
</span><span class="lnt" id="hl-268-11"><a class="lnlinks" href="#hl-268-11">11</a>
</span><span class="lnt" id="hl-268-12"><a class="lnlinks" href="#hl-268-12">12</a>
</span><span class="lnt" id="hl-268-13"><a class="lnlinks" href="#hl-268-13">13</a>
</span><span class="lnt" id="hl-268-14"><a class="lnlinks" href="#hl-268-14">14</a>
</span><span class="lnt" id="hl-268-15"><a class="lnlinks" href="#hl-268-15">15</a>
</span><span class="lnt" id="hl-268-16"><a class="lnlinks" href="#hl-268-16">16</a>
</span><span class="lnt" id="hl-268-17"><a class="lnlinks" href="#hl-268-17">17</a>
</span><span class="lnt" id="hl-268-18"><a class="lnlinks" href="#hl-268-18">18</a>
</span><span class="lnt" id="hl-268-19"><a class="lnlinks" href="#hl-268-19">19</a>
</span><span class="lnt" id="hl-268-20"><a class="lnlinks" href="#hl-268-20">20</a>
</span><span class="lnt" id="hl-268-21"><a class="lnlinks" href="#hl-268-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Maps each character to the row in the keyboard in which it occurs.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">2</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">2</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">3</span><span class="p">,</span><span class="n">1</span><span class="p">,</span><span class="n">3</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="nf">findWords</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="o">[</span><span class="n">words</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// Store filtered words</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">							</span><span class="c1">// Where to insert the filtered words</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">:</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w">					</span><span class="c1">// for each word in words</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">checkWord</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">toLowerCase</span><span class="p">()))</span><span class="w">		</span><span class="c1">// convert it to lowercase and check if all char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">w</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">					</span><span class="c1">// occurs in the same row, if it does, add it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">Arrays</span><span class="p">.</span><span class="na">copyOfRange</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="p">);</span><span class="w">	</span><span class="c1">// Simply return a copy of the array from 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">											</span><span class="c1">// index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">checkWord</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">word</span><span class="p">){</span><span class="w">		</span><span class="c1">// Check if all chars in the word belong in the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">map</span><span class="o">[</span><span class="n">word</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">0</span><span class="p">)</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// same row. Check first chars row</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">word</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">()){</span><span class="w">		</span><span class="c1">// For all the chars in the word</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">map</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">row</span><span class="p">)</span><span class="w">				</span><span class="c1">// if that char belongs to a different row,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">					</span><span class="c1">// return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">							</span><span class="c1">// All chars in same row, return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-mode-in-binary-search-treehttpsleetcodecomproblemsfind-mode-in-binary-search-tree"><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/">Find Mode in Binary Search Tree</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-269-1"><a class="lnlinks" href="#hl-269-1"> 1</a>
</span><span class="lnt" id="hl-269-2"><a class="lnlinks" href="#hl-269-2"> 2</a>
</span><span class="lnt" id="hl-269-3"><a class="lnlinks" href="#hl-269-3"> 3</a>
</span><span class="lnt" id="hl-269-4"><a class="lnlinks" href="#hl-269-4"> 4</a>
</span><span class="lnt" id="hl-269-5"><a class="lnlinks" href="#hl-269-5"> 5</a>
</span><span class="lnt" id="hl-269-6"><a class="lnlinks" href="#hl-269-6"> 6</a>
</span><span class="lnt" id="hl-269-7"><a class="lnlinks" href="#hl-269-7"> 7</a>
</span><span class="lnt" id="hl-269-8"><a class="lnlinks" href="#hl-269-8"> 8</a>
</span><span class="lnt" id="hl-269-9"><a class="lnlinks" href="#hl-269-9"> 9</a>
</span><span class="lnt" id="hl-269-10"><a class="lnlinks" href="#hl-269-10">10</a>
</span><span class="lnt" id="hl-269-11"><a class="lnlinks" href="#hl-269-11">11</a>
</span><span class="lnt" id="hl-269-12"><a class="lnlinks" href="#hl-269-12">12</a>
</span><span class="lnt" id="hl-269-13"><a class="lnlinks" href="#hl-269-13">13</a>
</span><span class="lnt" id="hl-269-14"><a class="lnlinks" href="#hl-269-14">14</a>
</span><span class="lnt" id="hl-269-15"><a class="lnlinks" href="#hl-269-15">15</a>
</span><span class="lnt" id="hl-269-16"><a class="lnlinks" href="#hl-269-16">16</a>
</span><span class="lnt" id="hl-269-17"><a class="lnlinks" href="#hl-269-17">17</a>
</span><span class="lnt" id="hl-269-18"><a class="lnlinks" href="#hl-269-18">18</a>
</span><span class="lnt" id="hl-269-19"><a class="lnlinks" href="#hl-269-19">19</a>
</span><span class="lnt" id="hl-269-20"><a class="lnlinks" href="#hl-269-20">20</a>
</span><span class="lnt" id="hl-269-21"><a class="lnlinks" href="#hl-269-21">21</a>
</span><span class="lnt" id="hl-269-22"><a class="lnlinks" href="#hl-269-22">22</a>
</span><span class="lnt" id="hl-269-23"><a class="lnlinks" href="#hl-269-23">23</a>
</span><span class="lnt" id="hl-269-24"><a class="lnlinks" href="#hl-269-24">24</a>
</span><span class="lnt" id="hl-269-25"><a class="lnlinks" href="#hl-269-25">25</a>
</span><span class="lnt" id="hl-269-26"><a class="lnlinks" href="#hl-269-26">26</a>
</span><span class="lnt" id="hl-269-27"><a class="lnlinks" href="#hl-269-27">27</a>
</span><span class="lnt" id="hl-269-28"><a class="lnlinks" href="#hl-269-28">28</a>
</span><span class="lnt" id="hl-269-29"><a class="lnlinks" href="#hl-269-29">29</a>
</span><span class="lnt" id="hl-269-30"><a class="lnlinks" href="#hl-269-30">30</a>
</span><span class="lnt" id="hl-269-31"><a class="lnlinks" href="#hl-269-31">31</a>
</span><span class="lnt" id="hl-269-32"><a class="lnlinks" href="#hl-269-32">32</a>
</span><span class="lnt" id="hl-269-33"><a class="lnlinks" href="#hl-269-33">33</a>
</span><span class="lnt" id="hl-269-34"><a class="lnlinks" href="#hl-269-34">34</a>
</span><span class="lnt" id="hl-269-35"><a class="lnlinks" href="#hl-269-35">35</a>
</span><span class="lnt" id="hl-269-36"><a class="lnlinks" href="#hl-269-36">36</a>
</span><span class="lnt" id="hl-269-37"><a class="lnlinks" href="#hl-269-37">37</a>
</span><span class="lnt" id="hl-269-38"><a class="lnlinks" href="#hl-269-38">38</a>
</span><span class="lnt" id="hl-269-39"><a class="lnlinks" href="#hl-269-39">39</a>
</span><span class="lnt" id="hl-269-40"><a class="lnlinks" href="#hl-269-40">40</a>
</span><span class="lnt" id="hl-269-41"><a class="lnlinks" href="#hl-269-41">41</a>
</span><span class="lnt" id="hl-269-42"><a class="lnlinks" href="#hl-269-42">42</a>
</span><span class="lnt" id="hl-269-43"><a class="lnlinks" href="#hl-269-43">43</a>
</span><span class="lnt" id="hl-269-44"><a class="lnlinks" href="#hl-269-44">44</a>
</span><span class="lnt" id="hl-269-45"><a class="lnlinks" href="#hl-269-45">45</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">parent</span><span class="p">;</span><span class="w">		</span><span class="c1">// Keep track of parent at each node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">maxMode</span><span class="p">;</span><span class="w">			</span><span class="c1">// maxMode we found</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">currentMode</span><span class="p">;</span><span class="w">		</span><span class="c1">// mode recorded at each node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">modes</span><span class="p">;</span><span class="w">		</span><span class="c1">// keep distinct modes found</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">findMode</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">			</span><span class="c1">// node is null, so return empty array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">maxMode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// we have just seen the root, so maxMode so far is 1.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">currentMode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">			</span><span class="c1">// so is the current mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">modes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">modes</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">		</span><span class="c1">// add the root to our modes set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">				</span><span class="c1">// start traversing it&#39;s left and right branches</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">modes</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// We have found all the modes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">				</span><span class="c1">// keep track of where to insert elements in result array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">modes</span><span class="p">)</span><span class="w">			</span><span class="c1">// add all the distinct modes one by one</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">				</span><span class="c1">// and return it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">traverse</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">			</span><span class="c1">// if node is null, stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">					</span><span class="c1">// otherwise traverse the left branch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">		</span><span class="c1">// Once we hit the null, we start backtracking to the leaf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">updateMode</span><span class="p">(</span><span class="n">node</span><span class="p">);</span><span class="w">			</span><span class="c1">// then we call updateMode with the node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">;</span><span class="w">				</span><span class="c1">// once it&#39;s done, we update parent as the current node, so </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">		</span><span class="c1">// when we backtrack, we can easily check that node and it&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">								</span><span class="c1">// next node&#39;s value for similarity. Then traverse right.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">updateMode</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">parent</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">parent</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">){</span><span class="w">	</span><span class="c1">// If parent node isn&#39;t null and the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">currentMode</span><span class="p">;</span><span class="w">			</span><span class="c1">// node&#39;s value is the same as parent, we update currentMode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">currentMode</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">maxMode</span><span class="p">){</span><span class="w">	</span><span class="c1">// If the currentMode is greater or equal to maxMode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">currentMode</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">maxMode</span><span class="p">)</span><span class="w">	</span><span class="c1">// just check if it&#39;s greater. If it is, remove all </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">modes</span><span class="p">.</span><span class="na">clear</span><span class="p">();</span><span class="w">			</span><span class="c1">// previously recorded modes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">modes</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">		</span><span class="c1">// Add the current node to the set and update the </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">maxMode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">currentMode</span><span class="p">;</span><span class="w">		</span><span class="c1">// maxMode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="p">{</span><span class="w">						</span><span class="c1">// otherwise, value&#39;s aren&#39;t the same. so our currentMode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">currentMode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// becomes 1. If maxMode is also 1, then all we have been </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">maxMode</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">		</span><span class="c1">// seeing are distinct values, so add that node&#39;s value to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">modes</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="c1">// to the mode&#39;s set.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="base-7httpsleetcodecomproblemsbase-7"><a href="https://leetcode.com/problems/base-7/">Base 7</a></h3>
<p>Solution 1 without StringBuilder (Beats 100%, 7ms)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-270-1"><a class="lnlinks" href="#hl-270-1"> 1</a>
</span><span class="lnt" id="hl-270-2"><a class="lnlinks" href="#hl-270-2"> 2</a>
</span><span class="lnt" id="hl-270-3"><a class="lnlinks" href="#hl-270-3"> 3</a>
</span><span class="lnt" id="hl-270-4"><a class="lnlinks" href="#hl-270-4"> 4</a>
</span><span class="lnt" id="hl-270-5"><a class="lnlinks" href="#hl-270-5"> 5</a>
</span><span class="lnt" id="hl-270-6"><a class="lnlinks" href="#hl-270-6"> 6</a>
</span><span class="lnt" id="hl-270-7"><a class="lnlinks" href="#hl-270-7"> 7</a>
</span><span class="lnt" id="hl-270-8"><a class="lnlinks" href="#hl-270-8"> 8</a>
</span><span class="lnt" id="hl-270-9"><a class="lnlinks" href="#hl-270-9"> 9</a>
</span><span class="lnt" id="hl-270-10"><a class="lnlinks" href="#hl-270-10">10</a>
</span><span class="lnt" id="hl-270-11"><a class="lnlinks" href="#hl-270-11">11</a>
</span><span class="lnt" id="hl-270-12"><a class="lnlinks" href="#hl-270-12">12</a>
</span><span class="lnt" id="hl-270-13"><a class="lnlinks" href="#hl-270-13">13</a>
</span><span class="lnt" id="hl-270-14"><a class="lnlinks" href="#hl-270-14">14</a>
</span><span class="lnt" id="hl-270-15"><a class="lnlinks" href="#hl-270-15">15</a>
</span><span class="lnt" id="hl-270-16"><a class="lnlinks" href="#hl-270-16">16</a>
</span><span class="lnt" id="hl-270-17"><a class="lnlinks" href="#hl-270-17">17</a>
</span><span class="lnt" id="hl-270-18"><a class="lnlinks" href="#hl-270-18">18</a>
</span><span class="lnt" id="hl-270-19"><a class="lnlinks" href="#hl-270-19">19</a>
</span><span class="lnt" id="hl-270-20"><a class="lnlinks" href="#hl-270-20">20</a>
</span><span class="lnt" id="hl-270-21"><a class="lnlinks" href="#hl-270-21">21</a>
</span><span class="lnt" id="hl-270-22"><a class="lnlinks" href="#hl-270-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">convertToBase7</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;0&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">(</span><span class="n">num</span><span class="p">))</span><span class="o">/</span><span class="n">Math</span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">7</span><span class="p">))</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">	</span><span class="c1">// Calculate # of bits</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="p">;</span><span class="w">		</span><span class="c1">// where to start inserting from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">digits</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">	</span><span class="c1">// If num is negative</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">num</span><span class="p">;</span><span class="w">	</span><span class="c1">// Make it positive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// We need one more space for -ve sign in the front</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">;</span><span class="w">			</span><span class="c1">// Put the -ve sign</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">					</span><span class="c1">// and index is now len</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">]</span><span class="p">;</span><span class="w">		</span><span class="c1">// otherwise we only need &#34;len&#34; spaces</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">				</span><span class="c1">// index is len-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">				</span><span class="c1">// While num != 0, calculate remainder and add it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">digits</span><span class="o">[</span><span class="n">idx</span><span class="o">--]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">7</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">);</span><span class="w">	</span><span class="c1">// Divide number by 7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">7</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">     
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">digits</span><span class="p">);</span><span class="w">		</span><span class="c1">// Just create a string and return it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Solution 2 with StringBuilder</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-271-1"><a class="lnlinks" href="#hl-271-1"> 1</a>
</span><span class="lnt" id="hl-271-2"><a class="lnlinks" href="#hl-271-2"> 2</a>
</span><span class="lnt" id="hl-271-3"><a class="lnlinks" href="#hl-271-3"> 3</a>
</span><span class="lnt" id="hl-271-4"><a class="lnlinks" href="#hl-271-4"> 4</a>
</span><span class="lnt" id="hl-271-5"><a class="lnlinks" href="#hl-271-5"> 5</a>
</span><span class="lnt" id="hl-271-6"><a class="lnlinks" href="#hl-271-6"> 6</a>
</span><span class="lnt" id="hl-271-7"><a class="lnlinks" href="#hl-271-7"> 7</a>
</span><span class="lnt" id="hl-271-8"><a class="lnlinks" href="#hl-271-8"> 8</a>
</span><span class="lnt" id="hl-271-9"><a class="lnlinks" href="#hl-271-9"> 9</a>
</span><span class="lnt" id="hl-271-10"><a class="lnlinks" href="#hl-271-10">10</a>
</span><span class="lnt" id="hl-271-11"><a class="lnlinks" href="#hl-271-11">11</a>
</span><span class="lnt" id="hl-271-12"><a class="lnlinks" href="#hl-271-12">12</a>
</span><span class="lnt" id="hl-271-13"><a class="lnlinks" href="#hl-271-13">13</a>
</span><span class="lnt" id="hl-271-14"><a class="lnlinks" href="#hl-271-14">14</a>
</span><span class="lnt" id="hl-271-15"><a class="lnlinks" href="#hl-271-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">convertToBase7</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">sb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="w"> </span><span class="n">isNegative</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">	</span><span class="c1">// Just so we can know if we need to add the &#34;-&#34; sign</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">					</span><span class="c1">// Take the absolute value of num</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">num</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">6</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">				</span><span class="c1">// Keep adding the remainder, and dividing num by 7.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">7</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">num</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">7</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">num</span><span class="p">);</span><span class="w">					</span><span class="c1">// Add whatever is left at the end.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isNegative</span><span class="p">)</span><span class="w">					</span><span class="c1">// If num was negative, add the minus sign.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sb</span><span class="p">.</span><span class="na">reverse</span><span class="p">().</span><span class="na">toString</span><span class="p">();</span><span class="w">	</span><span class="c1">// Reverse the builder and return the toString()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="relative-rankshttpsleetcodecomproblemsrelative-ranks"><a href="https://leetcode.com/problems/relative-ranks/">Relative Ranks</a></h3>
<p>The idea employed here is simple. We need to store the relative ranks in sorted order. We can sort the array for that, but that is O(n log n). We can do better than that by finding the relative rank in linear time. First we find the maximum score in the array and create another array of length = maxScore + 1. We add 1 so that when we see the maxScore in the nums, we can assign it to maxScore index. Once we have done that, now we iterate over the nums array. Variable i keeps track of what rank to assign. We check a value in the array and at that index in our reverse sorted array, we put i+1, which basically marks it&rsquo;s rank based on it&rsquo;s position in the rankings. Some of then indexes would be default, that is a score of 0. We then check each value in the descend array and if it&rsquo;s not 0, we assign it a rank, but not if the ranks are 1, 2 or 3. In that case, we assign it a special value of Gold, SIlver or Bronze.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-272-1"><a class="lnlinks" href="#hl-272-1"> 1</a>
</span><span class="lnt" id="hl-272-2"><a class="lnlinks" href="#hl-272-2"> 2</a>
</span><span class="lnt" id="hl-272-3"><a class="lnlinks" href="#hl-272-3"> 3</a>
</span><span class="lnt" id="hl-272-4"><a class="lnlinks" href="#hl-272-4"> 4</a>
</span><span class="lnt" id="hl-272-5"><a class="lnlinks" href="#hl-272-5"> 5</a>
</span><span class="lnt" id="hl-272-6"><a class="lnlinks" href="#hl-272-6"> 6</a>
</span><span class="lnt" id="hl-272-7"><a class="lnlinks" href="#hl-272-7"> 7</a>
</span><span class="lnt" id="hl-272-8"><a class="lnlinks" href="#hl-272-8"> 8</a>
</span><span class="lnt" id="hl-272-9"><a class="lnlinks" href="#hl-272-9"> 9</a>
</span><span class="lnt" id="hl-272-10"><a class="lnlinks" href="#hl-272-10">10</a>
</span><span class="lnt" id="hl-272-11"><a class="lnlinks" href="#hl-272-11">11</a>
</span><span class="lnt" id="hl-272-12"><a class="lnlinks" href="#hl-272-12">12</a>
</span><span class="lnt" id="hl-272-13"><a class="lnlinks" href="#hl-272-13">13</a>
</span><span class="lnt" id="hl-272-14"><a class="lnlinks" href="#hl-272-14">14</a>
</span><span class="lnt" id="hl-272-15"><a class="lnlinks" href="#hl-272-15">15</a>
</span><span class="lnt" id="hl-272-16"><a class="lnlinks" href="#hl-272-16">16</a>
</span><span class="lnt" id="hl-272-17"><a class="lnlinks" href="#hl-272-17">17</a>
</span><span class="lnt" id="hl-272-18"><a class="lnlinks" href="#hl-272-18">18</a>
</span><span class="lnt" id="hl-272-19"><a class="lnlinks" href="#hl-272-19">19</a>
</span><span class="lnt" id="hl-272-20"><a class="lnlinks" href="#hl-272-20">20</a>
</span><span class="lnt" id="hl-272-21"><a class="lnlinks" href="#hl-272-21">21</a>
</span><span class="lnt" id="hl-272-22"><a class="lnlinks" href="#hl-272-22">22</a>
</span><span class="lnt" id="hl-272-23"><a class="lnlinks" href="#hl-272-23">23</a>
</span><span class="lnt" id="hl-272-24"><a class="lnlinks" href="#hl-272-24">24</a>
</span><span class="lnt" id="hl-272-25"><a class="lnlinks" href="#hl-272-25">25</a>
</span><span class="lnt" id="hl-272-26"><a class="lnlinks" href="#hl-272-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="nf">findRelativeRanks</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">maxScore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">maxScore</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">maxScore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">descend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">maxScore</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">descend</span><span class="o">[</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="o">[</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">rank</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">descend</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="o">--</span><span class="n">i</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rank</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;Gold Medal&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rank</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;Silver Medal&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rank</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">3</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;Bronze Medal&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rank</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">rank</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="perfect-numberhttpsleetcodecomproblemsperfect-number"><a href="https://leetcode.com/problems/perfect-number/">Perfect Number</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-273-1"><a class="lnlinks" href="#hl-273-1"> 1</a>
</span><span class="lnt" id="hl-273-2"><a class="lnlinks" href="#hl-273-2"> 2</a>
</span><span class="lnt" id="hl-273-3"><a class="lnlinks" href="#hl-273-3"> 3</a>
</span><span class="lnt" id="hl-273-4"><a class="lnlinks" href="#hl-273-4"> 4</a>
</span><span class="lnt" id="hl-273-5"><a class="lnlinks" href="#hl-273-5"> 5</a>
</span><span class="lnt" id="hl-273-6"><a class="lnlinks" href="#hl-273-6"> 6</a>
</span><span class="lnt" id="hl-273-7"><a class="lnlinks" href="#hl-273-7"> 7</a>
</span><span class="lnt" id="hl-273-8"><a class="lnlinks" href="#hl-273-8"> 8</a>
</span><span class="lnt" id="hl-273-9"><a class="lnlinks" href="#hl-273-9"> 9</a>
</span><span class="lnt" id="hl-273-10"><a class="lnlinks" href="#hl-273-10">10</a>
</span><span class="lnt" id="hl-273-11"><a class="lnlinks" href="#hl-273-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">checkPerfectNumber</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">		</span><span class="c1">// 1 is a special case, where it&#39;s only factor is itself.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">		</span><span class="c1">// We know our total will atleast be 1, 1 is everyone&#39;s factor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">sqrt</span><span class="p">(</span><span class="n">num</span><span class="p">);</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">	</span><span class="c1">// Only loop through num&#39;s sqrt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">num</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">				</span><span class="c1">// If i divides num perfectly</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">otherFactor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">num</span><span class="o">/</span><span class="n">i</span><span class="p">;</span><span class="w">	</span><span class="c1">// Calculate the other factor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">total</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">otherFactor</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">otherFactor</span><span class="p">);</span><span class="w">	</span><span class="c1">// If i and other factor are</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">								</span><span class="c1">// different, add them both, otherwise just i.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">total</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">				</span><span class="c1">// Check in the end if your total is the same as num</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="detect-capitalhttpsleetcodecomproblemsdetect-capital"><a href="https://leetcode.com/problems/detect-capital/">Detect Capital</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-274-1"><a class="lnlinks" href="#hl-274-1"> 1</a>
</span><span class="lnt" id="hl-274-2"><a class="lnlinks" href="#hl-274-2"> 2</a>
</span><span class="lnt" id="hl-274-3"><a class="lnlinks" href="#hl-274-3"> 3</a>
</span><span class="lnt" id="hl-274-4"><a class="lnlinks" href="#hl-274-4"> 4</a>
</span><span class="lnt" id="hl-274-5"><a class="lnlinks" href="#hl-274-5"> 5</a>
</span><span class="lnt" id="hl-274-6"><a class="lnlinks" href="#hl-274-6"> 6</a>
</span><span class="lnt" id="hl-274-7"><a class="lnlinks" href="#hl-274-7"> 7</a>
</span><span class="lnt" id="hl-274-8"><a class="lnlinks" href="#hl-274-8"> 8</a>
</span><span class="lnt" id="hl-274-9"><a class="lnlinks" href="#hl-274-9"> 9</a>
</span><span class="lnt" id="hl-274-10"><a class="lnlinks" href="#hl-274-10">10</a>
</span><span class="lnt" id="hl-274-11"><a class="lnlinks" href="#hl-274-11">11</a>
</span><span class="lnt" id="hl-274-12"><a class="lnlinks" href="#hl-274-12">12</a>
</span><span class="lnt" id="hl-274-13"><a class="lnlinks" href="#hl-274-13">13</a>
</span><span class="lnt" id="hl-274-14"><a class="lnlinks" href="#hl-274-14">14</a>
</span><span class="lnt" id="hl-274-15"><a class="lnlinks" href="#hl-274-15">15</a>
</span><span class="lnt" id="hl-274-16"><a class="lnlinks" href="#hl-274-16">16</a>
</span><span class="lnt" id="hl-274-17"><a class="lnlinks" href="#hl-274-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">detectCapitalUse</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">word</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">word</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">			</span><span class="c1">// Empty or size 1 words are ok.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">chars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">word</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">	</span><span class="c1">// Get the char array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="w"> </span><span class="n">isUpper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">	</span><span class="c1">// by default we let isUpper to false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="sc">&#39;Z&#39;</span><span class="p">)</span><span class="w">		</span><span class="c1">// Check if first two letters are uppercase</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">isUpper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="sc">&#39;Z&#39;</span><span class="p">;</span><span class="w"> </span><span class="c1">// If first was upper and second wasnt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="w">	</span><span class="c1">// isUpper = false, otherwise true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">boolean</span><span class="w"> </span><span class="n">isAlsoUpper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="sc">&#39;Z&#39;</span><span class="p">;</span><span class="w"> </span><span class="c1">// We check onwards 1 char</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isUpper</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">isAlsoUpper</span><span class="p">)</span><span class="w">	</span><span class="c1">// If that char is lower and previous part was</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">				</span><span class="c1">// not lower, invalid use.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">isUpper</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">isAlsoUpper</span><span class="p">)</span><span class="w">	</span><span class="c1">// Or if previous part was lower and current letter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">				</span><span class="c1">// is upper, we return false.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">				</span><span class="c1">// Everything proceeded smoothly. So return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-uncommon-subsequence-ihttpsleetcodecomproblemslongest-uncommon-subsequence-i"><a href="https://leetcode.com/problems/longest-uncommon-subsequence-i/">Longest Uncommon Subsequence I</a></h3>
<p>This is those kind of problems that shouldn&rsquo;t be up there. The problem is stated rather poorly and the solution is even stupider. All you are checking for is if the two string&rsquo;s aren&rsquo;t the same, then whichever one has a larger length is essentially the longest uncommon subsequence because the other string cannot form the full string. I know, it&rsquo;s stupid.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-275-1"><a class="lnlinks" href="#hl-275-1">1</a>
</span><span class="lnt" id="hl-275-2"><a class="lnlinks" href="#hl-275-2">2</a>
</span><span class="lnt" id="hl-275-3"><a class="lnlinks" href="#hl-275-3">3</a>
</span><span class="lnt" id="hl-275-4"><a class="lnlinks" href="#hl-275-4">4</a>
</span><span class="lnt" id="hl-275-5"><a class="lnlinks" href="#hl-275-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">  </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findLUSlength</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">b</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="course-schedule-iihttpsleetcodecomproblemscourse-schedule-ii"><a href="https://leetcode.com/problems/course-schedule-ii/">Course Schedule II</a></h3>
<p>This is a graph problem where we require to sort the vertices topologically. There are two choices we have for sorting topologically - Depth First Search approach based on finshing times or the Kahn&rsquo;s Algorithm. I have used Kahn&rsquo;s algorithm in this solution. Runtime is 2ms [beats 100%] and uses 45.3 MB space [beats than 90.16%]. The idea for Kahn&rsquo;s is simple - Enqueue all the nodes which has 0 incoming edges because those are the ones that can be started first. Then while the queue isn&rsquo;t empty, remove one node at a time, process it&rsquo;s outgoing nodes and decrease their indegrees by one. The reasoning behind that is let&rsquo;s say Node 2 has two prerequisites, Node 0 and Node 1. Node 0 and Node 1 have 0 indegrees. So our first two nodes would be Node 1 and Node 0 and if they are finished, then their outgoing Nodes can be started, that is Node 2. Now when you decrease any node&rsquo;s indegree and they become zero, add them to the queue because they can now be started. Keep doing this until the queue is empty.</p>
<p>In my approach, I&rsquo;m avoiding any unnecessary data structure and using only the most basic ones like array&rsquo;s. So instead of using the queue, what I do is fill the array <code>order</code> which also stores the topological order. <code>idx</code> keeps track of the last index available to fill in the array. <code>start</code> mimics the <code>poll</code> behaviour of a queue. <code>while (start != idx)</code> makes sure that while we still have nodes to process, remove the one that can be started and decrease all the indegrees of outgoing edges.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-276-1"><a class="lnlinks" href="#hl-276-1"> 1</a>
</span><span class="lnt" id="hl-276-2"><a class="lnlinks" href="#hl-276-2"> 2</a>
</span><span class="lnt" id="hl-276-3"><a class="lnlinks" href="#hl-276-3"> 3</a>
</span><span class="lnt" id="hl-276-4"><a class="lnlinks" href="#hl-276-4"> 4</a>
</span><span class="lnt" id="hl-276-5"><a class="lnlinks" href="#hl-276-5"> 5</a>
</span><span class="lnt" id="hl-276-6"><a class="lnlinks" href="#hl-276-6"> 6</a>
</span><span class="lnt" id="hl-276-7"><a class="lnlinks" href="#hl-276-7"> 7</a>
</span><span class="lnt" id="hl-276-8"><a class="lnlinks" href="#hl-276-8"> 8</a>
</span><span class="lnt" id="hl-276-9"><a class="lnlinks" href="#hl-276-9"> 9</a>
</span><span class="lnt" id="hl-276-10"><a class="lnlinks" href="#hl-276-10">10</a>
</span><span class="lnt" id="hl-276-11"><a class="lnlinks" href="#hl-276-11">11</a>
</span><span class="lnt" id="hl-276-12"><a class="lnlinks" href="#hl-276-12">12</a>
</span><span class="lnt" id="hl-276-13"><a class="lnlinks" href="#hl-276-13">13</a>
</span><span class="lnt" id="hl-276-14"><a class="lnlinks" href="#hl-276-14">14</a>
</span><span class="lnt" id="hl-276-15"><a class="lnlinks" href="#hl-276-15">15</a>
</span><span class="lnt" id="hl-276-16"><a class="lnlinks" href="#hl-276-16">16</a>
</span><span class="lnt" id="hl-276-17"><a class="lnlinks" href="#hl-276-17">17</a>
</span><span class="lnt" id="hl-276-18"><a class="lnlinks" href="#hl-276-18">18</a>
</span><span class="lnt" id="hl-276-19"><a class="lnlinks" href="#hl-276-19">19</a>
</span><span class="lnt" id="hl-276-20"><a class="lnlinks" href="#hl-276-20">20</a>
</span><span class="lnt" id="hl-276-21"><a class="lnlinks" href="#hl-276-21">21</a>
</span><span class="lnt" id="hl-276-22"><a class="lnlinks" href="#hl-276-22">22</a>
</span><span class="lnt" id="hl-276-23"><a class="lnlinks" href="#hl-276-23">23</a>
</span><span class="lnt" id="hl-276-24"><a class="lnlinks" href="#hl-276-24">24</a>
</span><span class="lnt" id="hl-276-25"><a class="lnlinks" href="#hl-276-25">25</a>
</span><span class="lnt" id="hl-276-26"><a class="lnlinks" href="#hl-276-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">findOrder</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">numCourses</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">prerequisites</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">indegrees</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">]</span><span class="p">;</span><span class="w">				</span><span class="c1">// We maintain each node&#39;s indegree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span><span class="w"> </span><span class="n">graph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">[</span><span class="n">numCourses</span><span class="o">]</span><span class="p">;</span><span class="w">	</span><span class="c1">// Each node&#39;s outgoing edges</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">edge</span><span class="p">:</span><span class="w"> </span><span class="n">prerequisites</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">					</span><span class="c1">// Process each edge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">indegrees</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]]++</span><span class="p">;</span><span class="w">							</span><span class="c1">// Update indegrees</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">						</span><span class="c1">// Also store the edge in graph</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">order</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">]</span><span class="p">;</span><span class="w">		    </span><span class="c1">// We don&#39;t technically need a queue.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">numCourses</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">        </span><span class="c1">// Find all nodes who indegree is 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">indegrees</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">                  </span><span class="c1">// and put them in the order array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">                              </span><span class="c1">// start tracks node to be polled.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">idx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                      </span><span class="c1">// while we can poll the queue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">order</span><span class="o">[</span><span class="n">start</span><span class="o">++]</span><span class="p">;</span><span class="w">                 </span><span class="c1">// poll the node u</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">                   </span><span class="c1">// If node u has outgoing edges </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">out</span><span class="p">:</span><span class="w"> </span><span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">]</span><span class="p">)</span><span class="w">             </span><span class="c1">// Then for each of those nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">--</span><span class="n">indegrees</span><span class="o">[</span><span class="n">out</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">      </span><span class="c1">// decrease their indegrees and check if it&#39;s 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">out</span><span class="p">;</span><span class="w">         </span><span class="c1">// if it&#39;s 0, add it to our queue (order)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">numCourses</span><span class="p">)</span><span class="w">						</span><span class="c1">// Cycle check. If our idx != numCourses then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="p">{};</span><span class="w">					</span><span class="c1">// not all nodes could be processed. So we have</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">order</span><span class="p">;</span><span class="w">								</span><span class="c1">// a cycle. Otherwise return our order array.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="letter-combinations-of-a-phone-numberhttpsleetcodecomproblemsletter-combinations-of-a-phone-number"><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">Letter Combinations of a Phone Number</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Letter Combinations of a Phone Number.</p>
<p>Memory Usage: 35.9 MB, less than 98.63% of Java online submissions for Letter Combinations of a Phone Number.</p>
<hr>
<p>How do we count numbers? 16, 17, 18, 19 and then what? 20 right? We see that the last number is 19, we can&rsquo;t go past 9 so we set it to 0 and then increment the precedding digit to get 20. The idea is the same for this problem too. We keep a <code>levels</code> array to keep track of which character do we take from which number&rsquo;s allowed alphabet letters. For example, let&rsquo;s say the input string is <code>23</code>. Our <code>levels</code> array would <code>[0, 0]</code> in the beginning. This says pick characters at index 0 and 0 from alphabet characters corresponding to 2 and 3 which gives us <code>ad</code>. Then, we increase the last most counter in our levels array by 1 giving us <code>[0, 1]</code>. This allows us to get <code>ae</code> in the next iteration and levels array would be <code>[0, 2]</code>. We get <code>af</code> and levels array becomes <code>[0, 3]</code>. Now this is where it becomes interesting. We are only allowed three letters for the digit corresponding to 3 and since we already used all of them , we now need to shift to the next character for digit 2, which is <code>b</code>. Level array looks like <code>[1, 0]</code>. This will allow us to get <code>[b,e]</code>. So you get the rough idea now. Only thing now is we watch out when to stop. We stop when we have utilized all available characters from the 0th index&rsquo;s number&rsquo;s allowed alphabet letters. In this case, we stop when levels array look like <code>[3, 0]</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-277-1"><a class="lnlinks" href="#hl-277-1"> 1</a>
</span><span class="lnt" id="hl-277-2"><a class="lnlinks" href="#hl-277-2"> 2</a>
</span><span class="lnt" id="hl-277-3"><a class="lnlinks" href="#hl-277-3"> 3</a>
</span><span class="lnt" id="hl-277-4"><a class="lnlinks" href="#hl-277-4"> 4</a>
</span><span class="lnt" id="hl-277-5"><a class="lnlinks" href="#hl-277-5"> 5</a>
</span><span class="lnt" id="hl-277-6"><a class="lnlinks" href="#hl-277-6"> 6</a>
</span><span class="lnt" id="hl-277-7"><a class="lnlinks" href="#hl-277-7"> 7</a>
</span><span class="lnt" id="hl-277-8"><a class="lnlinks" href="#hl-277-8"> 8</a>
</span><span class="lnt" id="hl-277-9"><a class="lnlinks" href="#hl-277-9"> 9</a>
</span><span class="lnt" id="hl-277-10"><a class="lnlinks" href="#hl-277-10">10</a>
</span><span class="lnt" id="hl-277-11"><a class="lnlinks" href="#hl-277-11">11</a>
</span><span class="lnt" id="hl-277-12"><a class="lnlinks" href="#hl-277-12">12</a>
</span><span class="lnt" id="hl-277-13"><a class="lnlinks" href="#hl-277-13">13</a>
</span><span class="lnt" id="hl-277-14"><a class="lnlinks" href="#hl-277-14">14</a>
</span><span class="lnt" id="hl-277-15"><a class="lnlinks" href="#hl-277-15">15</a>
</span><span class="lnt" id="hl-277-16"><a class="lnlinks" href="#hl-277-16">16</a>
</span><span class="lnt" id="hl-277-17"><a class="lnlinks" href="#hl-277-17">17</a>
</span><span class="lnt" id="hl-277-18"><a class="lnlinks" href="#hl-277-18">18</a>
</span><span class="lnt" id="hl-277-19"><a class="lnlinks" href="#hl-277-19">19</a>
</span><span class="lnt" id="hl-277-20"><a class="lnlinks" href="#hl-277-20">20</a>
</span><span class="lnt" id="hl-277-21"><a class="lnlinks" href="#hl-277-21">21</a>
</span><span class="lnt" id="hl-277-22"><a class="lnlinks" href="#hl-277-22">22</a>
</span><span class="lnt" id="hl-277-23"><a class="lnlinks" href="#hl-277-23">23</a>
</span><span class="lnt" id="hl-277-24"><a class="lnlinks" href="#hl-277-24">24</a>
</span><span class="lnt" id="hl-277-25"><a class="lnlinks" href="#hl-277-25">25</a>
</span><span class="lnt" id="hl-277-26"><a class="lnlinks" href="#hl-277-26">26</a>
</span><span class="lnt" id="hl-277-27"><a class="lnlinks" href="#hl-277-27">27</a>
</span><span class="lnt" id="hl-277-28"><a class="lnlinks" href="#hl-277-28">28</a>
</span><span class="lnt" id="hl-277-29"><a class="lnlinks" href="#hl-277-29">29</a>
</span><span class="lnt" id="hl-277-30"><a class="lnlinks" href="#hl-277-30">30</a>
</span><span class="lnt" id="hl-277-31"><a class="lnlinks" href="#hl-277-31">31</a>
</span><span class="lnt" id="hl-277-32"><a class="lnlinks" href="#hl-277-32">32</a>
</span><span class="lnt" id="hl-277-33"><a class="lnlinks" href="#hl-277-33">33</a>
</span><span class="lnt" id="hl-277-34"><a class="lnlinks" href="#hl-277-34">34</a>
</span><span class="lnt" id="hl-277-35"><a class="lnlinks" href="#hl-277-35">35</a>
</span><span class="lnt" id="hl-277-36"><a class="lnlinks" href="#hl-277-36">36</a>
</span><span class="lnt" id="hl-277-37"><a class="lnlinks" href="#hl-277-37">37</a>
</span><span class="lnt" id="hl-277-38"><a class="lnlinks" href="#hl-277-38">38</a>
</span><span class="lnt" id="hl-277-39"><a class="lnlinks" href="#hl-277-39">39</a>
</span><span class="lnt" id="hl-277-40"><a class="lnlinks" href="#hl-277-40">40</a>
</span><span class="lnt" id="hl-277-41"><a class="lnlinks" href="#hl-277-41">41</a>
</span><span class="lnt" id="hl-277-42"><a class="lnlinks" href="#hl-277-42">42</a>
</span><span class="lnt" id="hl-277-43"><a class="lnlinks" href="#hl-277-43">43</a>
</span><span class="lnt" id="hl-277-44"><a class="lnlinks" href="#hl-277-44">44</a>
</span><span class="lnt" id="hl-277-45"><a class="lnlinks" href="#hl-277-45">45</a>
</span><span class="lnt" id="hl-277-46"><a class="lnlinks" href="#hl-277-46">46</a>
</span><span class="lnt" id="hl-277-47"><a class="lnlinks" href="#hl-277-47">47</a>
</span><span class="lnt" id="hl-277-48"><a class="lnlinks" href="#hl-277-48">48</a>
</span><span class="lnt" id="hl-277-49"><a class="lnlinks" href="#hl-277-49">49</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">private</span><span class="w"> </span><span class="kt">char</span><span class="o">[][]</span><span class="w"> </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;b&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;c&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;d&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;e&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;f&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;g&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;h&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;i&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;j&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;k&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;l&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;m&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;n&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;o&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;p&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;q&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;r&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;s&#39;</span><span class="p">},</span><span class="w">   </span><span class="c1">// 7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;t&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;u&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;v&#39;</span><span class="p">},</span><span class="w">        </span><span class="c1">// 8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="sc">&#39;w&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;x&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;y&#39;</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;z&#39;</span><span class="p">}</span><span class="w">    </span><span class="c1">// 9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">                </span><span class="c1">// Maintain the list of combinations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">numbers</span><span class="p">;</span><span class="w">                                          </span><span class="c1">// numbers parsed from input</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">levels</span><span class="p">;</span><span class="w">                                           </span><span class="c1">// utility array to keep track of next character in string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">                                                  </span><span class="c1">// number of input digits.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">digits</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">digits</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">                 </span><span class="c1">// stop if null or empty string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">numbers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">digits</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                 </span><span class="c1">// parse all the digits from the string as int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">digits</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">          </span><span class="c1">// stop if any of them is 0 or 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">helper</span><span class="p">();</span><span class="w">                                                   </span><span class="c1">// start recursion</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helper</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">levels</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">2</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w">                  </span><span class="c1">// if we are done iterating over all possible combinations,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="p">;</span><span class="w">                                                 </span><span class="c1">// stop recursion.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">                                     </span><span class="c1">// stores all the characters of the string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w">                                 </span><span class="c1">// loop through levels array. The value at each index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">][</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span><span class="p">;</span><span class="w">                    </span><span class="c1">// tells us which character to keep from which map index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">levels</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">]++</span><span class="p">;</span><span class="w">                                              </span><span class="c1">// Increase the entry at the end of the levels array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">levels</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="o">--</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                 </span><span class="c1">// Now loop through the levels array from the end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">            </span><span class="c1">// If the value = total number of characters allowed for that number</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">                                      </span><span class="c1">// then we set it to 0 and increment the previous level entry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="o">]++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">s</span><span class="p">));</span><span class="w">                                  </span><span class="c1">// Add the string and induce next recursive call.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">helper</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sudoku-solverhttpsleetcodecomproblemssudoku-solver"><a href="https://leetcode.com/problems/sudoku-solver/">Sudoku Solver</a></h3>
<p>Runtime: 4 ms, faster than 90.01% of Java online submissions for Sudoku Solver.</p>
<p>Memory Usage: 35.1 MB, less than 71.93% of Java online submissions for Sudoku Solver.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-278-1"><a class="lnlinks" href="#hl-278-1"> 1</a>
</span><span class="lnt" id="hl-278-2"><a class="lnlinks" href="#hl-278-2"> 2</a>
</span><span class="lnt" id="hl-278-3"><a class="lnlinks" href="#hl-278-3"> 3</a>
</span><span class="lnt" id="hl-278-4"><a class="lnlinks" href="#hl-278-4"> 4</a>
</span><span class="lnt" id="hl-278-5"><a class="lnlinks" href="#hl-278-5"> 5</a>
</span><span class="lnt" id="hl-278-6"><a class="lnlinks" href="#hl-278-6"> 6</a>
</span><span class="lnt" id="hl-278-7"><a class="lnlinks" href="#hl-278-7"> 7</a>
</span><span class="lnt" id="hl-278-8"><a class="lnlinks" href="#hl-278-8"> 8</a>
</span><span class="lnt" id="hl-278-9"><a class="lnlinks" href="#hl-278-9"> 9</a>
</span><span class="lnt" id="hl-278-10"><a class="lnlinks" href="#hl-278-10">10</a>
</span><span class="lnt" id="hl-278-11"><a class="lnlinks" href="#hl-278-11">11</a>
</span><span class="lnt" id="hl-278-12"><a class="lnlinks" href="#hl-278-12">12</a>
</span><span class="lnt" id="hl-278-13"><a class="lnlinks" href="#hl-278-13">13</a>
</span><span class="lnt" id="hl-278-14"><a class="lnlinks" href="#hl-278-14">14</a>
</span><span class="lnt" id="hl-278-15"><a class="lnlinks" href="#hl-278-15">15</a>
</span><span class="lnt" id="hl-278-16"><a class="lnlinks" href="#hl-278-16">16</a>
</span><span class="lnt" id="hl-278-17"><a class="lnlinks" href="#hl-278-17">17</a>
</span><span class="lnt" id="hl-278-18"><a class="lnlinks" href="#hl-278-18">18</a>
</span><span class="lnt" id="hl-278-19"><a class="lnlinks" href="#hl-278-19">19</a>
</span><span class="lnt" id="hl-278-20"><a class="lnlinks" href="#hl-278-20">20</a>
</span><span class="lnt" id="hl-278-21"><a class="lnlinks" href="#hl-278-21">21</a>
</span><span class="lnt" id="hl-278-22"><a class="lnlinks" href="#hl-278-22">22</a>
</span><span class="lnt" id="hl-278-23"><a class="lnlinks" href="#hl-278-23">23</a>
</span><span class="lnt" id="hl-278-24"><a class="lnlinks" href="#hl-278-24">24</a>
</span><span class="lnt" id="hl-278-25"><a class="lnlinks" href="#hl-278-25">25</a>
</span><span class="lnt" id="hl-278-26"><a class="lnlinks" href="#hl-278-26">26</a>
</span><span class="lnt" id="hl-278-27"><a class="lnlinks" href="#hl-278-27">27</a>
</span><span class="lnt" id="hl-278-28"><a class="lnlinks" href="#hl-278-28">28</a>
</span><span class="lnt" id="hl-278-29"><a class="lnlinks" href="#hl-278-29">29</a>
</span><span class="lnt" id="hl-278-30"><a class="lnlinks" href="#hl-278-30">30</a>
</span><span class="lnt" id="hl-278-31"><a class="lnlinks" href="#hl-278-31">31</a>
</span><span class="lnt" id="hl-278-32"><a class="lnlinks" href="#hl-278-32">32</a>
</span><span class="lnt" id="hl-278-33"><a class="lnlinks" href="#hl-278-33">33</a>
</span><span class="lnt" id="hl-278-34"><a class="lnlinks" href="#hl-278-34">34</a>
</span><span class="lnt" id="hl-278-35"><a class="lnlinks" href="#hl-278-35">35</a>
</span><span class="lnt" id="hl-278-36"><a class="lnlinks" href="#hl-278-36">36</a>
</span><span class="lnt" id="hl-278-37"><a class="lnlinks" href="#hl-278-37">37</a>
</span><span class="lnt" id="hl-278-38"><a class="lnlinks" href="#hl-278-38">38</a>
</span><span class="lnt" id="hl-278-39"><a class="lnlinks" href="#hl-278-39">39</a>
</span><span class="lnt" id="hl-278-40"><a class="lnlinks" href="#hl-278-40">40</a>
</span><span class="lnt" id="hl-278-41"><a class="lnlinks" href="#hl-278-41">41</a>
</span><span class="lnt" id="hl-278-42"><a class="lnlinks" href="#hl-278-42">42</a>
</span><span class="lnt" id="hl-278-43"><a class="lnlinks" href="#hl-278-43">43</a>
</span><span class="lnt" id="hl-278-44"><a class="lnlinks" href="#hl-278-44">44</a>
</span><span class="lnt" id="hl-278-45"><a class="lnlinks" href="#hl-278-45">45</a>
</span><span class="lnt" id="hl-278-46"><a class="lnlinks" href="#hl-278-46">46</a>
</span><span class="lnt" id="hl-278-47"><a class="lnlinks" href="#hl-278-47">47</a>
</span><span class="lnt" id="hl-278-48"><a class="lnlinks" href="#hl-278-48">48</a>
</span><span class="lnt" id="hl-278-49"><a class="lnlinks" href="#hl-278-49">49</a>
</span><span class="lnt" id="hl-278-50"><a class="lnlinks" href="#hl-278-50">50</a>
</span><span class="lnt" id="hl-278-51"><a class="lnlinks" href="#hl-278-51">51</a>
</span><span class="lnt" id="hl-278-52"><a class="lnlinks" href="#hl-278-52">52</a>
</span><span class="lnt" id="hl-278-53"><a class="lnlinks" href="#hl-278-53">53</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kt">char</span><span class="o">[][]</span><span class="w"> </span><span class="n">board</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">solveSudoku</span><span class="p">(</span><span class="kt">char</span><span class="o">[][]</span><span class="w"> </span><span class="n">board</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">board</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">board</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">solve</span><span class="p">(</span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">solve</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">9</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                                 </span><span class="c1">// If col is 9, make it 0 and shift to the next row</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">row</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">9</span><span class="p">)</span><span class="w">                               </span><span class="c1">// If row is also 9 now, then it means we have successfully filled all cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">                            </span><span class="c1">// So return true and end backtracking.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">                  </span><span class="c1">// Otherwise, we start picking values from 1-9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;.&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">               </span><span class="c1">// And try to plug it into empty cells</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">isValid</span><span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">             </span><span class="c1">// If that value is valid in that cell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="p">);</span><span class="w">    </span><span class="c1">// fill it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="p">))</span><span class="w">          </span><span class="c1">// and move on to fill the next cell via recursive call</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">                    </span><span class="c1">// If the recursion ended by returning true, then return true to signal success</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">else</span><span class="w">                                </span><span class="c1">// Otherwise, we were not able to put an value in that cell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;.&#39;</span><span class="p">;</span><span class="w">          </span><span class="c1">// so change it back to 0 and the backtracking would try the next higher value in that cell.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">solve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">           </span><span class="c1">// That cell wasn&#39;t empty, so move on to the next empty cell.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">                                   </span><span class="c1">// No solution found.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isValid</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// row check</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">c</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">c</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// column check</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">9</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">r</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// box check</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">top</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">3</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bulls-and-cowshttpsleetcodecomproblemsbulls-and-cows"><a href="https://leetcode.com/problems/bulls-and-cows/">Bulls and Cows</a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>The idea is simple, first record the frequency of the digits of the secret number. Then we first find number of <code>bulls</code> by checking for exact indices match. After that we start to record the number of <code>cows</code>. The way we do is by again iterating over the <code>guess</code> string; only if there was a character mismatch and we still have the character available from <code>freq</code> table, we have a <code>cow</code>. Update it and decrement the frequency of the number we just used up.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-279-1"><a class="lnlinks" href="#hl-279-1"> 1</a>
</span><span class="lnt" id="hl-279-2"><a class="lnlinks" href="#hl-279-2"> 2</a>
</span><span class="lnt" id="hl-279-3"><a class="lnlinks" href="#hl-279-3"> 3</a>
</span><span class="lnt" id="hl-279-4"><a class="lnlinks" href="#hl-279-4"> 4</a>
</span><span class="lnt" id="hl-279-5"><a class="lnlinks" href="#hl-279-5"> 5</a>
</span><span class="lnt" id="hl-279-6"><a class="lnlinks" href="#hl-279-6"> 6</a>
</span><span class="lnt" id="hl-279-7"><a class="lnlinks" href="#hl-279-7"> 7</a>
</span><span class="lnt" id="hl-279-8"><a class="lnlinks" href="#hl-279-8"> 8</a>
</span><span class="lnt" id="hl-279-9"><a class="lnlinks" href="#hl-279-9"> 9</a>
</span><span class="lnt" id="hl-279-10"><a class="lnlinks" href="#hl-279-10">10</a>
</span><span class="lnt" id="hl-279-11"><a class="lnlinks" href="#hl-279-11">11</a>
</span><span class="lnt" id="hl-279-12"><a class="lnlinks" href="#hl-279-12">12</a>
</span><span class="lnt" id="hl-279-13"><a class="lnlinks" href="#hl-279-13">13</a>
</span><span class="lnt" id="hl-279-14"><a class="lnlinks" href="#hl-279-14">14</a>
</span><span class="lnt" id="hl-279-15"><a class="lnlinks" href="#hl-279-15">15</a>
</span><span class="lnt" id="hl-279-16"><a class="lnlinks" href="#hl-279-16">16</a>
</span><span class="lnt" id="hl-279-17"><a class="lnlinks" href="#hl-279-17">17</a>
</span><span class="lnt" id="hl-279-18"><a class="lnlinks" href="#hl-279-18">18</a>
</span><span class="lnt" id="hl-279-19"><a class="lnlinks" href="#hl-279-19">19</a>
</span><span class="lnt" id="hl-279-20"><a class="lnlinks" href="#hl-279-20">20</a>
</span><span class="lnt" id="hl-279-21"><a class="lnlinks" href="#hl-279-21">21</a>
</span><span class="lnt" id="hl-279-22"><a class="lnlinks" href="#hl-279-22">22</a>
</span><span class="lnt" id="hl-279-23"><a class="lnlinks" href="#hl-279-23">23</a>
</span><span class="lnt" id="hl-279-24"><a class="lnlinks" href="#hl-279-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">getHint</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">secret</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">guess</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">bulls</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">cows</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">10</span><span class="o">]</span><span class="p">;</span><span class="w">							</span><span class="c1">// Freq of available digits from secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">guess</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">secret</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">freq</span><span class="o">[</span><span class="n">s</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="o">]++</span><span class="p">;</span><span class="w">								</span><span class="c1">// Record the freq of the digit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">guess</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">						</span><span class="c1">// If it&#39;s a match, we have a bulls.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">bulls</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">freq</span><span class="o">[</span><span class="n">s</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="o">]--</span><span class="p">;</span><span class="w">							</span><span class="c1">// We just used the character, so decrement it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">guess</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">secret</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">					</span><span class="c1">// Convert the chars into int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">g</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guess</span><span class="p">.</span><span class="na">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="sc">&#39;0&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">g</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">					</span><span class="c1">// Only if they are a mismtach and we have a number g available in freq table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">cows</span><span class="o">++</span><span class="p">;</span><span class="w">										</span><span class="c1">// then it&#39;s a cow.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]--</span><span class="p">;</span><span class="w">									</span><span class="c1">// We used up the number, so decrement it&#39;s freq.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">().</span><span class="na">append</span><span class="p">(</span><span class="n">bulls</span><span class="p">).</span><span class="na">append</span><span class="p">(</span><span class="s">&#34;A&#34;</span><span class="p">).</span><span class="na">append</span><span class="p">(</span><span class="n">cows</span><span class="p">).</span><span class="na">append</span><span class="p">(</span><span class="s">&#34;B&#34;</span><span class="p">).</span><span class="na">toString</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="n-queens-ihttpsleetcodecomproblemsn-queens"><a href="https://leetcode.com/problems/n-queens/">N-Queens I</a></h3>
<p>Runtime: 3 ms, faster than 73.76% of Java online submissions for N-Queens.
Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for N-Queens.</p>
<p>The idea is same as sudoku, but insteading of scanning rows, we scan columns. Start with row 0, column 0 and see if we can place a queen there, if yes place it and try the next cell of row 0 by recursing. We can&rsquo;t put the queen in the same row again, so we keep changing rows with column 1 until we find somewhere to place it. Keep doing this until you were successfully able to place all the queens as checked by the condition <code>col == n</code>. If so, add that solution to our list of accepted solutions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-280-1"><a class="lnlinks" href="#hl-280-1"> 1</a>
</span><span class="lnt" id="hl-280-2"><a class="lnlinks" href="#hl-280-2"> 2</a>
</span><span class="lnt" id="hl-280-3"><a class="lnlinks" href="#hl-280-3"> 3</a>
</span><span class="lnt" id="hl-280-4"><a class="lnlinks" href="#hl-280-4"> 4</a>
</span><span class="lnt" id="hl-280-5"><a class="lnlinks" href="#hl-280-5"> 5</a>
</span><span class="lnt" id="hl-280-6"><a class="lnlinks" href="#hl-280-6"> 6</a>
</span><span class="lnt" id="hl-280-7"><a class="lnlinks" href="#hl-280-7"> 7</a>
</span><span class="lnt" id="hl-280-8"><a class="lnlinks" href="#hl-280-8"> 8</a>
</span><span class="lnt" id="hl-280-9"><a class="lnlinks" href="#hl-280-9"> 9</a>
</span><span class="lnt" id="hl-280-10"><a class="lnlinks" href="#hl-280-10">10</a>
</span><span class="lnt" id="hl-280-11"><a class="lnlinks" href="#hl-280-11">11</a>
</span><span class="lnt" id="hl-280-12"><a class="lnlinks" href="#hl-280-12">12</a>
</span><span class="lnt" id="hl-280-13"><a class="lnlinks" href="#hl-280-13">13</a>
</span><span class="lnt" id="hl-280-14"><a class="lnlinks" href="#hl-280-14">14</a>
</span><span class="lnt" id="hl-280-15"><a class="lnlinks" href="#hl-280-15">15</a>
</span><span class="lnt" id="hl-280-16"><a class="lnlinks" href="#hl-280-16">16</a>
</span><span class="lnt" id="hl-280-17"><a class="lnlinks" href="#hl-280-17">17</a>
</span><span class="lnt" id="hl-280-18"><a class="lnlinks" href="#hl-280-18">18</a>
</span><span class="lnt" id="hl-280-19"><a class="lnlinks" href="#hl-280-19">19</a>
</span><span class="lnt" id="hl-280-20"><a class="lnlinks" href="#hl-280-20">20</a>
</span><span class="lnt" id="hl-280-21"><a class="lnlinks" href="#hl-280-21">21</a>
</span><span class="lnt" id="hl-280-22"><a class="lnlinks" href="#hl-280-22">22</a>
</span><span class="lnt" id="hl-280-23"><a class="lnlinks" href="#hl-280-23">23</a>
</span><span class="lnt" id="hl-280-24"><a class="lnlinks" href="#hl-280-24">24</a>
</span><span class="lnt" id="hl-280-25"><a class="lnlinks" href="#hl-280-25">25</a>
</span><span class="lnt" id="hl-280-26"><a class="lnlinks" href="#hl-280-26">26</a>
</span><span class="lnt" id="hl-280-27"><a class="lnlinks" href="#hl-280-27">27</a>
</span><span class="lnt" id="hl-280-28"><a class="lnlinks" href="#hl-280-28">28</a>
</span><span class="lnt" id="hl-280-29"><a class="lnlinks" href="#hl-280-29">29</a>
</span><span class="lnt" id="hl-280-30"><a class="lnlinks" href="#hl-280-30">30</a>
</span><span class="lnt" id="hl-280-31"><a class="lnlinks" href="#hl-280-31">31</a>
</span><span class="lnt" id="hl-280-32"><a class="lnlinks" href="#hl-280-32">32</a>
</span><span class="lnt" id="hl-280-33"><a class="lnlinks" href="#hl-280-33">33</a>
</span><span class="lnt" id="hl-280-34"><a class="lnlinks" href="#hl-280-34">34</a>
</span><span class="lnt" id="hl-280-35"><a class="lnlinks" href="#hl-280-35">35</a>
</span><span class="lnt" id="hl-280-36"><a class="lnlinks" href="#hl-280-36">36</a>
</span><span class="lnt" id="hl-280-37"><a class="lnlinks" href="#hl-280-37">37</a>
</span><span class="lnt" id="hl-280-38"><a class="lnlinks" href="#hl-280-38">38</a>
</span><span class="lnt" id="hl-280-39"><a class="lnlinks" href="#hl-280-39">39</a>
</span><span class="lnt" id="hl-280-40"><a class="lnlinks" href="#hl-280-40">40</a>
</span><span class="lnt" id="hl-280-41"><a class="lnlinks" href="#hl-280-41">41</a>
</span><span class="lnt" id="hl-280-42"><a class="lnlinks" href="#hl-280-42">42</a>
</span><span class="lnt" id="hl-280-43"><a class="lnlinks" href="#hl-280-43">43</a>
</span><span class="lnt" id="hl-280-44"><a class="lnlinks" href="#hl-280-44">44</a>
</span><span class="lnt" id="hl-280-45"><a class="lnlinks" href="#hl-280-45">45</a>
</span><span class="lnt" id="hl-280-46"><a class="lnlinks" href="#hl-280-46">46</a>
</span><span class="lnt" id="hl-280-47"><a class="lnlinks" href="#hl-280-47">47</a>
</span><span class="lnt" id="hl-280-48"><a class="lnlinks" href="#hl-280-48">48</a>
</span><span class="lnt" id="hl-280-49"><a class="lnlinks" href="#hl-280-49">49</a>
</span><span class="lnt" id="hl-280-50"><a class="lnlinks" href="#hl-280-50">50</a>
</span><span class="lnt" id="hl-280-51"><a class="lnlinks" href="#hl-280-51">51</a>
</span><span class="lnt" id="hl-280-52"><a class="lnlinks" href="#hl-280-52">52</a>
</span><span class="lnt" id="hl-280-53"><a class="lnlinks" href="#hl-280-53">53</a>
</span><span class="lnt" id="hl-280-54"><a class="lnlinks" href="#hl-280-54">54</a>
</span><span class="lnt" id="hl-280-55"><a class="lnlinks" href="#hl-280-55">55</a>
</span><span class="lnt" id="hl-280-56"><a class="lnlinks" href="#hl-280-56">56</a>
</span><span class="lnt" id="hl-280-57"><a class="lnlinks" href="#hl-280-57">57</a>
</span><span class="lnt" id="hl-280-58"><a class="lnlinks" href="#hl-280-58">58</a>
</span><span class="lnt" id="hl-280-59"><a class="lnlinks" href="#hl-280-59">59</a>
</span><span class="lnt" id="hl-280-60"><a class="lnlinks" href="#hl-280-60">60</a>
</span><span class="lnt" id="hl-280-61"><a class="lnlinks" href="#hl-280-61">61</a>
</span><span class="lnt" id="hl-280-62"><a class="lnlinks" href="#hl-280-62">62</a>
</span><span class="lnt" id="hl-280-63"><a class="lnlinks" href="#hl-280-63">63</a>
</span><span class="lnt" id="hl-280-64"><a class="lnlinks" href="#hl-280-64">64</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">NQueens</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">board</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">solveNQueens</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">this</span><span class="p">.</span><span class="na">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">board</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">solve</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">solve</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">addToList</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">row</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">canPlaceQueen</span><span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addToList</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">sb</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">r</span><span class="p">:</span><span class="w"> </span><span class="n">board</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="sc">&#39;Q&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="sc">&#39;.&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">sb</span><span class="p">.</span><span class="na">toString</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">list</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">canPlaceQueen</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Check all rows for the same column</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">col</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Check upper left diagonal of the cell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Check lower left diagonal of the cell.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="k-diff-pairs-in-an-arrayhttpsleetcodecomproblemsk-diff-pairs-in-an-array"><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/">K-diff pairs in an Array</a></h3>
<p>Pretty intuitive solution. Build a frequency HashMap for all the numbers in the array. In a special case where <code>diff</code> is 0, just count occurences in our <code>freq</code> map whose values are 2 or more. In other case, just loop through all the keys and make sure it&rsquo;s supplement exists to count the number of K-diff pairs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-281-1"><a class="lnlinks" href="#hl-281-1"> 1</a>
</span><span class="lnt" id="hl-281-2"><a class="lnlinks" href="#hl-281-2"> 2</a>
</span><span class="lnt" id="hl-281-3"><a class="lnlinks" href="#hl-281-3"> 3</a>
</span><span class="lnt" id="hl-281-4"><a class="lnlinks" href="#hl-281-4"> 4</a>
</span><span class="lnt" id="hl-281-5"><a class="lnlinks" href="#hl-281-5"> 5</a>
</span><span class="lnt" id="hl-281-6"><a class="lnlinks" href="#hl-281-6"> 6</a>
</span><span class="lnt" id="hl-281-7"><a class="lnlinks" href="#hl-281-7"> 7</a>
</span><span class="lnt" id="hl-281-8"><a class="lnlinks" href="#hl-281-8"> 8</a>
</span><span class="lnt" id="hl-281-9"><a class="lnlinks" href="#hl-281-9"> 9</a>
</span><span class="lnt" id="hl-281-10"><a class="lnlinks" href="#hl-281-10">10</a>
</span><span class="lnt" id="hl-281-11"><a class="lnlinks" href="#hl-281-11">11</a>
</span><span class="lnt" id="hl-281-12"><a class="lnlinks" href="#hl-281-12">12</a>
</span><span class="lnt" id="hl-281-13"><a class="lnlinks" href="#hl-281-13">13</a>
</span><span class="lnt" id="hl-281-14"><a class="lnlinks" href="#hl-281-14">14</a>
</span><span class="lnt" id="hl-281-15"><a class="lnlinks" href="#hl-281-15">15</a>
</span><span class="lnt" id="hl-281-16"><a class="lnlinks" href="#hl-281-16">16</a>
</span><span class="lnt" id="hl-281-17"><a class="lnlinks" href="#hl-281-17">17</a>
</span><span class="lnt" id="hl-281-18"><a class="lnlinks" href="#hl-281-18">18</a>
</span><span class="lnt" id="hl-281-19"><a class="lnlinks" href="#hl-281-19">19</a>
</span><span class="lnt" id="hl-281-20"><a class="lnlinks" href="#hl-281-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findPairs</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">k</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="p">,</span><span class="w"> </span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">freq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">freq</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">freq</span><span class="p">.</span><span class="na">getOrDefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">k</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">freq</span><span class="p">.</span><span class="na">values</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">pairs</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">pairs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">freq</span><span class="p">.</span><span class="na">keySet</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">freq</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">k</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">pairs</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">pairs</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-subsequencehttpsleetcodecomproblemsis-subsequencesubmissions"><a href="https://leetcode.com/problems/is-subsequence/submissions/">Is Subsequence</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.
Memory Usage: 49.6 MB, less than 100.00% of Java online submissions for Is Subsequence.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-282-1"><a class="lnlinks" href="#hl-282-1">1</a>
</span><span class="lnt" id="hl-282-2"><a class="lnlinks" href="#hl-282-2">2</a>
</span><span class="lnt" id="hl-282-3"><a class="lnlinks" href="#hl-282-3">3</a>
</span><span class="lnt" id="hl-282-4"><a class="lnlinks" href="#hl-282-4">4</a>
</span><span class="lnt" id="hl-282-5"><a class="lnlinks" href="#hl-282-5">5</a>
</span><span class="lnt" id="hl-282-6"><a class="lnlinks" href="#hl-282-6">6</a>
</span><span class="lnt" id="hl-282-7"><a class="lnlinks" href="#hl-282-7">7</a>
</span><span class="lnt" id="hl-282-8"><a class="lnlinks" href="#hl-282-8">8</a>
</span><span class="lnt" id="hl-282-9"><a class="lnlinks" href="#hl-282-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isSubsequence</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">								</span><span class="c1">// Set it to 0 to start check for 0th index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">				</span><span class="c1">// For all the characters in String s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">indexOf</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="n">idx</span><span class="o">+</span><span class="n">1</span><span class="p">);</span><span class="w">				</span><span class="c1">// Find it&#39;s index in String t from index one more than the last index matched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">							</span><span class="c1">// idx &lt; 0 means not found</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-absolute-difference-in-bsthttpsleetcodecomproblemsminimum-absolute-difference-in-bst"><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/">Minimum Absolute Difference in BST</a></h3>
<p>The idea is to use the Inorder traversal of a BST. We repeatively iterate over the left branch to find the minimum diff and then do the same for the right branch, but this time we already know that the parent of the right branch has to be its minimum, so first set it and then traverse the right branch to find the minimum difference.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-283-1"><a class="lnlinks" href="#hl-283-1"> 1</a>
</span><span class="lnt" id="hl-283-2"><a class="lnlinks" href="#hl-283-2"> 2</a>
</span><span class="lnt" id="hl-283-3"><a class="lnlinks" href="#hl-283-3"> 3</a>
</span><span class="lnt" id="hl-283-4"><a class="lnlinks" href="#hl-283-4"> 4</a>
</span><span class="lnt" id="hl-283-5"><a class="lnlinks" href="#hl-283-5"> 5</a>
</span><span class="lnt" id="hl-283-6"><a class="lnlinks" href="#hl-283-6"> 6</a>
</span><span class="lnt" id="hl-283-7"><a class="lnlinks" href="#hl-283-7"> 7</a>
</span><span class="lnt" id="hl-283-8"><a class="lnlinks" href="#hl-283-8"> 8</a>
</span><span class="lnt" id="hl-283-9"><a class="lnlinks" href="#hl-283-9"> 9</a>
</span><span class="lnt" id="hl-283-10"><a class="lnlinks" href="#hl-283-10">10</a>
</span><span class="lnt" id="hl-283-11"><a class="lnlinks" href="#hl-283-11">11</a>
</span><span class="lnt" id="hl-283-12"><a class="lnlinks" href="#hl-283-12">12</a>
</span><span class="lnt" id="hl-283-13"><a class="lnlinks" href="#hl-283-13">13</a>
</span><span class="lnt" id="hl-283-14"><a class="lnlinks" href="#hl-283-14">14</a>
</span><span class="lnt" id="hl-283-15"><a class="lnlinks" href="#hl-283-15">15</a>
</span><span class="lnt" id="hl-283-16"><a class="lnlinks" href="#hl-283-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w">								</span><span class="c1">// Hold the minimum difference.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">int</span><span class="w"> </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w">								</span><span class="c1">// Holds the minimum value observed for the right branch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">getMinimumDifference</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">											</span><span class="c1">// Start iterating from the root.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">traverse</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">										</span><span class="c1">// Null node, so stop recursion</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">									</span><span class="c1">// Keep traversing till the end of the tree</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="o">-</span><span class="n">prev</span><span class="p">),</span><span class="w"> </span><span class="n">res</span><span class="p">);</span><span class="w">			</span><span class="c1">// Check if we have a minimum, if so set it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">										</span><span class="c1">// The smallest value for the right branch is it&#39;s parent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">									</span><span class="c1">// Set it first and then traverse.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bst-tree-to-greater-treehttpsleetcodecomproblemsconvert-bst-to-greater-tree"><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/">BST Tree to Greater Tree</a></h3>
<p>The idea is simple. In a BST, we know everything on the right side of a node is greater than it and it&rsquo;s left side. So when we are at any node, it&rsquo;s value would be its value + sum of everything on its right side. So, we first compute the node&rsquo;s value and then notice that the value for the node on the left is nothing but its value + parents value. So the node&rsquo;s value is computed, do the same thing for the left side, but this time, the starting sum would be the parent&rsquo;s value.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-284-1"><a class="lnlinks" href="#hl-284-1"> 1</a>
</span><span class="lnt" id="hl-284-2"><a class="lnlinks" href="#hl-284-2"> 2</a>
</span><span class="lnt" id="hl-284-3"><a class="lnlinks" href="#hl-284-3"> 3</a>
</span><span class="lnt" id="hl-284-4"><a class="lnlinks" href="#hl-284-4"> 4</a>
</span><span class="lnt" id="hl-284-5"><a class="lnlinks" href="#hl-284-5"> 5</a>
</span><span class="lnt" id="hl-284-6"><a class="lnlinks" href="#hl-284-6"> 6</a>
</span><span class="lnt" id="hl-284-7"><a class="lnlinks" href="#hl-284-7"> 7</a>
</span><span class="lnt" id="hl-284-8"><a class="lnlinks" href="#hl-284-8"> 8</a>
</span><span class="lnt" id="hl-284-9"><a class="lnlinks" href="#hl-284-9"> 9</a>
</span><span class="lnt" id="hl-284-10"><a class="lnlinks" href="#hl-284-10">10</a>
</span><span class="lnt" id="hl-284-11"><a class="lnlinks" href="#hl-284-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">TreeNode</span><span class="w"> </span><span class="nf">convertBST</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">root</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">traverse</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">,</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="student-attendance-record-ihttpsleetcodecomproblemsstudent-attendance-record-i"><a href="https://leetcode.com/problems/student-attendance-record-i/">Student Attendance Record I</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-285-1"><a class="lnlinks" href="#hl-285-1"> 1</a>
</span><span class="lnt" id="hl-285-2"><a class="lnlinks" href="#hl-285-2"> 2</a>
</span><span class="lnt" id="hl-285-3"><a class="lnlinks" href="#hl-285-3"> 3</a>
</span><span class="lnt" id="hl-285-4"><a class="lnlinks" href="#hl-285-4"> 4</a>
</span><span class="lnt" id="hl-285-5"><a class="lnlinks" href="#hl-285-5"> 5</a>
</span><span class="lnt" id="hl-285-6"><a class="lnlinks" href="#hl-285-6"> 6</a>
</span><span class="lnt" id="hl-285-7"><a class="lnlinks" href="#hl-285-7"> 7</a>
</span><span class="lnt" id="hl-285-8"><a class="lnlinks" href="#hl-285-8"> 8</a>
</span><span class="lnt" id="hl-285-9"><a class="lnlinks" href="#hl-285-9"> 9</a>
</span><span class="lnt" id="hl-285-10"><a class="lnlinks" href="#hl-285-10">10</a>
</span><span class="lnt" id="hl-285-11"><a class="lnlinks" href="#hl-285-11">11</a>
</span><span class="lnt" id="hl-285-12"><a class="lnlinks" href="#hl-285-12">12</a>
</span><span class="lnt" id="hl-285-13"><a class="lnlinks" href="#hl-285-13">13</a>
</span><span class="lnt" id="hl-285-14"><a class="lnlinks" href="#hl-285-14">14</a>
</span><span class="lnt" id="hl-285-15"><a class="lnlinks" href="#hl-285-15">15</a>
</span><span class="lnt" id="hl-285-16"><a class="lnlinks" href="#hl-285-16">16</a>
</span><span class="lnt" id="hl-285-17"><a class="lnlinks" href="#hl-285-17">17</a>
</span><span class="lnt" id="hl-285-18"><a class="lnlinks" href="#hl-285-18">18</a>
</span><span class="lnt" id="hl-285-19"><a class="lnlinks" href="#hl-285-19">19</a>
</span><span class="lnt" id="hl-285-20"><a class="lnlinks" href="#hl-285-20">20</a>
</span><span class="lnt" id="hl-285-21"><a class="lnlinks" href="#hl-285-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">checkRecord</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">												</span><span class="c1">// Count number of A&#39;s seen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">												</span><span class="c1">// Count number of consecutive L&#39;s seen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">:</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">		</span><span class="c1">// Loop through each character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">								</span><span class="c1">// If c is A, increment A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">A</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">								</span><span class="c1">// If A is more than 1, return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">										</span><span class="c1">// Always set L count to 0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;L&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">					</span><span class="c1">// If c is L,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">L</span><span class="o">++</span><span class="p">;</span><span class="w">											</span><span class="c1">// We might have consecutive L&#39;s, so start counting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">L</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">							</span><span class="c1">// If we have more than 2 consecutive L&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">					</span><span class="c1">// return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">else</span><span class="w">													</span><span class="c1">// Lastly, we might have a P, that will reset our</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">										</span><span class="c1">// consecutive L streak.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">											</span><span class="c1">// Everything passed, so return true.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-words-in-string-iiihttpsleetcodecomproblemsreverse-words-in-a-string-iii"><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">Reverse Words in String III</a></h3>
<p>Runtime: 2 ms, faster than 99.34% of Java online submissions for Reverse Words in a String III.</p>
<p>Memory Usage: 37.9 MB, less than 100.00% of Java online submissions for Reverse Words in a String III.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-286-1"><a class="lnlinks" href="#hl-286-1"> 1</a>
</span><span class="lnt" id="hl-286-2"><a class="lnlinks" href="#hl-286-2"> 2</a>
</span><span class="lnt" id="hl-286-3"><a class="lnlinks" href="#hl-286-3"> 3</a>
</span><span class="lnt" id="hl-286-4"><a class="lnlinks" href="#hl-286-4"> 4</a>
</span><span class="lnt" id="hl-286-5"><a class="lnlinks" href="#hl-286-5"> 5</a>
</span><span class="lnt" id="hl-286-6"><a class="lnlinks" href="#hl-286-6"> 6</a>
</span><span class="lnt" id="hl-286-7"><a class="lnlinks" href="#hl-286-7"> 7</a>
</span><span class="lnt" id="hl-286-8"><a class="lnlinks" href="#hl-286-8"> 8</a>
</span><span class="lnt" id="hl-286-9"><a class="lnlinks" href="#hl-286-9"> 9</a>
</span><span class="lnt" id="hl-286-10"><a class="lnlinks" href="#hl-286-10">10</a>
</span><span class="lnt" id="hl-286-11"><a class="lnlinks" href="#hl-286-11">11</a>
</span><span class="lnt" id="hl-286-12"><a class="lnlinks" href="#hl-286-12">12</a>
</span><span class="lnt" id="hl-286-13"><a class="lnlinks" href="#hl-286-13">13</a>
</span><span class="lnt" id="hl-286-14"><a class="lnlinks" href="#hl-286-14">14</a>
</span><span class="lnt" id="hl-286-15"><a class="lnlinks" href="#hl-286-15">15</a>
</span><span class="lnt" id="hl-286-16"><a class="lnlinks" href="#hl-286-16">16</a>
</span><span class="lnt" id="hl-286-17"><a class="lnlinks" href="#hl-286-17">17</a>
</span><span class="lnt" id="hl-286-18"><a class="lnlinks" href="#hl-286-18">18</a>
</span><span class="lnt" id="hl-286-19"><a class="lnlinks" href="#hl-286-19">19</a>
</span><span class="lnt" id="hl-286-20"><a class="lnlinks" href="#hl-286-20">20</a>
</span><span class="lnt" id="hl-286-21"><a class="lnlinks" href="#hl-286-21">21</a>
</span><span class="lnt" id="hl-286-22"><a class="lnlinks" href="#hl-286-22">22</a>
</span><span class="lnt" id="hl-286-23"><a class="lnlinks" href="#hl-286-23">23</a>
</span><span class="lnt" id="hl-286-24"><a class="lnlinks" href="#hl-286-24">24</a>
</span><span class="lnt" id="hl-286-25"><a class="lnlinks" href="#hl-286-25">25</a>
</span><span class="lnt" id="hl-286-26"><a class="lnlinks" href="#hl-286-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">reverseWords</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">											</span><span class="c1">// Check the whole string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">start</span><span class="p">;</span><span class="w">													</span><span class="c1">// find the index of the first whitespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">while</span><span class="p">(</span><span class="n">end</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39; &#39;</span><span class="p">)</span><span class="w">		</span><span class="c1">// denoting end of the word</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">end</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">reverseWord</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">				</span><span class="c1">// reverse that specific word</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">												</span><span class="c1">// update start to the new word beginning</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span><span class="w">										</span><span class="c1">// create a new string out of the array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	Reverses a word in-place by iterating n/2 times where n = len of the word.
</span></span></span><span class="line"><span class="cl"><span class="cm">	Traverse upto the middle point of the word while swapping each word from start+offset to end-	 offset.
</span></span></span><span class="line"><span class="cl"><span class="cm">	**/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">reverseWord</span><span class="p">(</span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">stop</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="p">(</span><span class="n">stop</span><span class="o">-</span><span class="n">start</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">char</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="quad-tree-intersectionhttpsleetcodecomproblemsquad-tree-intersection"><a href="https://leetcode.com/problems/quad-tree-intersection/">Quad Tree Intersection</a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-287-1"><a class="lnlinks" href="#hl-287-1"> 1</a>
</span><span class="lnt" id="hl-287-2"><a class="lnlinks" href="#hl-287-2"> 2</a>
</span><span class="lnt" id="hl-287-3"><a class="lnlinks" href="#hl-287-3"> 3</a>
</span><span class="lnt" id="hl-287-4"><a class="lnlinks" href="#hl-287-4"> 4</a>
</span><span class="lnt" id="hl-287-5"><a class="lnlinks" href="#hl-287-5"> 5</a>
</span><span class="lnt" id="hl-287-6"><a class="lnlinks" href="#hl-287-6"> 6</a>
</span><span class="lnt" id="hl-287-7"><a class="lnlinks" href="#hl-287-7"> 7</a>
</span><span class="lnt" id="hl-287-8"><a class="lnlinks" href="#hl-287-8"> 8</a>
</span><span class="lnt" id="hl-287-9"><a class="lnlinks" href="#hl-287-9"> 9</a>
</span><span class="lnt" id="hl-287-10"><a class="lnlinks" href="#hl-287-10">10</a>
</span><span class="lnt" id="hl-287-11"><a class="lnlinks" href="#hl-287-11">11</a>
</span><span class="lnt" id="hl-287-12"><a class="lnlinks" href="#hl-287-12">12</a>
</span><span class="lnt" id="hl-287-13"><a class="lnlinks" href="#hl-287-13">13</a>
</span><span class="lnt" id="hl-287-14"><a class="lnlinks" href="#hl-287-14">14</a>
</span><span class="lnt" id="hl-287-15"><a class="lnlinks" href="#hl-287-15">15</a>
</span><span class="lnt" id="hl-287-16"><a class="lnlinks" href="#hl-287-16">16</a>
</span><span class="lnt" id="hl-287-17"><a class="lnlinks" href="#hl-287-17">17</a>
</span><span class="lnt" id="hl-287-18"><a class="lnlinks" href="#hl-287-18">18</a>
</span><span class="lnt" id="hl-287-19"><a class="lnlinks" href="#hl-287-19">19</a>
</span><span class="lnt" id="hl-287-20"><a class="lnlinks" href="#hl-287-20">20</a>
</span><span class="lnt" id="hl-287-21"><a class="lnlinks" href="#hl-287-21">21</a>
</span><span class="lnt" id="hl-287-22"><a class="lnlinks" href="#hl-287-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">Node</span><span class="w"> </span><span class="nf">intersect</span><span class="p">(</span><span class="n">Node</span><span class="w"> </span><span class="n">qt1</span><span class="p">,</span><span class="w"> </span><span class="n">Node</span><span class="w"> </span><span class="n">qt2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">qt1</span><span class="p">.</span><span class="na">isLeaf</span><span class="p">)</span><span class="w">										</span><span class="c1">// If only a leaf, then return the one with true val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">return</span><span class="w"> </span><span class="n">qt1</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">qt1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">qt2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">qt2</span><span class="p">.</span><span class="na">isLeaf</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">return</span><span class="w"> </span><span class="n">qt2</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">qt2</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">qt1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">Node</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">();</span><span class="w">							</span><span class="c1">// Prepare for recursion</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">											</span><span class="c1">// By default, each level node is not a leaf with </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">									</span><span class="c1">// value = true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="c1">// Keep traversing all the way to a terminal node and then store it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">topLeft</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">intersect</span><span class="p">(</span><span class="n">qt1</span><span class="p">.</span><span class="na">topLeft</span><span class="p">,</span><span class="w"> </span><span class="n">qt2</span><span class="p">.</span><span class="na">topLeft</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">topRight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">intersect</span><span class="p">(</span><span class="n">qt1</span><span class="p">.</span><span class="na">topRight</span><span class="p">,</span><span class="w"> </span><span class="n">qt2</span><span class="p">.</span><span class="na">topRight</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">bottomLeft</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">intersect</span><span class="p">(</span><span class="n">qt1</span><span class="p">.</span><span class="na">bottomLeft</span><span class="p">,</span><span class="w"> </span><span class="n">qt2</span><span class="p">.</span><span class="na">bottomLeft</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">n</span><span class="p">.</span><span class="na">bottomRight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">intersect</span><span class="p">(</span><span class="n">qt1</span><span class="p">.</span><span class="na">bottomRight</span><span class="p">,</span><span class="w"> </span><span class="n">qt2</span><span class="p">.</span><span class="na">bottomRight</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  		</span><span class="c1">// Check now if you&#39;re at the base case. If n&#39;s children are leaves and all their values are same, then make n a leaf and it&#39;s value the same as it&#39;s child.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="na">topLeft</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">topRight</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">bottomLeft</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">bottomRight</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="na">topLeft</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">topRight</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">topRight</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">bottomLeft</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">bottomLeft</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">bottomRight</span><span class="p">.</span><span class="na">val</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">n</span><span class="p">.</span><span class="na">isLeaf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">n</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">topLeft</span><span class="p">.</span><span class="na">val</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="long-pressed-namehttpsleetcodecomproblemslong-pressed-name"><a href="https://leetcode.com/problems/long-pressed-name/">Long Pressed Name</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Long Pressed Name.</p>
<p>Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Long Pressed Name.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-288-1"><a class="lnlinks" href="#hl-288-1"> 1</a>
</span><span class="lnt" id="hl-288-2"><a class="lnlinks" href="#hl-288-2"> 2</a>
</span><span class="lnt" id="hl-288-3"><a class="lnlinks" href="#hl-288-3"> 3</a>
</span><span class="lnt" id="hl-288-4"><a class="lnlinks" href="#hl-288-4"> 4</a>
</span><span class="lnt" id="hl-288-5"><a class="lnlinks" href="#hl-288-5"> 5</a>
</span><span class="lnt" id="hl-288-6"><a class="lnlinks" href="#hl-288-6"> 6</a>
</span><span class="lnt" id="hl-288-7"><a class="lnlinks" href="#hl-288-7"> 7</a>
</span><span class="lnt" id="hl-288-8"><a class="lnlinks" href="#hl-288-8"> 8</a>
</span><span class="lnt" id="hl-288-9"><a class="lnlinks" href="#hl-288-9"> 9</a>
</span><span class="lnt" id="hl-288-10"><a class="lnlinks" href="#hl-288-10">10</a>
</span><span class="lnt" id="hl-288-11"><a class="lnlinks" href="#hl-288-11">11</a>
</span><span class="lnt" id="hl-288-12"><a class="lnlinks" href="#hl-288-12">12</a>
</span><span class="lnt" id="hl-288-13"><a class="lnlinks" href="#hl-288-13">13</a>
</span><span class="lnt" id="hl-288-14"><a class="lnlinks" href="#hl-288-14">14</a>
</span><span class="lnt" id="hl-288-15"><a class="lnlinks" href="#hl-288-15">15</a>
</span><span class="lnt" id="hl-288-16"><a class="lnlinks" href="#hl-288-16">16</a>
</span><span class="lnt" id="hl-288-17"><a class="lnlinks" href="#hl-288-17">17</a>
</span><span class="lnt" id="hl-288-18"><a class="lnlinks" href="#hl-288-18">18</a>
</span><span class="lnt" id="hl-288-19"><a class="lnlinks" href="#hl-288-19">19</a>
</span><span class="lnt" id="hl-288-20"><a class="lnlinks" href="#hl-288-20">20</a>
</span><span class="lnt" id="hl-288-21"><a class="lnlinks" href="#hl-288-21">21</a>
</span><span class="lnt" id="hl-288-22"><a class="lnlinks" href="#hl-288-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isLongPressedName</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">typed</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">						</span><span class="c1">// Arrays are much nicer to work with</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">char</span><span class="o">[]</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">typed</span><span class="p">.</span><span class="na">toCharArray</span><span class="p">();</span><span class="w">						</span><span class="c1">// Record start and stop points for both</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">startN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">endN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">.</span><span class="na">length</span><span class="p">,</span><span class="w"> </span><span class="n">startT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">endT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">startT</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">endT</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">										</span><span class="c1">// While we haven&#39;t looked at the whole string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">startN</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">									</span><span class="c1">// Let&#39;s first count same consecutive letters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">int</span><span class="w"> </span><span class="n">countN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">												</span><span class="c1">// in String name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">temp</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">endN</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">n</span><span class="o">[</span><span class="n">temp</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">temp</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">countN</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">int</span><span class="w"> </span><span class="n">countT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">												</span><span class="c1">// Do the same for typed string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">startT</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">endT</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">t</span><span class="o">[</span><span class="n">startT</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">startT</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">countT</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">																			</span><span class="c1">// If consecutive letters in typed string are</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">countT</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">countN</span><span class="p">)</span><span class="w">									</span><span class="c1">// less than the ones in original name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">											</span><span class="c1">// return false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">startN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">												</span><span class="c1">// Otherwise, prepare for next character</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="n">startN</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">endN</span><span class="p">;</span><span class="w">										</span><span class="c1">// Lastly, check if we were able to match</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">																							</span><span class="c1">// all character of the name string</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-zigzag-level-order-traversalhttpsleetcodecomproblemsbinary-tree-zigzag-level-order-traversal"><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a></h3>
<p>The idea here is simple. We perform a BFS as usual using a Queue but I maintain a variable called <code>dir</code> to check which side do I add from. <code>dir=1</code> means add from Right-&gt;Left and <code>dir=-1</code> means add from usual Left-&gt;Right. I am also using LinkedList because of easy addition of elements in both direction. When I need to add from Right-&gt;Left, I use the <code>addFirst(E e)</code> method of LinkedList to add to the head, otherwise normal add to the tail. One important thing to take care of at each iteration is to know how many nodes to dequeue, hence the usage of the variable <code>children</code>. This allows me to keep track of how many children were added to the queue at each stage so I dequeue exactly that many children in the next stage. Apart from that, everything is straightforward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-289-1"><a class="lnlinks" href="#hl-289-1"> 1</a>
</span><span class="lnt" id="hl-289-2"><a class="lnlinks" href="#hl-289-2"> 2</a>
</span><span class="lnt" id="hl-289-3"><a class="lnlinks" href="#hl-289-3"> 3</a>
</span><span class="lnt" id="hl-289-4"><a class="lnlinks" href="#hl-289-4"> 4</a>
</span><span class="lnt" id="hl-289-5"><a class="lnlinks" href="#hl-289-5"> 5</a>
</span><span class="lnt" id="hl-289-6"><a class="lnlinks" href="#hl-289-6"> 6</a>
</span><span class="lnt" id="hl-289-7"><a class="lnlinks" href="#hl-289-7"> 7</a>
</span><span class="lnt" id="hl-289-8"><a class="lnlinks" href="#hl-289-8"> 8</a>
</span><span class="lnt" id="hl-289-9"><a class="lnlinks" href="#hl-289-9"> 9</a>
</span><span class="lnt" id="hl-289-10"><a class="lnlinks" href="#hl-289-10">10</a>
</span><span class="lnt" id="hl-289-11"><a class="lnlinks" href="#hl-289-11">11</a>
</span><span class="lnt" id="hl-289-12"><a class="lnlinks" href="#hl-289-12">12</a>
</span><span class="lnt" id="hl-289-13"><a class="lnlinks" href="#hl-289-13">13</a>
</span><span class="lnt" id="hl-289-14"><a class="lnlinks" href="#hl-289-14">14</a>
</span><span class="lnt" id="hl-289-15"><a class="lnlinks" href="#hl-289-15">15</a>
</span><span class="lnt" id="hl-289-16"><a class="lnlinks" href="#hl-289-16">16</a>
</span><span class="lnt" id="hl-289-17"><a class="lnlinks" href="#hl-289-17">17</a>
</span><span class="lnt" id="hl-289-18"><a class="lnlinks" href="#hl-289-18">18</a>
</span><span class="lnt" id="hl-289-19"><a class="lnlinks" href="#hl-289-19">19</a>
</span><span class="lnt" id="hl-289-20"><a class="lnlinks" href="#hl-289-20">20</a>
</span><span class="lnt" id="hl-289-21"><a class="lnlinks" href="#hl-289-21">21</a>
</span><span class="lnt" id="hl-289-22"><a class="lnlinks" href="#hl-289-22">22</a>
</span><span class="lnt" id="hl-289-23"><a class="lnlinks" href="#hl-289-23">23</a>
</span><span class="lnt" id="hl-289-24"><a class="lnlinks" href="#hl-289-24">24</a>
</span><span class="lnt" id="hl-289-25"><a class="lnlinks" href="#hl-289-25">25</a>
</span><span class="lnt" id="hl-289-26"><a class="lnlinks" href="#hl-289-26">26</a>
</span><span class="lnt" id="hl-289-27"><a class="lnlinks" href="#hl-289-27">27</a>
</span><span class="lnt" id="hl-289-28"><a class="lnlinks" href="#hl-289-28">28</a>
</span><span class="lnt" id="hl-289-29"><a class="lnlinks" href="#hl-289-29">29</a>
</span><span class="lnt" id="hl-289-30"><a class="lnlinks" href="#hl-289-30">30</a>
</span><span class="lnt" id="hl-289-31"><a class="lnlinks" href="#hl-289-31">31</a>
</span><span class="lnt" id="hl-289-32"><a class="lnlinks" href="#hl-289-32">32</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">zigzagLevelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">										</span><span class="c1">// Children = 1 because only root is added.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">			</span><span class="c1">// Added the root, so next time dir = 1 (Right-&gt;Left)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="kt">int</span><span class="w"> </span><span class="n">pushed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">children</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">		</span><span class="c1">// Poll only those nodes that were queued in</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">							</span><span class="c1">// the previous stage.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">dir</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">l</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">l</span><span class="p">.</span><span class="na">addFirst</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">							</span><span class="c1">// Left-&gt;Right add</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">								</span><span class="c1">// Add children, notice I am counting here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">									</span><span class="c1">// how many children I am pushing/queuing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="o">++</span><span class="n">pushed</span><span class="p">;</span><span class="w">												</span><span class="c1">// to the queue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">							</span><span class="c1">// Same thing for right child.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="o">++</span><span class="n">pushed</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">l</span><span class="p">);</span><span class="w">														</span><span class="c1">// Add this list to main list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pushed</span><span class="p">;</span><span class="w">											</span><span class="c1">// update # of children pushed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dir</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">:</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">									</span><span class="c1">// update dir for next iteration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="array-partition-ihttpsleetcodecomproblemsarray-partition-i"><a href="https://leetcode.com/problems/array-partition-i/">Array Partition I</a></h3>
<p>Runtime: 3 ms, faster than 99.90% of Java online submissions for Array Partition I.</p>
<p>Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Array Partition I.</p>
<p>I originally came up with the sorting solution where you sort the array and look at two numbers at a time and keep the smaller number out of them and add to the sum. It was way slower, so I checked the fastest submission and this one is pretty smart. The idea is really good. We know there are going to be 20,001 numbers, so reserve an array for it. Now let&rsquo;s say we had duplicates in our array, ex [1,2,1,4,1,1], if we were to sort it, we would get [1,1,1,1,2,4]. Notice that those four 1&rsquo;s don&rsquo;t really matter because each of them pairs up with the other to give you a one 1. That is why we mark those particular indices as true and false. Notice that in our variable <code>sum</code> we would have counted them individually, making <code>sum = 4</code> when in fact it should be 2 since we only take one of them from two pairs. If we have even occurrence of any number, they would be false, meaning we don&rsquo;t need to account them in the <code>diff</code> calculation. Now coming to <code>diff</code> how do we compute it? First we have the <code>seen</code> array to know which elements we need to look at. If that particular index is true, then we check if it&rsquo;s the first element of the pair which we maintain via the boolean value <code>firstElemOfPair</code>. If its true, then <code>first</code> becomes that value. Otherwise, we know that we&rsquo;re looking at the second element so we update the <code>diff</code> which is basically that value subtract <code>first</code>. Notice that if we look at a pair in our example as (2,4), we would pick 2 and the <code>diff</code> would be 2. This needs to be subtracted from our <code>sum</code>, hence the reason to maintain both of them. At the end, we finally subtract sum and diff and divide the result by 2 because we were doubling our diff&rsquo;s too.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-290-1"><a class="lnlinks" href="#hl-290-1"> 1</a>
</span><span class="lnt" id="hl-290-2"><a class="lnlinks" href="#hl-290-2"> 2</a>
</span><span class="lnt" id="hl-290-3"><a class="lnlinks" href="#hl-290-3"> 3</a>
</span><span class="lnt" id="hl-290-4"><a class="lnlinks" href="#hl-290-4"> 4</a>
</span><span class="lnt" id="hl-290-5"><a class="lnlinks" href="#hl-290-5"> 5</a>
</span><span class="lnt" id="hl-290-6"><a class="lnlinks" href="#hl-290-6"> 6</a>
</span><span class="lnt" id="hl-290-7"><a class="lnlinks" href="#hl-290-7"> 7</a>
</span><span class="lnt" id="hl-290-8"><a class="lnlinks" href="#hl-290-8"> 8</a>
</span><span class="lnt" id="hl-290-9"><a class="lnlinks" href="#hl-290-9"> 9</a>
</span><span class="lnt" id="hl-290-10"><a class="lnlinks" href="#hl-290-10">10</a>
</span><span class="lnt" id="hl-290-11"><a class="lnlinks" href="#hl-290-11">11</a>
</span><span class="lnt" id="hl-290-12"><a class="lnlinks" href="#hl-290-12">12</a>
</span><span class="lnt" id="hl-290-13"><a class="lnlinks" href="#hl-290-13">13</a>
</span><span class="lnt" id="hl-290-14"><a class="lnlinks" href="#hl-290-14">14</a>
</span><span class="lnt" id="hl-290-15"><a class="lnlinks" href="#hl-290-15">15</a>
</span><span class="lnt" id="hl-290-16"><a class="lnlinks" href="#hl-290-16">16</a>
</span><span class="lnt" id="hl-290-17"><a class="lnlinks" href="#hl-290-17">17</a>
</span><span class="lnt" id="hl-290-18"><a class="lnlinks" href="#hl-290-18">18</a>
</span><span class="lnt" id="hl-290-19"><a class="lnlinks" href="#hl-290-19">19</a>
</span><span class="lnt" id="hl-290-20"><a class="lnlinks" href="#hl-290-20">20</a>
</span><span class="lnt" id="hl-290-21"><a class="lnlinks" href="#hl-290-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">arrayPairSum</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">seen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">20001</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">:</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">seen</span><span class="o">[</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">10000</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">seen</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">10000</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">sum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">diff</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">int</span><span class="w"> </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="kt">boolean</span><span class="w"> </span><span class="n">firstElemOfPair</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">seen</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">seen</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">firstElemOfPair</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">first</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="n">diff</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">i</span><span class="o">-</span><span class="n">first</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="n">firstElemOfPair</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">firstElemOfPair</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="o">-</span><span class="n">diff</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reshape-the-matrixhttpsleetcodecomproblemsreshape-the-matrix"><a href="https://leetcode.com/problems/reshape-the-matrix/">Reshape the Matrix</a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Reshape the Matrix.</p>
<p>Memory Usage: 38.4 MB, less than 100.00% of Java online submissions for Reshape the Matrix.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-291-1"><a class="lnlinks" href="#hl-291-1"> 1</a>
</span><span class="lnt" id="hl-291-2"><a class="lnlinks" href="#hl-291-2"> 2</a>
</span><span class="lnt" id="hl-291-3"><a class="lnlinks" href="#hl-291-3"> 3</a>
</span><span class="lnt" id="hl-291-4"><a class="lnlinks" href="#hl-291-4"> 4</a>
</span><span class="lnt" id="hl-291-5"><a class="lnlinks" href="#hl-291-5"> 5</a>
</span><span class="lnt" id="hl-291-6"><a class="lnlinks" href="#hl-291-6"> 6</a>
</span><span class="lnt" id="hl-291-7"><a class="lnlinks" href="#hl-291-7"> 7</a>
</span><span class="lnt" id="hl-291-8"><a class="lnlinks" href="#hl-291-8"> 8</a>
</span><span class="lnt" id="hl-291-9"><a class="lnlinks" href="#hl-291-9"> 9</a>
</span><span class="lnt" id="hl-291-10"><a class="lnlinks" href="#hl-291-10">10</a>
</span><span class="lnt" id="hl-291-11"><a class="lnlinks" href="#hl-291-11">11</a>
</span><span class="lnt" id="hl-291-12"><a class="lnlinks" href="#hl-291-12">12</a>
</span><span class="lnt" id="hl-291-13"><a class="lnlinks" href="#hl-291-13">13</a>
</span><span class="lnt" id="hl-291-14"><a class="lnlinks" href="#hl-291-14">14</a>
</span><span class="lnt" id="hl-291-15"><a class="lnlinks" href="#hl-291-15">15</a>
</span><span class="lnt" id="hl-291-16"><a class="lnlinks" href="#hl-291-16">16</a>
</span><span class="lnt" id="hl-291-17"><a class="lnlinks" href="#hl-291-17">17</a>
</span><span class="lnt" id="hl-291-18"><a class="lnlinks" href="#hl-291-18">18</a>
</span><span class="lnt" id="hl-291-19"><a class="lnlinks" href="#hl-291-19">19</a>
</span><span class="lnt" id="hl-291-20"><a class="lnlinks" href="#hl-291-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="nf">matrixReshape</span><span class="p">(</span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">numsR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">				                    </span><span class="c1">// Get rows and col of nums</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">numsC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">numsR</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">numsC</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">r</span><span class="o">*</span><span class="n">c</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">(</span><span class="n">numsR</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">numsC</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">c</span><span class="p">))</span><span class="w">	</span><span class="c1">// If can&#39;t reshape or problems</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="p">;</span><span class="w">									        </span><span class="c1">// asks to reshape in the same dimensions, return the same array</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">mat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">]</span><span class="p">;</span><span class="w">			                    </span><span class="c1">// New matrix to be returned</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">nR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">nC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> 	                </span><span class="c1">// To keep track of which element to consume and where to place it in the new matrix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">row</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mat</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">++]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">nR</span><span class="o">][</span><span class="n">nC</span><span class="o">++]</span><span class="p">;</span><span class="w">	                    </span><span class="c1">// Increment only the column value for both</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">								        </span><span class="c1">// Check if we are at boundary, if so, increment row</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">									        </span><span class="c1">// and set col to 0 for both cases.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">row</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nC</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">numsC</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">nC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">++</span><span class="n">nR</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">mat</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="swap-nodes-in-pairshttpsleetcodecomproblemsswap-nodes-in-pairs"><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">Swap Nodes in Pairs</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>Memory Usage: 34.5 MB, less than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>The idea is simple. We add a dummy node in front for simplicity as it allows us to generalize the concept of getting two nodes at a time. We maintain a current pointer that points to the node in the actual LinkedList. Then, we get it&rsquo;s next and it&rsquo;s next.next and store it into n1 and n2. Now notice that before making n2&rsquo;s next = n1, we need to store n2&rsquo;s next into n1&rsquo;s next. After we do that, we need to make sure that current&rsquo;s next is n2 which is now working with the actual LinkedList. Then, we need to make sure that current.next.next is n1 which we just fixed and update current which is basically n1.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-292-1"><a class="lnlinks" href="#hl-292-1"> 1</a>
</span><span class="lnt" id="hl-292-2"><a class="lnlinks" href="#hl-292-2"> 2</a>
</span><span class="lnt" id="hl-292-3"><a class="lnlinks" href="#hl-292-3"> 3</a>
</span><span class="lnt" id="hl-292-4"><a class="lnlinks" href="#hl-292-4"> 4</a>
</span><span class="lnt" id="hl-292-5"><a class="lnlinks" href="#hl-292-5"> 5</a>
</span><span class="lnt" id="hl-292-6"><a class="lnlinks" href="#hl-292-6"> 6</a>
</span><span class="lnt" id="hl-292-7"><a class="lnlinks" href="#hl-292-7"> 7</a>
</span><span class="lnt" id="hl-292-8"><a class="lnlinks" href="#hl-292-8"> 8</a>
</span><span class="lnt" id="hl-292-9"><a class="lnlinks" href="#hl-292-9"> 9</a>
</span><span class="lnt" id="hl-292-10"><a class="lnlinks" href="#hl-292-10">10</a>
</span><span class="lnt" id="hl-292-11"><a class="lnlinks" href="#hl-292-11">11</a>
</span><span class="lnt" id="hl-292-12"><a class="lnlinks" href="#hl-292-12">12</a>
</span><span class="lnt" id="hl-292-13"><a class="lnlinks" href="#hl-292-13">13</a>
</span><span class="lnt" id="hl-292-14"><a class="lnlinks" href="#hl-292-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">swapPairs</span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">head</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">dummy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dummy</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ListNode</span><span class="w"> </span><span class="n">n1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ListNode</span><span class="w"> </span><span class="n">n2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n1</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">n1</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n2</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">curr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">curr</span><span class="p">.</span><span class="na">next</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dummy</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="generate-parentheseshttpsleetcodecomproblemsgenerate-parentheses"><a href="https://leetcode.com/problems/generate-parentheses/">Generate Parentheses</a></h3>
<p>Iterative Approach 1: This one is very slow.</p>
<p>Runtime: 4 ms, faster than 8.87% of Java online submissions for Generate Parentheses.</p>
<p>Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<p>The idea is simple. We basically do a BFS and keep track of the parentheses combination we have obtained so far. Poll the queue and check if it&rsquo;s length is 2*n (for a given n, we would have # of open brackets = # of closed brackets), add it to the list and check next combination. If not, then check if we can add an open bracket, add it and update number of open bracket count and add this combination to the queue. Then try to see if we can add a closed bracket, if you can add it, then update closed bracket count add that combination to the queue. Keep doing this until the queue becomes empty. This is the first approach I came up with which is naive as you can see since it&rsquo;s doing an exhaustive search for all valid combination.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-293-1"><a class="lnlinks" href="#hl-293-1"> 1</a>
</span><span class="lnt" id="hl-293-2"><a class="lnlinks" href="#hl-293-2"> 2</a>
</span><span class="lnt" id="hl-293-3"><a class="lnlinks" href="#hl-293-3"> 3</a>
</span><span class="lnt" id="hl-293-4"><a class="lnlinks" href="#hl-293-4"> 4</a>
</span><span class="lnt" id="hl-293-5"><a class="lnlinks" href="#hl-293-5"> 5</a>
</span><span class="lnt" id="hl-293-6"><a class="lnlinks" href="#hl-293-6"> 6</a>
</span><span class="lnt" id="hl-293-7"><a class="lnlinks" href="#hl-293-7"> 7</a>
</span><span class="lnt" id="hl-293-8"><a class="lnlinks" href="#hl-293-8"> 8</a>
</span><span class="lnt" id="hl-293-9"><a class="lnlinks" href="#hl-293-9"> 9</a>
</span><span class="lnt" id="hl-293-10"><a class="lnlinks" href="#hl-293-10">10</a>
</span><span class="lnt" id="hl-293-11"><a class="lnlinks" href="#hl-293-11">11</a>
</span><span class="lnt" id="hl-293-12"><a class="lnlinks" href="#hl-293-12">12</a>
</span><span class="lnt" id="hl-293-13"><a class="lnlinks" href="#hl-293-13">13</a>
</span><span class="lnt" id="hl-293-14"><a class="lnlinks" href="#hl-293-14">14</a>
</span><span class="lnt" id="hl-293-15"><a class="lnlinks" href="#hl-293-15">15</a>
</span><span class="lnt" id="hl-293-16"><a class="lnlinks" href="#hl-293-16">16</a>
</span><span class="lnt" id="hl-293-17"><a class="lnlinks" href="#hl-293-17">17</a>
</span><span class="lnt" id="hl-293-18"><a class="lnlinks" href="#hl-293-18">18</a>
</span><span class="lnt" id="hl-293-19"><a class="lnlinks" href="#hl-293-19">19</a>
</span><span class="lnt" id="hl-293-20"><a class="lnlinks" href="#hl-293-20">20</a>
</span><span class="lnt" id="hl-293-21"><a class="lnlinks" href="#hl-293-21">21</a>
</span><span class="lnt" id="hl-293-22"><a class="lnlinks" href="#hl-293-22">22</a>
</span><span class="lnt" id="hl-293-23"><a class="lnlinks" href="#hl-293-23">23</a>
</span><span class="lnt" id="hl-293-24"><a class="lnlinks" href="#hl-293-24">24</a>
</span><span class="lnt" id="hl-293-25"><a class="lnlinks" href="#hl-293-25">25</a>
</span><span class="lnt" id="hl-293-26"><a class="lnlinks" href="#hl-293-26">26</a>
</span><span class="lnt" id="hl-293-27"><a class="lnlinks" href="#hl-293-27">27</a>
</span><span class="lnt" id="hl-293-28"><a class="lnlinks" href="#hl-293-28">28</a>
</span><span class="lnt" id="hl-293-29"><a class="lnlinks" href="#hl-293-29">29</a>
</span><span class="lnt" id="hl-293-30"><a class="lnlinks" href="#hl-293-30">30</a>
</span><span class="lnt" id="hl-293-31"><a class="lnlinks" href="#hl-293-31">31</a>
</span><span class="lnt" id="hl-293-32"><a class="lnlinks" href="#hl-293-32">32</a>
</span><span class="lnt" id="hl-293-33"><a class="lnlinks" href="#hl-293-33">33</a>
</span><span class="lnt" id="hl-293-34"><a class="lnlinks" href="#hl-293-34">34</a>
</span><span class="lnt" id="hl-293-35"><a class="lnlinks" href="#hl-293-35">35</a>
</span><span class="lnt" id="hl-293-36"><a class="lnlinks" href="#hl-293-36">36</a>
</span><span class="lnt" id="hl-293-37"><a class="lnlinks" href="#hl-293-37">37</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Node</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">data</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">open</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">close</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Node</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">o</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">open</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">o</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">close</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">generateParenthesis</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Node</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Node</span><span class="w"> </span><span class="n">n1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">open</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">close</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Node</span><span class="w"> </span><span class="n">n2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Node</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">open</span><span class="p">,</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">close</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n1</span><span class="p">.</span><span class="na">open</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">n1</span><span class="p">.</span><span class="na">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="sc">&#39;(&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">n1</span><span class="p">.</span><span class="na">open</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">n2</span><span class="p">.</span><span class="na">close</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">open</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">n2</span><span class="p">.</span><span class="na">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">u</span><span class="p">.</span><span class="na">data</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="sc">&#39;)&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">n2</span><span class="p">.</span><span class="na">close</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">n2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Recursive Solution 2: This one is much more faster. I generalized the above idea into the fact that I am adding only valid combinations and any invalid combinations are automatically discarded. The logic is as follows: We know for a given n, the string length should be 2*n. So that forms our base case for recursion, if the length of String <code>s</code> is <code>2n</code>, we want to add it to the list. Otherwise, we check if the number of open brackets we have so far is less than <code>n</code>. If so, we can add an open bracket. Then check if number of close bracket is less than <code>open</code>, if so that sequence would be valid and add a close bracket and recurse.</p>
<p>Runtime: 1 ms, faster than 95.16% of Java online submissions for Generate Parentheses.
Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-294-1"><a class="lnlinks" href="#hl-294-1"> 1</a>
</span><span class="lnt" id="hl-294-2"><a class="lnlinks" href="#hl-294-2"> 2</a>
</span><span class="lnt" id="hl-294-3"><a class="lnlinks" href="#hl-294-3"> 3</a>
</span><span class="lnt" id="hl-294-4"><a class="lnlinks" href="#hl-294-4"> 4</a>
</span><span class="lnt" id="hl-294-5"><a class="lnlinks" href="#hl-294-5"> 5</a>
</span><span class="lnt" id="hl-294-6"><a class="lnlinks" href="#hl-294-6"> 6</a>
</span><span class="lnt" id="hl-294-7"><a class="lnlinks" href="#hl-294-7"> 7</a>
</span><span class="lnt" id="hl-294-8"><a class="lnlinks" href="#hl-294-8"> 8</a>
</span><span class="lnt" id="hl-294-9"><a class="lnlinks" href="#hl-294-9"> 9</a>
</span><span class="lnt" id="hl-294-10"><a class="lnlinks" href="#hl-294-10">10</a>
</span><span class="lnt" id="hl-294-11"><a class="lnlinks" href="#hl-294-11">11</a>
</span><span class="lnt" id="hl-294-12"><a class="lnlinks" href="#hl-294-12">12</a>
</span><span class="lnt" id="hl-294-13"><a class="lnlinks" href="#hl-294-13">13</a>
</span><span class="lnt" id="hl-294-14"><a class="lnlinks" href="#hl-294-14">14</a>
</span><span class="lnt" id="hl-294-15"><a class="lnlinks" href="#hl-294-15">15</a>
</span><span class="lnt" id="hl-294-16"><a class="lnlinks" href="#hl-294-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">generateParenthesis</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">helper</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;(&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helper</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">open</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">close</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="na">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">open</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">helper</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">+</span><span class="sc">&#39;(&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">open</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">close</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">close</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">open</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">helper</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">+</span><span class="sc">&#39;)&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">open</span><span class="p">,</span><span class="w"> </span><span class="n">close</span><span class="o">+</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>###<a href="https://leetcode.com/problems/distribute-candies/">Distribute Candies</a></p>
<p>Pretty simple solution. We want to give maximize the number of unique candies to give to the sister. So we maintain a hashset to collect all the unique candies first. Both of them get half the candies, so let <code>s = number of candies they get</code>. Now, if the size of the set is greater than or equal to <code>s</code>, then the sister only gets <code>s</code> candies out of it. Otherwise, the maximum amount of unique candies she can get is equal to the set size.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-295-1"><a class="lnlinks" href="#hl-295-1">1</a>
</span><span class="lnt" id="hl-295-2"><a class="lnlinks" href="#hl-295-2">2</a>
</span><span class="lnt" id="hl-295-3"><a class="lnlinks" href="#hl-295-3">3</a>
</span><span class="lnt" id="hl-295-4"><a class="lnlinks" href="#hl-295-4">4</a>
</span><span class="lnt" id="hl-295-5"><a class="lnlinks" href="#hl-295-5">5</a>
</span><span class="lnt" id="hl-295-6"><a class="lnlinks" href="#hl-295-6">6</a>
</span><span class="lnt" id="hl-295-7"><a class="lnlinks" href="#hl-295-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">distributeCandies</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">candies</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashSet</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">candies</span><span class="p">.</span><span class="na">length</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">:</span><span class="w"> </span><span class="n">candies</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">set</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">share</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">candies</span><span class="p">.</span><span class="na">length</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">set</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">share</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">share</span><span class="p">:</span><span class="w"> </span><span class="n">set</span><span class="p">.</span><span class="na">size</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="maximum-subproduct-subarrayhttpsleetcodecomproblemsmaximum-product-subarray"><a href="https://leetcode.com/problems/maximum-product-subarray/">Maximum subproduct subarray</a></h3>
<p>Credits for this simplistic solution to LeetCode user <a href="https://leetcode.com/problems/maximum-product-subarray/discuss/48230/Possibly-simplest-solution-with-O(n)-time-complexity">mzchen</a>. The approach is very clever. Notice that if this problem was about finding maximum sum subarray, then a negative number would break the contiguous array. Here, what it does is that it makes our maximum product minimum when we see a negative number and vice versa. We keep track of maximum and minimum we have so far and check if we have a negative number. If so swap our max and min. Then, find the local maximum and minimum between current number and multiplying that number with our current max or min. After that, update our global max value and keep doing this for all values in the array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-296-1"><a class="lnlinks" href="#hl-296-1"> 1</a>
</span><span class="lnt" id="hl-296-2"><a class="lnlinks" href="#hl-296-2"> 2</a>
</span><span class="lnt" id="hl-296-3"><a class="lnlinks" href="#hl-296-3"> 3</a>
</span><span class="lnt" id="hl-296-4"><a class="lnlinks" href="#hl-296-4"> 4</a>
</span><span class="lnt" id="hl-296-5"><a class="lnlinks" href="#hl-296-5"> 5</a>
</span><span class="lnt" id="hl-296-6"><a class="lnlinks" href="#hl-296-6"> 6</a>
</span><span class="lnt" id="hl-296-7"><a class="lnlinks" href="#hl-296-7"> 7</a>
</span><span class="lnt" id="hl-296-8"><a class="lnlinks" href="#hl-296-8"> 8</a>
</span><span class="lnt" id="hl-296-9"><a class="lnlinks" href="#hl-296-9"> 9</a>
</span><span class="lnt" id="hl-296-10"><a class="lnlinks" href="#hl-296-10">10</a>
</span><span class="lnt" id="hl-296-11"><a class="lnlinks" href="#hl-296-11">11</a>
</span><span class="lnt" id="hl-296-12"><a class="lnlinks" href="#hl-296-12">12</a>
</span><span class="lnt" id="hl-296-13"><a class="lnlinks" href="#hl-296-13">13</a>
</span><span class="lnt" id="hl-296-14"><a class="lnlinks" href="#hl-296-14">14</a>
</span><span class="lnt" id="hl-296-15"><a class="lnlinks" href="#hl-296-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">maxProduct</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">imax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">max</span><span class="p">,</span><span class="w"> </span><span class="n">imin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">max</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">imax</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">imax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">imin</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">imin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">imax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">imax</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">imin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">imin</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">max</span><span class="p">,</span><span class="w"> </span><span class="n">imax</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">max</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-right-side-viewhttpsleetcodecomproblemsbinary-tree-right-side-view"><a href="https://leetcode.com/problems/binary-tree-right-side-view/">Binary Tree Right Side View</a></h3>
<p>Runtime: 1 ms, faster than 95.45% of Java online submissions for Binary Tree Right Side View.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Binary Tree Right Side View.</p>
<p>This is an interesting problem cause initially, I thought we would always have a complete binary tree and I made my initial solution oriented towards it. But then I saw that it doesn&rsquo;t say that anywhere and it could be any kind of binary tree. So it got me thinking towards a more generalized approach. Notice that to get a right side view of the binary tree, we only need the last value at any given level and put it into the list. So we maintain a queue and also the number of elements we enqueue at each stage. Initially, we put the root node in our queue and our enqueue count is 1. We dequeue exactly that many elements and again enqueue each of those dequeued node&rsquo;s children. Notice that I am using the variable <code>newEnqueued</code> to keep track of newly enqueued elements. Lastly, we need to check if we dequeued the last element. If so, that must be a part of the solution since it has to be the rightmost element at that level, so I add it to the list. Update <code>enqueued</code> to the new value and repeat until our queue isn&rsquo;t empty.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-297-1"><a class="lnlinks" href="#hl-297-1"> 1</a>
</span><span class="lnt" id="hl-297-2"><a class="lnlinks" href="#hl-297-2"> 2</a>
</span><span class="lnt" id="hl-297-3"><a class="lnlinks" href="#hl-297-3"> 3</a>
</span><span class="lnt" id="hl-297-4"><a class="lnlinks" href="#hl-297-4"> 4</a>
</span><span class="lnt" id="hl-297-5"><a class="lnlinks" href="#hl-297-5"> 5</a>
</span><span class="lnt" id="hl-297-6"><a class="lnlinks" href="#hl-297-6"> 6</a>
</span><span class="lnt" id="hl-297-7"><a class="lnlinks" href="#hl-297-7"> 7</a>
</span><span class="lnt" id="hl-297-8"><a class="lnlinks" href="#hl-297-8"> 8</a>
</span><span class="lnt" id="hl-297-9"><a class="lnlinks" href="#hl-297-9"> 9</a>
</span><span class="lnt" id="hl-297-10"><a class="lnlinks" href="#hl-297-10">10</a>
</span><span class="lnt" id="hl-297-11"><a class="lnlinks" href="#hl-297-11">11</a>
</span><span class="lnt" id="hl-297-12"><a class="lnlinks" href="#hl-297-12">12</a>
</span><span class="lnt" id="hl-297-13"><a class="lnlinks" href="#hl-297-13">13</a>
</span><span class="lnt" id="hl-297-14"><a class="lnlinks" href="#hl-297-14">14</a>
</span><span class="lnt" id="hl-297-15"><a class="lnlinks" href="#hl-297-15">15</a>
</span><span class="lnt" id="hl-297-16"><a class="lnlinks" href="#hl-297-16">16</a>
</span><span class="lnt" id="hl-297-17"><a class="lnlinks" href="#hl-297-17">17</a>
</span><span class="lnt" id="hl-297-18"><a class="lnlinks" href="#hl-297-18">18</a>
</span><span class="lnt" id="hl-297-19"><a class="lnlinks" href="#hl-297-19">19</a>
</span><span class="lnt" id="hl-297-20"><a class="lnlinks" href="#hl-297-20">20</a>
</span><span class="lnt" id="hl-297-21"><a class="lnlinks" href="#hl-297-21">21</a>
</span><span class="lnt" id="hl-297-22"><a class="lnlinks" href="#hl-297-22">22</a>
</span><span class="lnt" id="hl-297-23"><a class="lnlinks" href="#hl-297-23">23</a>
</span><span class="lnt" id="hl-297-24"><a class="lnlinks" href="#hl-297-24">24</a>
</span><span class="lnt" id="hl-297-25"><a class="lnlinks" href="#hl-297-25">25</a>
</span><span class="lnt" id="hl-297-26"><a class="lnlinks" href="#hl-297-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">rightSideView</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">root</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span><span class="w"> </span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">enqueued</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">newEnqueued</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">enqueued</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">TreeNode</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">q</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">newEnqueued</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">q</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">newEnqueued</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">enqueued</span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">enqueued</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">newEnqueued</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-minimum-in-rotated-sorted-arrayhttpsleetcodecomproblemsfind-minimum-in-rotated-sorted-arraysubmissions"><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/">Find Minimum in Rotated Sorted Array</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<p>Memory Usage: 38.6 MB, less than 77.27% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-298-1"><a class="lnlinks" href="#hl-298-1"> 1</a>
</span><span class="lnt" id="hl-298-2"><a class="lnlinks" href="#hl-298-2"> 2</a>
</span><span class="lnt" id="hl-298-3"><a class="lnlinks" href="#hl-298-3"> 3</a>
</span><span class="lnt" id="hl-298-4"><a class="lnlinks" href="#hl-298-4"> 4</a>
</span><span class="lnt" id="hl-298-5"><a class="lnlinks" href="#hl-298-5"> 5</a>
</span><span class="lnt" id="hl-298-6"><a class="lnlinks" href="#hl-298-6"> 6</a>
</span><span class="lnt" id="hl-298-7"><a class="lnlinks" href="#hl-298-7"> 7</a>
</span><span class="lnt" id="hl-298-8"><a class="lnlinks" href="#hl-298-8"> 8</a>
</span><span class="lnt" id="hl-298-9"><a class="lnlinks" href="#hl-298-9"> 9</a>
</span><span class="lnt" id="hl-298-10"><a class="lnlinks" href="#hl-298-10">10</a>
</span><span class="lnt" id="hl-298-11"><a class="lnlinks" href="#hl-298-11">11</a>
</span><span class="lnt" id="hl-298-12"><a class="lnlinks" href="#hl-298-12">12</a>
</span><span class="lnt" id="hl-298-13"><a class="lnlinks" href="#hl-298-13">13</a>
</span><span class="lnt" id="hl-298-14"><a class="lnlinks" href="#hl-298-14">14</a>
</span><span class="lnt" id="hl-298-15"><a class="lnlinks" href="#hl-298-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findMin</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">									</span><span class="c1">// Base case.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">		</span><span class="c1">// While we are in the ascending order half,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">						</span><span class="c1">// Find the middle element</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">)</span><span class="w">			</span><span class="c1">// If mid element &gt;= left element, then our min</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">								</span><span class="c1">// must be in the right half.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">									</span><span class="c1">// otherwise min in the left half.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">;</span><span class="w">										</span><span class="c1">// left points to minimum element.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-search-tree-iteratorhttpsleetcodecomproblemsbinary-search-tree-iterator"><a href="https://leetcode.com/problems/binary-search-tree-iterator/">Binary Search Tree Iterator</a></h3>
<p>Runtime: 15 ms, faster than 99.74% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Logic is same as your In-Order traversal of any Binary Tree, but store the node values you visit in any data structure. Here I am using an ArrayList for storing each of the visited node&rsquo;s value. Maintain <code>idx</code> value to keep track of which value to return. <code>hasNext()</code> method returns true as long as <code>idx &lt; list.size()</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-299-1"><a class="lnlinks" href="#hl-299-1"> 1</a>
</span><span class="lnt" id="hl-299-2"><a class="lnlinks" href="#hl-299-2"> 2</a>
</span><span class="lnt" id="hl-299-3"><a class="lnlinks" href="#hl-299-3"> 3</a>
</span><span class="lnt" id="hl-299-4"><a class="lnlinks" href="#hl-299-4"> 4</a>
</span><span class="lnt" id="hl-299-5"><a class="lnlinks" href="#hl-299-5"> 5</a>
</span><span class="lnt" id="hl-299-6"><a class="lnlinks" href="#hl-299-6"> 6</a>
</span><span class="lnt" id="hl-299-7"><a class="lnlinks" href="#hl-299-7"> 7</a>
</span><span class="lnt" id="hl-299-8"><a class="lnlinks" href="#hl-299-8"> 8</a>
</span><span class="lnt" id="hl-299-9"><a class="lnlinks" href="#hl-299-9"> 9</a>
</span><span class="lnt" id="hl-299-10"><a class="lnlinks" href="#hl-299-10">10</a>
</span><span class="lnt" id="hl-299-11"><a class="lnlinks" href="#hl-299-11">11</a>
</span><span class="lnt" id="hl-299-12"><a class="lnlinks" href="#hl-299-12">12</a>
</span><span class="lnt" id="hl-299-13"><a class="lnlinks" href="#hl-299-13">13</a>
</span><span class="lnt" id="hl-299-14"><a class="lnlinks" href="#hl-299-14">14</a>
</span><span class="lnt" id="hl-299-15"><a class="lnlinks" href="#hl-299-15">15</a>
</span><span class="lnt" id="hl-299-16"><a class="lnlinks" href="#hl-299-16">16</a>
</span><span class="lnt" id="hl-299-17"><a class="lnlinks" href="#hl-299-17">17</a>
</span><span class="lnt" id="hl-299-18"><a class="lnlinks" href="#hl-299-18">18</a>
</span><span class="lnt" id="hl-299-19"><a class="lnlinks" href="#hl-299-19">19</a>
</span><span class="lnt" id="hl-299-20"><a class="lnlinks" href="#hl-299-20">20</a>
</span><span class="lnt" id="hl-299-21"><a class="lnlinks" href="#hl-299-21">21</a>
</span><span class="lnt" id="hl-299-22"><a class="lnlinks" href="#hl-299-22">22</a>
</span><span class="lnt" id="hl-299-23"><a class="lnlinks" href="#hl-299-23">23</a>
</span><span class="lnt" id="hl-299-24"><a class="lnlinks" href="#hl-299-24">24</a>
</span><span class="lnt" id="hl-299-25"><a class="lnlinks" href="#hl-299-25">25</a>
</span><span class="lnt" id="hl-299-26"><a class="lnlinks" href="#hl-299-26">26</a>
</span><span class="lnt" id="hl-299-27"><a class="lnlinks" href="#hl-299-27">27</a>
</span><span class="lnt" id="hl-299-28"><a class="lnlinks" href="#hl-299-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">BSTIterator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">list</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">BSTIterator</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">root</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">traverse</span><span class="p">(</span><span class="n">TreeNode</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">left</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">list</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">right</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** @return the next smallest number */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">list</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">idx</span><span class="o">++</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/** @return whether we have a next smallest number */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">hasNext</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">list</span><span class="p">.</span><span class="na">size</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-peak-elementhttpsleetcodecomproblemsfind-peak-element"><a href="https://leetcode.com/problems/find-peak-element/">Find Peak Element</a></h3>
<p>This question was asked to me for my internship at Yahoo! The idea is simple, we want any one of the peak. So to achieve <code>O(log n)</code> time, we have to mimic binary search algorithm. We look at the middle element and check it&rsquo;s neighbor, if it&rsquo;s greater than the middle element, then we know we will have atleast one peak on the right side. Why? Think what could happen. We know that the element next to middle is greater than it, so there are two possibilities on the right side, either elements keep increasing to the right of the middle&rsquo;s next element or we might go up till a particular index and then go down. So in any case, we will have a peak on the right side. On the other case, if the element on the right side is smaller than the middle, then we know that the left half including the middle will have the peak cause middle is already greater than middle&rsquo;s right, so we might have middle as the peak itself.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-300-1"><a class="lnlinks" href="#hl-300-1"> 1</a>
</span><span class="lnt" id="hl-300-2"><a class="lnlinks" href="#hl-300-2"> 2</a>
</span><span class="lnt" id="hl-300-3"><a class="lnlinks" href="#hl-300-3"> 3</a>
</span><span class="lnt" id="hl-300-4"><a class="lnlinks" href="#hl-300-4"> 4</a>
</span><span class="lnt" id="hl-300-5"><a class="lnlinks" href="#hl-300-5"> 5</a>
</span><span class="lnt" id="hl-300-6"><a class="lnlinks" href="#hl-300-6"> 6</a>
</span><span class="lnt" id="hl-300-7"><a class="lnlinks" href="#hl-300-7"> 7</a>
</span><span class="lnt" id="hl-300-8"><a class="lnlinks" href="#hl-300-8"> 8</a>
</span><span class="lnt" id="hl-300-9"><a class="lnlinks" href="#hl-300-9"> 9</a>
</span><span class="lnt" id="hl-300-10"><a class="lnlinks" href="#hl-300-10">10</a>
</span><span class="lnt" id="hl-300-11"><a class="lnlinks" href="#hl-300-11">11</a>
</span><span class="lnt" id="hl-300-12"><a class="lnlinks" href="#hl-300-12">12</a>
</span><span class="lnt" id="hl-300-13"><a class="lnlinks" href="#hl-300-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">findPeakElement</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="next-permutationhttpsleetcodecomproblemsnext-permutation"><a href="https://leetcode.com/problems/next-permutation/">Next Permutation</a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Next Permutation.</p>
<p>Memory Usage: 40.3 MB, less than 47.00% of Java online submissions for Next Permutation.</p>
<p>This one was quite interesting in the sense it seems difficult but is very simple once you try out a few example. If we want to find the next lexicographical greater number, then we need to find a particular index from the right side of the array such that the number after it is greater than itself, because by swapping them would give us a next larger number. So what I first do is find the index of the number such that <code>num[idx] &gt; num[idx-1]</code>. We know at this point that all the numbers after that index are reverse sorted, so we need to fix it and sort them in increasing order because lexicographical order demands all the numbers in increasing manner. Example, say <code>nums = [2,3,1,4,2,1,0]</code>. You can see that that the next number should be <code>[2,3,2,0,1,1,4]</code>. Notice that I replaced the number at index 2 with the first number which is greater than it if the array after index 2 was sorted. This gaurantees us a larger lexicographical number. So the first while loop finds us that index number and then I reverse the array after it. Once you reverse it, we should expect the <code>nums</code> array to look like <code>[2,3,1,0,1,2,4]</code>. Note that now we need to find the number larger than the number at index 2, which is 1 in this case. The first number greater than 1 is 2, so the second while loop finds it and then we simply swap them to give us the next larger lexicographically greater number =&gt; <code>[2,3,2,0,1,1,4].</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-301-1"><a class="lnlinks" href="#hl-301-1"> 1</a>
</span><span class="lnt" id="hl-301-2"><a class="lnlinks" href="#hl-301-2"> 2</a>
</span><span class="lnt" id="hl-301-3"><a class="lnlinks" href="#hl-301-3"> 3</a>
</span><span class="lnt" id="hl-301-4"><a class="lnlinks" href="#hl-301-4"> 4</a>
</span><span class="lnt" id="hl-301-5"><a class="lnlinks" href="#hl-301-5"> 5</a>
</span><span class="lnt" id="hl-301-6"><a class="lnlinks" href="#hl-301-6"> 6</a>
</span><span class="lnt" id="hl-301-7"><a class="lnlinks" href="#hl-301-7"> 7</a>
</span><span class="lnt" id="hl-301-8"><a class="lnlinks" href="#hl-301-8"> 8</a>
</span><span class="lnt" id="hl-301-9"><a class="lnlinks" href="#hl-301-9"> 9</a>
</span><span class="lnt" id="hl-301-10"><a class="lnlinks" href="#hl-301-10">10</a>
</span><span class="lnt" id="hl-301-11"><a class="lnlinks" href="#hl-301-11">11</a>
</span><span class="lnt" id="hl-301-12"><a class="lnlinks" href="#hl-301-12">12</a>
</span><span class="lnt" id="hl-301-13"><a class="lnlinks" href="#hl-301-13">13</a>
</span><span class="lnt" id="hl-301-14"><a class="lnlinks" href="#hl-301-14">14</a>
</span><span class="lnt" id="hl-301-15"><a class="lnlinks" href="#hl-301-15">15</a>
</span><span class="lnt" id="hl-301-16"><a class="lnlinks" href="#hl-301-16">16</a>
</span><span class="lnt" id="hl-301-17"><a class="lnlinks" href="#hl-301-17">17</a>
</span><span class="lnt" id="hl-301-18"><a class="lnlinks" href="#hl-301-18">18</a>
</span><span class="lnt" id="hl-301-19"><a class="lnlinks" href="#hl-301-19">19</a>
</span><span class="lnt" id="hl-301-20"><a class="lnlinks" href="#hl-301-20">20</a>
</span><span class="lnt" id="hl-301-21"><a class="lnlinks" href="#hl-301-21">21</a>
</span><span class="lnt" id="hl-301-22"><a class="lnlinks" href="#hl-301-22">22</a>
</span><span class="lnt" id="hl-301-23"><a class="lnlinks" href="#hl-301-23">23</a>
</span><span class="lnt" id="hl-301-24"><a class="lnlinks" href="#hl-301-24">24</a>
</span><span class="lnt" id="hl-301-25"><a class="lnlinks" href="#hl-301-25">25</a>
</span><span class="lnt" id="hl-301-26"><a class="lnlinks" href="#hl-301-26">26</a>
</span><span class="lnt" id="hl-301-27"><a class="lnlinks" href="#hl-301-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">nextPermutation</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">--</span><span class="n">idx</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">idx</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">idx</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">++</span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">idx1</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">idx2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">reverse</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">start</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">end</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="o">++</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="o">--</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="search-in-rotated-sorted-arrayhttpsleetcodecomproblemssearch-in-rotated-sorted-array"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">Search in Rotated Sorted Array</a></h3>
<p>The idea is same as binary search except you need to keep track of which half to stay in. We compute the middle index and the value at that index. If the middle value is the target, then return that index. Otherwise, find the correct half. If the number on the left side is &lt; middle value then we know that between the left and middle index, values are increasing. We only need to now check if target is &lt; middle value, if so we need to adjust our right pointer otherwise adjust the left pointer. If left value is not &lt; middle value then we are at a shift where the array is pivoted. We again need to confirm now which half to take. There would be some index <code>i</code> such that <code>nums[left] &gt; nums[i] &lt; nums[mid]</code> and value are increasing upto <code>i</code> and shifts from index <code>i</code> onwards. In this case, we again need to adjust our index pointers and we repeat this loop until <code>left &lt;= right</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-302-1"><a class="lnlinks" href="#hl-302-1"> 1</a>
</span><span class="lnt" id="hl-302-2"><a class="lnlinks" href="#hl-302-2"> 2</a>
</span><span class="lnt" id="hl-302-3"><a class="lnlinks" href="#hl-302-3"> 3</a>
</span><span class="lnt" id="hl-302-4"><a class="lnlinks" href="#hl-302-4"> 4</a>
</span><span class="lnt" id="hl-302-5"><a class="lnlinks" href="#hl-302-5"> 5</a>
</span><span class="lnt" id="hl-302-6"><a class="lnlinks" href="#hl-302-6"> 6</a>
</span><span class="lnt" id="hl-302-7"><a class="lnlinks" href="#hl-302-7"> 7</a>
</span><span class="lnt" id="hl-302-8"><a class="lnlinks" href="#hl-302-8"> 8</a>
</span><span class="lnt" id="hl-302-9"><a class="lnlinks" href="#hl-302-9"> 9</a>
</span><span class="lnt" id="hl-302-10"><a class="lnlinks" href="#hl-302-10">10</a>
</span><span class="lnt" id="hl-302-11"><a class="lnlinks" href="#hl-302-11">11</a>
</span><span class="lnt" id="hl-302-12"><a class="lnlinks" href="#hl-302-12">12</a>
</span><span class="lnt" id="hl-302-13"><a class="lnlinks" href="#hl-302-13">13</a>
</span><span class="lnt" id="hl-302-14"><a class="lnlinks" href="#hl-302-14">14</a>
</span><span class="lnt" id="hl-302-15"><a class="lnlinks" href="#hl-302-15">15</a>
</span><span class="lnt" id="hl-302-16"><a class="lnlinks" href="#hl-302-16">16</a>
</span><span class="lnt" id="hl-302-17"><a class="lnlinks" href="#hl-302-17">17</a>
</span><span class="lnt" id="hl-302-18"><a class="lnlinks" href="#hl-302-18">18</a>
</span><span class="lnt" id="hl-302-19"><a class="lnlinks" href="#hl-302-19">19</a>
</span><span class="lnt" id="hl-302-20"><a class="lnlinks" href="#hl-302-20">20</a>
</span><span class="lnt" id="hl-302-21"><a class="lnlinks" href="#hl-302-21">21</a>
</span><span class="lnt" id="hl-302-22"><a class="lnlinks" href="#hl-302-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">search</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nums</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="p">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">midVal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">midVal</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">mid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">midVal</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">midVal</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">midVal</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="transpose-matrixhttpsleetcodecomproblemstranspose-matrix"><a href="https://leetcode.com/problems/transpose-matrix/">Transpose Matrix</a></h3>
<p>Pretty straightforward. Create matrix B of opposite dimensions to those of A. We maintain <code>br</code> and <code>bc</code> which tracks row and columns of B. We iterate over each element of A and put it in <code>B[br][bc]</code> and then ideally we would increment <code>bc</code> for an exact copy, but since we want transpose, we increment <code>br</code> and then reset it to 0 if we fill all the values in a row and increment column count, giving us the tranpose of the matrix.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-303-1"><a class="lnlinks" href="#hl-303-1"> 1</a>
</span><span class="lnt" id="hl-303-2"><a class="lnlinks" href="#hl-303-2"> 2</a>
</span><span class="lnt" id="hl-303-3"><a class="lnlinks" href="#hl-303-3"> 3</a>
</span><span class="lnt" id="hl-303-4"><a class="lnlinks" href="#hl-303-4"> 4</a>
</span><span class="lnt" id="hl-303-5"><a class="lnlinks" href="#hl-303-5"> 5</a>
</span><span class="lnt" id="hl-303-6"><a class="lnlinks" href="#hl-303-6"> 6</a>
</span><span class="lnt" id="hl-303-7"><a class="lnlinks" href="#hl-303-7"> 7</a>
</span><span class="lnt" id="hl-303-8"><a class="lnlinks" href="#hl-303-8"> 8</a>
</span><span class="lnt" id="hl-303-9"><a class="lnlinks" href="#hl-303-9"> 9</a>
</span><span class="lnt" id="hl-303-10"><a class="lnlinks" href="#hl-303-10">10</a>
</span><span class="lnt" id="hl-303-11"><a class="lnlinks" href="#hl-303-11">11</a>
</span><span class="lnt" id="hl-303-12"><a class="lnlinks" href="#hl-303-12">12</a>
</span><span class="lnt" id="hl-303-13"><a class="lnlinks" href="#hl-303-13">13</a>
</span><span class="lnt" id="hl-303-14"><a class="lnlinks" href="#hl-303-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="nf">transpose</span><span class="p">(</span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="o">][</span><span class="n">A</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">br</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">bc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">A</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">B</span><span class="o">[</span><span class="n">br</span><span class="o">][</span><span class="n">bc</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">++</span><span class="n">br</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">B</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">br</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="o">++</span><span class="n">bc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">B</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merge-k-sorted-listshttpsleetcodecomproblemsmerge-k-sorted-listssubmissions"><a href="https://leetcode.com/problems/merge-k-sorted-lists/submissions/">Merge K Sorted Lists</a></h3>
<p>This was an onsite interview question at ThousandEyes. The idea is simple. Basically, we have multiple sorted lists so we have access to one value at a time, that is head of the lists initially and the consecutive nodes. So we need to fetch the minimum element out of all of them in constant time. The easiest way for us to do this is to use a PriorityQueue and define the logic of comparision of two ListNodes. Then, we add all the nodes inside the PQ and build our resulting List. Fetch the minimum valued ListNode and add it to our list. Then we also need to update that particular list&rsquo;s head, so we  add that list&rsquo;s next in the PQ so the next time it is fetched, we fetch the correct node of the list. Repeat this until the list is empty and return dummy&rsquo;s next node.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-304-1"><a class="lnlinks" href="#hl-304-1"> 1</a>
</span><span class="lnt" id="hl-304-2"><a class="lnlinks" href="#hl-304-2"> 2</a>
</span><span class="lnt" id="hl-304-3"><a class="lnlinks" href="#hl-304-3"> 3</a>
</span><span class="lnt" id="hl-304-4"><a class="lnlinks" href="#hl-304-4"> 4</a>
</span><span class="lnt" id="hl-304-5"><a class="lnlinks" href="#hl-304-5"> 5</a>
</span><span class="lnt" id="hl-304-6"><a class="lnlinks" href="#hl-304-6"> 6</a>
</span><span class="lnt" id="hl-304-7"><a class="lnlinks" href="#hl-304-7"> 7</a>
</span><span class="lnt" id="hl-304-8"><a class="lnlinks" href="#hl-304-8"> 8</a>
</span><span class="lnt" id="hl-304-9"><a class="lnlinks" href="#hl-304-9"> 9</a>
</span><span class="lnt" id="hl-304-10"><a class="lnlinks" href="#hl-304-10">10</a>
</span><span class="lnt" id="hl-304-11"><a class="lnlinks" href="#hl-304-11">11</a>
</span><span class="lnt" id="hl-304-12"><a class="lnlinks" href="#hl-304-12">12</a>
</span><span class="lnt" id="hl-304-13"><a class="lnlinks" href="#hl-304-13">13</a>
</span><span class="lnt" id="hl-304-14"><a class="lnlinks" href="#hl-304-14">14</a>
</span><span class="lnt" id="hl-304-15"><a class="lnlinks" href="#hl-304-15">15</a>
</span><span class="lnt" id="hl-304-16"><a class="lnlinks" href="#hl-304-16">16</a>
</span><span class="lnt" id="hl-304-17"><a class="lnlinks" href="#hl-304-17">17</a>
</span><span class="lnt" id="hl-304-18"><a class="lnlinks" href="#hl-304-18">18</a>
</span><span class="lnt" id="hl-304-19"><a class="lnlinks" href="#hl-304-19">19</a>
</span><span class="lnt" id="hl-304-20"><a class="lnlinks" href="#hl-304-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">ListNode</span><span class="w"> </span><span class="nf">mergeKLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">[]</span><span class="w"> </span><span class="n">lists</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">lists</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;</span><span class="w"> </span><span class="n">pq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">PriorityQueue</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="n">lists</span><span class="p">.</span><span class="na">length</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">n1</span><span class="p">,</span><span class="w"> </span><span class="n">n2</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">n1</span><span class="p">.</span><span class="na">val</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">n2</span><span class="p">.</span><span class="na">val</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">ListNode</span><span class="w"> </span><span class="n">ln</span><span class="p">:</span><span class="w"> </span><span class="n">lists</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ln</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">pq</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">ln</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ListNode</span><span class="p">(</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ListNode</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pq</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">pq</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="na">next</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">.</span><span class="na">next</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>List of Python Frameworks Libraries Software and Resources</title>
      <link>https://samirpaulb.github.io/posts/list-of-python-frameworks-libraries-software-and-resources/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/list-of-python-frameworks-libraries-software-and-resources/</guid>
      <description>List of Python Frameworks Libraries Software and Resources</description>
      <content:encoded><![CDATA[<blockquote>
<p>A curated list of awesome Python frameworks, libraries, software and resources.</p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> Awesome Python
<ul>
<li><a href="#admin-panels">Admin Panels</a></li>
<li><a href="#algorithms-and-design-patterns">Algorithms and Design Patterns</a></li>
<li><a href="#asgi-servers">ASGI Servers</a></li>
<li><a href="#asynchronous-programming">Asynchronous Programming</a></li>
<li><a href="#audio">Audio</a></li>
<li><a href="#authentication">Authentication</a></li>
<li><a href="#build-tools">Build Tools</a></li>
<li><a href="#built-in-classes-enhancement">Built-in Classes Enhancement</a></li>
<li><a href="#caching">Caching</a></li>
<li><a href="#chatops-tools">ChatOps Tools</a></li>
<li><a href="#cms">CMS</a></li>
<li><a href="#code-analysis">Code Analysis</a></li>
<li><a href="#command-line-interface-development">Command-line Interface Development</a></li>
<li><a href="#command-line-tools">Command-line Tools</a></li>
<li><a href="#compatibility">Compatibility</a></li>
<li><a href="#computer-vision">Computer Vision</a></li>
<li><a href="#concurrency-and-parallelism">Concurrency and Parallelism</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#data-analysis">Data Analysis</a></li>
<li><a href="#data-validation">Data Validation</a></li>
<li><a href="#data-visualization">Data Visualization</a></li>
<li><a href="#database-drivers">Database Drivers</a></li>
<li><a href="#database">Database</a></li>
<li><a href="#date-and-time">Date and Time</a></li>
<li><a href="#debugging-tools">Debugging Tools</a></li>
<li><a href="#deep-learning">Deep Learning</a></li>
<li><a href="#devops-tools">DevOps Tools</a></li>
<li><a href="#distributed-computing">Distributed Computing</a></li>
<li><a href="#distribution">Distribution</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#downloader">Downloader</a></li>
<li><a href="#e-commerce">E-commerce</a></li>
<li><a href="#editor-plugins-and-ides">Editor Plugins and IDEs</a></li>
<li><a href="#email">Email</a></li>
<li><a href="#enterprise-application-integrations">Enterprise Application Integrations</a></li>
<li><a href="#environment-management">Environment Management</a></li>
<li><a href="#files">Files</a></li>
<li><a href="#foreign-function-interface">Foreign Function Interface</a></li>
<li><a href="#forms">Forms</a></li>
<li><a href="#functional-programming">Functional Programming</a></li>
<li><a href="#game-development">Game Development</a></li>
<li><a href="#geolocation">Geolocation</a></li>
<li><a href="#gui-development">GUI Development</a></li>
<li><a href="#hardware">Hardware</a></li>
<li><a href="#html-manipulation">HTML Manipulation</a></li>
<li><a href="#http-clients">HTTP Clients</a></li>
<li><a href="#image-processing">Image Processing</a></li>
<li><a href="#implementations">Implementations</a></li>
<li><a href="#interactive-interpreter">Interactive Interpreter</a></li>
<li><a href="#internationalization">Internationalization</a></li>
<li><a href="#job-scheduler">Job Scheduler</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#machine-learning">Machine Learning</a></li>
<li><a href="#miscellaneous">Miscellaneous</a></li>
<li><a href="#natural-language-processing">Natural Language Processing</a></li>
<li><a href="#network-virtualization">Network Virtualization</a></li>
<li><a href="#news-feed">News Feed</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#package-management">Package Management</a></li>
<li><a href="#package-repositories">Package Repositories</a></li>
<li><a href="#penetration-testing">Penetration testing</a></li>
<li><a href="#permissions">Permissions</a></li>
<li><a href="#processes">Processes</a></li>
<li><a href="#recommender-systems">Recommender Systems</a></li>
<li><a href="#refactoring">Refactoring</a></li>
<li><a href="#restful-api">RESTful API</a></li>
<li><a href="#robotics">Robotics</a></li>
<li><a href="#rpc-servers">RPC Servers</a></li>
<li><a href="#science">Science</a></li>
<li><a href="#search">Search</a></li>
<li><a href="#serialization">Serialization</a></li>
<li><a href="#serverless-frameworks">Serverless Frameworks</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#specific-formats-processing">Specific Formats Processing</a></li>
<li><a href="#static-site-generator">Static Site Generator</a></li>
<li><a href="#tagging">Tagging</a></li>
<li><a href="#task-queues">Task Queues</a></li>
<li><a href="#template-engine">Template Engine</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#text-processing">Text Processing</a></li>
<li><a href="#third-party-apis">Third-party APIs</a></li>
<li><a href="#url-manipulation">URL Manipulation</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#web-asset-management">Web Asset Management</a></li>
<li><a href="#web-content-extracting">Web Content Extracting</a></li>
<li><a href="#web-crawling">Web Crawling</a></li>
<li><a href="#web-frameworks">Web Frameworks</a></li>
<li><a href="#websocket">WebSocket</a></li>
<li><a href="#wsgi-servers">WSGI Servers</a></li>
</ul>
</li>
<li><a href="#resources">Resources</a>
<ul>
<li><a href="#books">Books</a></li>
<li><a href="#newsletters">Newsletters</a></li>
<li><a href="#podcasts">Podcasts</a></li>
<li><a href="#websites">Websites</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<hr>
<h2 id="admin-panels">Admin Panels</h2>
<p><em>Libraries for administrative interfaces.</em></p>
<ul>
<li><a href="https://github.com/ajenti/ajenti">ajenti</a> - The admin panel your servers deserve.</li>
<li><a href="https://grappelliproject.com/">django-grappelli</a> - A jazzy skin for the Django Admin-Interface.</li>
<li><a href="https://github.com/geex-arts/django-jet">django-jet</a> - Modern responsive template for the Django admin interface with improved functionality.</li>
<li><a href="https://djangosuit.com/">django-suit</a> - Alternative Django Admin-Interface (free only for Non-commercial use).</li>
<li><a href="https://github.com/sshwsfc/xadmin">django-xadmin</a> - Drop-in replacement of Django admin comes with lots of goodies.</li>
<li><a href="https://github.com/flask-admin/flask-admin">flask-admin</a> - Simple and extensible administrative interface framework for Flask.</li>
<li><a href="https://github.com/mher/flower">flower</a> - Real-time monitor and web admin for Celery.</li>
<li><a href="https://github.com/jet-admin/jet-bridge">jet-bridge</a> - Admin panel framework for any application with nice UI (ex Jet Django).</li>
<li><a href="https://github.com/wooey/wooey">wooey</a> - A Django app which creates automatic web UIs for Python scripts.</li>
</ul>
<h2 id="algorithms-and-design-patterns">Algorithms and Design Patterns</h2>
<p><em>Python implementation of data structures, algorithms and design patterns. Also see <a href="https://github.com/tayllan/awesome-algorithms">awesome-algorithms</a>.</em></p>
<ul>
<li>Algorithms
<ul>
<li><a href="https://github.com/keon/algorithms">algorithms</a> - Minimal examples of data structures and algorithms.</li>
<li><a href="https://github.com/prabhupant/python-ds">python-ds</a> - A collection of data structure and algorithms for coding interviews.</li>
<li><a href="https://github.com/grantjenks/python-sortedcontainers">sortedcontainers</a> - Fast and pure-Python implementation of sorted collections.</li>
<li><a href="https://github.com/TheAlgorithms/Python">TheAlgorithms</a> - All Algorithms implemented in Python.</li>
</ul>
</li>
<li>Design Patterns
<ul>
<li><a href="https://github.com/tylerlaberge/PyPattyrn">PyPattyrn</a> - A simple yet effective library for implementing common design patterns.</li>
<li><a href="https://github.com/faif/python-patterns">python-patterns</a> - A collection of design patterns in Python.</li>
<li><a href="https://github.com/pytransitions/transitions">transitions</a> - A lightweight, object-oriented finite state machine implementation.</li>
</ul>
</li>
</ul>
<h2 id="asgi-servers">ASGI Servers</h2>
<p><em><a href="https://asgi.readthedocs.io/en/latest/">ASGI</a>-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/django/daphne">daphne</a> - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li>
<li><a href="https://github.com/encode/uvicorn">uvicorn</a> - A lightning-fast ASGI server implementation, using uvloop and httptools.</li>
</ul>
<h2 id="asynchronous-programming">Asynchronous Programming</h2>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio.html">asyncio</a> - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.
<ul>
<li><a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a></li>
</ul>
</li>
<li><a href="https://github.com/python-trio/trio">trio</a> - A friendly library for async concurrency and I/O.</li>
<li><a href="https://twistedmatrix.com/trac/">Twisted</a> - An event-driven networking engine.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast asyncio event loop.</li>
</ul>
<h2 id="audio">Audio</h2>
<p><em>Libraries for manipulating audio and its metadata.</em></p>
<ul>
<li>Audio
<ul>
<li><a href="https://github.com/beetbox/audioread">audioread</a> - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li>
<li><a href="https://github.com/worldveil/dejavu">dejavu</a> - Audio fingerprinting and recognition.</li>
<li><a href="https://github.com/keunwoochoi/kapre">kapre</a> - Keras Audio Preprocessors.</li>
<li><a href="https://github.com/librosa/librosa">librosa</a> - Python library for audio and music analysis.</li>
<li><a href="https://github.com/sergree/matchering">matchering</a> - A library for automated reference audio mastering.</li>
<li><a href="https://bspaans.github.io/python-mingus/">mingus</a> - An advanced music theory and notation package with MIDI file and playback support.</li>
<li><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a> - Audio feature extraction, classification, segmentation and applications.</li>
<li><a href="https://github.com/jiaaro/pydub">pydub</a> - Manipulate audio with a simple and easy high level interface.</li>
<li><a href="https://github.com/Parisson/TimeSide">TimeSide</a> - Open web audio processing framework.</li>
</ul>
</li>
<li>Metadata
<ul>
<li><a href="https://github.com/beetbox/beets">beets</a> - A music library manager and <a href="https://musicbrainz.org/">MusicBrainz</a> tagger.</li>
<li><a href="https://github.com/nicfit/eyeD3">eyeD3</a> - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li>
<li><a href="https://github.com/quodlibet/mutagen">mutagen</a> - A Python module to handle audio metadata.</li>
<li><a href="https://github.com/devsnd/tinytag">tinytag</a> - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li>
</ul>
</li>
</ul>
<h2 id="authentication">Authentication</h2>
<p><em>Libraries for implementing authentications schemes.</em></p>
<ul>
<li>OAuth
<ul>
<li><a href="https://github.com/lepture/authlib">authlib</a> - JavaScript Object Signing and Encryption draft implementation.</li>
<li><a href="https://github.com/pennersr/django-allauth">django-allauth</a> - Authentication app for Django that &ldquo;just works.&rdquo;</li>
<li><a href="https://github.com/evonove/django-oauth-toolkit">django-oauth-toolkit</a> - OAuth 2 goodies for Django.</li>
<li><a href="https://github.com/idan/oauthlib">oauthlib</a> - A generic and thorough implementation of the OAuth request-signing logic.</li>
<li><a href="https://github.com/joestump/python-oauth2">python-oauth2</a> - A fully tested, abstract interface to creating OAuth clients and servers.</li>
<li><a href="https://github.com/omab/python-social-auth">python-social-auth</a> - An easy-to-setup social authentication mechanism.</li>
</ul>
</li>
<li>JWT
<ul>
<li><a href="https://github.com/jpadilla/pyjwt">pyjwt</a> - JSON Web Token implementation in Python.</li>
<li><a href="https://github.com/mpdavis/python-jose/">python-jose</a> - A JOSE implementation in Python.</li>
<li><a href="https://github.com/davedoesdev/python-jwt">python-jwt</a> - A module for generating and verifying JSON Web Tokens.</li>
</ul>
</li>
</ul>
<h2 id="build-tools">Build Tools</h2>
<p><em>Compile software from source code.</em></p>
<ul>
<li><a href="https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">BitBake</a> - A make-like build tool for embedded Linux.</li>
<li><a href="https://www.buildout.org/en/latest/">buildout</a> - A build system for creating, assembling and deploying applications from multiple parts.</li>
<li><a href="https://github.com/platformio/platformio-core">PlatformIO</a> - A console tool to build code with different development platforms.</li>
<li><a href="https://github.com/pybuilder/pybuilder">pybuilder</a> - A continuous build tool written in pure Python.</li>
<li><a href="https://www.scons.org/">SCons</a> - A software construction tool.</li>
</ul>
<h2 id="built-in-classes-enhancement">Built-in Classes Enhancement</h2>
<p><em>Libraries for enhancing Python built-in classes.</em></p>
<ul>
<li><a href="https://github.com/python-attrs/attrs">attrs</a> - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li>
<li><a href="https://github.com/jab/bidict">bidict</a> - Efficient, Pythonic bidirectional map data structures and related functionality..</li>
<li><a href="https://github.com/cdgriffith/Box">Box</a> - Python dictionaries with advanced dot notation access.</li>
<li><a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> - (Python standard library) Data classes.</li>
<li><a href="https://github.com/carlosescri/DottedDict">DottedDict</a> - A library that provides a method of accessing lists and dicts with a dotted path notation.</li>
</ul>
<h2 id="cms">CMS</h2>
<p><em>Content Management Systems.</em></p>
<ul>
<li><a href="https://www.django-cms.org/en/">django-cms</a> - An Open source enterprise CMS based on the Django.</li>
<li><a href="https://github.com/feincms/feincms">feincms</a> - One of the most advanced Content Management Systems built on Django.</li>
<li><a href="https://github.com/indico/indico">indico</a> - A feature-rich event management system, made @ <a href="https://en.wikipedia.org/wiki/CERN">CERN</a>.</li>
<li><a href="https://github.com/Kotti/Kotti">Kotti</a> - A high-level, Pythonic web application framework built on Pyramid.</li>
<li><a href="https://github.com/stephenmcd/mezzanine">mezzanine</a> - A powerful, consistent, and flexible content management platform.</li>
<li><a href="https://plone.org/">plone</a> - A CMS built on top of the open source application server Zope.</li>
<li><a href="https://github.com/rochacbruno/quokka">quokka</a> - Flexible, extensible, small CMS powered by Flask and MongoDB.</li>
<li><a href="https://wagtail.io/">wagtail</a> - A Django content management system.</li>
</ul>
<h2 id="caching">Caching</h2>
<p><em>Libraries for caching data.</em></p>
<ul>
<li><a href="https://github.com/bbangert/beaker">beaker</a> - A WSGI middleware for sessions and caching.</li>
<li><a href="https://github.com/django-cache-machine/django-cache-machine">django-cache-machine</a> - Automatic caching and invalidation for Django models.</li>
<li><a href="https://github.com/Suor/django-cacheops">django-cacheops</a> - A slick ORM cache with automatic granular event-driven invalidation.</li>
<li><a href="https://dogpilecache.readthedocs.io/en/latest/">dogpile.cache</a> - dogpile.cache is a next generation replacement for Beaker made by the same authors.</li>
<li><a href="https://pypi.org/project/HermesCache/">HermesCache</a> - Python caching library with tag-based invalidation and dogpile effect prevention.</li>
<li><a href="https://github.com/lericson/pylibmc">pylibmc</a> - A Python wrapper around the <a href="https://libmemcached.org/libMemcached.html">libmemcached</a> interface.</li>
<li><a href="https://www.grantjenks.com/docs/diskcache/">python-diskcache</a> - SQLite and file backed cache backend with faster lookups than memcached and redis.</li>
</ul>
<h2 id="chatops-tools">ChatOps Tools</h2>
<p><em>Libraries for chatbot development.</em></p>
<ul>
<li><a href="https://github.com/errbotio/errbot/">errbot</a> - The easiest and most popular chatbot to implement ChatOps.</li>
</ul>
<h2 id="code-analysis">Code Analysis</h2>
<p><em>Tools of static analysis, linters and code quality checkers. Also see <a href="https://github.com/mre/awesome-static-analysis">awesome-static-analysis</a>.</em></p>
<ul>
<li>Code Analysis
<ul>
<li><a href="https://github.com/coala/coala/">coala</a> - Language independent and easily extendable code analysis application.</li>
<li><a href="https://github.com/scottrogowski/code2flow">code2flow</a> - Turn your Python and JavaScript code into DOT flowcharts.</li>
<li><a href="https://github.com/PyCQA/prospector">prospector</a> - A tool to analyse Python code.</li>
<li><a href="https://github.com/gak/pycallgraph">pycallgraph</a> - A library that visualises the flow (call graph) of your Python application.</li>
<li><a href="https://github.com/jendrikseipp/vulture">vulture</a> - A tool for finding and analysing dead Python code.</li>
</ul>
</li>
<li>Code Linters
<ul>
<li><a href="https://pypi.org/project/flake8/">flake8</a> - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.
<ul>
<li><a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions">awesome-flake8-extensions</a></li>
</ul>
</li>
<li><a href="https://github.com/klen/pylama">pylama</a> - A code audit tool for Python and JavaScript.</li>
<li><a href="https://www.pylint.org/">pylint</a> - A fully customizable source code analyzer.</li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide">wemake-python-styleguide</a> - The strictest and most opinionated python linter ever.</li>
</ul>
</li>
<li>Code Formatters
<ul>
<li><a href="https://github.com/python/black">black</a> - The uncompromising Python code formatter.</li>
<li><a href="https://github.com/timothycrosley/isort">isort</a> - A Python utility / library to sort imports.</li>
<li><a href="https://github.com/google/yapf">yapf</a> - Yet another Python code formatter from Google.</li>
</ul>
</li>
<li>Static Type Checkers, also see <a href="https://github.com/typeddjango/awesome-python-typing">awesome-python-typing</a>
<ul>
<li><a href="https://mypy-lang.org/">mypy</a> - Check variable types during compile time.</li>
<li><a href="https://github.com/facebook/pyre-check">pyre-check</a> - Performant type checking.</li>
<li><a href="https://github.com/python/typeshed">typeshed</a> - Collection of library stubs for Python, with static types.</li>
</ul>
</li>
<li>Static Type Annotations Generators
<ul>
<li><a href="https://github.com/Instagram/MonkeyType">MonkeyType</a> - A system for Python that generates static type annotations by collecting runtime types.</li>
<li><a href="https://github.com/dropbox/pyannotate">pyannotate</a> - Auto-generate PEP-484 annotations.</li>
<li><a href="https://github.com/google/pytype">pytype</a> - Pytype checks and infers types for Python code - without requiring type annotations.</li>
</ul>
</li>
</ul>
<h2 id="command-line-interface-development">Command-line Interface Development</h2>
<p><em>Libraries for building command-line applications.</em></p>
<ul>
<li>Command-line Application Development
<ul>
<li><a href="https://builtoncement.com/">cement</a> - CLI Application Framework for Python.</li>
<li><a href="https://click.pocoo.org/dev/">click</a> - A package for creating beautiful command line interfaces in a composable way.</li>
<li><a href="https://docs.openstack.org/developer/cliff/">cliff</a> - A framework for creating command-line programs with multi-level commands.</li>
<li><a href="https://docopt.org/">docopt</a> - Pythonic command line arguments parser.</li>
<li><a href="https://github.com/google/python-fire">python-fire</a> - A library for creating command line interfaces from absolutely any Python object.</li>
<li><a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> - A library for building powerful interactive command lines.</li>
</ul>
</li>
<li>Terminal Rendering
<ul>
<li><a href="https://github.com/rsalmei/alive-progress">alive-progress</a> - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li>
<li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a> - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li>
<li><a href="https://github.com/glamp/bashplotlib">bashplotlib</a> - Making basic plots in the terminal.</li>
<li><a href="https://pypi.org/project/colorama/">colorama</a> - Cross-platform colored terminal text.</li>
<li><a href="https://github.com/willmcgugan/rich">rich</a> - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li>
<li><a href="https://github.com/tqdm/tqdm">tqdm</a> - Fast, extensible progress bar for loops and CLI.</li>
</ul>
</li>
</ul>
<h2 id="command-line-tools">Command-line Tools</h2>
<p><em>Useful CLI-based tools for productivity.</em></p>
<ul>
<li>Productivity Tools
<ul>
<li><a href="https://github.com/pykong/copier">copier</a> - A library and command-line utility for rendering projects templates.</li>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> - A command-line utility that creates projects from cookiecutters (project templates).</li>
<li><a href="https://github.com/sloria/doitlive">doitlive</a> - A tool for live presentations in the terminal.</li>
<li><a href="https://github.com/gleitz/howdoi">howdoi</a> - Instant coding answers via the command line.</li>
<li><a href="https://github.com/pyinvoke/invoke#readme">Invoke</a> - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li>
<li><a href="https://github.com/facebook/PathPicker">PathPicker</a> - Select files out of bash output.</li>
<li><a href="https://github.com/mooz/percol">percol</a> - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li>
<li><a href="https://github.com/nvbn/thefuck">thefuck</a> - Correcting your previous console command.</li>
<li><a href="https://github.com/tony/tmuxp">tmuxp</a> - A <a href="https://github.com/tmux/tmux">tmux</a> session manager.</li>
<li><a href="https://github.com/timofurrer/try">try</a> - A dead simple CLI to try out python packages - it&rsquo;s never been easier.</li>
</ul>
</li>
<li>CLI Enhancements
<ul>
<li><a href="https://github.com/jakubroztocil/httpie">httpie</a> - A command line HTTP client, a user-friendly cURL replacement.</li>
<li><a href="https://github.com/laixintao/iredis">iredis</a> - Redis CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/cloudnativelabs/kube-shell">kube-shell</a> - An integrated shell for working with the Kubernetes CLI.</li>
<li><a href="https://github.com/dbcli/litecli">litecli</a> - SQLite CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/mycli">mycli</a> - MySQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/pgcli">pgcli</a> - PostgreSQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/donnemartin/saws">saws</a> - A Supercharged <a href="https://github.com/aws/aws-cli">aws-cli</a>.</li>
</ul>
</li>
</ul>
<h2 id="compatibility">Compatibility</h2>
<p><em>Libraries for migrating from Python 2 to 3.</em></p>
<ul>
<li><a href="https://python-future.org/index.html">python-future</a> - The missing compatibility layer between Python 2 and Python 3.</li>
<li><a href="https://github.com/PyCQA/modernize">modernize</a> - Modernizes Python code for eventual Python 3 migration.</li>
<li><a href="https://pypi.org/project/six/">six</a> - Python 2 and 3 compatibility utilities.</li>
</ul>
<h2 id="computer-vision">Computer Vision</h2>
<p><em>Libraries for Computer Vision.</em></p>
<ul>
<li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a> - Ready-to-use OCR with 40+ languages supported.</li>
<li><a href="https://github.com/ageitgey/face_recognition">Face Recognition</a> - Simple facial recognition library.</li>
<li><a href="https://github.com/kornia/kornia/">Kornia</a> - Open Source Differentiable Computer Vision Library for PyTorch.</li>
<li><a href="https://opencv.org/">OpenCV</a> - Open Source Computer Vision Library.</li>
<li><a href="https://github.com/madmaze/pytesseract">pytesseract</a> - A wrapper for <a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a>.</li>
<li><a href="https://github.com/sightmachine/SimpleCV">SimpleCV</a> - An open source framework for building computer vision applications.</li>
<li><a href="https://github.com/sirfz/tesserocr">tesserocr</a> - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li>
</ul>
<h2 id="concurrency-and-parallelism">Concurrency and Parallelism</h2>
<p><em>Libraries for concurrent and parallel execution. Also see <a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a>.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a> - (Python standard library) A high-level interface for asynchronously executing callables.</li>
<li><a href="https://eventlet.net/">eventlet</a> - Asynchronous framework with WSGI support.</li>
<li><a href="https://www.gevent.org/">gevent</a> - A coroutine-based Python networking library that uses <a href="https://github.com/python-greenlet/greenlet">greenlet</a>.</li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html">multiprocessing</a> - (Python standard library) Process-based parallelism.</li>
<li><a href="https://github.com/soravux/scoop">scoop</a> - Scalable Concurrent Operations in Python.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast implementation of <code>asyncio</code> event loop on top of <code>libuv</code>.</li>
</ul>
<h2 id="configuration">Configuration</h2>
<p><em>Libraries for storing and parsing configuration options.</em></p>
<ul>
<li><a href="https://github.com/DiffSK/configobj">configobj</a> - INI file parser with validation.</li>
<li><a href="https://docs.python.org/3/library/configparser.html">configparser</a> - (Python standard library) INI file parser.</li>
<li><a href="https://github.com/facebookresearch/hydra">hydra</a> - Hydra is a framework for elegantly configuring complex applications.</li>
<li><a href="https://profig.readthedocs.io/en/latest/">profig</a> - Config from multiple formats with value conversion.</li>
<li><a href="https://github.com/henriquebastos/python-decouple">python-decouple</a> - Strict separation of settings from code.</li>
</ul>
<h2 id="cryptography">Cryptography</h2>
<ul>
<li><a href="https://cryptography.io/en/latest/">cryptography</a> - A package designed to expose cryptographic primitives and recipes to Python developers.</li>
<li><a href="https://github.com/paramiko/paramiko">paramiko</a> - The leading native Python SSHv2 protocol library.</li>
<li><a href="https://passlib.readthedocs.io/en/stable/">passlib</a> - Secure password storage/hashing library, very high level.</li>
<li><a href="https://github.com/pyca/pynacl">pynacl</a> - Python binding to the Networking and Cryptography (NaCl) library.</li>
</ul>
<h2 id="data-analysis">Data Analysis</h2>
<p><em>Libraries for data analyzing.</em></p>
<ul>
<li><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> - Pandas on AWS.</li>
<li><a href="https://github.com/blaze/blaze">Blaze</a> - NumPy and Pandas interface to Big Data.</li>
<li><a href="https://github.com/mining/mining">Open Mining</a> - Business Intelligence (BI) in Pandas interface.</li>
<li><a href="https://github.com/ironmussa/Optimus">Optimus</a> - Agile Data Science Workflows made easy with PySpark.</li>
<li><a href="https://orange.biolab.si/">Orange</a> - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li>
<li><a href="https://pandas.pydata.org/">Pandas</a> - A library providing high-performance, easy-to-use data structures and data analysis tools.</li>
</ul>
<h2 id="data-validation">Data Validation</h2>
<p><em>Libraries for validating data. Used for forms in many cases.</em></p>
<ul>
<li><a href="https://github.com/pyeve/cerberus">Cerberus</a> - A lightweight and extensible data validation library.</li>
<li><a href="https://docs.pylonsproject.org/projects/colander/en/latest/">colander</a> - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li>
<li><a href="https://github.com/Julian/jsonschema">jsonschema</a> - An implementation of <a href="https://json-schema.org/">JSON Schema</a> for Python.</li>
<li><a href="https://github.com/keleshev/schema">schema</a> - A library for validating Python data structures.</li>
<li><a href="https://github.com/schematics/schematics">Schematics</a> - Data Structure Validation.</li>
<li><a href="https://github.com/podio/valideer">valideer</a> - Lightweight extensible data validation and adaptation library.</li>
<li><a href="https://github.com/alecthomas/voluptuous">voluptuous</a> - A Python data validation library.</li>
</ul>
<h2 id="data-visualization">Data Visualization</h2>
<p><em>Libraries for visualizing data. Also see <a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>.</em></p>
<ul>
<li><a href="https://github.com/altair-viz/altair">Altair</a> - Declarative statistical visualization library for Python.</li>
<li><a href="https://github.com/bokeh/bokeh">Bokeh</a> - Interactive Web Plotting for Python.</li>
<li><a href="https://github.com/bloomberg/bqplot">bqplot</a> - Interactive Plotting Library for the Jupyter Notebook.</li>
<li><a href="https://github.com/SciTools/cartopy">Cartopy</a> - A cartographic python library with matplotlib support.</li>
<li><a href="https://plot.ly/products/dash/">Dash</a> - Built on top of Flask, React and Plotly aimed at analytical web applications.
<ul>
<li><a href="https://github.com/Acrotrend/awesome-dash">awesome-dash</a></li>
</ul>
</li>
<li><a href="https://github.com/mingrammer/diagrams">diagrams</a> - Diagram as Code.</li>
<li><a href="https://matplotlib.org/">Matplotlib</a> - A Python 2D plotting library.</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a> - A grammar of graphics for Python based on ggplot2.</li>
<li><a href="https://www.pygal.org/en/latest/">Pygal</a> - A Python SVG Charts Creator.</li>
<li><a href="https://pypi.org/project/pygraphviz/">PyGraphviz</a> - Python interface to <a href="https://www.graphviz.org/">Graphviz</a>.</li>
<li><a href="https://www.pyqtgraph.org/">PyQtGraph</a> - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li>
<li><a href="https://github.com/mwaskom/seaborn">Seaborn</a> - Statistical data visualization using Matplotlib.</li>
<li><a href="https://github.com/vispy/vispy">VisPy</a> - High-performance scientific visualization based on OpenGL.</li>
</ul>
<h2 id="database">Database</h2>
<p><em>Databases implemented in Python.</em></p>
<ul>
<li><a href="https://github.com/patx/pickledb">pickleDB</a> - A simple and lightweight key-value store for Python.</li>
<li><a href="https://github.com/msiemens/tinydb">tinydb</a> - A tiny, document-oriented database.</li>
<li><a href="https://github.com/zopefoundation/ZODB">ZODB</a> - A native object database for Python. A key-value and object graph database.</li>
</ul>
<h2 id="database-drivers">Database Drivers</h2>
<p><em>Libraries for connecting and operating databases.</em></p>
<ul>
<li>MySQL - <a href="https://shlomi-noach.github.io/awesome-mysql/">awesome-mysql</a>
<ul>
<li><a href="https://github.com/PyMySQL/mysqlclient-python">mysqlclient</a> - MySQL connector with Python 3 support (<a href="https://sourceforge.net/projects/mysql-python/">mysql-python</a> fork).</li>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> - A pure Python MySQL driver compatible to mysql-python.</li>
</ul>
</li>
<li>PostgreSQL - <a href="https://github.com/dhamaniasad/awesome-postgres">awesome-postgres</a>
<ul>
<li><a href="https://initd.org/psycopg/">psycopg2</a> - The most popular PostgreSQL adapter for Python.</li>
<li><a href="https://github.com/gmr/queries">queries</a> - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li>
</ul>
</li>
<li>SQlite - <a href="https://github.com/planetopendata/awesome-sqlite">awesome-sqlite</a>
<ul>
<li><a href="https://docs.python.org/3/library/sqlite3.html">sqlite3</a> - (Python standard library) SQlite interface compliant with DB-API 2.0</li>
<li><a href="https://github.com/plasticityai/supersqlite">SuperSQLite</a> - A supercharged SQLite library built on top of <a href="https://github.com/rogerbinns/apsw">apsw</a>.</li>
</ul>
</li>
<li>Other Relational Databases
<ul>
<li><a href="https://pymssql.readthedocs.io/en/latest/">pymssql</a> - A simple database interface to Microsoft SQL Server.</li>
<li><a href="https://github.com/mymarilyn/clickhouse-driver">clickhouse-driver</a> - Python driver with native interface for ClickHouse.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/datastax/python-driver">cassandra-driver</a> - The Python Driver for Apache Cassandra.</li>
<li><a href="https://github.com/wbolster/happybase">happybase</a> - A developer-friendly library for Apache HBase.</li>
<li><a href="https://github.com/dpkp/kafka-python">kafka-python</a> - The Python client for Apache Kafka.</li>
<li><a href="https://py2neo.org/">py2neo</a> - A client library and toolkit for working with Neo4j.</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> - The official Python client for MongoDB.</li>
<li><a href="https://github.com/andymccurdy/redis-py">redis-py</a> - The Python client for Redis.</li>
</ul>
</li>
<li>Asynchronous Clients
<ul>
<li><a href="https://github.com/mongodb/motor">motor</a> - The async Python driver for MongoDB.</li>
</ul>
</li>
</ul>
<h2 id="date-and-time">Date and Time</h2>
<p><em>Libraries for working with dates and times.</em></p>
<ul>
<li><a href="https://arrow.readthedocs.io/en/latest/">Arrow</a> - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li>
<li><a href="https://github.com/KoffeinFlummi/Chronyk">Chronyk</a> - A Python 3 library for parsing human-written times and dates.</li>
<li><a href="https://github.com/dateutil/dateutil">dateutil</a> - Extensions to the standard Python <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module.</li>
<li><a href="https://github.com/myusuf3/delorean/">delorean</a> - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li>
<li><a href="https://github.com/timofurrer/maya">maya</a> - Datetimes for Humans.</li>
<li><a href="https://github.com/zachwill/moment">moment</a> - A Python library for dealing with dates/times. Inspired by <a href="https://momentjs.com/">Moment.js</a>.</li>
<li><a href="https://github.com/sdispater/pendulum">Pendulum</a> - Python datetimes made easy.</li>
<li><a href="https://github.com/shinux/PyTime">PyTime</a> - An easy-to-use Python module which aims to operate date/time/datetime by string.</li>
<li><a href="https://launchpad.net/pytz">pytz</a> - World timezone definitions, modern and historical. Brings the <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a> into Python.</li>
<li><a href="https://github.com/dirn/When.py">when.py</a> - Providing user-friendly functions to help perform common date and time actions.</li>
</ul>
<h2 id="debugging-tools">Debugging Tools</h2>
<p><em>Libraries for debugging code.</em></p>
<ul>
<li>pdb-like Debugger
<ul>
<li><a href="https://github.com/gotcha/ipdb">ipdb</a> - IPython-enabled <a href="https://docs.python.org/3/library/pdb.html">pdb</a>.</li>
<li><a href="https://github.com/antocuni/pdb">pdb++</a> - Another drop-in replacement for pdb.</li>
<li><a href="https://github.com/inducer/pudb">pudb</a> - A full-screen, console-based Python debugger.</li>
<li><a href="https://github.com/Kozea/wdb">wdb</a> - An improbable web debugger through WebSockets.</li>
</ul>
</li>
<li>Tracing
<ul>
<li><a href="https://github.com/khamidou/lptrace">lptrace</a> - <a href="https://man7.org/linux/man-pages/man1/strace.1.html">strace</a> for Python programs.</li>
<li><a href="https://github.com/ionelmc/python-manhole">manhole</a> - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li>
<li><a href="https://github.com/google/pyringe">pyringe</a> - Debugger capable of attaching to and injecting code into Python processes.</li>
<li><a href="https://github.com/ionelmc/python-hunter">python-hunter</a> - A flexible code tracing toolkit.</li>
</ul>
</li>
<li>Profiler
<ul>
<li><a href="https://github.com/rkern/line_profiler">line_profiler</a> - Line-by-line profiling.</li>
<li><a href="https://github.com/fabianp/memory_profiler">memory_profiler</a> - Monitor Memory usage of Python code.</li>
<li><a href="https://github.com/benfred/py-spy">py-spy</a> - A sampling profiler for Python programs. Written in Rust.</li>
<li><a href="https://github.com/uber/pyflame">pyflame</a> - A ptracing profiler For Python.</li>
<li><a href="https://github.com/nvdv/vprof">vprof</a> - Visual Python profiler.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/jazzband/django-debug-toolbar">django-debug-toolbar</a> - Display various debug information for Django.</li>
<li><a href="https://github.com/dcramer/django-devserver">django-devserver</a> - A drop-in replacement for Django&rsquo;s runserver.</li>
<li><a href="https://github.com/mgood/flask-debugtoolbar">flask-debugtoolbar</a> - A port of the django-debug-toolbar to flask.</li>
<li><a href="https://github.com/gruns/icecream">icecream</a> - Inspect variables, expressions, and program execution with a single, simple function call.</li>
<li><a href="https://github.com/eliben/pyelftools">pyelftools</a> - Parsing and analyzing ELF files and DWARF debugging information.</li>
</ul>
</li>
</ul>
<h2 id="deep-learning">Deep Learning</h2>
<p><em>Frameworks for Neural Networks and Deep Learning. Also see <a href="https://github.com/ChristosChristofidis/awesome-deep-learning">awesome-deep-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/BVLC/caffe">caffe</a> - A fast open framework for deep learning..</li>
<li><a href="https://github.com/keras-team/keras">keras</a> - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li>
<li><a href="https://github.com/dmlc/mxnet">mxnet</a> - A deep learning framework designed for both efficiency and flexibility.</li>
<li><a href="https://github.com/pytorch/pytorch">pytorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li>
<li><a href="https://github.com/SerpentAI/SerpentAI">SerpentAI</a> - Game agent framework. Use any video game as a deep learning sandbox.</li>
<li><a href="https://github.com/tensorflow/tensorflow">tensorflow</a> - The most popular Deep Learning framework created by Google.</li>
<li><a href="https://github.com/Theano/Theano">Theano</a> - A library for fast numerical computation.</li>
</ul>
<h2 id="devops-tools">DevOps Tools</h2>
<p><em>Software and libraries for DevOps.</em></p>
<ul>
<li>Configuration Management
<ul>
<li><a href="https://github.com/ansible/ansible">ansible</a> - A radically simple IT automation platform.</li>
<li><a href="https://cloudinit.readthedocs.io/en/latest/">cloudinit</a> - A multi-distribution package that handles early initialization of a cloud instance.</li>
<li><a href="https://www.openstack.org/">OpenStack</a> - Open source software for building private and public clouds.</li>
<li><a href="https://github.com/Fizzadar/pyinfra">pyinfra</a> - A versatile CLI tools and python libraries to automate infrastructure.</li>
<li><a href="https://github.com/saltstack/salt">saltstack</a> - Infrastructure automation and management system.</li>
</ul>
</li>
<li>SSH-style Deployment
<ul>
<li><a href="https://github.com/sebastien/cuisine">cuisine</a> - Chef-like functionality for Fabric.</li>
<li><a href="https://github.com/fabric/fabric">fabric</a> - A simple, Pythonic tool for remote execution and deployment.</li>
<li><a href="https://github.com/fabtools/fabtools">fabtools</a> - Tools for writing awesome Fabric files.</li>
</ul>
</li>
<li>Process Management
<ul>
<li><a href="https://github.com/nickstenning/honcho">honcho</a> - A Python clone of <a href="https://github.com/ddollar/foreman">Foreman</a>, for managing Procfile-based applications.</li>
<li><a href="https://github.com/Supervisor/supervisor">supervisor</a> - Supervisor process control system for UNIX.</li>
</ul>
</li>
<li>Monitoring
<ul>
<li><a href="https://github.com/giampaolo/psutil">psutil</a> - A cross-platform process and system utilities module.</li>
</ul>
</li>
<li>Backup
<ul>
<li><a href="https://www.borgbackup.org/">BorgBackup</a> - A deduplicating archiver with compression and encryption.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://docs.docker.com/compose/">docker-compose</a> - Fast, isolated development environments using <a href="https://www.docker.com/">Docker</a>.</li>
</ul>
</li>
</ul>
<h2 id="distributed-computing">Distributed Computing</h2>
<p><em>Frameworks and libraries for Distributed Computing.</em></p>
<ul>
<li>Batch Processing
<ul>
<li><a href="https://github.com/dask/dask">dask</a> - A flexible parallel computing library for analytic computing.</li>
<li><a href="https://github.com/spotify/luigi">luigi</a> - A module that helps you build complex pipelines of batch jobs.</li>
<li><a href="https://github.com/Yelp/mrjob">mrjob</a> - Run MapReduce jobs on Hadoop or Amazon Web Services.</li>
<li><a href="https://pypi.org/project/pyspark/">PySpark</a> - <a href="https://spark.apache.org/">Apache Spark</a> Python API.</li>
<li><a href="https://github.com/ray-project/ray/">Ray</a> - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li>
</ul>
</li>
<li>Stream Processing
<ul>
<li><a href="https://github.com/robinhood/faust">faust</a> - A stream processing library, porting the ideas from <a href="https://kafka.apache.org/documentation/streams/">Kafka Streams</a> to Python.</li>
<li><a href="https://github.com/Parsely/streamparse">streamparse</a> - Run Python code against real-time streams of data via <a href="https://storm.apache.org/">Apache Storm</a>.</li>
</ul>
</li>
</ul>
<h2 id="distribution">Distribution</h2>
<p><em>Libraries to create packaged executables for release distribution.</em></p>
<ul>
<li><a href="https://github.com/spotify/dh-virtualenv">dh-virtualenv</a> - Build and distribute a virtualenv as a Debian package.</li>
<li><a href="https://nuitka.net/">Nuitka</a> - Compile scripts, modules, packages to an executable or extension module.</li>
<li><a href="https://pythonhosted.org/py2app/">py2app</a> - Freezes Python scripts (Mac OS X).</li>
<li><a href="https://www.py2exe.org/">py2exe</a> - Freezes Python scripts (Windows).</li>
<li><a href="https://github.com/dashingsoft/pyarmor">pyarmor</a> - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li>
<li><a href="https://github.com/pyinstaller/pyinstaller">PyInstaller</a> - Converts Python programs into stand-alone executables (cross-platform).</li>
<li><a href="https://pynsist.readthedocs.io/en/latest/">pynsist</a> - A tool to build Windows installers, installers bundle Python itself.</li>
<li><a href="https://github.com/linkedin/shiv">shiv</a> - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li>
</ul>
<h2 id="documentation">Documentation</h2>
<p><em>Libraries for generating project documentation.</em></p>
<ul>
<li><a href="https://github.com/sphinx-doc/sphinx/">sphinx</a> - Python Documentation generator.
<ul>
<li><a href="https://github.com/yoloseem/awesome-sphinxdoc">awesome-sphinxdoc</a></li>
</ul>
</li>
<li><a href="https://github.com/mitmproxy/pdoc">pdoc</a> - Epydoc replacement to auto generate API documentation for Python libraries.</li>
<li><a href="https://github.com/pycco-docs/pycco">pycco</a> - The literate-programming-style documentation generator.</li>
</ul>
<h2 id="downloader">Downloader</h2>
<p><em>Libraries for downloading.</em></p>
<ul>
<li><a href="https://github.com/jindaxiang/akshare">akshare</a> - A financial data interface library, built for human beings!</li>
<li><a href="https://github.com/s3tools/s3cmd">s3cmd</a> - A command line tool for managing Amazon S3 and CloudFront.</li>
<li><a href="https://github.com/bloomreach/s4cmd">s4cmd</a> - Super S3 command line tool, good for higher performance.</li>
<li><a href="https://you-get.org/">you-get</a> - A YouTube/Youku/Niconico video downloader written in Python 3.</li>
<li><a href="https://rg3.github.io/youtube-dl/">youtube-dl</a> - A small command-line program to download videos from YouTube.</li>
</ul>
<h2 id="e-commerce">E-commerce</h2>
<p><em>Frameworks and libraries for e-commerce and payments.</em></p>
<ul>
<li><a href="https://github.com/lxneng/alipay">alipay</a> - Unofficial Alipay API for Python.</li>
<li><a href="https://github.com/stephenmcd/cartridge">Cartridge</a> - A shopping cart app built using the Mezzanine.</li>
<li><a href="https://oscarcommerce.com/">django-oscar</a> - An open-source e-commerce framework for Django.</li>
<li><a href="https://github.com/awesto/django-shop">django-shop</a> - A Django based shop system.</li>
<li><a href="https://github.com/MicroPyramid/forex-python">forex-python</a> - Foreign exchange rates, Bitcoin price index and currency conversion.</li>
<li><a href="https://github.com/agiliq/merchant">merchant</a> - A Django app to accept payments from various payment processors.</li>
<li><a href="https://github.com/carlospalol/money">money</a> - <code>Money</code> class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.</li>
<li><a href="https://github.com/Alir3z4/python-currencies">python-currencies</a> - Display money format and its filthy currencies.</li>
<li><a href="https://getsaleor.com/">saleor</a> - An e-commerce storefront for Django.</li>
<li><a href="https://www.shuup.com/en/">shoop</a> - An open source E-Commerce platform based on Django.</li>
</ul>
<h2 id="editor-plugins-and-ides">Editor Plugins and IDEs</h2>
<ul>
<li>Emacs
<ul>
<li><a href="https://github.com/jorgenschaefer/elpy">elpy</a> - Emacs Python Development Environment.</li>
</ul>
</li>
<li>Sublime Text
<ul>
<li><a href="https://github.com/DamnWidget/anaconda">anaconda</a> - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li>
<li><a href="https://github.com/srusskih/SublimeJEDI">SublimeJEDI</a> - A Sublime Text plugin to the awesome auto-complete library Jedi.</li>
</ul>
</li>
<li>Vim
<ul>
<li><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a> - Vim bindings for the Jedi auto-completion library for Python.</li>
<li><a href="https://github.com/python-mode/python-mode">python-mode</a> - An all in one plugin for turning Vim into a Python IDE.</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> - Includes <a href="https://github.com/davidhalter/jedi">Jedi</a>-based completion engine for Python.</li>
</ul>
</li>
<li>Visual Studio
<ul>
<li><a href="https://github.com/Microsoft/PTVS">PTVS</a> - Python Tools for Visual Studio.</li>
</ul>
</li>
<li>Visual Studio Code
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a> - The official VSCode extension with rich support for Python.</li>
</ul>
</li>
<li>IDE
<ul>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a> - Commercial Python IDE by JetBrains. Has free community edition available.</li>
<li><a href="https://github.com/spyder-ide/spyder">spyder</a> - Open Source Python IDE.</li>
</ul>
</li>
</ul>
<h2 id="email">Email</h2>
<p><em>Libraries for sending and parsing email.</em></p>
<ul>
<li>Mail Servers
<ul>
<li><a href="https://github.com/modoboa/modoboa">modoboa</a> - A mail hosting and management platform including a modern Web UI.</li>
<li><a href="https://github.com/moggers87/salmon">salmon</a> - A Python Mail Server.</li>
</ul>
</li>
<li>Clients
<ul>
<li><a href="https://github.com/martinrusev/imbox">imbox</a> - Python IMAP for Humans.</li>
<li><a href="https://github.com/kootenpv/yagmail">yagmail</a> - Yet another Gmail/SMTP client.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/mailgun/flanker">flanker</a> - An email address and Mime parsing library.</li>
<li><a href="https://github.com/marrow/mailer">mailer</a> - High-performance extensible mail delivery framework.</li>
</ul>
</li>
</ul>
<h2 id="enterprise-application-integrations">Enterprise Application Integrations</h2>
<p><em>Platforms and tools for systems integrations in enterprise environments</em></p>
<ul>
<li><a href="https://zato.io">Zato</a> - ESB, SOA, REST, APIs and Cloud Integrations in Python.</li>
</ul>
<h2 id="environment-management">Environment Management</h2>
<p><em>Libraries for Python version and virtual environment management.</em></p>
<ul>
<li><a href="https://github.com/pyenv/pyenv">pyenv</a> - Simple Python version management.</li>
<li><a href="https://github.com/pypa/virtualenv">virtualenv</a> - A tool to create isolated Python environments.</li>
</ul>
<h2 id="files">Files</h2>
<p><em>Libraries for file manipulation and MIME type detection.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/mimetypes.html">mimetypes</a> - (Python standard library) Map filenames to MIME types.</li>
<li><a href="https://github.com/jaraco/path.py">path.py</a> - A module wrapper for <a href="https://docs.python.org/3/library/os.path.html">os.path</a>.</li>
<li><a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> - (Python standard library) An cross-platform, object-oriented path library.</li>
<li><a href="https://github.com/pyfilesystem/pyfilesystem2">PyFilesystem2</a> - Python&rsquo;s filesystem abstraction layer.</li>
<li><a href="https://github.com/ahupp/python-magic">python-magic</a> - A Python interface to the libmagic file type identification library.</li>
<li><a href="https://github.com/mikeorr/Unipath">Unipath</a> - An object-oriented approach to file/directory operations.</li>
<li><a href="https://github.com/gorakhargosh/watchdog">watchdog</a> - API and shell utilities to monitor file system events.</li>
</ul>
<h2 id="foreign-function-interface">Foreign Function Interface</h2>
<p><em>Libraries for providing foreign function interface.</em></p>
<ul>
<li><a href="https://pypi.org/project/cffi/">cffi</a> - Foreign Function Interface for Python calling C code.</li>
<li><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a> - (Python standard library) Foreign Function Interface for Python calling C code.</li>
<li><a href="https://mathema.tician.de/software/pycuda/">PyCUDA</a> - A Python wrapper for Nvidia&rsquo;s CUDA API.</li>
<li><a href="https://www.swig.org/Doc1.3/Python.html">SWIG</a> - Simplified Wrapper and Interface Generator.</li>
</ul>
<h2 id="forms">Forms</h2>
<p><em>Libraries for working with forms.</em></p>
<ul>
<li><a href="https://github.com/Pylons/deform">Deform</a> - Python HTML form generation library influenced by the formish form generation library.</li>
<li><a href="https://github.com/dyve/django-bootstrap3">django-bootstrap3</a> - Bootstrap 3 integration with Django.</li>
<li><a href="https://github.com/zostera/django-bootstrap4">django-bootstrap4</a> - Bootstrap 4 integration with Django.</li>
<li><a href="https://github.com/django-crispy-forms/django-crispy-forms">django-crispy-forms</a> - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li>
<li><a href="https://github.com/WiserTogether/django-remote-forms">django-remote-forms</a> - A platform independent Django form serializer.</li>
<li><a href="https://github.com/wtforms/wtforms">WTForms</a> - A flexible forms validation and rendering library.</li>
</ul>
<h2 id="functional-programming">Functional Programming</h2>
<p><em>Functional Programming with Python.</em></p>
<ul>
<li><a href="https://github.com/evhub/coconut">Coconut</a> - A variant of Python built for simple, elegant, Pythonic functional programming.</li>
<li><a href="https://github.com/pytoolz/cytoolz/">CyToolz</a> - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li>
<li><a href="https://github.com/kachayev/fn.py">fn.py</a> - Functional programming in Python: implementation of missing features to enjoy FP.</li>
<li><a href="https://github.com/Suor/funcy">funcy</a> - A fancy and practical functional tools.</li>
<li><a href="https://github.com/erikrose/more-itertools">more-itertools</a> - More routines for operating on iterables, beyond <code>itertools</code>.</li>
<li><a href="https://github.com/dry-python/returns">returns</a> - A set of type-safe monads, transformers, and composition utilities.</li>
<li><a href="https://github.com/pytoolz/toolz">Toolz</a> - A collection of functional utilities for iterators, functions, and dictionaries.</li>
</ul>
<h2 id="gui-development">GUI Development</h2>
<p><em>Libraries for working with graphical user interface applications.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/curses.html">curses</a> - Built-in wrapper for <a href="https://www.gnu.org/software/ncurses/">ncurses</a> used to create terminal GUI applications.</li>
<li><a href="https://github.com/ChrisKnott/Eel">Eel</a> - A library for making simple Electron-like offline HTML/JS GUI apps.</li>
<li><a href="https://github.com/nucleic/enaml">enaml</a> - Creating beautiful user-interfaces with Declarative Syntax like QML.</li>
<li><a href="https://github.com/zoofIO/flexx">Flexx</a> - Flexx is a pure Python toolkit for creating GUI&rsquo;s, that uses web technology for its rendering.</li>
<li><a href="https://github.com/chriskiehl/Gooey">Gooey</a> - Turn command line programs into a full GUI application with one line.</li>
<li><a href="https://kivy.org/">kivy</a> - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li>
<li><a href="https://github.com/pyglet/pyglet">pyglet</a> - A cross-platform windowing and multimedia library for Python.</li>
<li><a href="https://wiki.gnome.org/Projects/PyGObject">PyGObject</a> - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li>
<li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a> - Python bindings for the <a href="https://www.qt.io/">Qt</a> cross-platform application and UI framework.</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> - Wrapper for tkinter, Qt, WxPython and Remi.</li>
<li><a href="https://github.com/r0x0r/pywebview/">pywebview</a> - A lightweight cross-platform native wrapper around a webview component.</li>
<li><a href="https://wiki.python.org/moin/TkInter">Tkinter</a> - Tkinter is Python&rsquo;s de-facto standard GUI package.</li>
<li><a href="https://github.com/pybee/toga">Toga</a> - A Python native, OS native GUI toolkit.</li>
<li><a href="https://urwid.org/">urwid</a> - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li>
<li><a href="https://wxpython.org/">wxPython</a> - A blending of the wxWidgets C++ class library with the Python.</li>
<li><a href="https://github.com/RaylockLLC/DearPyGui/">DearPyGui</a> - A Simple GPU accelerated Python GUI framework</li>
</ul>
<h2 id="graphql">GraphQL</h2>
<p><em>Libraries for working with GraphQL.</em></p>
<ul>
<li><a href="https://github.com/graphql-python/graphene/">graphene</a> - GraphQL framework for Python.</li>
<li><a href="https://github.com/tartiflette/tartiflette-aiohttp/">tartiflette-aiohttp</a> - An <code>aiohttp</code>-based wrapper for Tartiflette to expose GraphQL APIs over HTTP.</li>
<li><a href="https://github.com/tartiflette/tartiflette-asgi/">tartiflette-asgi</a> - ASGI support for the Tartiflette GraphQL engine.</li>
<li><a href="https://tartiflette.io">tartiflette</a> - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio.</li>
</ul>
<h2 id="game-development">Game Development</h2>
<p><em>Awesome game development libraries.</em></p>
<ul>
<li><a href="https://api.arcade.academy/en/latest/">Arcade</a> - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li>
<li><a href="https://cocos2d.org/">Cocos2d</a> - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li>
<li><a href="https://www.harfang3d.com">Harfang3D</a> - Python framework for 3D, VR and game development.</li>
<li><a href="https://www.panda3d.org/">Panda3D</a> - 3D game engine developed by Disney.</li>
<li><a href="https://www.pygame.org/news.html">Pygame</a> - Pygame is a set of Python modules designed for writing games.</li>
<li><a href="https://www.ogre3d.org/tikiwiki/PyOgre">PyOgre</a> - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li>
<li><a href="https://pyopengl.sourceforge.net/">PyOpenGL</a> - Python ctypes bindings for OpenGL and it&rsquo;s related APIs.</li>
<li><a href="https://pysdl2.readthedocs.io">PySDL2</a> - A ctypes based wrapper for the SDL2 library.</li>
<li><a href="https://www.renpy.org/">RenPy</a> - A Visual Novel engine.</li>
</ul>
<h2 id="geolocation">Geolocation</h2>
<p><em>Libraries for geocoding addresses and working with latitudes and longitudes.</em></p>
<ul>
<li><a href="https://github.com/SmileyChris/django-countries">django-countries</a> - A Django app that provides a country field for models and forms.</li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">GeoDjango</a> - A world-class geographic web framework.</li>
<li><a href="https://github.com/maxmind/geoip-api-python">GeoIP</a> - Python API for MaxMind GeoIP Legacy Database.</li>
<li><a href="https://github.com/frewsxcv/python-geojson">geojson</a> - Python bindings and utilities for GeoJSON.</li>
<li><a href="https://github.com/geopy/geopy">geopy</a> - Python Geocoding Toolbox.</li>
</ul>
<h2 id="html-manipulation">HTML Manipulation</h2>
<p><em>Libraries for working with HTML and XML.</em></p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li>
<li><a href="https://github.com/mozilla/bleach">bleach</a> - A whitelist-based HTML sanitization and text linkification library.</li>
<li><a href="https://pypi.org/project/cssutils/">cssutils</a> - A CSS library for Python.</li>
<li><a href="https://github.com/html5lib/html5lib-python">html5lib</a> - A standards-compliant library for parsing and serializing HTML documents and fragments.</li>
<li><a href="https://lxml.de/">lxml</a> - A very fast, easy-to-use and versatile library for handling HTML and XML.</li>
<li><a href="https://github.com/pallets/markupsafe">MarkupSafe</a> - Implements a XML/HTML/XHTML Markup safe string for Python.</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a> - A jQuery-like library for parsing HTML.</li>
<li><a href="https://github.com/stchris/untangle">untangle</a> - Converts XML documents to Python objects for easy access.</li>
<li><a href="https://weasyprint.org">WeasyPrint</a> - A visual rendering engine for HTML and CSS that can export to PDF.</li>
<li><a href="https://xmldataset.readthedocs.io/en/latest/">xmldataset</a> - Simple XML Parsing.</li>
<li><a href="https://github.com/martinblech/xmltodict">xmltodict</a> - Working with XML feel like you are working with JSON.</li>
</ul>
<h2 id="http-clients">HTTP Clients</h2>
<p><em>Libraries for working with HTTP.</em></p>
<ul>
<li><a href="https://github.com/spyoungtech/grequests">grequests</a> - requests + gevent for asynchronous HTTP requests.</li>
<li><a href="https://github.com/httplib2/httplib2">httplib2</a> - Comprehensive HTTP client library.</li>
<li><a href="https://github.com/encode/httpx">httpx</a> - A next generation HTTP client for Python.</li>
<li><a href="https://github.com/psf/requests">requests</a> - HTTP Requests for Humans.</li>
<li><a href="https://github.com/twisted/treq">treq</a> - Python requests like API built on top of Twisted&rsquo;s HTTP client.</li>
<li><a href="https://github.com/shazow/urllib3">urllib3</a> - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li>
</ul>
<h2 id="hardware">Hardware</h2>
<p><em>Libraries for programming with hardware.</em></p>
<ul>
<li><a href="https://inotool.org/">ino</a> - Command line toolkit for working with <a href="https://www.arduino.cc/">Arduino</a>.</li>
<li><a href="https://github.com/boppreh/keyboard">keyboard</a> - Hook and simulate global keyboard events on Windows and Linux.</li>
<li><a href="https://github.com/boppreh/mouse">mouse</a> - Hook and simulate global mouse events on Windows and Linux.</li>
<li><a href="https://www.pingo.io/">Pingo</a> - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li>
<li><a href="https://github.com/SavinaRoja/PyUserInput">PyUserInput</a> - A module for cross-platform control of the mouse and keyboard.</li>
<li><a href="https://github.com/secdev/scapy">scapy</a> - A brilliant packet manipulation library.</li>
</ul>
<h2 id="image-processing">Image Processing</h2>
<p><em>Libraries for manipulating images.</em></p>
<ul>
<li><a href="https://github.com/rossgoodwin/hmap">hmap</a> - Image histogram remapping.</li>
<li><a href="https://sourceforge.net/projects/imgseek/">imgSeek</a> - A project for searching a collection of images using visual similarity.</li>
<li><a href="https://github.com/hhatto/nude.py">nude.py</a> - Nudity detection.</li>
<li><a href="https://github.com/daboth/pagan">pagan</a> - Retro identicon (Avatar) generation based on input string and hash.</li>
<li><a href="https://github.com/python-pillow/Pillow">pillow</a> - Pillow is the friendly <a href="https://www.pythonware.com/products/pil/">PIL</a> fork.</li>
<li><a href="https://github.com/WhyNotHugo/python-barcode">python-barcode</a> - Create barcodes in Python with no extra dependencies.</li>
<li><a href="https://github.com/ajkumar25/pygram">pygram</a> - Instagram-like image filters.</li>
<li><a href="https://github.com/pymatting/pymatting">PyMatting</a> - A library for alpha matting.</li>
<li><a href="https://github.com/lincolnloop/python-qrcode">python-qrcode</a> - A pure Python QR Code generator.</li>
<li><a href="https://github.com/dylanaraps/pywal">pywal</a> - A tool that generates color schemes from images.</li>
<li><a href="https://github.com/libvips/pyvips">pyvips</a> - A fast image processing library with low memory needs.</li>
<li><a href="https://github.com/fogleman/Quads">Quads</a> - Computer art based on quadtrees.</li>
<li><a href="https://scikit-image.org/">scikit-image</a> - A Python library for (scientific) image processing.</li>
<li><a href="https://github.com/thumbor/thumbor">thumbor</a> - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li>
<li><a href="https://github.com/dahlia/wand">wand</a> - Python bindings for <a href="https://www.imagemagick.org/script/magick-wand.php">MagickWand</a>, C API for ImageMagick.</li>
</ul>
<h2 id="implementations">Implementations</h2>
<p><em>Implementations of Python.</em></p>
<ul>
<li><a href="https://github.com/metawilm/cl-python">CLPython</a> - Implementation of the Python programming language written in Common Lisp.</li>
<li><a href="https://github.com/python/cpython">CPython</a> - <strong>Default, most widely used implementation of the Python programming language written in C.</strong></li>
<li><a href="https://cython.org/">Cython</a> - Optimizing Static Compiler for Python.</li>
<li><a href="https://github.com/google/grumpy">Grumpy</a> - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li>
<li><a href="https://github.com/IronLanguages/ironpython3">IronPython</a> - Implementation of the Python programming language written in C#.</li>
<li><a href="https://hg.python.org/jython">Jython</a> - Implementation of Python programming language written in Java for the JVM.</li>
<li><a href="https://github.com/micropython/micropython">MicroPython</a> - A lean and efficient Python programming language implementation.</li>
<li><a href="https://numba.pydata.org/">Numba</a> - Python JIT compiler to LLVM aimed at scientific Python.</li>
<li><a href="https://github.com/Maratyszcza/PeachPy">PeachPy</a> - x86-64 assembler embedded in Python.</li>
<li><a href="https://github.com/Microsoft/Pyjion">Pyjion</a> - A JIT for Python based upon CoreCLR.</li>
<li><a href="https://foss.heptapod.net/pypy/pypy">PyPy</a> - A very fast and compliant implementation of the Python language.</li>
<li><a href="https://github.com/dropbox/pyston">Pyston</a> - A Python implementation using JIT techniques.</li>
<li><a href="https://github.com/stackless-dev/stackless">Stackless Python</a> - An enhanced version of the Python programming language.</li>
</ul>
<h2 id="interactive-interpreter">Interactive Interpreter</h2>
<p><em>Interactive Python interpreters (REPL).</em></p>
<ul>
<li><a href="https://github.com/bpython/bpython">bpython</a> - A fancy interface to the Python interpreter.</li>
<li><a href="https://jupyter.org">Jupyter Notebook (IPython)</a> - A rich toolkit to help you make the most out of using Python interactively.
<ul>
<li><a href="https://github.com/markusschanta/awesome-jupyter">awesome-jupyter</a></li>
</ul>
</li>
<li><a href="https://github.com/jonathanslenders/ptpython">ptpython</a> - Advanced Python REPL built on top of the <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>.</li>
</ul>
<h2 id="internationalization">Internationalization</h2>
<p><em>Libraries for working with i18n.</em></p>
<ul>
<li><a href="https://babel.pocoo.org/en/latest/">Babel</a> - An internationalization library for Python.</li>
<li><a href="https://github.com/ovalhub/pyicu">PyICU</a> - A wrapper of International Components for Unicode C++ library (<a href="https://site.icu-project.org/">ICU</a>).</li>
</ul>
<h2 id="job-scheduler">Job Scheduler</h2>
<p><em>Libraries for scheduling jobs.</em></p>
<ul>
<li><a href="https://airflow.apache.org/">Airflow</a> - Airflow is a platform to programmatically author, schedule and monitor workflows.</li>
<li><a href="https://apscheduler.readthedocs.io/en/latest/">APScheduler</a> - A light but powerful in-process task scheduler that lets you schedule functions.</li>
<li><a href="https://github.com/thauber/django-schedule">django-schedule</a> - A calendaring app for Django.</li>
<li><a href="https://pydoit.org/">doit</a> - A task runner and build tool.</li>
<li><a href="https://github.com/gunnery/gunnery">gunnery</a> - Multipurpose task execution tool for distributed systems with web-based interface.</li>
<li><a href="https://joblib.readthedocs.io/">Joblib</a> - A set of tools to provide lightweight pipelining in Python.</li>
<li><a href="https://github.com/fengsp/plan">Plan</a> - Writing crontab file in Python like a charm.</li>
<li><a href="https://github.com/PrefectHQ/prefect">Prefect</a> - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li>
<li><a href="https://github.com/dbader/schedule">schedule</a> - Python job scheduling for humans.</li>
<li><a href="https://github.com/knipknap/SpiffWorkflow">Spiff</a> - A powerful workflow engine implemented in pure Python.</li>
<li><a href="https://docs.openstack.org/developer/taskflow/">TaskFlow</a> - A Python library that helps to make task execution easy, consistent and reliable.</li>
</ul>
<h2 id="logging">Logging</h2>
<p><em>Libraries for generating and working with logs.</em></p>
<ul>
<li><a href="https://logbook.readthedocs.io/en/stable/">logbook</a> - Logging replacement for Python.</li>
<li><a href="https://docs.python.org/3/library/logging.html">logging</a> - (Python standard library) Logging facility for Python.</li>
<li><a href="https://github.com/Delgan/loguru">loguru</a> - Library which aims to bring enjoyable logging in Python.</li>
<li><a href="https://github.com/getsentry/sentry-python">sentry-python</a> - Sentry SDK for Python.</li>
<li><a href="https://www.structlog.org/en/stable/">structlog</a> - Structured logging made easy.</li>
</ul>
<h2 id="machine-learning">Machine Learning</h2>
<p><em>Libraries for Machine Learning. Also see <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/openai/gym">gym</a> - A toolkit for developing and comparing reinforcement learning algorithms.</li>
<li><a href="https://github.com/h2oai/h2o-3">H2O</a> - Open Source Fast Scalable Machine Learning Platform.</li>
<li><a href="https://github.com/benhamner/Metrics">Metrics</a> - Machine learning evaluation metrics.</li>
<li><a href="https://github.com/numenta/nupic">NuPIC</a> - Numenta Platform for Intelligent Computing.</li>
<li><a href="https://scikit-learn.org/">scikit-learn</a> - The most popular Python library for Machine Learning.</li>
<li><a href="https://spark.apache.org/docs/latest/ml-guide.html">Spark ML</a> - <a href="https://spark.apache.org/">Apache Spark</a>&rsquo;s scalable Machine Learning library.</li>
<li><a href="https://github.com/josephreisinger/vowpal_porpoise">vowpal_porpoise</a> - A lightweight Python wrapper for <a href="https://github.com/JohnLangford/vowpal_wabbit/">Vowpal Wabbit</a>.</li>
<li><a href="https://github.com/dmlc/xgboost">xgboost</a> - A scalable, portable, and distributed gradient boosting library.</li>
<li><a href="https://github.com/mindsdb/mindsdb">MindsDB</a> - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li>
</ul>
<h2 id="microsoft-windows">Microsoft Windows</h2>
<p><em>Python programming on Microsoft Windows.</em></p>
<ul>
<li><a href="https://python-xy.github.io/">Python(x,y)</a> - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li>
<li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a> - Unofficial Windows binaries for Python extension packages.</li>
<li><a href="https://github.com/pythonnet/pythonnet">PythonNet</a> - Python Integration with the .NET Common Language Runtime (CLR).</li>
<li><a href="https://github.com/mhammond/pywin32">PyWin32</a> - Python Extensions for Windows.</li>
<li><a href="https://winpython.github.io/">WinPython</a> - Portable development environment for Windows 7/8.</li>
</ul>
<h2 id="miscellaneous">Miscellaneous</h2>
<p><em>Useful libraries or tools that don&rsquo;t fit in the categories above.</em></p>
<ul>
<li><a href="https://github.com/jek/blinker">blinker</a> - A fast Python in-process signal/event dispatching system.</li>
<li><a href="https://github.com/mahmoud/boltons">boltons</a> - A set of pure-Python utilities.</li>
<li><a href="https://github.com/pallets/itsdangerous">itsdangerous</a> - Various helpers to pass trusted data to untrusted environments.</li>
<li><a href="https://github.com/magenta/magenta">magenta</a> - A tool to generate music and art using artificial intelligence.</li>
<li><a href="https://github.com/mitsuhiko/pluginbase">pluginbase</a> - A simple but flexible plugin system for Python.</li>
<li><a href="https://www.tryton.org/">tryton</a> - A general purpose business framework.</li>
</ul>
<h2 id="natural-language-processing">Natural Language Processing</h2>
<p><em>Libraries for working with human languages.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a> - Topic Modeling for Humans.</li>
<li><a href="https://github.com/saffsd/langid.py">langid.py</a> - Stand-alone language identification system.</li>
<li><a href="https://www.nltk.org/">nltk</a> - A leading platform for building Python programs to work with human language data.</li>
<li><a href="https://github.com/clips/pattern">pattern</a> - A web mining module.</li>
<li><a href="https://github.com/aboSamoor/polyglot">polyglot</a> - Natural language pipeline supporting hundreds of languages.</li>
<li><a href="https://github.com/facebookresearch/pytext">pytext</a> - A natural language modeling framework based on PyTorch.</li>
<li><a href="https://github.com/PetrochukM/PyTorch-NLP">PyTorch-NLP</a> - A toolkit enabling rapid deep learning NLP prototyping for research.</li>
<li><a href="https://spacy.io/">spacy</a> - A library for industrial-strength natural language processing in Python and Cython.</li>
<li><a href="https://github.com/stanfordnlp/stanza">Stanza</a> - The Stanford NLP Group&rsquo;s official Python library, supporting 60+ languages.</li>
</ul>
</li>
<li>Chinese
<ul>
<li><a href="https://github.com/fighting41love/funNLP">funNLP</a> - A collection of tools and datasets for Chinese NLP.</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a> - The most popular Chinese text segmentation library.</li>
<li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a> - A toolkit for Chinese word segmentation in various domains.</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> - A library for processing Chinese text.</li>
</ul>
</li>
</ul>
<h2 id="network-virtualization">Network Virtualization</h2>
<p><em>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</em></p>
<ul>
<li><a href="https://github.com/mininet/mininet">mininet</a> - A popular network emulator and API written in Python.</li>
<li><a href="https://github.com/napalm-automation/napalm">napalm</a> - Cross-vendor API to manipulate network devices.</li>
<li><a href="https://github.com/noxrepo/pox">pox</a> - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li>
</ul>
<h2 id="news-feed">News Feed</h2>
<p><em>Libraries for building user&rsquo;s activities.</em></p>
<ul>
<li><a href="https://github.com/justquick/django-activity-stream">django-activity-stream</a> - Generating generic activity streams from the actions on your site.</li>
<li><a href="https://github.com/tschellenbach/Stream-Framework">Stream Framework</a> - Building news feed and notification systems using Cassandra and Redis.</li>
</ul>
<h2 id="orm">ORM</h2>
<p><em>Libraries that implement Object-Relational Mapping or data mapping techniques.</em></p>
<ul>
<li>Relational Databases
<ul>
<li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/">Django Models</a> - The Django ORM.</li>
<li><a href="https://www.sqlalchemy.org/">SQLAlchemy</a> - The Python SQL Toolkit and Object Relational Mapper.
<ul>
<li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a></li>
</ul>
</li>
<li><a href="https://github.com/pudo/dataset">dataset</a> - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li>
<li><a href="https://github.com/sdispater/orator">orator</a> -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li>
<li><a href="https://github.com/encode/orm">orm</a> - An async ORM.</li>
<li><a href="https://github.com/coleifer/peewee">peewee</a> - A small, expressive ORM.</li>
<li><a href="https://github.com/ponyorm/pony/">pony</a> - ORM that provides a generator-oriented interface to SQL.</li>
<li><a href="https://github.com/web2py/pydal/">pydal</a> - A pure Python Database Abstraction Layer.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/stephenmcd/hot-redis">hot-redis</a> - Rich Python data types for Redis.</li>
<li><a href="https://github.com/MongoEngine/mongoengine">mongoengine</a> - A Python Object-Document-Mapper for working with MongoDB.</li>
<li><a href="https://github.com/pynamodb/PynamoDB">PynamoDB</a> - A Pythonic interface for <a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a>.</li>
<li><a href="https://github.com/kiddouk/redisco">redisco</a> - A Python Library for Simple Models and Containers Persisted in Redis.</li>
</ul>
</li>
</ul>
<h2 id="package-management">Package Management</h2>
<p><em>Libraries for package and dependency management.</em></p>
<ul>
<li><a href="https://pip.pypa.io/en/stable/">pip</a> - The package installer for Python.
<ul>
<li><a href="https://github.com/jazzband/pip-tools">pip-tools</a> - A set of tools to keep your pinned Python dependencies fresh.</li>
<li><a href="https://pypi.org/">PyPI</a></li>
</ul>
</li>
<li><a href="https://github.com/conda/conda/">conda</a> - Cross-platform, Python-agnostic binary package manager.</li>
<li><a href="https://github.com/sdispater/poetry">poetry</a> - Python dependency management and packaging made easy.</li>
</ul>
<h2 id="package-repositories">Package Repositories</h2>
<p><em>Local PyPI repository server and proxies.</em></p>
<ul>
<li><a href="https://github.com/pypa/bandersnatch/">bandersnatch</a> - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li>
<li><a href="https://github.com/devpi/devpi">devpi</a> - PyPI server and packaging/testing/release tool.</li>
<li><a href="https://github.com/jazzband/localshop">localshop</a> - Local PyPI server (custom packages and auto-mirroring of pypi).</li>
<li><a href="https://github.com/pypa/warehouse">warehouse</a> - Next generation Python Package Repository (PyPI).</li>
</ul>
<h2 id="penetration-testing">Penetration Testing</h2>
<p><em>Frameworks and tools for penetration testing.</em></p>
<ul>
<li><a href="https://github.com/Manisso/fsociety">fsociety</a> - A Penetration testing framework.</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">setoolkit</a> - A toolkit for social engineering.</li>
<li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a> - Automatic SQL injection and database takeover tool.</li>
</ul>
<h2 id="permissions">Permissions</h2>
<p><em>Libraries that allow or deny users access to data or functionality.</em></p>
<ul>
<li><a href="https://github.com/django-guardian/django-guardian">django-guardian</a> - Implementation of per object permissions for Django 1.2+</li>
<li><a href="https://github.com/dfunckt/django-rules">django-rules</a> - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li>
</ul>
<h2 id="processes">Processes</h2>
<p><em>Libraries for starting and communicating with OS processes.</em></p>
<ul>
<li><a href="https://github.com/amitt001/delegator.py">delegator.py</a> - <a href="https://docs.python.org/3/library/subprocess.html">Subprocesses</a> for Humans 2.0.</li>
<li><a href="https://sarge.readthedocs.io/en/latest/">sarge</a> - Yet another wrapper for subprocess.</li>
<li><a href="https://github.com/amoffat/sh">sh</a> - A full-fledged subprocess replacement for Python.</li>
</ul>
<h2 id="recommender-systems">Recommender Systems</h2>
<p><em>Libraries for building recommender systems.</em></p>
<ul>
<li><a href="https://github.com/spotify/annoy">annoy</a> - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li>
<li><a href="https://github.com/ibayer/fastFM">fastFM</a> - A library for Factorization Machines.</li>
<li><a href="https://github.com/benfred/implicit">implicit</a> - A fast Python implementation of collaborative filtering for implicit datasets.</li>
<li><a href="https://github.com/guestwalk/libffm">libffm</a> - A library for Field-aware Factorization Machine (FFM).</li>
<li><a href="https://github.com/lyst/lightfm">lightfm</a> - A Python implementation of a number of popular recommendation algorithms.</li>
<li><a href="https://github.com/maciejkula/spotlight">spotlight</a> - Deep recommender models using PyTorch.</li>
<li><a href="https://github.com/NicolasHug/Surprise">Surprise</a> - A scikit for building and analyzing recommender systems.</li>
<li><a href="https://github.com/jfkirk/tensorrec">tensorrec</a> - A Recommendation Engine Framework in TensorFlow.</li>
</ul>
<h2 id="refactoring">Refactoring</h2>
<p><em>Refactoring tools and libraries for Python</em></p>
<ul>
<li><a href="https://bicyclerepair.sourceforge.net/">Bicycle Repair Man</a> - Bicycle Repair Man, a refactoring tool for Python.</li>
<li><a href="https://pybowler.io/">Bowler</a> - Safe code refactoring for modern Python.</li>
<li><a href="https://github.com/python-rope/rope">Rope</a> -  Rope is a python refactoring library.</li>
</ul>
<h2 id="restful-api">RESTful API</h2>
<p><em>Libraries for building RESTful APIs.</em></p>
<ul>
<li>Django
<ul>
<li><a href="https://www.django-rest-framework.org/">django-rest-framework</a> - A powerful and flexible toolkit to build web APIs.</li>
<li><a href="https://tastypieapi.org/">django-tastypie</a> - Creating delicious APIs for Django apps.</li>
</ul>
</li>
<li>Flask
<ul>
<li><a href="https://github.com/pyeve/eve">eve</a> - REST API framework powered by Flask, MongoDB and good intentions.</li>
<li><a href="https://github.com/flask-api/flask-api">flask-api</a> - Browsable Web APIs for Flask.</li>
<li><a href="https://github.com/flask-restful/flask-restful">flask-restful</a> - Quickly building REST APIs for Flask.</li>
</ul>
</li>
<li>Pyramid
<ul>
<li><a href="https://github.com/Cornices/cornice">cornice</a> - A RESTful framework for Pyramid.</li>
</ul>
</li>
<li>Framework agnostic
<ul>
<li><a href="https://github.com/encode/apistar">apistar</a> - A smart Web API framework, designed for Python 3.</li>
<li><a href="https://github.com/falconry/falcon">falcon</a> - A high-performance framework for building cloud APIs and web app backends.</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a> - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li>
<li><a href="https://github.com/hugapi/hug">hug</a> - A Python 3 framework for cleanly exposing APIs.</li>
<li><a href="https://github.com/jeffknupp/sandman2">sandman2</a> - Automated REST APIs for existing database-driven systems.</li>
<li><a href="https://github.com/huge-success/sanic">sanic</a> - A Python 3.6+ web server and web framework that&rsquo;s written to go fast.</li>
<li><a href="https://vibora.io/">vibora</a> - Fast, efficient and asynchronous Web framework inspired by Flask.</li>
</ul>
</li>
</ul>
<h2 id="robotics">Robotics</h2>
<p><em>Libraries for robotics.</em></p>
<ul>
<li><a href="https://github.com/AtsushiSakai/PythonRobotics">PythonRobotics</a> - This is a compilation of various robotics algorithms with visualizations.</li>
<li><a href="https://wiki.ros.org/rospy">rospy</a> - This is a library for ROS (Robot Operating System).</li>
</ul>
<h2 id="rpc-servers">RPC Servers</h2>
<p><em>RPC-compatible servers.</em></p>
<ul>
<li><a href="https://github.com/tomerfiliba/rpyc">RPyC</a> (Remote Python Call) - A transparent and symmetric RPC library for Python</li>
<li><a href="https://github.com/0rpc/zerorpc-python">zeroRPC</a> - zerorpc is a flexible RPC implementation based on <a href="https://zeromq.org/">ZeroMQ</a> and <a href="https://msgpack.org/">MessagePack</a>.</li>
</ul>
<h2 id="science">Science</h2>
<p><em>Libraries for scientific computing. Also see <a href="https://github.com/TomNicholas/Python-for-Scientists">Python-for-Scientists</a>.</em></p>
<ul>
<li><a href="https://www.astropy.org/">astropy</a> - A community Python library for Astronomy.</li>
<li><a href="https://github.com/chapmanb/bcbio-nextgen">bcbio-nextgen</a> - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li>
<li><a href="https://github.com/chapmanb/bcbb">bccb</a> - Collection of useful code related to biological analysis.</li>
<li><a href="https://biopython.org/wiki/Main_Page">Biopython</a> - Biopython is a set of freely available tools for biological computation.</li>
<li><a href="https://cclib.github.io/">cclib</a> - A library for parsing and interpreting the results of computational chemistry packages.</li>
<li><a href="https://colour-science.org/">Colour</a> - Implementing a comprehensive number of colour theory transformations and algorithms.</li>
<li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - Unsupervised machine learning toolbox for graph structured data.</li>
<li><a href="https://networkx.github.io/">NetworkX</a> - A high-productivity software for complex networks.</li>
<li><a href="https://nipy.org">NIPY</a> - A collection of neuroimaging toolkits.</li>
<li><a href="https://www.numpy.org/">NumPy</a> - A fundamental package for scientific computing with Python.</li>
<li><a href="https://github.com/obspy/obspy/wiki/">ObsPy</a> - A Python toolbox for seismology.</li>
<li><a href="https://openbabel.org/wiki/Main_Page">Open Babel</a> - A chemical toolbox designed to speak the many languages of chemical data.</li>
<li><a href="https://www.pydy.org/">PyDy</a> - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li>
<li><a href="https://github.com/pymc-devs/pymc3">PyMC</a> - Markov Chain Monte Carlo sampling toolkit.</li>
<li><a href="https://qutip.org/">QuTiP</a> - Quantum Toolbox in Python.</li>
<li><a href="https://www.rdkit.org/">RDKit</a> - Cheminformatics and Machine Learning Software.</li>
<li><a href="https://www.scipy.org/">SciPy</a> - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li>
<li><a href="https://gitlab.com/team-simpy/simpy">SimPy</a> -  A process-based discrete-event simulation framework.</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> - Statistical modeling and econometrics in Python.</li>
<li><a href="https://github.com/sympy/sympy">SymPy</a> - A Python library for symbolic mathematics.</li>
<li><a href="https://github.com/quantopian/zipline">Zipline</a> - A Pythonic algorithmic trading library.</li>
</ul>
<h2 id="search">Search</h2>
<p><em>Libraries and software for indexing and performing search queries on data.</em></p>
<ul>
<li><a href="https://github.com/django-haystack/django-haystack">django-haystack</a> - Modular search for Django.</li>
<li><a href="https://github.com/elastic/elasticsearch-dsl-py">elasticsearch-dsl-py</a> - The official high-level Python client for Elasticsearch.</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">elasticsearch-py</a> - The official low-level Python client for <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>.</li>
<li><a href="https://github.com/django-haystack/pysolr">pysolr</a> - A lightweight Python wrapper for <a href="https://lucene.apache.org/solr/">Apache Solr</a>.</li>
<li><a href="https://whoosh.readthedocs.io/en/latest/">whoosh</a> - A fast, pure Python search engine library.</li>
</ul>
<h2 id="serialization">Serialization</h2>
<p><em>Libraries for serializing complex data types</em></p>
<ul>
<li><a href="https://github.com/marshmallow-code/marshmallow">marshmallow</a> - A lightweight library for converting complex objects to and from simple Python datatypes.</li>
<li><a href="https://github.com/TkTech/pysimdjson">pysimdjson</a> - A Python bindings for <a href="https://github.com/lemire/simdjson">simdjson</a>.</li>
<li><a href="https://github.com/python-rapidjson/python-rapidjson">python-rapidjson</a> - A Python wrapper around <a href="https://github.com/Tencent/rapidjson">RapidJSON</a>.</li>
<li><a href="https://github.com/esnme/ultrajson">ultrajson</a> - A fast JSON decoder and encoder written in C with Python bindings.</li>
</ul>
<h2 id="serverless-frameworks">Serverless Frameworks</h2>
<p><em>Frameworks for developing serverless Python code.</em></p>
<ul>
<li><a href="https://github.com/nficano/python-lambda">python-lambda</a> - A toolkit for developing and deploying Python code in AWS Lambda.</li>
<li><a href="https://github.com/Miserlou/Zappa">Zappa</a> - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li>
</ul>
<h2 id="shell">Shell</h2>
<p><em>Shells based on Python.</em></p>
<ul>
<li><a href="https://github.com/xonsh/xonsh/">xonsh</a> - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li>
</ul>
<h2 id="specific-formats-processing">Specific Formats Processing</h2>
<p><em>Libraries for parsing and manipulating specific text formats.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/jazzband/tablib">tablib</a> - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li>
</ul>
</li>
<li>Office
<ul>
<li><a href="https://github.com/elapouya/python-docx-template">docxtpl</a> - Editing a docx document by jinja2 template</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li>
<li><a href="https://github.com/pyexcel/pyexcel">pyexcel</a> - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a> - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li>
<li><a href="https://github.com/scanny/python-pptx">python-pptx</a> - Python library for creating and updating PowerPoint (.pptx) files.</li>
<li><a href="https://github.com/unoconv/unoconv">unoconv</a> - Convert between any document format supported by LibreOffice/OpenOffice.</li>
<li><a href="https://github.com/jmcnamara/XlsxWriter">XlsxWriter</a> - A Python module for creating Excel .xlsx files.</li>
<li><a href="https://github.com/ZoomerAnalytics/xlwings">xlwings</a> - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li>
<li><a href="https://github.com/python-excel/xlwt">xlwt</a> / <a href="https://github.com/python-excel/xlrd">xlrd</a> - Writing and reading data and formatting information from Excel files.</li>
</ul>
</li>
<li>PDF
<ul>
<li><a href="https://github.com/euske/pdfminer">PDFMiner</a> - A tool for extracting information from PDF documents.</li>
<li><a href="https://github.com/mstamy2/PyPDF2">PyPDF2</a> - A library capable of splitting, merging and transforming PDF pages.</li>
<li><a href="https://www.reportlab.com/opensource/">ReportLab</a> - Allowing Rapid creation of rich PDF documents.</li>
</ul>
</li>
<li>Markdown
<ul>
<li><a href="https://github.com/lepture/mistune">Mistune</a> - Fastest and full featured pure Python parsers of Markdown.</li>
<li><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> - A Python implementation of John Gruber‚Äôs Markdown.</li>
</ul>
</li>
<li>YAML
<ul>
<li><a href="https://pyyaml.org/">PyYAML</a> - YAML implementations for Python.</li>
</ul>
</li>
<li>CSV
<ul>
<li><a href="https://github.com/wireservice/csvkit">csvkit</a> - Utilities for converting to and working with CSV.</li>
</ul>
</li>
<li>Archive
<ul>
<li><a href="https://github.com/mitsuhiko/unp">unp</a> - A command line tool that can unpack archives easily.</li>
</ul>
</li>
</ul>
<h2 id="static-site-generator">Static Site Generator</h2>
<p><em>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</em></p>
<ul>
<li><a href="https://github.com/lektor/lektor">lektor</a> - An easy to use static CMS and blog engine.</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocs</a> - Markdown friendly documentation generator.</li>
<li><a href="https://github.com/sunainapai/makesite">makesite</a> - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li>
<li><a href="https://github.com/getnikola/nikola">nikola</a> - A static website and blog generator.</li>
<li><a href="https://github.com/getpelican/pelican">pelican</a> - Static site generator that supports Markdown and reST syntax.</li>
</ul>
<h2 id="tagging">Tagging</h2>
<p><em>Libraries for tagging items.</em></p>
<ul>
<li><a href="https://github.com/jazzband/django-taggit">django-taggit</a> - Simple tagging for Django.</li>
</ul>
<h2 id="task-queues">Task Queues</h2>
<p><em>Libraries for working with task queues.</em></p>
<ul>
<li><a href="https://docs.celeryproject.org/en/stable/">celery</a> - An asynchronous task queue/job queue based on distributed message passing.</li>
<li><a href="https://github.com/Bogdanp/dramatiq">dramatiq</a> - A fast and reliable background task processing library for Python 3.</li>
<li><a href="https://github.com/coleifer/huey">huey</a> - Little multi-threaded task queue.</li>
<li><a href="https://github.com/pricingassistant/mrq">mrq</a> - A distributed worker task queue in Python using Redis &amp; gevent.</li>
<li><a href="https://github.com/rq/rq">rq</a> - Simple job queues for Python.</li>
</ul>
<h2 id="template-engine">Template Engine</h2>
<p><em>Libraries and tools for templating and lexing.</em></p>
<ul>
<li><a href="https://genshi.edgewall.org/">Genshi</a> - Python templating toolkit for generation of web-aware output.</li>
<li><a href="https://github.com/pallets/jinja">Jinja2</a> - A modern and designer friendly templating language.</li>
<li><a href="https://www.makotemplates.org/">Mako</a> - Hyperfast and lightweight templating for the Python platform.</li>
</ul>
<h2 id="testing">Testing</h2>
<p><em>Libraries for testing codebases and generating test data.</em></p>
<ul>
<li>Testing Frameworks
<ul>
<li><a href="https://github.com/HypothesisWorks/hypothesis">hypothesis</a> - Hypothesis is an advanced Quickcheck style property based testing library.</li>
<li><a href="https://github.com/nose-devs/nose2">nose2</a> - The successor to <code>nose</code>, based on `unittest2.</li>
<li><a href="https://docs.pytest.org/en/latest/">pytest</a> - A mature full-featured Python testing tool.</li>
<li><a href="https://github.com/robotframework/robotframework">Robot Framework</a> - A generic test automation framework.</li>
<li><a href="https://docs.python.org/3/library/unittest.html">unittest</a> - (Python standard library) Unit testing framework.</li>
</ul>
</li>
<li>Test Runners
<ul>
<li><a href="https://github.com/CleanCut/green">green</a> - A clean, colorful test runner.</li>
<li><a href="https://nestorsalceda.github.io/mamba/">mamba</a> - The definitive testing tool for Python. Born under the banner of BDD.</li>
<li><a href="https://tox.readthedocs.io/en/latest/">tox</a> - Auto builds and tests distributions in multiple Python versions</li>
</ul>
</li>
<li>GUI / Web Testing
<ul>
<li><a href="https://github.com/locustio/locust">locust</a> - Scalable user load testing tool written in Python.</li>
<li><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a> - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li>
<li><a href="https://github.com/kiwicom/schemathesis">Schemathesis</a> - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li>
<li><a href="https://pypi.org/project/selenium/">Selenium</a> - Python bindings for <a href="https://www.seleniumhq.org/">Selenium</a> WebDriver.</li>
<li><a href="https://github.com/seatgeek/sixpack">sixpack</a> - A language-agnostic A/B Testing framework.</li>
<li><a href="https://github.com/cobrateam/splinter">splinter</a> - Open source tool for testing web applications.</li>
</ul>
</li>
<li>Mock
<ul>
<li><a href="https://pypi.org/project/doublex/">doublex</a> - Powerful test doubles framework for Python.</li>
<li><a href="https://github.com/spulec/freezegun">freezegun</a> - Travel through time by mocking the datetime module.</li>
<li><a href="https://github.com/patrys/httmock">httmock</a> - A mocking library for requests for Python 2.6+ and 3.2+.</li>
<li><a href="https://github.com/gabrielfalcao/HTTPretty">httpretty</a> - HTTP request mock tool for Python.</li>
<li><a href="https://docs.python.org/3/library/unittest.mock.html">mock</a> - (Python standard library) A mocking and patching library.</li>
<li><a href="https://github.com/mindflayer/python-mocket">mocket</a> - A socket mock framework with gevent/asyncio/SSL support.</li>
<li><a href="https://github.com/getsentry/responses">responses</a> - A utility library for mocking out the requests Python library.</li>
<li><a href="https://github.com/kevin1024/vcrpy">VCR.py</a> - Record and replay HTTP interactions on your tests.</li>
</ul>
</li>
<li>Object Factories
<ul>
<li><a href="https://github.com/FactoryBoy/factory_boy">factory_boy</a> - A test fixtures replacement for Python.</li>
<li><a href="https://github.com/klen/mixer">mixer</a> - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li>
<li><a href="https://github.com/vandersonmota/model_mommy">model_mommy</a> - Creating random fixtures for testing in Django.</li>
</ul>
</li>
<li>Code Coverage
<ul>
<li><a href="https://pypi.org/project/coverage/">coverage</a> - Code coverage measurement.</li>
</ul>
</li>
<li>Fake Data
<ul>
<li><a href="https://github.com/emirozer/fake2db">fake2db</a> - Fake database generator.</li>
<li><a href="https://github.com/joke2k/faker">faker</a> - A Python package that generates fake data.</li>
<li><a href="https://github.com/lk-geimfari/mimesis">mimesis</a> - is a Python library that help you generate fake data.</li>
<li><a href="https://pypi.org/project/radar/">radar</a> - Generate random datetime / time.</li>
</ul>
</li>
</ul>
<h2 id="text-processing">Text Processing</h2>
<p><em>Libraries for parsing and manipulating plain texts.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/chardet/chardet">chardet</a> - Python 2/3 compatible character encoding detector.</li>
<li><a href="https://docs.python.org/3/library/difflib.html">difflib</a> - (Python standard library) Helpers for computing deltas.</li>
<li><a href="https://github.com/LuminosoInsight/python-ftfy">ftfy</a> - Makes Unicode text less broken and more consistent automagically.</li>
<li><a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a> - Fuzzy String Matching.</li>
<li><a href="https://github.com/ztane/python-Levenshtein/">Levenshtein</a> - Fast computation of Levenshtein distance and string similarity.</li>
<li><a href="https://github.com/vinta/pangu.py">pangu.py</a> - Paranoid text spacing.</li>
<li><a href="https://github.com/pwaller/pyfiglet">pyfiglet</a> - An implementation of figlet written in Python.</li>
<li><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a> - Convert Chinese hanzi (Êº¢Â≠ó) to pinyin (ÊãºÈü≥).</li>
<li><a href="https://github.com/orsinium/textdistance">textdistance</a> - Compute distance between sequences with 30+ algorithms.</li>
<li><a href="https://pypi.org/project/Unidecode/">unidecode</a> - ASCII transliterations of Unicode text.</li>
</ul>
</li>
<li>Slugify
<ul>
<li><a href="https://github.com/dimka665/awesome-slugify">awesome-slugify</a> - A Python slugify library that can preserve unicode.</li>
<li><a href="https://github.com/un33k/python-slugify">python-slugify</a> - A Python slugify library that translates unicode to ASCII.</li>
<li><a href="https://github.com/mozilla/unicode-slugify">unicode-slugify</a> - A slugifier that generates unicode slugs with Django as a dependency.</li>
</ul>
</li>
<li>Unique identifiers
<ul>
<li><a href="https://github.com/davidaurelio/hashids-python">hashids</a> - Implementation of <a href="https://hashids.org">hashids</a> in Python.</li>
<li><a href="https://github.com/skorokithakis/shortuuid">shortuuid</a> - A generator library for concise, unambiguous and URL-safe UUIDs.</li>
</ul>
</li>
<li>Parser
<ul>
<li><a href="https://github.com/dabeaz/ply">ply</a> - Implementation of lex and yacc parsing tools for Python.</li>
<li><a href="https://pygments.org/">pygments</a> - A generic syntax highlighter.</li>
<li><a href="https://github.com/pyparsing/pyparsing">pyparsing</a> - A general purpose framework for generating parsers.</li>
<li><a href="https://github.com/derek73/python-nameparser">python-nameparser</a> - Parsing human names into their individual components.</li>
<li><a href="https://github.com/daviddrysdale/python-phonenumbers">python-phonenumbers</a> - Parsing, formatting, storing and validating international phone numbers.</li>
<li><a href="https://github.com/selwin/python-user-agents">python-user-agents</a> - Browser user agent parser.</li>
<li><a href="https://github.com/andialbrecht/sqlparse">sqlparse</a> - A non-validating SQL parser.</li>
</ul>
</li>
</ul>
<h2 id="third-party-apis">Third-party APIs</h2>
<p><em>Libraries for accessing third party services APIs. Also see <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>.</em></p>
<ul>
<li><a href="https://libcloud.apache.org/">apache-libcloud</a> - One Python library for all clouds.</li>
<li><a href="https://github.com/boto/boto3">boto3</a> - Python interface to Amazon Web Services.</li>
<li><a href="https://github.com/istrategylabs/django-wordpress">django-wordpress</a> - WordPress models and views for Django.</li>
<li><a href="https://github.com/mobolic/facebook-sdk">facebook-sdk</a> - Facebook Platform Python SDK.</li>
<li><a href="https://github.com/google/google-api-python-client">google-api-python-client</a> - Google APIs Client Library for Python.</li>
<li><a href="https://github.com/burnash/gspread">gspread</a> - Google Spreadsheets Python API.</li>
<li><a href="https://github.com/ryanmcgrath/twython">twython</a> - A Python wrapper for the Twitter API.</li>
</ul>
<h2 id="url-manipulation">URL Manipulation</h2>
<p><em>Libraries for parsing URLs.</em></p>
<ul>
<li><a href="https://github.com/gruns/furl">furl</a> - A small Python library that makes parsing and manipulating URLs easy.</li>
<li><a href="https://github.com/codeinthehole/purl">purl</a> - A simple, immutable URL class with a clean API for interrogation and manipulation.</li>
<li><a href="https://github.com/ellisonleao/pyshorteners">pyshorteners</a> - A pure Python URL shortening lib.</li>
<li><a href="https://github.com/marshmallow-code/webargs">webargs</a> - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li>
</ul>
<h2 id="video">Video</h2>
<p><em>Libraries for manipulating video and GIFs.</em></p>
<ul>
<li><a href="https://zulko.github.io/moviepy/">moviepy</a> - A module for script-based movie editing with many formats, including animated GIFs.</li>
<li><a href="https://github.com/aizvorski/scikit-video">scikit-video</a> - Video processing routines for SciPy.</li>
<li><a href="https://github.com/abhiTronix/vidgear">vidgear</a> - Most Powerful multi-threaded Video Processing framework.</li>
</ul>
<h2 id="web-asset-management">Web Asset Management</h2>
<p><em>Tools for managing, compressing and minifying website assets.</em></p>
<ul>
<li><a href="https://github.com/django-compressor/django-compressor">django-compressor</a> - Compresses linked and inline JavaScript or CSS into a single cached file.</li>
<li><a href="https://github.com/jazzband/django-pipeline">django-pipeline</a> - An asset packaging library for Django.</li>
<li><a href="https://github.com/jschneier/django-storages">django-storages</a> - A collection of custom storage back ends for Django.</li>
<li><a href="https://www.fanstatic.org/en/latest/">fanstatic</a> - Packages, optimizes, and serves static file dependencies as Python packages.</li>
<li><a href="https://wimleers.com/fileconveyor">fileconveyor</a> - A daemon to detect and sync files to CDNs, S3 and FTP.</li>
<li><a href="https://github.com/miracle2k/flask-assets">flask-assets</a> - Helps you integrate webassets into your Flask app.</li>
<li><a href="https://github.com/miracle2k/webassets">webassets</a> - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li>
</ul>
<h2 id="web-content-extracting">Web Content Extracting</h2>
<p><em>Libraries for extracting web contents.</em></p>
<ul>
<li><a href="https://github.com/Alir3z4/html2text">html2text</a> - Convert HTML to Markdown-formatted text.</li>
<li><a href="https://github.com/michaelhelmick/lassie">lassie</a> - Web Content Retrieval for Humans.</li>
<li><a href="https://github.com/coleifer/micawber">micawber</a> - A small library for extracting rich content from URLs.</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> - News extraction, article extraction and content curation in Python.</li>
<li><a href="https://github.com/buriy/python-readability">python-readability</a> - Fast Python port of arc90&rsquo;s readability tool.</li>
<li><a href="https://github.com/psf/requests-html">requests-html</a> - Pythonic HTML Parsing for Humans.</li>
<li><a href="https://github.com/miso-belica/sumy">sumy</a> - A module for automatic summarization of text documents and HTML pages.</li>
<li><a href="https://github.com/deanmalmgren/textract">textract</a> - Extract text from any document, Word, PowerPoint, PDFs, etc.</li>
<li><a href="https://github.com/gaojiuli/toapi">toapi</a> - Every web site provides APIs.</li>
</ul>
<h2 id="web-crawling">Web Crawling</h2>
<p><em>Libraries to automate web scraping.</em></p>
<ul>
<li><a href="https://github.com/chineking/cola">cola</a> - A distributed crawling framework.</li>
<li><a href="https://pythonhosted.org/feedparser/">feedparser</a> - Universal feed parser.</li>
<li><a href="https://github.com/lorien/grab">grab</a> - Site scraping framework.</li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup">MechanicalSoup</a> - A Python library for automating interaction with websites.</li>
<li><a href="https://github.com/scrapinghub/portia">portia</a> - Visual scraping for Scrapy.</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> - A powerful spider system.</li>
<li><a href="https://github.com/jmcarp/robobrowser">robobrowser</a> - A simple, Pythonic library for browsing the web without a standalone web browser.</li>
<li><a href="https://scrapy.org/">scrapy</a> - A fast high-level screen scraping and web crawling framework.</li>
</ul>
<h2 id="web-frameworks">Web Frameworks</h2>
<p><em>Traditional full stack web frameworks. Also see <a href="https://github.com/vinta/awesome-python#restful-api">RESTful API</a>.</em></p>
<ul>
<li>Synchronous
<ul>
<li><a href="https://www.djangoproject.com/">Django</a> - The most popular web framework in Python.
<ul>
<li><a href="https://github.com/shahraizali/awesome-django">awesome-django</a></li>
<li><a href="https://github.com/wsvincent/awesome-django">awesome-django</a></li>
</ul>
</li>
<li><a href="https://flask.pocoo.org/">Flask</a> - A microframework for Python.
<ul>
<li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a></li>
</ul>
</li>
<li><a href="https://pylonsproject.org/">Pyramid</a> - A small, fast, down-to-earth, open source Python web framework.
<ul>
<li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a></li>
</ul>
</li>
<li><a href="https://github.com/MasoniteFramework/masonite">Masonite</a> - The modern and developer centric Python web framework.</li>
</ul>
</li>
<li>Asynchronous
<ul>
<li><a href="https://www.tornadoweb.org/en/latest/">Tornado</a> - A web framework and asynchronous networking library.</li>
</ul>
</li>
</ul>
<h2 id="websocket">WebSocket</h2>
<p><em>Libraries for working with WebSocket.</em></p>
<ul>
<li><a href="https://github.com/crossbario/autobahn-python">autobahn-python</a> - WebSocket &amp; WAMP for Python on Twisted and <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>.</li>
<li><a href="https://github.com/django/channels">channels</a> - Developer-friendly asynchrony for Django.</li>
<li><a href="https://github.com/aaugustin/websockets">websockets</a> - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li>
</ul>
<h2 id="wsgi-servers">WSGI Servers</h2>
<p><em>WSGI-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/jonashaag/bjoern">bjoern</a> - Asynchronous, very fast and written in C.</li>
<li><a href="https://github.com/benoitc/gunicorn">gunicorn</a> - Pre-forked, ported from Ruby&rsquo;s Unicorn project.</li>
<li><a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> - A project aims at developing a full stack for building hosting services, written in C.</li>
<li><a href="https://github.com/Pylons/waitress">waitress</a> - Multi-threaded, powers Pyramid.</li>
<li><a href="https://github.com/pallets/werkzeug">werkzeug</a> - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li>
</ul>
<h1 id="resources">Resources</h1>
<p>Where to discover learning resources or new Python libraries.</p>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/fluent-python/9781491946237/">Fluent Python</a></li>
<li><a href="https://greenteapress.com/wp/think-python-2e/">Think Python</a></li>
</ul>
<h2 id="websites">Websites</h2>
<ul>
<li>Tutorials
<ul>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://www.pythoncheatsheet.org/">Python Cheatsheet</a></li>
<li><a href="https://realpython.com">Real Python</a></li>
<li><a href="https://docs.python-guide.org/">The Hitchhiker‚Äôs Guide to Python</a></li>
<li><a href="https://github.com/huangsam/ultimate-python">Ultimate Python study guide</a></li>
</ul>
</li>
<li>Libraries
<ul>
<li><a href="https://python.libhunt.com/">Awesome Python @LibHunt</a></li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://python.zeef.com/alan.richmond">Python ZEEF</a></li>
<li><a href="https://news.python.sc/">Pythonic News</a></li>
<li><a href="https://github.com/satwikkansal/wtfpython">What the f*ck Python!</a></li>
</ul>
</li>
</ul>
<h2 id="newsletters">Newsletters</h2>
<ul>
<li><a href="https://python.libhunt.com/newsletter">Awesome Python Newsletter</a></li>
<li><a href="https://pycoders.com/">Pycoder&rsquo;s Weekly</a></li>
<li><a href="https://realpython.com/python-tricks/">Python Tricks</a></li>
<li><a href="https://www.pythonweekly.com/">Python Weekly</a></li>
</ul>
<h2 id="podcasts">Podcasts</h2>
<ul>
<li><a href="https://djangochat.com/">Django Chat</a></li>
<li><a href="https://podcastinit.com/">Podcast.__init__</a></li>
<li><a href="https://pythonbytes.fm">Python Bytes</a></li>
<li><a href="https://runninginproduction.com/">Running in Production</a></li>
<li><a href="https://talkpython.fm/">Talk Python To Me</a></li>
<li><a href="https://testandcode.com/">Test and Code</a></li>
<li><a href="https://realpython.com/podcasts/rpp/">The Real Python Podcast</a></li>
</ul>
<h1 id="contributing">Contributing</h1>
<p>Your contributions are always welcome! Please take a look at the <a href="https://github.com/vinta/awesome-python/blob/master/CONTRIBUTING.md">contribution guidelines</a> first.</p>
<p>I will keep some pull requests open if I&rsquo;m not sure whether those libraries are awesome, you could <a href="https://github.com/vinta/awesome-python/pulls">vote for them</a> by adding &#x1f44d; to them. Pull requests will be merged when their votes reach <strong>20</strong>.</p>
<hr>
<p>If you have any question about this opinionated list, do not hesitate to contact me <a href="https://twitter.com/VintaChen">@VintaChen</a> on Twitter or open an issue on GitHub.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Lists of Technical Interview Questions</title>
      <link>https://samirpaulb.github.io/posts/lists-of-technical-interview-questions/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/lists-of-technical-interview-questions/</guid>
      <description>Lists of Technical Interview Questions</description>
      <content:encoded><![CDATA[<blockquote>
<p>A curated list of lists of technical interview questions.</p>
</blockquote>
<h3 id="table-of-contents">Table of Contents</h3>
<ul>
<li>
<p><a href="#programming-languagesframeworksplatforms">Programming Languages/Frameworks/Platforms</a></p>
<ul>
<li><a href="#android">Android</a></li>
<li><a href="#angularjs">AngularJS</a></li>
<li><a href="#angular">Angular</a></li>
<li><a href="#backbonejs">BackboneJS</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#c-1">C</a></li>
<li><a href="#c-2">C‚ôØ</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#css">CSS</a></li>
<li><a href="#cucumber">Cucumber</a></li>
<li><a href="#django">Django</a></li>
<li><a href="#docker">Docker</a></li>
<li><a href="#elastic">Elastic</a></li>
<li><a href="#emberjs">EmberJS</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#graphql">GraphQl</a></li>
<li><a href="#html">HTML</a></li>
<li><a href="#ionic">Ionic</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#front-end-build-tools">Front-end build tools</a></li>
<li><a href="#knockoutjs">KnockoutJS</a></li>
<li><a href="#less">Less</a></li>
<li><a href="#lisp">Lisp</a></li>
<li><a href="#nodejs">NodeJS</a></li>
<li><a href="#objective-c">Objective-C</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#reactjs">ReactJS</a></li>
<li><a href="#ruby-on-rails">Rails</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#sass">Sass</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#spark">Spark</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vuejs">Vue.js</a></li>
<li><a href="#wordpress">Wordpress</a></li>
<li><a href="#typescript">TypeScript</a></li>
</ul>
</li>
<li>
<p><a href="#database-technologies">Database technologies</a></p>
<ul>
<li><a href="#cassandra">Cassandra</a></li>
<li><a href="#microsoft-access">Microsoft Access</a></li>
<li><a href="#mongodb">MongoDB</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#neo4j">Neo4j</a></li>
<li><a href="#oracle">Oracle</a></li>
<li><a href="#postgres">Postgres</a></li>
<li><a href="#sql">SQL</a></li>
<li>SQL Lite</li>
</ul>
</li>
<li>
<p><a href="#caching-technologies">Caching technologies</a></p>
<ul>
<li><a href="#memcached">Memcached</a></li>
<li><a href="#redis">Redis</a></li>
</ul>
</li>
<li>
<p><a href="#os">OS</a></p>
<ul>
<li><a href="#linux">Linux</a></li>
<li><a href="#windows">Windows</a></li>
</ul>
</li>
<li>
<p><a href="#algorithms">Algorithms</a></p>
</li>
<li>
<p><a href="#blockchain">Blockchain</a></p>
</li>
<li>
<p><a href="#coding-exercises">Coding exercises</a></p>
</li>
<li>
<p><a href="#comprehensive-lists">Comprehensive lists</a></p>
</li>
<li>
<p><a href="#design-patterns">Design patterns</a></p>
</li>
<li>
<p><a href="#data-structures">Data structures</a></p>
</li>
<li>
<p><a href="#networks">Networks</a></p>
</li>
<li>
<p><a href="#security">Security</a></p>
</li>
<li>
<p><a href="#data-science">Data Science</a></p>
</li>
</ul>
<h2 id="programming-languagesframeworksplatforms">Programming Languages/Frameworks/Platforms</h2>
<h3 id="android">Android</h3>
<ul>
<li><a href="https://www.careerride.com/android-interview-questions.aspx">10 Android interview question answers for Freshers</a></li>
<li><a href="https://www.toptal.com/android/interview-questions">20 Essential Android Interview Questions from Toptal</a></li>
<li><a href="https://adevait.com/android/interview-questions">25 Essential Android Interview Questions from Adeva</a></li>
<li><a href="https://www.quora.com/What-are-good-job-interview-questions-for-an-Android-developer">A couple of Android questions posted by Quora users</a></li>
<li><a href="https://www.tutorialspoint.com/android/android_interview_questions.htm">A great list of Android interview questions covering all the aspects of this career</a></li>
<li><a href="https://github.com/derekargueta/Android-Interview-Questions">Collection of Android and Java related questions and topics, including general developer questions, Java core, Data structures, Build Tools, Programming Paradigms, Core Android, Databases and etc</a></li>
<li><a href="https://medium.com/@neteinstein/not-another-android-interviews-article-the-questions-3dedafa30bec">Collection of Android and Java questions divided by experience</a></li>
<li><a href="https://github.com/mindash/android-structured-interview">RocketSkill App Android Interview Questions</a></li>
<li><a href="https://github.com/anitaa1990/Android-Cheat-sheet">Android cheat sheet: Coding program, Data structure, Android and Java interview questions with answers and categorized by topics</a></li>
<li><a href="https://www.andreasschrade.com/2017/02/23/android-interview-questions/">Android Interview Questions And Answers From Beginner To Advanced</a></li>
<li><a href="https://github.com/mohsenoid/Android-Interview-Questions">Interview Questions for Senior Android Developers</a></li>
<li><a href="https://www.interviewbit.com/android-interview-questions/">35+ Android Interview Questions</a></li>
</ul>
<h3 id="angularjs">AngularJS</h3>
<ul>
<li><a href="https://www.toptal.com/angular-js/interview-questions">12 Essential AngularJS Interview Questions from Toptal</a></li>
<li><a href="https://github.com/gdi2290/ngExam">An AngularJS exam with questions from beginner to expert by @gdi2290 from @AngularClass</a></li>
<li><a href="https://www.codementor.io/angularjs/tutorial/angularjs-interview-questions-sample-answers">29 AngularJS Interview Questions ‚Äì Can You Answer Them All? Great Article from Codementor</a></li>
<li><a href="https://www.web-technology-experts-notes.in/2014/11/angularjs-interview-questions-and-answers-for-experienced.html">AngularJS interview questions and answers for experienced developers</a></li>
<li><a href="https://www.tutorialspoint.com/angularjs/angularjs_interview_questions.htm">AngularJS Interview Questions which have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of AngularJS</a></li>
<li><a href="https://www.codeproject.com/Articles/891718/AngularJS-Interview-Questions-and-Answers">This article discusses the top 50 Most occurred AngularJS interview question with answers</a></li>
<li><a href="https://career.guru99.com/top-25-angular-js-interview-questions/">Top 25 Angularjs Interview Questions and Quiz</a></li>
<li><a href="https://www.techbeamers.com/latest-angularjs-interview-questions-answers/">100 AngularJS Interview Questions - Quick Refresher</a></li>
</ul>
<h3 id="angular">Angular</h3>
<ul>
<li><a href="https://github.com/Yonet/Angular-Interview-Questions">A list of helpful Angular related questions you can use to interview potential candidates, test yourself or completely ignore</a></li>
<li><a href="https://www.onlineinterviewquestions.com/angular2-interview-questions/">Angular 2 Interview Questions</a></li>
<li><a href="https://github.com/sudheerj/angular-interview-questions">List of 300 Angular Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/angular-interview-questions/">Angular Interview Questions (2020)</a></li>
<li><a href="https://hackr.io/blog/angular-interview-questions">Top Angular Interview Questions and Answers in 2021</a></li>
</ul>
<h3 id="backbonejs">BackboneJS</h3>
<ul>
<li><a href="https://www.toptal.com/backbone-js/interview-questions">8 Essential Backbonejs Interview Questions from Toptal</a></li>
<li><a href="https://www.web-technology-experts-notes.in/2015/01/backbone-js-interview-questions-and-answers.html">Backbonejs Interview Questions And Answers from web technology experts notes</a></li>
<li><a href="https://career.guru99.com/top-25-backbone-js-interview-questions/">Top 25 Backbone.js interview questions</a></li>
</ul>
<h3 id="c">C++</h3>
<ul>
<li><a href="https://www.sanfoundry.com/cplusplus-interview-questions-answers/">1000+ Multiple Choice Questions &amp; Answers in C++ with explanations</a></li>
<li><a href="https://www.careerride.com/C++-Interview-questions-Answer.aspx">200 C++ interview questions and answers</a></li>
<li><a href="https://www.toptal.com/c-plus-plus/interview-questions">24 Essential C++ Interview Questions from Toptal</a></li>
<li><a href="https://www.geekinterview.com/Interview-Questions/Languages/C-Plus-Plus">C++ Interview Questions from GeekInterview</a></li>
<li><a href="https://www.geeksforgeeks.org/c-plus-plus/">C++ Programming Q&amp;A and quizzes from computer science portal for geeks</a></li>
<li><a href="https://www.indiabix.com/cpp-programming/questions-and-answers/">C++ Programming Questions and Answers related to such topics as OOPs concepts, Object and Classes, Functions, Constructors and Destructors, Inheritance and etc</a></li>
<li><a href="https://github.com/haoel/leetcode">LeetCode Problems&rsquo; Solutions written in C++</a></li>
</ul>
<h3 id="c-1">C</h3>
<ul>
<li><a href="https://www.cquestions.com/2010/10/c-interview-questions-and-answers.html">Basic C language technical frequently asked interview questions and answers It includes data structures, pointers interview questions and answers for experienced</a></li>
<li><a href="https://www.indiabix.com/technical/c/">C Programming Interview Questions and Answers for such topics as Bits and Bytes, Preprocessors, Functions, Strings, Language basics and etc</a></li>
<li><a href="https://www.tutorialspoint.com/cprogramming/cprogramming_interview_questions.htm">C Programming Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of C Programming</a></li>
<li><a href="https://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-1/">First set of commonly asked C programming interview questions from computer science portal for geeks</a></li>
<li><a href="https://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-2/">Second set of commonly asked C programming interview questions from computer science portal for geeks</a></li>
<li><a href="https://www.toptal.com/c/interview-questions">9 Essential C Interview Questions with answers</a></li>
<li><a href="https://www.interviewbit.com/c-interview-questions/">Top C Interview Questions and Answers</a></li>
</ul>
<h3 id="c-2">C#</h3>
<ul>
<li><a href="https://www.toptal.com/c-sharp/interview-questions">15 Essential C# Interview Question from Toptal</a></li>
<li><a href="https://www.dotnetfunda.com/interviews/cat/6/csharp">C# interview questions from dotnetfunda.com</a></li>
<li><a href="https://career.guru99.com/top-50-c-sharp-interview-questions-answers/">Top 50 C# Interview Questions &amp; Answers</a></li>
<li><a href="https://www.techbeamers.com/csharp-coding-interview-questions-developers/">50 C# Coding Interview Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/csharp-oops-interview-questions-answers/">20 C# OOPS Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/c-sharp-interview-questions/">30+ C# Interview Questions</a></li>
</ul>
<h3 id="net">.NET</h3>
<ul>
<li><a href="https://www.careerride.com/ASPNet-Questions.aspx">300 ASPNET interview questions and answers</a></li>
<li><a href="https://www.talkingdotnet.com/asp-net-core-interview-questions/">ASP.NET Core Interview Questions</a></li>
<li><a href="https://www.indiabix.com/technical/dotnet/">Great list of NET interview questions covering all the NET platform topics</a></li>
<li><a href="https://www.dotnetcurry.com/dotnetinterview/70/dotnet-interview-questions-answers-beginners">NET Interview Questions and Answers for Beginners which consists of the most frequently asked questions in NET This list of 100+ questions and answers gauge your familiarity with the NET platform</a></li>
<li><a href="https://stackoverflow.com/questions/365489/questions-every-good-net-developer-should-be-able-to-answer">Questions gathered by community of the StackOverflow</a></li>
<li><a href="https://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx">What Great NET Developers Ought To Know (More NET Interview Questions)</a></li>
</ul>
<h3 id="clojure">Clojure</h3>
<ul>
<li><a href="https://www.learningclojure.com/2014/05/fizz-buzz-interview-question.html">Classic &lsquo;Fizz Buzz&rsquo; interview question for Clojure developers</a></li>
<li><a href="https://ita2zguide.blogspot.com.by/p/cc.html">Clojure Interview Questions for experienced devs</a></li>
<li><a href="https://github.com/dpetrovics/coding-exercises">Coding exercises in Clojure, handy practice for technical interview questions</a></li>
<li><a href="https://www.reddit.com/r/Clojure/comments/34qhha/clojure_coding_job_interview_experience/">Experience and questions from Clojure developer interview collected by Reddit users</a></li>
<li><a href="https://github.com/DerekCuevas/interview-cake-clj">Interview cake Clojure solutions</a></li>
</ul>
<h3 id="css">CSS</h3>
<ul>
<li><a href="https://www.careerride.com/Interview-Questions-CSS.aspx">CSS interview questions and answers for freshers and experienced candidates Also there you can find CSS online practice tests to fight written tests and certification exams on CSS</a></li>
<li><a href="https://www.techrepublic.com/blog/software-engineer/css-interview-questions-and-answers/">Development hiring managers and potential interviewees may find there sample CSS proficiency interview Q&amp;As and code snippets useful</a></li>
<li><a href="https://css-tricks.com/interview-questions-css/">Interview Questions and Exercises About CSS</a></li>
<li><a href="https://career.guru99.com/top-50-csscascading-style-sheet-interview-questions/">Top 50 CSS(Cascading Style Sheet) Interview Questions covering the most of tricky CSS moments</a></li>
<li><a href="https://frontendinterviewhandbook.com/css-questions/">Front End Interview Handbook - CSS Questions and Answers</a></li>
</ul>
<h3 id="cucumber">Cucumber</h3>
<ul>
<li><a href="https://ratedr05.wordpress.com/2017/09/22/cucumber-interview-questions/">Cucumber Web Application BDD Sample Interview Questions</a></li>
<li><a href="https://watir.com/simple-cucumber-watir-page-object-pattern-framework/">Guide to building a simple Cucumber + Watir page object pattern framework</a></li>
</ul>
<h3 id="django">Django</h3>
<ul>
<li><a href="https://insights.dice.com/2014/04/30/interview-questions-pythondjango-developers/">Some abstract interview questions for Python/Django developers</a></li>
<li><a href="https://www.ilian.io/django-interview-questions/">Some Django basic interview questions to establish the basic level of the candidates</a></li>
<li><a href="https://career.guru99.com/top-16-django-interview-questions/">Top 16 Django Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="docker">Docker</h3>
<ul>
<li><a href="https://mindmajix.com/docker-interview-questions">Docker Interview Questions</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/docker-interview-questions/">Top Docker Interview Questions You Must Prepare In 2019</a></li>
<li><a href="https://intellipaat.com/interview-question/docker-interview-questions/">Top Docker Interview Questions And Answers</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/docker-software-interview-questions.html">DOCKER (SOFTWARE) INTERVIEW QUESTIONS &amp; ANSWERS</a></li>
<li><a href="https://www.fullstack.cafe/blog/docker-interview-questions-and-answers">30 Docker Interview Questions and Answers in 2019</a></li>
<li><a href="https://www.interviewbit.com/docker-interview-questions/">Docker Interview Questions &amp; Answers</a></li>
<li><a href="https://www.wissenhive.com/blogs/top-50-docker-interview-questions-and-answers">Top 50 Docker Interview Questions &amp; Answers</a></li>
<li><a href="https://www.techgeekbuzz.com/top-docker-interview-questions/">Top 50+ Docker Interview Questions and Answers in 2021</a></li>
</ul>
<h3 id="elastic">Elastic</h3>
<ul>
<li><a href="https://logit.io/blog/post/the-top-50-elk-stack-and-elasticsearch-interview-questions">Top Elastic Stack Interview Questions</a></li>
</ul>
<h3 id="emberjs">EmberJS</h3>
<ul>
<li><a href="https://www.toptal.com/emberjs/interview-questions">8 Essential Emberjs Interview Questions from Toptal</a></li>
<li><a href="https://career.guru99.com/top-25-ember-js-interview-questions/">Top 25 Emberjs Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="erlang">Erlang</h3>
<ul>
<li><a href="https://career.guru99.com/top-22-erlang-interview-questions/">Top 22 Erlang Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="golang">Golang</h3>
<ul>
<li><a href="https://github.com/mrekucci/epi">Solutions for Elements of Programming Interviews problems written in Golang</a></li>
<li><a href="https://github.com/efischer19/golang_ctci">Solutions for some basic coding interview tasks written in Go</a></li>
<li><a href="https://career.guru99.com/top-20-go-programming-interview-questions/">Top 20 GO Programming Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="graphql">GraphQl</h3>
<ul>
<li><a href="https://www.fullstack.cafe/blog/5-graphql-interview-questions-you-should-know">8 GraphQl Interview Questions To Know</a></li>
<li><a href="https://www.howtographql.com/advanced/5-common-questions/">How to GraphQl - Common Questions</a></li>
</ul>
<h3 id="html">HTML</h3>
<ul>
<li><a href="https://www.sitepoint.com/10-typical-html-interview-exercises/">10 Typical HTML Interview Exercises from SitePoint.com</a></li>
<li><a href="https://www.toptal.com/html5/interview-questions">16 Essential HTML5 Interview Questions from Toptal</a></li>
<li><a href="https://www.codeproject.com/Articles/702051/important-HTML-Interview-questions-with-answe">40 important HTML 5 Interview questions with answers</a></li>
<li><a href="https://www.careerride.com/Interview-Questions-HTML.aspx">HTML interview questions and answers for freshers and experienced candidates Also find HTML online practice tests to fight written tests and certification exams on HTML</a></li>
<li><a href="https://career.guru99.com/top-50-html-interview-questions/">Top 50 HTML Interview Questions for both freshers and experienced developers</a></li>
<li><a href="https://www.javatpoint.com/html-interview-questions">Common HTML interview questions for freshers</a></li>
<li><a href="https://frontendinterviewhandbook.com/html-questions/">Front End Interview Handbook - HTML Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/latest-html-interview-questions/">30 HTML Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/html-interview-questions/">30+ HTML Interview Questions (2021)</a></li>
</ul>
<h3 id="ionic">Ionic</h3>
<ul>
<li><a href="https://www.codeandyou.com/p/ionic-interview-questions.html">23 Beginner Level Ionic Framework Questions</a></li>
<li><a href="https://www.toptal.com/ionic/interview-questions">12 Essential Ionic Interview Questions</a></li>
<li><a href="https://www.javatpoint.com/ionic-interview-questions">45 Ionic Interview Questions</a></li>
<li><a href="https://www.maheshbhusanoor.com/article/ionic-interview-questions-answers.html">Most Asked Ionic Interview Questions</a></li>
</ul>
<h3 id="ios">iOS</h3>
<ul>
<li><a href="https://www.toptal.com/ios/interview-questions">14 Essential iOS Interview Questions from Toptal</a></li>
<li><a href="https://www.codementor.io/ios/tutorial/ios-interview-tips-questions-answers-objective-c">20 iOS Developer Interview Questions and Answers for getting you ready for your interview</a></li>
<li><a href="https://adevait.com/ios/interview-questions">25 Essential iOS Interview Questions from Adeva</a></li>
<li><a href="https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions">A small guide to help those looking to hire a developer or designer for iOS work While tailored for iOS, many questions could be used for Android developers or designers as well A great self-test if you&rsquo;re looking to keep current or practice for your own interview</a></li>
<li><a href="https://www.raywenderlich.com/53962/ios-interview-questions">All you need to know about iOS technical interview including some tips for preparing, questions and some coding exercises</a></li>
<li><a href="https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html">Interview Questions for iOS and Mac Developers from the CEO of Black Pixel</a></li>
<li><a href="https://www.geekinterview.com/Interview-Questions/iOS">iOS Interview Questions and Answers including such topics as Development Basics, App states and multitasking, App states, Core app objects</a></li>
<li><a href="https://m.smartcloud.io/ios-interview-questions-for-senior-developers-in-2017-a94cc81c8205">iOS Interview Questions For Senior Developers</a></li>
<li><a href="https://medium.com/ios-os-x-development/ios-interview-questions-13840247a57a">50 iOS Interview Questions And Answers 1</a></li>
<li><a href="https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-2-45f952230b9f">50 iOS Interview Questions And Answers Part 2</a></li>
<li><a href="https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-3-3fad146b6c3d">50 iOS Interview Questions And Answers Part 3</a></li>
<li><a href="https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-4-6f26b26341a">50 iOS Interview Questions And Answers Part 4</a></li>
<li><a href="https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-5-de6241374a8f">50 iOS Interview Questions And Answers Part 5</a></li>
<li><a href="https://www.upwork.com/i/interview-questions/ios/">10 iOS interview questions and answers</a></li>
<li><a href="https://github.com/9magnets/iOS-Developer-and-Designer-Interview-Questions#tech">iOS Developer and Designer Interview Questions</a></li>
<li><a href="https://www.thecrazyprogrammer.com/2015/11/ios-interview-questions-and-answers.html">IOS Interview Questions and Answers</a></li>
<li><a href="https://ichuiphonedev.blogspot.com/2014/05/iphone-latest-interview-questions-and.html">iOS Interview Questions For Beginners</a></li>
<li><a href="https://github.com/Babylonpartners/ios-playbook/blob/master/Interview/questions.md">Babylon iOS Interview Questions</a></li>
<li><a href="https://github.com/mindash/iOS-structured-interview">RocketSkill App iOS Interview Questions</a></li>
<li><a href="https://medium.com/flawless-app-stories/static-vs-dynamic-dispatch-in-swift-a-decisive-choice-cece1e872d">iOS Static vs Dynamic Dispatch</a></li>
</ul>
<h3 id="java">Java</h3>
<ul>
<li><a href="https://onurdesk.com/category/interview/interview-program-java/">List of Java programs for interview Categoriwise</a></li>
<li><a href="https://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html">115 Java Interview Questions and Answers ‚Äì The ULTIMATE List</a></li>
<li><a href="https://www.codementor.io/java/tutorial/java-interview-sample-questions-answers">37 Java Interview Questions to Practice With from Codementor</a></li>
<li><a href="https://www.toptal.com/java/interview-questions">21 Essential Java Interview Questions</a></li>
<li><a href="https://www.janbasktraining.com/blog/core-java-interview-questions-answers/">Top 30 Core Java Interview Questions</a></li>
<li><a href="https://adevait.com/java/interview-questions">29 Essential Java Interview Questions from Adeva</a></li>
<li><a href="https://github.com/svozniuk/java-interviews">A collection of Java interview questions and answers to them</a></li>
<li><a href="https://github.com/donbeave/interview">Data Structures and Algorithms in Java which can be useful in interview process</a></li>
<li><a href="https://blog.udemy.com/java-interview-questions/">Java Interview Questions: How to crack the TOP 15 questions</a></li>
<li><a href="https://www.javatpoint.com/corejava-interview-questions">300 Core Java Interview Questions</a></li>
<li><a href="https://java67.blogspot.com.by/2012/09/top-10-tricky-java-interview-questions-answers.html">Top 10 Tricky Java interview questions and Answers</a></li>
<li><a href="https://javahungry.blogspot.com/2013/06/top-25-most-frequently-asked-core-java.html">Top 25 Most Frequently Asked Interview Core Java Interview Questions And Answers</a></li>
<li><a href="https://java67.blogspot.sg/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html">Top 40 Core Java Interview Questions Answers from Telephonic Round</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/spring-interview-questions/">Top 50 Spring Interview Questions You Must Prepare For In 2020</a></li>
<li><a href="https://www.journaldev.com/2696/spring-interview-questions-and-answers">Spring Interview Questions And Answers</a></li>
<li><a href="https://www.interviewcake.com/java-interview-questions">Interview Cake Java Interview Questions</a></li>
<li><a href="https://www.techbeamers.com/java-interview-questions/">Java Interview Questions &amp; Quizzes</a></li>
<li><a href="https://fdk.codes/some-java-interview-questions/">Essetial Java Interview Questions</a></li>
<li><a href="https://www.interviewbit.com/java-interview-questions/">Fundamental Java Interview Questions</a></li>
</ul>
<h3 id="javascript">JavaScript</h3>
<ul>
<li><a href="https://github.com/ignacio-chiazzo/Algorithms-Leetcode-Javascript">Practice common algorithms using JavaScript</a></li>
<li><a href="https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95">10 Interview Questions Every JavaScript Developer Should Know</a></li>
<li><a href="https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers">21 Essential JavaScript Interview Questions from best mentors all over the world</a></li>
<li><a href="https://adevait.com/javascript-developers/interview-questions">20 Essential JavaScript Interview Questions from Adeva</a></li>
<li><a href="https://www.toptal.com/javascript/interview-questions">37 Essential JavaScript Interview Questions from Toptal</a></li>
<li><a href="https://www.sitepoint.com/5-javascript-interview-exercises/">5 More JavaScript Interview Exercises</a></li>
<li><a href="https://www.sitepoint.com/5-typical-javascript-interview-exercises/">5 Typical JavaScript Interview Exercises</a></li>
<li><a href="https://www.techrepublic.com/blog/software-engineer/javascript-interview-questions-and-answers/">Development hiring managers and potential interviewees may find these sample JavaScript proficiency interview Q&amp;As and code snippets useful</a></li>
<li><a href="https://github.com/nishant8BITS/123-Essential-JavaScript-Interview-Question">123 Essential JavaScript Interview Question</a></li>
<li><a href="https://www.tutorialspoint.com/javascript/javascript_interview_questions.htm">JavaScript Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of JavaScript</a></li>
<li><a href="https://www.thatjsdude.com/interview/js2.html">JS: Basics and Tricky Questions</a></li>
<li><a href="https://thatjsdude.com/interview/js1.html">JS: Interview Algorithm</a></li>
<li><a href="https://github.com/kolodny/exercises">Some basic javascript coding challenges and interview questions</a></li>
<li><a href="https://github.com/csvenja/javascript-exercises">Some JavaScript interview exercises</a></li>
<li><a href="https://www.reddit.com/r/javascript/comments/3rb88w/ten_questions_ive_been_asked_most_more_than_once">Ten Questions I&rsquo;ve Been Asked, Most More Than Once, Over Six Technical JavaScript / Front-End Engineer Job Interviews.</a></li>
<li><a href="https://career.guru99.com/top-85-javascript-interview-questions/">Top 85 JavaScript Interview Questions</a></li>
<li><a href="https://www.interviewcake.com/javascript-interview-questions">Interview Cake JavaScript Interview Questions</a></li>
<li><a href="https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-(written-by-a-Frontend-Engineer)">The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer)</a></li>
<li><a href="https://dev.to/arnavaggarwal/10-javascript-concepts-you-need-to-know-for-interviews">10 JavaScript Concepts You Need to Know for Interviews</a></li>
<li><a href="https://frontendinterviewhandbook.com/javascript-questions/">Front End Interview Handbook - JavaScript Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/javascript-interview-questions-answers/">JavaScript Interview Questions - Quick Refresher</a></li>
<li><a href="https://github.com/danieldelcore/mega-interview-guide">The MEGA Interview Guide</a></li>
<li><a href="https://www.interviewbit.com/javascript-interview-questions/">Javascript Interview Questions and Answers (2020)</a></li>
<li><a href="https://github.com/sadanandpai/javascript-code-challenges">JavaScript Modern Interview Code Challenges 2021</a></li>
<li><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi">70 JavaScript Interview Questions</a></li>
</ul>
<h3 id="jquery">jQuery</h3>
<ul>
<li><a href="https://career.guru99.com/top-50-jquery-interview-questions/">Top 50 jquery interview questions</a></li>
<li><a href="https://www.toptal.com/jquery/interview-questions">17 Essential jQuery Interview Questions From Toptal</a></li>
<li><a href="https://www.techgeekbuzz.com/top-jquery-interview-questions/">Top JQuery Interview Questions and Answers</a></li>
</ul>
<h3 id="front-end-build-tools">Front-end build tools</h3>
<ul>
<li><a href="https://github.com/styopdev/webpack-interview-questions">Webpack interview questions &amp; answers</a></li>
<li><a href="https://www.codeproject.com/Articles/1065184/Latest-Gulp-js-interview-questions">Gulp js interview questions</a></li>
<li><a href="https://www.talkingdotnet.com/grunt-js-interview-questions/">Grunt js interview questions for beginners</a></li>
<li><a href="https://mindmajix.com/grunt-interview-questions">Grunt js interview questions</a></li>
</ul>
<h3 id="knockoutjs">KnockoutJS</h3>
<ul>
<li><a href="https://www.code-sample.com/2014/01/knockout-js-interview-questions-and.html">15 interview questions from CodeSample.com</a></li>
<li><a href="https://www.codeproject.com/Articles/987899/KnockoutJS-interview-questions">20 questions you might be asked about KnockoutJS in an interview for both freshers and experienced developers</a></li>
</ul>
<h3 id="less">Less</h3>
<ul>
<li><a href="https://career.guru99.com/top-25-less-interview-questions/">Top 25 LESS Interview Questions</a></li>
</ul>
<h3 id="lisp">Lisp</h3>
<ul>
<li><a href="https://www.sanfoundry.com/lisp-mcqs-class/">10 LISP Questions &amp; Answers</a></li>
<li><a href="https://career.guru99.com/top-18-lisp-interview-questions/">Top 18 Lisp Interview Questions from Career Guru</a></li>
</ul>
<h3 id="nodejs">NodeJS</h3>
<ul>
<li><a href="https://adevait.com/nodejs/interview-questions">25 Essential Node.js Interview Questions from Adeva</a></li>
<li><a href="https://www.toptal.com/nodejs/interview-questions">8 Essential Nodejs Interview Questions from Toptal</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm">Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS</a></li>
<li><a href="https://blog.risingstack.com/node-js-interview-questions/">Node.js Interview Questions and Answers</a></li>
<li><a href="https://career.guru99.com/top-25-interview-questions-on-node-js/">Top 25 Nodejs Interview Questions &amp; Answers from Career Guru</a></li>
<li><a href="https://www.techbeamers.com/top-30-node-js-interview-questions-answers/">Top 30 Node.Js Interview Questions With Answers</a></li>
<li><a href="https://www.interviewbit.com/node-js-interview-questions/">Top Nodejs Interview Questions &amp; Answers</a></li>
<li><a href="https://github.com/haizlin/fe-interview/blob/master/category/nodejs.md">Node.js Interview Questions in Chinese</a></li>
<li><a href="https://github.com/learning-zone/nodejs-interview-questions">Node.js Interview Questions by learning-zone</a></li>
</ul>
<h3 id="objective-c">Objective-C</h3>
<ul>
<li><a href="https://insights.dice.com/2015/07/21/interview-qs-objective-c-swift/">Interview Qs for Objective-C and Swift</a></li>
<li><a href="https://ichuiphonedev.blogspot.com/2014/05/iphone-latest-interview-questions-and.html">iOS Interview Questions For Beginners</a></li>
</ul>
<h3 id="php">PHP</h3>
<ul>
<li><a href="https://www.careerride.com/PHP-Interview-Questions.aspx">100 PHP interview questions and answers from CareerRide.com</a></li>
<li><a href="https://www.toptal.com/php/interview-questions">21 Essential PHP Interview Questions from Toptal</a></li>
<li><a href="https://www.woodstitch.com/resources/php-interview-questions.php">20 Common PHP Job Interview Questions and Answers</a></li>
<li><a href="https://adevait.com/php/interview-questions">25 Essential PHP Interview Questions from Adeva</a></li>
<li><a href="https://phpinterviewquestions.co.in/">PHP interview questions and answers for freshers</a></li>
<li><a href="https://career.guru99.com/top-100-php-interview-questions-answers/">Top 100 PHP Interview Questions &amp; Answers from CareerGuru</a></li>
<li><a href="https://www.codementor.io/php/tutorial/php-interview-questions-sample-answers">25 PHP Interview Questions</a></li>
<li><a href="https://pangara.com/blog/php-interview-questions">26 Essential PHP Interview Questions for 2018</a></li>
<li><a href="https://bootsity.com/books">Cracking PHP Interviews Questions ebook 300+ Q&amp;A</a></li>
<li><a href="https://www.techbeamers.com/latest-php-interview-questions-answers/">PHP Interview Questions - Quick Refresher</a></li>
<li><a href="https://www.interviewbit.com/php-interview-questions/">30+ PHP Interview Questions</a></li>
</ul>
<h3 id="python">Python</h3>
<ul>
<li><a href="https://adevait.com/python/interview-questions">26 Essential Python Interview Questions from Adeva</a></li>
<li><a href="https://www.careerride.com/python-interview-questions.aspx">20 Python interview questions and answers</a></li>
<li><a href="https://www.toptal.com/python/interview-questions">11 Essential Python Interview Questions from Toptal</a></li>
<li><a href="https://github.com/sigmavirus24/python-interview-questions">A listing of questions that could potentially be asked for a python job listing</a></li>
<li><a href="https://www.bogotobogo.com/python/python_interview_questions.php">Interview Questions for both beginners and experts</a></li>
<li><a href="https://www.interviewcake.com/python-interview-questions">Interview Cake Python Interview Questions</a></li>
<li><a href="https://docs.python.org/2/faq/programming.html">Python Frequently Asked Questions (Programming)</a></li>
<li><a href="https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions">Python interview questions collected by Reddit users</a></li>
<li><a href="https://career.guru99.com/top-25-python-interview-questions/">Top 25 Python Interview Questions from Career Guru</a></li>
<li><a href="https://www.youtube.com/watch?v=DEwgZNC-KyE">Python Interview 10 questions from Corey Schafer</a></li>
<li><a href="https://luminousmen.com/post/6">Python interview questions. Part I. Junior</a></li>
<li><a href="https://luminousmen.com/post/7">Python interview questions. Part II. Middle</a></li>
<li><a href="https://luminousmen.com/post/8">Python interview questions. Part III. Senior</a></li>
<li><a href="https://www.interviewbit.com/python-interview-questions/">Python Interview Questions and Answers (2019)</a></li>
<li><a href="https://www.techbeamers.com/python-interview-questions-programmers/">100 Python Interview Questions - Quick Refresher</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/python-interview-questions/">Top 100 Python Interview Questions from Edureka (2021)</a></li>
</ul>
<h3 id="ruby-on-rails">Ruby on Rails</h3>
<ul>
<li><a href="https://www.careerride.com/ruby-on-rails-interview-questions.aspx">20 Ruby on Rails interview questions and answers from CareerRide.com</a></li>
<li><a href="https://www.toptal.com/ruby-on-rails/interview-questions">9 Essential Ruby on Rails Interview Questions from Toptal</a></li>
<li><a href="https://github.com/rishiip/ruby-on-rails-interview-questions">High-level Ruby on Rails Interview Questions</a></li>
<li><a href="https://anilpunjabi.tumblr.com/post/25948339235/ruby-and-rails-interview-questions-and-answers">Ruby And Ruby On Rails interview Q&amp;A</a></li>
<li><a href="https://srikantmahapatra.wordpress.com/2013/11/07/ruby-on-rails-interview-questions-and-answers/">Some of the most frequently asked Ruby on Rails questions and how to answer them confidently</a></li>
<li><a href="https://www.codementor.io/ruby-on-rails/tutorial/ruby-on-rails-interview-questions">11 Ruby on Rails Interview Practice Questions</a></li>
<li><a href="https://career.guru99.com/top-34-ruby-on-rail-interview-questions/">Top 53 Ruby on Rails Interview Questions &amp; Answers</a></li>
<li><a href="https://www.upwork.com/i/interview-questions/ruby-on-rails/">10 Ruby on Rails interview questions and answers</a></li>
</ul>
<h3 id="reactjs">ReactJS</h3>
<ul>
<li><a href="https://www.reddit.com/r/reactjs/comments/3m5equ/react_what_interview_questions_to_expect/">Reddit users share their expectations from ReactJS interview</a></li>
<li><a href="https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions">5 Essential React.js Interview Questions</a></li>
<li><a href="https://tylermcginnis.com/react-interview-questions/">React Interview Questions</a></li>
<li><a href="https://www.toptal.com/react/interview-questions">Toptal&rsquo;s 21 Essential React.js Interview Questions</a></li>
<li><a href="https://www.educba.com/reactjs-interview-questions/">19 Essential ReactJs Interview Questions</a></li>
<li><a href="https://github.com/sudheerj/reactjs-interview-questions">React Interview Questions &amp; Answers</a></li>
</ul>
<h3 id="ruby">Ruby</h3>
<ul>
<li><a href="https://www.toptal.com/ruby/interview-questions">21 Essential Ruby Interview Questions from Toptal</a></li>
<li><a href="https://gist.github.com/ryansobol/5252653">15 Questions to Ask During a Ruby Interview</a></li>
<li><a href="https://github.com/undr/ruby-trivia">A list of questions about Ruby programming you can use to quiz yourself</a></li>
<li><a href="https://technology.customink.com/blog/2015/11/23/the-art-of-ruby-technical-interviews/">The Art of Ruby Technical Interview</a></li>
<li><a href="https://www.interviewcake.com/ruby-interview-questions">Interview Cake Ruby Interview Questions</a></li>
<li><a href="https://www.javatpoint.com/ruby-interview-questions">Frequently Asked Ruby Interview Questions</a></li>
</ul>
<h3 id="rust">Rust</h3>
<ul>
<li><a href="https://www.wisdomjobs.com/e-university/rust-programming-language-interview-questions.html">Top 250+ Rust Programming Language Interview Questions</a></li>
<li><a href="https://www.code-sample.com/2018/02/rust-programming-interview-questions.html">Rust Programming Interview Questions and Answers</a></li>
<li><a href="https://github.com/jean553/rust-exam">rust-exam: A set of questions about the Rust programming language</a></li>
<li><a href="https://www.bestinterviewquestion.com/rust-programming-language-interview-questions">Best Rust Programming Language Interview Questions and answers</a></li>
</ul>
<h3 id="sass">Sass</h3>
<ul>
<li><a href="https://career.guru99.com/top-17-sass-interview-questions/">Top 17 Sass Interview Questions from Career Guru</a></li>
<li><a href="https://www.educba.com/sass-interview-questions/">Top 10 Sass Interview Questions from educba</a></li>
</ul>
<h3 id="scala">Scala</h3>
<ul>
<li><a href="https://insights.dice.com/2014/09/12/4-interview-questions-scala-developers/">4 Interview Questions for Scala Developers</a></li>
<li><a href="https://www.scala-lang.org/old/faq">A list of Frequently Asked Questions and their answers, sorted by category</a></li>
<li><a href="https://github.com/Jarlakxen/Scala-Interview-Questions">A list of helpful Scala related questions you can use to interview potential candidates</a></li>
<li><a href="https://programmers.stackexchange.com/questions/58145/how-scala-developers-are-being-interviewed">How Scala Developers Are Being Interviewed</a></li>
<li><a href="https://career.guru99.com/top-25-interview-questions-on-scala/">Top 25 Scala Interview Questions &amp; Answers from Toptal</a></li>
</ul>
<h3 id="sharepoint">SharePoint</h3>
<ul>
<li><a href="https://www.rajeshg.me/2013/05/sharepoint-developer-2010-interview.html">Sharepoint Interview Question For Developer</a></li>
<li><a href="https://intellipaat.com/blog/interview-question/sharepoint-interview-questions/">Top SharePoint Interview Questions and Answers</a></li>
</ul>
<h3 id="shell">Shell</h3>
<ul>
<li><a href="https://career.guru99.com/shell-scripting-interview-questions/">Top 50 Shell Scripting Interview Questions from Career Guru</a></li>
</ul>
<h3 id="spark">Spark</h3>
<ul>
<li><a href="https://github.com/ankurchavda/SparkLearning#spark-learning-guide">Carefully Curated 70 Spark Questions with Additional Optimization Guides (First in the series)</a></li>
</ul>
<h3 id="swift">Swift</h3>
<ul>
<li><a href="https://www.toptal.com/swift/interview-questions">10 Essential Swift Interview Questions from Toptal</a></li>
<li><a href="https://github.com/diwu/LeetCode-Solutions-in-Swift">Get prepared for your next iOS job interview by studying high quality LeetCode solutions in Swift 5</a></li>
<li><a href="https://www.raywenderlich.com/762435-swift-interview-questions-and-answers">Swift Interview Questions and Answers</a></li>
<li><a href="https://mycodetips.com/swift-ios/swift-programming-language-interview-questions-answers-987.html">Swift Programming Language Interview Questions And Answers from mycodetips.com</a></li>
<li><a href="https://blog.udacity.com/2014/11/your-top-10-swift-questions-answered.html">Your top 10 Swift questions answered</a></li>
<li><a href="https://www.raywenderlich.com/762435-swift-interview-questions-and-answers">Swift interview questions and answers on Swift 5 by Raywenderlich</a></li>
<li><a href="https://cocoacasts.com/what-does-the-dynamic-keyword-mean-in-swift-3">Dynamic keyword in Swift</a></li>
</ul>
<h3 id="vuejs">Vue.js</h3>
<ul>
<li><a href="https://github.com/sudheerj/vuejs-interview-questions">List of 300 VueJS Interview Questions</a></li>
</ul>
<h3 id="wordpress">WordPress</h3>
<ul>
<li><a href="https://pangara.com/blog/blog45-wordpress-interview-questions-and-answers/">Top 45 WordPress interview questions</a></li>
<li><a href="https://www.toptal.com/wordpress/interview-questions">10 Essential WordPress Interview Questions</a></li>
</ul>
<h3 id="typescript">TypeScript</h3>
<ul>
<li><a href="https://www.onlineinterviewquestions.com/typescript-interview-questions">Typescript Interview Questions</a></li>
<li><a href="https://www.positronx.io/typescript-interview-questions-answers-2109/">Top 10 TypeScript Interview Questions and Answers for Beginner Web Developers 2019</a></li>
</ul>
<h2 id="database-technologies">Database technologies</h2>
<h3 id="cassandra">Cassandra</h3>
<ul>
<li><a href="https://career.guru99.com/top-23-cassandra-interview-questions/">Top 23 Cassandra Interview Questions from Career Guru</a></li>
</ul>
<h3 id="microsoft-access">Microsoft Access</h3>
<ul>
<li><a href="https://career.guru99.com/top-16-ms-access-database-interview-questions/">Top 16 Microsoft Access Database Interview Questions from Career Guru</a></li>
</ul>
<h3 id="mongodb">MongoDB</h3>
<ul>
<li>
<p><a href="https://theprofessionalspoint.blogspot.com.by/2014/01/28-mongodb-nosql-database-interview.html">28 MongoDB NoSQL Database Interview Questions and Answers</a></p>
</li>
<li>
<p><a href="https://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB">MongoDB frequently Asked Questions by expert members with experience in MongoDB These questions and answers will help you strengthen your technical skills, prepare for the new job test and quickly revise the concepts</a></p>
</li>
<li>
<p><a href="https://www.javatpoint.com/mongodb-interview-questions">MongoDB Interview Questions from JavaTPointcom</a></p>
</li>
<li>
<p><a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm">MongoDB Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of MongoDB</a></p>
</li>
<li>
<p><a href="https://career.guru99.com/top-20-mongodb-interview-questions/">Top 20 MongoDB interview questions from Career Guru</a></p>
</li>
</ul>
<h3 id="mysql">MySQL</h3>
<ul>
<li><a href="https://www.tecmint.com/10-mysql-database-interview-questions-for-beginners-and-intermediates/">10 MySQL Database Interview Questions for Beginners and Intermediates</a></li>
<li><a href="https://www.careerride.com/MySQL-Interview-Questions.aspx">100 MySQL interview questions</a></li>
<li><a href="https://www.tecmint.com/basic-mysql-interview-questions-for-database-administrators/">15 Basic MySQL Interview Questions for Database Administrators</a></li>
<li><a href="https://www.javatpoint.com/mysql-interview-questions">28 MySQL interview questions from JavaTPoint.com</a></li>
<li><a href="https://www.testingbrain.com/interview/mysql-interview-questions.html">40 Basic MySQL Interview Questions with Answers</a></li>
<li><a href="https://career.guru99.com/top-50-mysql-interview-questions-answers/">Top 50 MySQL Interview Questions &amp; Answers from Career Guru</a></li>
</ul>
<h3 id="neo4j">Neo4j</h3>
<ul>
<li><a href="https://career.guru99.com/top-20-ne04j-interview-questions/">Top 20 Neo4j Interview Questions from Career Guru</a></li>
</ul>
<h3 id="oracle">Oracle</h3>
<ul>
<li><a href="https://www.coolinterview.com/type.asp?iType=57">General Oracle Interview Questions &amp; Answers</a></li>
</ul>
<h3 id="postgres">Postgres</h3>
<ul>
<li><a href="https://www.dotnetfunda.com/interviews/cat/208/postgresql">13 PostgreSQL Interview Q&amp;A</a></li>
<li><a href="https://nazafbtemplate.blogspot.com.by/2014/06/frequently-asked-basic-postgresql.html">Frequently Asked Basic PostgreSQL Interview Questions and Answers</a></li>
<li><a href="https://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_">PostgreSQL Interview Preparation Guide</a></li>
<li><a href="https://www.coolinterview.com/type.asp?iType=411">PostgreSQL Interview Q&amp;A from CoolInterview.com</a></li>
</ul>
<h3 id="sql">SQL</h3>
<ul>
<li><a href="https://java67.blogspot.com.by/2013/04/10-frequently-asked-sql-query-interview-questions-answers-database.html">10 Frequently asked SQL Query Interview Questions</a></li>
<li><a href="https://www.toptal.com/sql/interview-questions">45 Essential SQL Interview Questions from Toptal</a></li>
<li><a href="https://www.indiabix.com/technical/sql-server-common-questions/">Common Interview Questions and Answers</a></li>
<li><a href="https://www.indiabix.com/technical/sql-server-general-questions/">General Interview Questions and Answers</a></li>
<li><a href="https://github.com/XD-DENG/SQL-exercise">Schema, Questions &amp; Solutions for SQL Exercising</a></li>
<li><a href="https://www.tutorialspoint.com/sql/sql_interview_questions.htm">SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL</a></li>
<li><a href="https://www.interviewbit.com/sql-interview-questions/">SQL Interview Questions CHEAT SHEET</a></li>
</ul>
<h3 id="sqlite">SQLite</h3>
<ul>
<li><a href="https://career.guru99.com/top-20-sql-lite-interview-questions/">Top 20 SQLITE  Interview Questions from Career Guru</a></li>
</ul>
<h2 id="caching-technologies">Caching technologies</h2>
<h3 id="memcached">Memcached</h3>
<ul>
<li><a href="https://www.javatpoint.com/memcached-interview-questions-and-answers">Memcached Interview Questions from Javapoint</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/memcached-interview-questions.html">Memcached Interview Questions from Wisdomjobs</a></li>
</ul>
<h3 id="redis">Redis</h3>
<ul>
<li><a href="https://www.javatpoint.com/redis-interview-questions-and-answers">Redis Interview Questions from Javapoint</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/redis-interview-questions-answers.html">Redis Interview Questions from Wisdomjobs</a></li>
<li><a href="https://career.guru99.com/top-10-redis-interview-questions/">Redis Interview Questions from Career Guru</a></li>
</ul>
<h2 id="os">OS</h2>
<h3 id="linux">Linux</h3>
<ul>
<li><a href="https://www.linuxfoundation.org/blog/2015/07/10-job-interview-questions-for-linux-system-administrators/">10 Job Interview Questions for Linux System Administrators from Linux.com</a></li>
<li><a href="https://www.tecmint.com/useful-random-linux-interview-questions-and-answers/">10 Useful Random Linux Interview Questions and Answers</a></li>
<li><a href="https://www.tecmint.com/basic-linux-interview-questions-and-answers/">11 Basic Linux Interview Questions and Answers</a></li>
<li><a href="https://www.toptal.com/linux/interview-questions">11 Essential Linux Interview Questions from Toptal</a></li>
<li><a href="https://www.linuxtechi.com/experience-linux-admin-interview-questions/">Top 30 Linux System Admin Interview Questions &amp; Answers</a></li>
<li><a href="https://career.guru99.com/top-50-linux-interview-questions/">Top 50 Linux Interview Questions from Career Guru</a></li>
<li><a href="https://github.com/trimstray/test-your-sysadmin-skills">278 Test Questions and Answers for *nix System Administrators</a></li>
<li><a href="https://www.techbeamers.com/essential-linux-questions-answers/">Linux Interview Questions - Quick Refresher</a></li>
</ul>
<h3 id="windows">Windows</h3>
<ul>
<li><a href="https://www.brentozar.com/archive/2009/07/top-10-interview-questions-for-windows-sysadmins/">Top 10 Interview Questions for Windows Administrators</a></li>
<li><a href="https://career.guru99.com/top-22-windows-server-interview-questions/">Top 22 Windows Server Interview Questions from Career Guru</a></li>
<li><a href="https://www.01world.in/p/windows.html">Windows Admin Interview Questions &amp; Answers</a></li>
</ul>
<h2 id="devops">DevOps</h2>
<ul>
<li><a href="https://github.com/chassing/linux-sysadmin-interview-questions">Linux System Administrator/DevOps Interview Questions</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/top-devops-interview-questions-2016/">Top DevOps Interview Questions You Must Prepare In 2021</a></li>
<li><a href="https://intellipaat.com/interview-question/devops-interview-questions/">Top 60+ DevOps Interview Questions &amp; Answers in 2021</a></li>
<li><a href="https://www.interviewbit.com/devops-interview-questions/">DevOps Interview Questions &amp; Answers</a></li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<ul>
<li><a href="https://github.com/rishabh115/Interview-Questions">Comprehensive list of interview questions of top tech companies</a></li>
<li><a href="https://java2novice.com/java-interview-programs/">A great list of Java interview questions</a></li>
<li><a href="https://github.com/sagivo/algorithms">Algorithms playground for common interview questions written in Ruby</a></li>
<li><a href="https://github.com/EvgenyKarkan/EKAlgorithms">EKAlgorithms contains some well known CS algorithms &amp; data structures</a></li>
<li><a href="https://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/">Top 10 Algorithms for Coding Interview</a></li>
<li><a href="https://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html">Top 15 Data Structures and Algorithm Interview Questions for Java programmer</a></li>
<li><a href="https://techinterviewhandbook.org/best-practice-questions/">Tech Interview Handbook Best Practice Questions</a></li>
<li><a href="https://www.techseries.dev/daily">Daily Coding Interview Practice</a></li>
</ul>
<h2 id="blockchain">Blockchain</h2>
<ul>
<li><a href="https://www.edureka.co/blog/interview-questions/blockchain-interview-questions/">Top 55 Blockchain Interview Questions You Must Prepare In 2018</a></li>
<li><a href="https://mindmajix.com/blockchain-interview-questions">Blockchain Interview Questions</a></li>
<li><a href="https://intellipaat.com/interview-question/blockchain-interview-questions/">Top Blockchain Interview Questions</a></li>
<li><a href="https://applicature.com/blog/blockchain-interview-questions">Blockchain Developer Interview Questions and Answers</a></li>
<li><a href="https://www.toptal.com/blockchain/interview-questions">10 Essential Blockchain Interview Questions </a></li>
<li><a href="https://data-flair.training/blogs/blockchain-interview-questions/">Top 30 Blockchain Interview Questions ‚Äì For Freshers to Experienced</a></li>
<li><a href="https://www.digitalvidya.com/blog/blockchain-interview-questions/">Most Frequently Asked Blockchain Interview Questions</a></li>
</ul>
<h2 id="coding-exercises">Coding exercises</h2>
<ul>
<li><a href="https://github.com/mre/the-coding-interview">Common interview questions and puzzles solved in several languages</a></li>
<li><a href="https://github.com/donnemartin/interactive-coding-challenges">Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions</a></li>
<li><a href="https://github.com/roseperrone/interview-questions">Interview questions solved in python</a></li>
<li><a href="https://www.makeuseof.com/tag/swift-coding-challenges/">7 Swift Coding Challenges to Practice Your Skills</a></li>
</ul>
<h2 id="comprehensive-lists">Comprehensive lists</h2>
<ul>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore</a></li>
<li><a href="https://www.aperfectmix.com/free_web_design/front-end-interview-questions.html">Front End Developer Interview Questions</a></li>
<li><a href="https://frontendinterviewhandbook.com/">Front End Interview Handbook</a></li>
<li><a href="https://github.com/starandtina/backend-interview-questions">Some simple questions to interview potential backend candidates</a></li>
</ul>
<h2 id="design-patterns">Design Patterns</h2>
<ul>
<li><a href="https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm">Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern</a></li>
<li><a href="https://github.com/kamranahmedse/design-patterns-for-humans">Design Patterns for Humans‚Ñ¢ - An ultra-simplified explanation</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns">Design Patterns implemented in Java</a></li>
<li><a href="https://www.dofactory.com/net/design-patterns">Design Patterns implemented in DotNet</a></li>
</ul>
<h2 id="data-structures">Data structures</h2>
<ul>
<li><a href="https://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html">Top 15 Data Structures and Algorithm Interview Questions for Java programmer</a></li>
<li><a href="https://career.guru99.com/top-50-data-structure-interview-questions/">Top 50 Data Structure Interview Questions from Career Guru</a></li>
<li><a href="https://www.interviewbit.com/data-structure-interview-questions/">What is Data Structure? | Top 40 Data Structure Interview Questions</a></li>
</ul>
<h2 id="networks">Networks</h2>
<ul>
<li><a href="https://career.guru99.com/top-100-networking-interview-questions-answers/">Top 100 Networking Interview Questions &amp; Answers from Career Guru</a></li>
<li><a href="https://www.interviewbit.com/networking-interview-questions/">Networking Interview Questions</a></li>
</ul>
<h2 id="security">Security</h2>
<ul>
<li><a href="https://careers.simplicable.com/careers/new/101-IT-security-interview-questions">101 IT Security Interview Questions</a></li>
<li><a href="https://searchsecurity.techtarget.com/tip/How-to-prepare-for-an-information-security-job-interview">How to prepare for an information security job interview?</a></li>
<li><a href="https://danielmiessler.com/study/infosec_interview_questions/">Information Security Interview Questions from Daniel Miessler</a></li>
<li><a href="https://resources.infosecinstitute.com/top-50-information-security-interview-questions/">Top 50 Information Security Interview Questions for freshers and experts</a></li>
</ul>
<h2 id="data-science">Data Science</h2>
<ul>
<li><a href="https://www.dezyre.com/article/-data-science-interview-questions-for-top-tech-companies/189">Data Science Interview Questions for Top Tech Companies</a></li>
<li><a href="https://www.datasciencecentral.com/profiles/blogs/66-job-interview-questions-for-data-scientists">66 Job Interview Questions for Data Scientists</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/data-science-interview-questions/">Top 45 Data Science Interview Questions You Must Prepare In 2021</a></li>
<li><a href="https://towardsdatascience.com/top-30-data-science-interview-questions-7dd9a96d3f5c">Top 30 data science interview questions</a></li>
<li><a href="https://www.datacamp.com/community/news/top-100-data-science-interview-questions-cc3lts7gj5j">Top 100 Data science interview questions</a></li>
<li><a href="https://hackr.io/blog/data-science-interview-questions">Data Science Interview Questions</a></li>
<li><a href="https://hackernoon.com/160-data-science-interview-questions-415s3y2a">160+ Data Science Interview Questions</a></li>
<li><a href="https://www.interviewbit.com/data-science-interview-questions/">Top Data Science Interview Questions</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Open External Links in a New Window Using JavaScript</title>
      <link>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</guid>
      <description>Open External Links in a New Window Using JavaScript</description>
      <content:encoded><![CDATA[<p>This is a quick post showing how to use JavaScript to make links to external websites open in a new window (or tab) instead of in the current window. This is useful for <code>Jekyll</code> blogs because the Markdown converters don‚Äôt do this for you. I included two versions: one that uses straight JavaScript, and one that requires <code>jQuery</code> but is shorter.</p>
<p>Both versions work basically the same way: grab all anchor tags <code>&lt;a href=&quot;#&quot;&gt;</code> that are linking to somewhere other than your development environment or a page on your site and then attribute <code>target=&quot;_blank&quot;</code> to those tags. Because this is JavaScript, users with JavaScript disabled will still experience the old behavior, but otherwise won‚Äôt be adversely affected.</p>
<h3 id="straight-javascript">Straight JavaScript</h3>
<p>This version does not require any jQuery (or any other libraries):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">ready</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onreadystatechange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorEls</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorElsLength</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">anchorElsLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">anchorEl</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="jquery">jQuery</h3>
<p>This version requires jQuery in order to work, but if you‚Äôre using jQuery on your site anyway, it avoids reinventing the wheel:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="my-implementation-for-jekyll-blog">My Implementation for Jekyll Blog</h3>
<p>I have created a file called <a href="https://raw.githubusercontent.com/SamirPaul1/assets/main/external-links-new-window.html">external-links-new-window.html</a> inside <code>_includes</code> directory and referred it from <code>_layouts/default.html</code> as <a href="#"><img src="https://spcdn.pages.dev/img/include-external-links-new-window.html-code.png" alt="external-links-new-window"  width="370px" height="22px"></a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python Cheat Sheet for Leetcode</title>
      <link>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</guid>
      <description>Python Cheat Sheet for Leetcode</description>
      <content:encoded><![CDATA[<h1 id="basics">Basics</h1>
<ul>
<li>
<p>Data Types</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg" alt="Untitled"  />
</p>
</li>
<li>
<p>Operators and it‚Äôs precendence</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<h1 id="data-structures">Data Structures</h1>
<p><em>Important data structures for Leetcode</em></p>
<h2 id="lists">Lists</h2>
<blockquote>
<p>Lists are used to store multiple items in a single variable</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nums = [1,2,3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums.index(1) # returns index
</span></span><span class="line"><span class="cl">nums.append(1) # appends 1
</span></span><span class="line"><span class="cl">nums.insert(0,10) # inserts 10 at 0th index
</span></span><span class="line"><span class="cl">nums.remove(3) # removes all instances of 3
</span></span><span class="line"><span class="cl">nums.copy(1) # returns copy of the list
</span></span><span class="line"><span class="cl">nums.count(1) # returns no.of times &#39;1&#39; is present in the list
</span></span><span class="line"><span class="cl">nums.extend(someOtherList) # ...
</span></span><span class="line"><span class="cl">nums.pop() # pops last element [which element to pop can also be given as optional argument]
</span></span><span class="line"><span class="cl">nums.reverse() # reverses original list (nums in this case)
</span></span><span class="line"><span class="cl">nums.sort() # sorts list [does NOT return sorted list]
</span></span><span class="line"><span class="cl">#Python&#39;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">It&#39;s pretty simple really:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop]  # items start through stop-1
</span></span><span class="line"><span class="cl">a[start:]      # items start through the rest of the array
</span></span><span class="line"><span class="cl">a[:stop]       # items from the beginning through stop-1
</span></span><span class="line"><span class="cl">a[:]           # a copy of the whole array
</span></span><span class="line"><span class="cl">There is also the step value, which can be used with any of the above:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step] # start through not past stop, by step
</span></span><span class="line"><span class="cl">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[-1]    # last item in the array
</span></span><span class="line"><span class="cl">a[-2:]   # last two items in the array
</span></span><span class="line"><span class="cl">a[:-2]   # everything except the last two items
</span></span><span class="line"><span class="cl">Similarly, step may be a negative number:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[::-1]    # all items in the array, reversed
</span></span><span class="line"><span class="cl">a[1::-1]   # the first two items, reversed
</span></span><span class="line"><span class="cl">a[:-3:-1]  # the last two items, reversed
</span></span><span class="line"><span class="cl">a[-3::-1]  # everything except the last two items, reversed
</span></span><span class="line"><span class="cl">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relation to slice() object
</span></span><span class="line"><span class="cl">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step]
</span></span><span class="line"><span class="cl">is equivalent to:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[slice(start, stop, step)]
</span></span><span class="line"><span class="cl">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="dictionary">Dictionary</h2>
<blockquote>
<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dict = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dict.keys() # returns list of keys of dictionary
</span></span><span class="line"><span class="cl">dict.values() # returns list of values of dictionary
</span></span><span class="line"><span class="cl">dict.get(&#39;a&#39;) # returns value for any corresponding key
</span></span><span class="line"><span class="cl">dict.items() # returns [(&#39;a&#39;,1),(&#39;b&#39;,2),(&#39;c&#39;,3)]
</span></span><span class="line"><span class="cl">dict.copy() # returns copy of the dictionary
</span></span><span class="line"><span class="cl"># NOTE : items() Returns view object that will be updated with any future changes to dict
</span></span><span class="line"><span class="cl">dict.pop(KEY) # pops key-value pair with that key
</span></span><span class="line"><span class="cl">dict.popitem() # removes most recent pair added
</span></span><span class="line"><span class="cl">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned
</span></span><span class="line"><span class="cl"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.
</span></span><span class="line"><span class="cl"># If the key does not exist, DEFAULT_VALUE becomes the key&#39;s value. 2nd argument&#39;s default is None.
</span></span><span class="line"><span class="cl">dict.update({KEY:VALUE}) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)
</span></span><span class="line"><span class="cl"># defaultdict ensures that if any element is accessed that is not present in the dictionary
</span></span><span class="line"><span class="cl"># it will be created and error will not be thrown (which happens in normal dictionary)
</span></span><span class="line"><span class="cl"># Also, the new element created will be of argument type, for example in the below line
</span></span><span class="line"><span class="cl"># an element of type &#39;list&#39; will be made for a Key that does not exist
</span></span><span class="line"><span class="cl">myDictionary = defaultdict(list) 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="counter">Counter</h2>
<blockquote>
<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>
</blockquote>
<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import Counter #(capital &#39;C&#39;)
</span></span><span class="line"><span class="cl"># can also be used as &#39;collections.Counter()&#39; in code
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">list1 = [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;y&#39;, &#39;z&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Initialization
</span></span><span class="line"><span class="cl">Counter(list1) # =&gt; Counter({&#39;x&#39;: 4, &#39;y&#39;: 2, &#39;z&#39;: 2})
</span></span><span class="line"><span class="cl">Counter(&#34;Welcome to Guru99 Tutorials!&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39; &#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2.....})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Updating
</span></span><span class="line"><span class="cl">counterObject = collections.Counter(list1)
</span></span><span class="line"><span class="cl">counterObject.keys() = [ &#39;x&#39; , &#39;y&#39; , &#39;z&#39; ]
</span></span><span class="line"><span class="cl">most_common_element = counterObject.most_common(1) # [(&#39;x&#39;, 4)]
</span></span><span class="line"><span class="cl">counterObject.update(&#34;some string&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2, &#39;s&#39;: 2})
</span></span><span class="line"><span class="cl">counterObject[&#39;s&#39;] += 1 # Increase/Decrease frequency
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Accessing
</span></span><span class="line"><span class="cl">frequency_of_s = counterObject[&#39;s&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Deleting
</span></span><span class="line"><span class="cl">del couterObject[&#39;s&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="deque">Deque</h2>
<blockquote>
<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import deque
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue = deque([&#39;name&#39;,&#39;age&#39;,&#39;DOB&#39;])
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.append(&#34;append_from_right&#34;) # Append from right
</span></span><span class="line"><span class="cl">queue.pop() # Pop from right
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.appendleft(&#34;fromLeft&#34;) # Append from left
</span></span><span class="line"><span class="cl">queue.popleft() # Pop from left
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.
</span></span><span class="line"><span class="cl">queue.insert(index,element)
</span></span><span class="line"><span class="cl">queue.remove() # removes first occurrance
</span></span><span class="line"><span class="cl">queue.count() # obvious
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.reverse() # reverses order of queue elements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="heapq">Heapq</h2>
<blockquote>
<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library/module.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import heapq # (minHeap by Default)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums = [5, 7, 9, 1, 3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).
</span></span><span class="line"><span class="cl">heapq.heappush(nums,element) # Push an element into the heap
</span></span><span class="line"><span class="cl">heapq.heappop(nums) # Pop an element from the heap
</span></span><span class="line"><span class="cl">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Other Methods Available in the Library
</span></span><span class="line"><span class="cl"># Used to return the k largest elements from the iterable specified 
</span></span><span class="line"><span class="cl"># The key is a function with that accepts single element from iterable,
</span></span><span class="line"><span class="cl"># and the returned value from that function is then used to rank that element in the heap
</span></span><span class="line"><span class="cl">heapq.nlargest(k, iterable, key = fun)
</span></span><span class="line"><span class="cl">heapq.nsmallest(k, iterable, key = fun)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sets">Sets</h2>
<blockquote>
<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set = {1,2,3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.add(item)
</span></span><span class="line"><span class="cl">set.remove(item)
</span></span><span class="line"><span class="cl">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not
</span></span><span class="line"><span class="cl">set.pop() # removes random item (since unordered)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.isdisjoint(anotherSet) # returns true if no common elements
</span></span><span class="line"><span class="cl">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
</span></span><span class="line"><span class="cl">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.difference(anotherSet) # returns set containing items ONLY in first set
</span></span><span class="line"><span class="cl">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
</span></span><span class="line"><span class="cl">set.intersection(anotherSet) # returns new set with common elements
</span></span><span class="line"><span class="cl">set.intersection_update(anotherSet) # modifies first set keeping only common elements
</span></span><span class="line"><span class="cl">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
</span></span><span class="line"><span class="cl">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.union(anotherSet) # ...
</span></span><span class="line"><span class="cl">set.update(anotherSet) # adds anotherSet without duplicate
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="tuples">Tuples</h2>
<blockquote>
<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p>Similar to list</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tuple = (1,2,3,1)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tuple.count(1) # returns occurence of an item
</span></span><span class="line"><span class="cl">tuple.index(1) # returns index of 1 in array
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="strings">Strings</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ** split Function **
</span></span><span class="line"><span class="cl">#The split() method breaks up a string at the specified separator and returns a list of strings.
</span></span><span class="line"><span class="cl">text = &#39;Python is a fun programming language&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># split the text from space
</span></span><span class="line"><span class="cl">print(text.split(&#39; &#39;))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#convert string to list
</span></span><span class="line"><span class="cl">s=&#34;abcd&#34;
</span></span><span class="line"><span class="cl">s=list(s)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Output: [&#39;Python&#39;, &#39;is&#39;, &#39;a&#39;, &#39;fun&#39;, &#39;programming&#39;, &#39;language&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ** count Function **
</span></span><span class="line"><span class="cl">#The count() method returns the number of occurrences of a substring in the given string.
</span></span><span class="line"><span class="cl">#Example
</span></span><span class="line"><span class="cl">message = &#39;python is popular programming language&#39;
</span></span><span class="line"><span class="cl"># number of occurrence of &#39;p&#39;
</span></span><span class="line"><span class="cl">print(&#39;Number of occurrence of p:&#39;, message.count(&#39;p&#39;)) # Output: Number of occurrence of p: 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
</span></span><span class="line"><span class="cl">s = &#39;1242323&#39;
</span></span><span class="line"><span class="cl">print(s.isnumeric()) #Output: True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
</span></span><span class="line"><span class="cl"># check the index of &#39;fun&#39;
</span></span><span class="line"><span class="cl">print(message.find(&#39;fun&#39;)) # Output: 12
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">name = &#34;M3onica Gell22er &#34;
</span></span><span class="line"><span class="cl">print(name.isalnum()) # Output : False
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
</span></span><span class="line"><span class="cl">name = &#34;Monica&#34;
</span></span><span class="line"><span class="cl">print(name.isalpha()) #output true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#other imp functions
</span></span><span class="line"><span class="cl">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
</span></span><span class="line"><span class="cl">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.
</span></span><span class="line"><span class="cl">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
</span></span><span class="line"><span class="cl">string.islower()
</span></span><span class="line"><span class="cl">string.isdigit()
</span></span><span class="line"><span class="cl">string.isupper()
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="built-in-or-library-functions">Built-in or Library functions</h1>
<ul>
<li>
<p>Functions to iterate over list / other iterable (tuple, dictionaries)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span><span class="lnt" id="hl-9-18"><a class="lnlinks" href="#hl-9-18">18</a>
</span><span class="lnt" id="hl-9-19"><a class="lnlinks" href="#hl-9-19">19</a>
</span><span class="lnt" id="hl-9-20"><a class="lnlinks" href="#hl-9-20">20</a>
</span><span class="lnt" id="hl-9-21"><a class="lnlinks" href="#hl-9-21">21</a>
</span><span class="lnt" id="hl-9-22"><a class="lnlinks" href="#hl-9-22">22</a>
</span><span class="lnt" id="hl-9-23"><a class="lnlinks" href="#hl-9-23">23</a>
</span><span class="lnt" id="hl-9-24"><a class="lnlinks" href="#hl-9-24">24</a>
</span><span class="lnt" id="hl-9-25"><a class="lnlinks" href="#hl-9-25">25</a>
</span><span class="lnt" id="hl-9-26"><a class="lnlinks" href="#hl-9-26">26</a>
</span><span class="lnt" id="hl-9-27"><a class="lnlinks" href="#hl-9-27">27</a>
</span><span class="lnt" id="hl-9-28"><a class="lnlinks" href="#hl-9-28">28</a>
</span><span class="lnt" id="hl-9-29"><a class="lnlinks" href="#hl-9-29">29</a>
</span><span class="lnt" id="hl-9-30"><a class="lnlinks" href="#hl-9-30">30</a>
</span><span class="lnt" id="hl-9-31"><a class="lnlinks" href="#hl-9-31">31</a>
</span><span class="lnt" id="hl-9-32"><a class="lnlinks" href="#hl-9-32">32</a>
</span><span class="lnt" id="hl-9-33"><a class="lnlinks" href="#hl-9-33">33</a>
</span><span class="lnt" id="hl-9-34"><a class="lnlinks" href="#hl-9-34">34</a>
</span><span class="lnt" id="hl-9-35"><a class="lnlinks" href="#hl-9-35">35</a>
</span><span class="lnt" id="hl-9-36"><a class="lnlinks" href="#hl-9-36">36</a>
</span><span class="lnt" id="hl-9-37"><a class="lnlinks" href="#hl-9-37">37</a>
</span><span class="lnt" id="hl-9-38"><a class="lnlinks" href="#hl-9-38">38</a>
</span><span class="lnt" id="hl-9-39"><a class="lnlinks" href="#hl-9-39">39</a>
</span><span class="lnt" id="hl-9-40"><a class="lnlinks" href="#hl-9-40">40</a>
</span><span class="lnt" id="hl-9-41"><a class="lnlinks" href="#hl-9-41">41</a>
</span><span class="lnt" id="hl-9-42"><a class="lnlinks" href="#hl-9-42">42</a>
</span><span class="lnt" id="hl-9-43"><a class="lnlinks" href="#hl-9-43">43</a>
</span><span class="lnt" id="hl-9-44"><a class="lnlinks" href="#hl-9-44">44</a>
</span><span class="lnt" id="hl-9-45"><a class="lnlinks" href="#hl-9-45">45</a>
</span><span class="lnt" id="hl-9-46"><a class="lnlinks" href="#hl-9-46">46</a>
</span><span class="lnt" id="hl-9-47"><a class="lnlinks" href="#hl-9-47">47</a>
</span><span class="lnt" id="hl-9-48"><a class="lnlinks" href="#hl-9-48">48</a>
</span><span class="lnt" id="hl-9-49"><a class="lnlinks" href="#hl-9-49">49</a>
</span><span class="lnt" id="hl-9-50"><a class="lnlinks" href="#hl-9-50">50</a>
</span><span class="lnt" id="hl-9-51"><a class="lnlinks" href="#hl-9-51">51</a>
</span><span class="lnt" id="hl-9-52"><a class="lnlinks" href="#hl-9-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">,</span> <span class="n">iter</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="c1">#fun : It is a function to which map passes each element of given iterable.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#iter : It is a iterable which is to be mapped.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">zip</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">elem1</span><span class="p">,</span><span class="n">elem2</span> <span class="ow">in</span> <span class="n">zip</span><span class="p">(</span><span class="n">firstList</span><span class="p">,</span><span class="n">secondList</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># will merge both lists and produce tuples with both elements</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Tuples will stop at shortest list (in case of both lists having different len)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">a = (&#34;John&#34;, &#34;Charles&#34;, &#34;Mike&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">b = (&#34;Jenny&#34;, &#34;Christy&#34;, &#34;Monica&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">x = zip(a, b)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">#use the tuple() function to display a readable version of the result:
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">print(tuple(x))
</span></span></span><span class="line"><span class="cl"><span class="s1">o/p: ((&#39;John&#39;, &#39;Jenny&#39;), (&#39;Charles&#39;, &#39;Christy&#39;), (&#39;Mike&#39;, &#39;Monica&#39;))
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">any</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span> <span class="p">[</span> <span class="n">OPPOSITE</span> <span class="n">IS</span> <span class="o">=&gt;</span> <span class="o">**</span> <span class="n">all</span><span class="p">()</span> <span class="o">**</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">any</span><span class="p">(</span><span class="n">someList</span><span class="p">)</span> <span class="c1"># returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">list</span><span class="o">|</span><span class="n">tuple</span><span class="p">)</span> <span class="o">**</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># [when you need to attach indexes to lists or tuples ]</span>
</span></span><span class="line"><span class="cl"><span class="n">enumerate</span><span class="p">(</span><span class="n">anyList</span><span class="p">)</span> <span class="c1"># [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] =&gt; [(0, &#39;a&#39;), (1, &#39;b&#39;), (2, &#39;c&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">filter</span><span class="p">(</span><span class="n">function</span><span class="o">|</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="n">filter</span><span class="p">(</span><span class="n">myFunction</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="c1"># returns list with elements that returned true when passed in function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">*****************</span> <span class="n">import</span> <span class="n">bisect</span> <span class="o">***********************</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">number</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">)</span> <span class="o">**</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [ returns the index where the element should be inserted </span>
</span></span><span class="line"><span class="cl"><span class="c1">#		such that sorting order is maintained ]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># [1,2,4] =&gt; 2 coz &#39;3&#39; should be inserted in 2nd index to maintain sorting order</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># they have same arguments. Suppose the element we want to insert is already present</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the sorting list, the bisect_left() will return index left of the existing number</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and the bisect_right() or bisect() will return index right to the existing number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_right(list,number,begin,end) ** </span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_left(list,number,begin,end)  ** </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">The</span> <span class="n">above</span> <span class="mi">3</span> <span class="n">functions</span> <span class="n">are</span> <span class="n">exact</span> <span class="n">same</span> <span class="n">of</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(),</span> <span class="n">the</span> <span class="n">only</span> <span class="n">difference</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span> <span class="n">that</span> <span class="n">they</span> <span class="k">return</span> <span class="n">the</span> <span class="n">sorted</span> <span class="n">list</span> <span class="n">after</span> <span class="n">inserting</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">index</span><span class="o">.</span> <span class="n">The</span>
</span></span><span class="line"><span class="cl"><span class="n">left</span><span class="p">()</span> <span class="n">right</span><span class="p">()</span> <span class="n">logic</span> <span class="n">is</span> <span class="n">also</span> <span class="n">same</span> <span class="n">as</span> <span class="n">above</span><span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Getting ASCII value of a character</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">** ord(str) **
</span></span><span class="line"><span class="cl"># returns ascii value of the character , Example ord(&#34;a&#34;) = 97
</span></span><span class="line"><span class="cl">** chr(int) ** 
</span></span><span class="line"><span class="cl">#return character of given ascii value , Example chr(97) = &#34;a&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="clean-code-tips">Clean Code Tips</h1>
<ul>
<li>
<p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic üòé</p>
<p>A docstring is short for documentation string.</p>
<p>Python docstrings (documentation strings) are the¬†<a href="https://www.programiz.com/python-programming/string">string</a>¬†literals that appear right after the definition of a function, method, class, or module.</p>
<p>Triple quotes are used while writing docstrings. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span></code></pre></td></tr></table>
</div>
</div><p>Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>
<p>The docstrings are associated with the object as their¬†<code>__doc__</code>¬†attribute.</p>
<p>So, we can access the docstrings of the above function with the following lines of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2">2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3">3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span><span class="line"><span class="cl">print(double.__doc__)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Output</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Function to double the value
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>
<h3 id="definition-and-usage">Definition and Usage</h3>
<p>The¬†<code>assert</code>¬†keyword is used when debugging code.</p>
<p>The¬†<code>assert</code>¬†keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>
<p>You can write a message to be written if the code returns False, check the example below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span><span class="lnt" id="hl-14-3"><a class="lnlinks" href="#hl-14-3">3</a>
</span><span class="lnt" id="hl-14-4"><a class="lnlinks" href="#hl-14-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">x = &#34;hello&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#if condition returns False, AssertionError is raised:
</span></span><span class="line"><span class="cl">assert x == &#34;goodbye&#34;, &#34;x should be &#39;hello&#39;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>
<ul>
<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>
</ul>
</li>
</ul>
<h1 id="miscellaneous">Miscellaneous</h1>
<ul>
<li>
<p>How to take multiple line input in python?</p>
<ul>
<li>Using split() method</li>
<li>Using List comprehension</li>
</ul>
<p><strong>Syntax :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">input().split(separator, maxsplit)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="example">Example</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span><span class="lnt" id="hl-16-14"><a class="lnlinks" href="#hl-16-14">14</a>
</span><span class="lnt" id="hl-16-15"><a class="lnlinks" href="#hl-16-15">15</a>
</span><span class="lnt" id="hl-16-16"><a class="lnlinks" href="#hl-16-16">16</a>
</span><span class="lnt" id="hl-16-17"><a class="lnlinks" href="#hl-16-17">17</a>
</span><span class="lnt" id="hl-16-18"><a class="lnlinks" href="#hl-16-18">18</a>
</span><span class="lnt" id="hl-16-19"><a class="lnlinks" href="#hl-16-19">19</a>
</span><span class="lnt" id="hl-16-20"><a class="lnlinks" href="#hl-16-20">20</a>
</span><span class="lnt" id="hl-16-21"><a class="lnlinks" href="#hl-16-21">21</a>
</span><span class="lnt" id="hl-16-22"><a class="lnlinks" href="#hl-16-22">22</a>
</span><span class="lnt" id="hl-16-23"><a class="lnlinks" href="#hl-16-23">23</a>
</span><span class="lnt" id="hl-16-24"><a class="lnlinks" href="#hl-16-24">24</a>
</span><span class="lnt" id="hl-16-25"><a class="lnlinks" href="#hl-16-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing how to
</span></span><span class="line"><span class="cl"># multiple input using split
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Number of boys: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three inputs at a time
</span></span><span class="line"><span class="cl">x, y, z = input(&#34;Enter a three value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Total number of students: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of boys is : &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls is : &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">a, b = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(a, b))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl"># and type casting using list() function
</span></span><span class="line"><span class="cl">x = list(map(int, input(&#34;Enter a multiple value: &#34;).split()))
</span></span><span class="line"><span class="cl">print(&#34;List of students: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1"> 1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2"> 2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3"> 3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4"> 4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5"> 5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6"> 6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7"> 7</a>
</span><span class="lnt" id="hl-17-8"><a class="lnlinks" href="#hl-17-8"> 8</a>
</span><span class="lnt" id="hl-17-9"><a class="lnlinks" href="#hl-17-9"> 9</a>
</span><span class="lnt" id="hl-17-10"><a class="lnlinks" href="#hl-17-10">10</a>
</span><span class="lnt" id="hl-17-11"><a class="lnlinks" href="#hl-17-11">11</a>
</span><span class="lnt" id="hl-17-12"><a class="lnlinks" href="#hl-17-12">12</a>
</span><span class="lnt" id="hl-17-13"><a class="lnlinks" href="#hl-17-13">13</a>
</span><span class="lnt" id="hl-17-14"><a class="lnlinks" href="#hl-17-14">14</a>
</span><span class="lnt" id="hl-17-15"><a class="lnlinks" href="#hl-17-15">15</a>
</span><span class="lnt" id="hl-17-16"><a class="lnlinks" href="#hl-17-16">16</a>
</span><span class="lnt" id="hl-17-17"><a class="lnlinks" href="#hl-17-17">17</a>
</span><span class="lnt" id="hl-17-18"><a class="lnlinks" href="#hl-17-18">18</a>
</span><span class="lnt" id="hl-17-19"><a class="lnlinks" href="#hl-17-19">19</a>
</span><span class="lnt" id="hl-17-20"><a class="lnlinks" href="#hl-17-20">20</a>
</span><span class="lnt" id="hl-17-21"><a class="lnlinks" href="#hl-17-21">21</a>
</span><span class="lnt" id="hl-17-22"><a class="lnlinks" href="#hl-17-22">22</a>
</span><span class="lnt" id="hl-17-23"><a class="lnlinks" href="#hl-17-23">23</a>
</span><span class="lnt" id="hl-17-24"><a class="lnlinks" href="#hl-17-24">24</a>
</span><span class="lnt" id="hl-17-25"><a class="lnlinks" href="#hl-17-25">25</a>
</span><span class="lnt" id="hl-17-26"><a class="lnlinks" href="#hl-17-26">26</a>
</span><span class="lnt" id="hl-17-27"><a class="lnlinks" href="#hl-17-27">27</a>
</span><span class="lnt" id="hl-17-28"><a class="lnlinks" href="#hl-17-28">28</a>
</span><span class="lnt" id="hl-17-29"><a class="lnlinks" href="#hl-17-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing
</span></span><span class="line"><span class="cl"># how to take multiple input
</span></span><span class="line"><span class="cl"># using List comprehension
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two input at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three input at a time
</span></span><span class="line"><span class="cl">x, y, z = [int(x) for x in input(&#34;Enter three value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Third Number is: &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(x, y))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time separated by comma
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split(&#34;,&#34;)]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4">4</a>
</span><span class="lnt" id="hl-18-5"><a class="lnlinks" href="#hl-18-5">5</a>
</span><span class="lnt" id="hl-18-6"><a class="lnlinks" href="#hl-18-6">6</a>
</span><span class="lnt" id="hl-18-7"><a class="lnlinks" href="#hl-18-7">7</a>
</span><span class="lnt" id="hl-18-8"><a class="lnlinks" href="#hl-18-8">8</a>
</span><span class="lnt" id="hl-18-9"><a class="lnlinks" href="#hl-18-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Syntax :
</span></span><span class="line"><span class="cl">math.log(a,Base)
</span></span><span class="line"><span class="cl">Parameters :a : The numeric value
</span></span><span class="line"><span class="cl">Base :  Base to which the logarithm has to be computed.
</span></span><span class="line"><span class="cl">Return Value :
</span></span><span class="line"><span class="cl">Returns natural log if 1 argument is passed and log with
</span></span><span class="line"><span class="cl">specified base if 2 arguments are passed.
</span></span><span class="line"><span class="cl">Exceptions :
</span></span><span class="line"><span class="cl">Raises ValueError is a negative no. is passed as argument.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2">2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3">3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4">4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5">5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6">6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7">7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8">8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base e of 14
</span></span><span class="line"><span class="cl">print (&#34;Natural logarithm of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base 5 of 14
</span></span><span class="line"><span class="cl">print (&#34;Logarithm base 5 of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14,5))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Finding the ceiling and the floor value
<ul>
<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1"> 1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2"> 2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3"> 3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4"> 4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5"> 5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6"> 6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7"> 7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8"> 8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9"> 9</a>
</span><span class="lnt" id="hl-20-10"><a class="lnlinks" href="#hl-20-10">10</a>
</span><span class="lnt" id="hl-20-11"><a class="lnlinks" href="#hl-20-11">11</a>
</span><span class="lnt" id="hl-20-12"><a class="lnlinks" href="#hl-20-12">12</a>
</span><span class="lnt" id="hl-20-13"><a class="lnlinks" href="#hl-20-13">13</a>
</span><span class="lnt" id="hl-20-14"><a class="lnlinks" href="#hl-20-14">14</a>
</span><span class="lnt" id="hl-20-15"><a class="lnlinks" href="#hl-20-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python code to demonstrate the working of
</span></span><span class="line"><span class="cl"># ceil() and floor()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># importing &#34;math&#34; for mathematical operations
</span></span><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a = 2.3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the ceil of 2.3 (i.e 3)
</span></span><span class="line"><span class="cl">print (&#34;The ceil of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.ceil(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the floor of 2.3 (i.e 2)
</span></span><span class="line"><span class="cl">print (&#34;The floor of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.floor(a))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Other Important functions</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span><span class="lnt" id="hl-21-19"><a class="lnlinks" href="#hl-21-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#Constants
</span></span><span class="line"><span class="cl"># Print the value of Euler e (2.718281828459045)
</span></span><span class="line"><span class="cl">print (math.e)
</span></span><span class="line"><span class="cl"># Print the value of pi (3.141592653589793)
</span></span><span class="line"><span class="cl">print (math.pi)
</span></span><span class="line"><span class="cl">print (math.gcd(b, a))
</span></span><span class="line"><span class="cl">print (pow(3,4))
</span></span><span class="line"><span class="cl"># print the square root of 4
</span></span><span class="line"><span class="cl">print(math.sqrt(4))
</span></span><span class="line"><span class="cl">a = math.pi/6
</span></span><span class="line"><span class="cl">b = 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from radians to degrees
</span></span><span class="line"><span class="cl">print (&#34;The converted value from radians to degrees is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.degrees(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from degrees to radians
</span></span><span class="line"><span class="cl">print (&#34;The converted value from degrees to radians is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.radians(b))
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** bin(int) **
</span></span><span class="line"><span class="cl">bin(anyNumber) # Returns binary version of number
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** divmod(int,int) **
</span></span><span class="line"><span class="cl">divmod(dividend,divisor) # returns tuple like (quotient, remainder)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-the-custom-comparator-works">How the custom comparator works</h2>
<p>When providing a custom comparator, it should generally return an integer/float value that follows the following pattern (as with most other programming languages and frameworks):</p>
<ul>
<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted¬†<em>before</em>¬†the right item</li>
<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted¬†<em>after</em>¬†the right item</li>
<li>return¬†<code>0</code>¬†when both the left and the right item have the same weight and should be ordered &ldquo;equally&rdquo; without precedence</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1"> 1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2"> 2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3"> 3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4"> 4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5"> 5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6"> 6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7"> 7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8"> 8</a>
</span><span class="lnt" id="hl-23-9"><a class="lnlinks" href="#hl-23-9"> 9</a>
</span><span class="lnt" id="hl-23-10"><a class="lnlinks" href="#hl-23-10">10</a>
</span><span class="lnt" id="hl-23-11"><a class="lnlinks" href="#hl-23-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">from</span> <span class="n">functools</span> <span class="n">import</span> <span class="n">cmp_to_key</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted</span><span class="p">(</span><span class="n">mylist</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="n">compare</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>Python integer division behaves differently with -ve numbers ex: -3//2 will give -2 answer instead of -1 so always use int(-3/2) for integer division in problems</p>
</blockquote>
<h1 id="resources">Resources</h1>
<p><a href="https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32">The Modulo Operation (%) With Negative Numbers in Python</a></p>
<h3 id="cheat-sheet-pdf">Cheat Sheet PDF</h3>
<p><a href="https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing"><strong>Click Here</strong></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>System design interview for IT companies</title>
      <link>https://samirpaulb.github.io/posts/system-design-interview-for-it-companies/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/system-design-interview-for-it-companies/</guid>
      <description>System design interview for IT companies</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/systemcycle.png" alt="system development life cycle"  />
</p>
<blockquote>
<p>How to prepare system design questions for an IT company</p>
</blockquote>
<p>Original source and Credit: <a href="https://github.com/checkcheckzz/system-design-interview">github.com/checkcheckzz/system-design-interview</a></p>
<hr>
<p>System design is a very broad topic. Even a software engineer with many years of working experience at a top IT company may not be an expert on system design. If you want to become an expert, you need to read many books, articles, and solve real large scale system design problems.</p>
<p>This repository only teaches you how to handle the system design interview with a systematic approach in a short time. You can dive into each topic if you have time. Of course, welcome to add your thoughts!</p>
<h3 id="system-design-interview-tips">System Design Interview Tips:</h3>
<p><strong>Clarify the constraints and identify the user cases</strong></p>
<p>Spend a few minutes questioning the interviewer and agreeing on the scope of the system.
Remember to make sure you know all the requirements the interviewer didn&rsquo;t tell you about in the beginning.</p>
<p>User cases indicate the main functions of the system, and constraints list the scale of the system such as requests
per second, requests types, data written per second, data read per second.</p>
<p><strong>High-level architecture design</strong></p>
<p>Sketch the important components and the connections between them, but don&rsquo;t go into some details.
Usually, a scalable system includes webserver (load balancer), service (service partition), database (primary/secondary database cluster plug cache).</p>
<p><strong>Component design</strong></p>
<p>For each component, you need to write the specific APIs for each component. You may need to finish
the detailed OOD design for a particular function. You may also need to design the database schema for the database.</p>
<h3 id="basic-knowledge-about-system-design">Basic Knowledge about System Design:</h3>
<p>Here are some articles about system design related topics.</p>
<ul>
<li><a href="https://blog.pramp.com/system-design-interview-process-e91aae2dbe83">The Anatomy Of A System Design Interview</a></li>
<li><a href="https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26">How to Succeed in a System Design Interview</a></li>
<li><a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">How to Rock a Systems Design Interview</a></li>
<li><a href="https://www.hiredintech.com/app#system-design">System Interview</a></li>
<li><a href="https://www.lecloud.net/tagged/scalability">Scalability for Dummies</a></li>
<li><a href="https://www.aosabook.org/en/distsys.html">Scalable Web Architecture and Distributed Systems</a></li>
<li><a href="https://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/">Numbers Everyone Should Know</a></li>
<li><a href="https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf">Fallacies of distributed systems</a></li>
<li><a href="https://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">Scalable System Design Patterns</a></li>
<li><a href="https://lethain.com/introduction-to-architecting-systems-for-scale/">Introduction to Architecting Systems for Scale</a></li>
<li><a href="https://snarfed.org/transactions_across_datacenters_io.html">Transactions Across Datacenters</a></li>
<li><a href="https://ksat.me/a-plain-english-introduction-to-cap-theorem">A Plain English Introduction to CAP Theorem</a></li>
<li><a href="https://github.com/henryr/cap-faq">The CAP FAQ</a></li>
<li><a href="https://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">Paxos Made Simple</a></li>
<li><a href="https://www.tom-e-white.com/2007/11/consistent-hashing.html">Consistent Hashing</a></li>
<li><a href="https://horicky.blogspot.com/2009/11/nosql-patterns.html">NOSQL Patterns</a></li>
<li><a href="https://www.slideshare.net/jboner/scalability-availability-stability-patterns">Scalability, Availability &amp; Stability Patterns</a></li>
</ul>
<p>Of course, if you want to dive into system related topics, here is a good collection of reading list about <a href="https://github.com/mmcgrana/services-engineering">services-engineering</a>, and
a good collection of material about <a href="https://dancres.github.io/Pages/">distributed systems</a>.</p>
<h3 id="company-engineering-blogs">Company Engineering Blogs:</h3>
<p>If you are going to have an onsite with a company, you should read their engineering blog.</p>
<ul>
<li><a href="https://highscalability.com/">High Scalability</a></li>
<li><a href="https://github.com/blog/category/engineering">The GitHub Blog</a></li>
<li><a href="https://engineering.quora.com/">Engineering at Quora</a></li>
<li><a href="https://engineeringblog.yelp.com/">Yelp Engineering Blog</a></li>
<li><a href="https://engineering.twitter.com/">Twitter Engineering</a></li>
<li><a href="https://www.facebook.com/Engineering">Facebook Engineering</a></li>
<li><a href="https://eng.yammer.com/blog/">Yammer Engineering</a></li>
<li><a href="https://codeascraft.com/">Etsy Code as Craft</a></li>
<li><a href="https://engineering.foursquare.com/">Foursquare Engineering Blog</a></li>
<li><a href="https://medium.com/airbnb-engineering">Airbnb Engineering</a></li>
<li><a href="https://engineering.webengage.com/">WebEngage Engineering Blog</a></li>
<li><a href="https://engineering.linkedin.com/blog">LinkedIn Engineering</a></li>
<li><a href="https://techblog.netflix.com/">The Netflix Tech Blog</a></li>
<li><a href="https://www.simple.com/engineering/">BankSimple Simple Blog</a></li>
<li><a href="https://corner.squareup.com/">Square The Corner</a></li>
<li><a href="https://developers.soundcloud.com/blog/">SoundCloud Backstage Blog</a></li>
<li><a href="https://code.flickr.net/">Flickr Code</a></li>
<li><a href="https://instagram-engineering.tumblr.com/">Instagram Engineering</a></li>
<li><a href="https://tech.dropbox.com/">Dropbox Tech Blog</a></li>
<li><a href="https://blog.cloudera.com/">Cloudera Developer Blog</a></li>
<li><a href="https://bandcamptech.wordpress.com/">Bandcamp Tech</a></li>
<li><a href="https://tech.oyster.com/">Oyster Tech Blog</a></li>
<li><a href="https://www.redditblog.com/">THE REDDIT BLOG</a></li>
<li><a href="https://engineering.groupon.com/">Groupon Engineering Blog</a></li>
<li><a href="https://devblog.songkick.com/">Songkick Technology Blog</a></li>
<li><a href="https://ai.googleblog.com/">Google AI Blog</a></li>
<li><a href="https://developers.googleblog.com/">Google Developers Blog</a></li>
<li><a href="https://engineering.pinterest.com/">Pinterest Engineering Blog</a></li>
<li><a href="https://www.twilio.com/engineering">Twilio Engineering Blog</a></li>
<li><a href="https://word.bitly.com/">Bitly Engineering Blog</a></li>
<li><a href="https://eng.uber.com/">Uber Engineering Blog </a></li>
<li><a href="https://engineering.godaddy.com/">Godaddy Engineering</a></li>
<li><a href="https://blogs.splunk.com/">Splunk Blog</a></li>
<li><a href="https://building.coursera.org/">Coursera Engineering Blog</a></li>
<li><a href="https://www.paypal-engineering.com/">PayPal Engineering Blog</a></li>
<li><a href="https://engblog.nextdoor.com/">Nextdoor Engineering Blog</a></li>
<li><a href="https://blog.booking.com/">Booking.com Development Blog</a></li>
<li><a href="https://engineering.microsoft.com/">Microsoft Engineering Blog</a></li>
<li><a href="https://blog.scalyr.com/">Scalyr Engineering Blog</a></li>
<li><a href="https://medium.com/myntra-engineering">Myntra Engineering Blog</a></li>
<li><a href="https://www.fastly.com/blog/">Fastly Blog</a></li>
<li><a href="https://aws.amazon.com/blogs/architecture/">AWS Architecture Blog</a></li>
<li><a href="https://eng.lyft.com/">Lyft Engineering Blog</a></li>
<li><a href="https://medium.com/wish-engineering">Wish Engineering</a></li>
<li><a href="https://doordash.engineering/">Doordash Engineering</a></li>
<li><a href="https://community.snowflake.com/s/blog">SnowFlake Blog</a></li>
<li><a href="https://medium.com/palantir/tech/home">Palantir Blog</a></li>
</ul>
<h3 id="products-and-systems">Products and Systems:</h3>
<p>The following papers/articles/slides can help you to understand the general design idea of different real products and systems.</p>
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf">MapReduce: Simplified Data Processing on Large Clusters</a></li>
<li><a href="https://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf">Bigtable: A Distributed Storage System for Structured Data</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf">The Google File System</a></li>
<li><a href="https://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf">The Chubby lock service for loosely-coupled distributed systems</a></li>
<li><a href="https://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf">Dynamo: Amazon&rsquo;s Highly Available Key-value Store</a></li>
<li><a href="https://www.slideshare.net/oemebamo/introduction-to-memcached">Introduction to Memcached</a></li>
<li><a href="https://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666">Cassandra Introduction Features</a></li>
<li><a href="https://www.slideshare.net/alexbaranau/intro-to-hbase">Introduction to HBase</a></li>
<li><a href="https://www.slideshare.net/mdirolf/introduction-to-mongodb">Introduction to MongoDB</a></li>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Introduction to Redis</a></li>
<li><a href="https://www.slideshare.net/previa/storm-16094009">Storm</a></li>
<li><a href="https://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper">Introduction to Zookeeper</a></li>
<li><a href="https://www.slideshare.net/mumrah/kafka-talk-tri-hug">Kafka</a></li>
<li><a href="https://highscalability.com/youtube-architecture">YouTube Architecture</a></li>
<li><a href="https://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html">Scaling Pinterest</a></li>
<li><a href="https://highscalability.com/google-architecture">Google Architecture</a></li>
<li><a href="https://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster">Scaling Twitter</a></li>
<li><a href="https://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">The WhatsApp Architecture</a></li>
<li><a href="https://highscalability.com/flickr-architecture">Flickr Architecture</a></li>
<li><a href="https://highscalability.com/amazon-architecture">Amazon Architecture</a></li>
<li><a href="https://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html">Stack Overflow Architecture</a></li>
<li><a href="https://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html">Pinterest Architecture</a></li>
<li><a href="https://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html">Tumblr Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Instagram Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html">TripAdvisor Architecture</a></li>
<li><a href="https://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html">Scaling Mailbox</a></li>
<li><a href="https://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">Salesforce Architecture </a></li>
<li><a href="https://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">ESPN Architecture</a></li>
<li><a href="https://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html">Uber Architecture</a></li>
<li><a href="https://www.youtube.com/watch?v=PE4gwstWhmc">DropBox Design</a></li>
<li><a href="https://www.splunk.com/view/SP-CAAABF9">Splunk Architecture</a></li>
</ul>
<h3 id="hot-questions-and-reference">Hot Questions and Reference:</h3>
<p>There are some good references for each question. The references here are slides and articles.</p>
<p><strong>Design a CDN network</strong><br>
Reference:</p>
<ul>
<li><a href="https://kilthub.cmu.edu/articles/journal_contribution/Globally_distributed_content_delivery/6605972">Globally Distributed Content Delivery</a></li>
</ul>
<p><strong>Design a Google document system</strong><br>
Reference:</p>
<ul>
<li><a href="https://code.google.com/p/google-mobwrite/">google-mobwrite</a></li>
<li><a href="https://neil.fraser.name/writing/sync/">Differential Synchronization</a></li>
</ul>
<p><strong>Design a random ID generation system</strong><br>
Reference:</p>
<ul>
<li><a href="https://blog.twitter.com/2010/announcing-snowflake">Announcing Snowflake</a></li>
<li><a href="https://github.com/twitter/snowflake/">snowflake</a></li>
</ul>
<p><strong>Design a key-value database</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Introduction to Redis</a></li>
</ul>
<p><strong>Design the Facebook news feed function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed">What are best practices for building something like a News Feed?</a></li>
<li><a href="https://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed">What are the scaling issues to keep in mind while developing a social network feed?</a></li>
<li><a href="https://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture">Activity Feeds Architecture</a></li>
</ul>
<p><strong>Design the Facebook timeline function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.facebook.com/note.php?note_id=10150468255628920">Building Timeline</a></li>
<li><a href="https://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html">Facebook Timeline</a></li>
</ul>
<p><strong>Design a function to return the top k requests during past time interval</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf">Efficient Computation of Frequent and Top-k Elements in Data Streams</a></li>
<li><a href="https://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf">An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows</a></li>
</ul>
<p><strong>Design an online multiplayer card game</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html">How to Create an Asynchronous Multiplayer Game</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part2.html">How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part3.html">How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part4-html.html#comment-4447">How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking</a></li>
<li><a href="https://buildnewgames.com/real-time-multiplayer/">Real Time Multiplayer in HTML5</a></li>
</ul>
<p><strong>Design a graph search function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920">Building out the infrastructure for Graph Search</a></li>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920">Indexing and ranking in Graph Search</a></li>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920">The natural language interface of Graph Search</a> and <a href="https://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf">Erlang at Facebook</a></li>
</ul>
<p><strong>Design a picture sharing system</strong><br>
Reference:</p>
<ul>
<li><a href="https://highscalability.com/flickr-architecture">Flickr Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Instagram Architecture</a></li>
</ul>
<p><strong>Design a search engine</strong><br>
Reference:</p>
<ul>
<li><a href="https://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search">How would you implement Google Search?</a></li>
<li><a href="https://www.ardendertat.com/2012/01/11/implementing-search-engines/">Implementing Search Engines</a></li>
</ul>
<p><strong>Design a recommendation system</strong><br>
Reference:</p>
<ul>
<li><a href="https://tech.hulu.com/blog/2011/09/19/recommendation-system.html">Hulu‚Äôs Recommendation System</a></li>
<li><a href="https://ijcai13.org/files/tutorial_slides/td3.pdf">Recommender Systems</a></li>
</ul>
<p><strong>Design a tinyurl system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://n00tc0d3r.blogspot.com/">System Design for Big Data-tinyurl</a></li>
<li><a href="https://developers.google.com/url-shortener/?csw=1">URL Shortener API</a></li>
</ul>
<p><strong>Design a garbage collection system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/">Baby&rsquo;s First Garbage Collector</a></li>
</ul>
<p><strong>Design a scalable web crawling system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch">How can I build a web crawler from scratch?</a></li>
</ul>
<p><strong>Design the Facebook chat function</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf">Erlang at Facebook</a></li>
<li><a href="https://www.facebook.com/note.php?note_id=14218138919&amp;id=9445547199&amp;index=0">Facebook Chat</a></li>
</ul>
<p><strong>Design a trending topic system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/">Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm</a></li>
<li><a href="https://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/">Early detection of Twitter trends explained</a></li>
</ul>
<p><strong>Design a cache system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.slideshare.net/oemebamo/introduction-to-memcached">Introduction to Memcached</a></li>
</ul>
<h3 id="good-books">Good Books:</h3>
<ul>
<li><a href="https://www.amazon.com/Big-Data-Principles-practices-scalable/dp/1617290343">Big Data: Principles and best practices of scalable realtime data systems</a></li>
<li><a href="https://www.amazon.com/Real-Time-Analytics-Techniques-Visualize-Streaming/dp/1118837916">Real-Time Analytics: Techniques to Analyze and Visualize Streaming Data</a></li>
<li><a href="https://www.amazon.com/Building-Microservices-Sam-Newman/dp/1491950358">Building Microservices: Designing Fine-Grained Systems</a></li>
<li><a href="https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li>
</ul>
<h3 id="object-oriented-design">Object Oriented Design:</h3>
<h4 id="tips-for-ood-interview">Tips for OOD Interview</h4>
<p><strong>Clarify the scenario, write out user cases</strong></p>
<p>Use case is a description of sequences of events that, taken together, lead to a system doing something useful. Who is going to use it and how they are going to use it. The system may be very simple or very complicated.</p>
<p>Special system requirements such as multi-threading, read or write oriented.</p>
<p><strong>Define objects</strong></p>
<p>Map identity to class: one scenario for one class, each core object in this scenario for one class.</p>
<p>Consider the relationships among classes: certain class must have unique instance, one object has many other objects (composition), one object is another object (inheritance).</p>
<p>Identify attributes for each class: change noun to variable and action to methods.</p>
<p>Use design patterns such that it can be reused in multiple applications.</p>
<h4 id="useful-websites">Useful Websites</h4>
<ul>
<li><a href="https://sourcemaking.com/design-patterns-and-tips">101 Design Patterns &amp; Tips for Developers</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Curated List of Project Based Tutorials</title>
      <link>https://samirpaulb.github.io/posts/curated-list-of-project-based-tutorials/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/curated-list-of-project-based-tutorials/</guid>
      <description>Curated List of Project Based Tutorials</description>
      <content:encoded><![CDATA[<h1 id="project-based-learning">Project Based Learning</h1>
<blockquote>
<p>A list of programming tutorials in which aspiring software developers learn how to build an application from scratch. These tutorials are divided into different primary programming languages. Tutorials may involve multiple technologies and languages.</p>
</blockquote>
<h2 id="table-of-contents">Table of Contents:</h2>
<ul>
<li><a href="#c">C#</a></li>
<li><a href="#cc">C/C++</a></li>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#f">F#</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html-and-css">HTML/CSS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#kotlin">Kotlin</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#ocaml">OCaml</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#additional-resources">Additional resources</a></li>
</ul>
<h2 id="cc">C/C++:</h2>
<ul>
<li><a href="https://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 14 on is written in C)</li>
<li><a href="https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory">Memory Allocators 101 - Write a simple memory allocator</a></li>
<li><a href="https://brennan.io/2015/01/16/write-a-shell-in-c/">Write a Shell in C</a></li>
<li><a href="https://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/">Write a FUSE Filesystem</a></li>
<li><a href="https://viewsourcecode.org/snaptoken/kilo/">Build Your Own Text Editor</a></li>
<li><a href="https://www.buildyourownlisp.com/">Build Your Own Lisp</a></li>
<li><a href="https://nesdoug.com/">How to Program an NES Game in C</a></li>
<li><a href="https://github.com/tuhdo/os01">Write an OS from scratch</a></li>
<li><a href="https://github.com/cfenollosa/os-tutorial">How to create an OS from scratch </a></li>
<li><a href="https://austinmorlan.com/posts/chip8_emulator/">Building a CHIP-8 Emulator</a></li>
<li><a href="https://lazyfoo.net/tutorials/SDL/">Beginning Game Programming with C++ and SDL</a></li>
<li><a href="https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">Implementing a Key-Value Store</a></li>
<li>Tiny 3D graphics projects
<ul>
<li><a href="https://github.com/ssloy/tinyrenderer/wiki">Tiny Renderer or how OpenGL works: software rendering in 500 lines of code</a></li>
<li><a href="https://github.com/ssloy/tinyraytracer/wiki">Understandable RayTracing in 256 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinykaboom/wiki">KABOOM! in 180 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinyraycaster/wiki">486 lines of C++: old-school FPS in a weekend</a></li>
</ul>
</li>
<li>Writing a minimal x86-64 JIT compiler in C++
<ul>
<li><a href="https://solarianprogrammer.com/2018/01/10/writing-minimal-x86-64-jit-compiler-cpp/">Part 1</a></li>
<li><a href="https://solarianprogrammer.com/2018/01/12/writing-minimal-x86-64-jit-compiler-cpp-part-2/">Part 2</a></li>
</ul>
</li>
<li><a href="https://howistart.org/posts/cpp/1/index.html">Build a Live Code-reloader Library for C++</a></li>
<li><a href="https://github.com/jamesroutley/write-a-hash-table">Write a hash table in C</a></li>
<li><a href="https://cstack.github.io/db_tutorial/">Let&rsquo;s Build a Simple Database</a></li>
<li><a href="https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel">Let&rsquo;s Write a Kernel</a></li>
<li><a href="https://3zanders.co.uk/2017/10/13/writing-a-bootloader/">Write a Bootloader in C</a></li>
<li><a href="https://blog.lizzie.io/linux-containers-in-500-loc.html">Linux Container in 500 Lines of Code</a></li>
<li><a href="https://justinmeiners.github.io/lc3-vm/">Write Your Own Virtual Machine</a></li>
<li><a href="https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html">Learning KVM - Implement Your Own Linux Kernel</a></li>
<li>Write a C compiler
<ul>
<li><a href="https://norasandler.com/2017/11/29/Write-a-Compiler.html">Part 1: Integers, Lexing and Code Generation</a></li>
<li><a href="https://norasandler.com/2017/12/05/Write-a-Compiler-2.html">Part 2: Unary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/15/Write-a-Compiler-3.html">Part 3: Binary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/28/Write-a-Compiler-4.html">Part 4: Even More Binary Operators</a></li>
<li><a href="https://norasandler.com/2018/01/08/Write-a-Compiler-5.html">Part 5: Local Variables</a></li>
<li><a href="https://norasandler.com/2018/02/25/Write-a-Compiler-6.html">Part 6: Conditionals</a></li>
<li><a href="https://norasandler.com/2018/03/14/Write-a-Compiler-7.html">Part 7: Compound Statements</a></li>
<li><a href="https://norasandler.com/2018/04/10/Write-a-Compiler-8.html">Part 8: Loops</a></li>
<li><a href="https://norasandler.com/2018/06/27/Write-a-Compiler-9.html">Part 9: Functions</a></li>
<li><a href="https://norasandler.com/2019/02/18/Write-a-Compiler-10.html">Part 10: Global Variables</a></li>
</ul>
</li>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm">Implementing a Language with LLVM</a></li>
<li><a href="https://jguegant.github.io//jguegant.github.io/blogs/tech/meta-crush-saga.html">Meta Crush Saga: a C++17 compile-time game</a></li>
<li><a href="https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0">High-Performance Matrix Multiplication</a></li>
<li>Space Invaders from Scratch
<ul>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-1.html">Part 1</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-2.html">Part 2</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-3.html">Part 3</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-4.html">Part 4</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-5.html">Part 5</a></li>
</ul>
</li>
<li><a href="https://javilop.com/gamedev/tetris-tutorial-in-c-platform-independent-focused-in-game-logic-for-beginners/">Tetris Tutorial in C++ Platform Independent</a></li>
<li>Writing a Linux Debugger
<ul>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">Part 1: Setup</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/">Part 2: Breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-registers/">Part 3: Registers and memory</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-elf-dwarf/">Part 4: Elves and dwarves</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-signal/">Part 5: Source and signals</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-dwarf-step/">Part 6: Source-level stepping</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-break/">Part 7: Source-level breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-unwinding/">Part 8: Stack unwinding</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-variables/">Part 9: Handling variables</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-advanced-topics/">Part 10: Advanced topics</a></li>
</ul>
</li>
<li>Let&rsquo;s write a compiler
<ul>
<li><a href="https://briancallahan.net/blog/20210814.html">Part 1: Introduction, selecting a language, and doing some planning</a></li>
<li><a href="https://briancallahan.net/blog/20210815.html">Part 2: A lexer</a></li>
<li><a href="https://briancallahan.net/blog/20210816.html">Part 3: A parser</a></li>
<li><a href="https://briancallahan.net/blog/20210817.html">Part 4: Testing</a></li>
<li><a href="https://briancallahan.net/blog/20210818.html">Part 5: A code generator</a></li>
<li><a href="https://briancallahan.net/blog/20210819.html">Part 6: Input and output</a></li>
<li><a href="https://briancallahan.net/blog/20210822.html">Part 7: Arrays</a></li>
<li><a href="https://briancallahan.net/blog/20210826.html">Part 8: Strings, forward references, and conclusion</a></li>
</ul>
</li>
</ul>
<h3 id="network-programming">Network programming</h3>
<ul>
<li>
<p>Let&rsquo;s Code a TCP/IP Stack</p>
<ul>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/">Part 1: Ethernet &amp; ARP</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-2-ipv4-icmpv4/">Part 2: IPv4 &amp; ICMPv4</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-3-tcp-handshake/">Part 3: TCP Basics &amp; Handshake</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-4-tcp-data-flow-socket-api/">Part 4: TCP Data Flow &amp; Socket API</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-5-tcp-retransmission/">Part 5: TCP Retransmission</a></li>
</ul>
</li>
<li>
<p>Programming concurrent servers</p>
<ul>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-1-introduction/">Part 1 - Introduction</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-2-threads/">Part 2 - Threads</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-3-event-driven/">Part 3 - Event-driven</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-4-libuv/">Part 4 - libuv</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-5-redis-case-study/">Part 5 - Redis case study</a></li>
<li><a href="https://eli.thegreenplace.net/2018/concurrent-servers-part-6-callbacks-promises-and-asyncawait/">Part 6 - Callbacks, Promises and async/await</a></li>
</ul>
</li>
<li>
<p>MQTT Broker from scratch</p>
<ul>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker">Part 1 - The protocol</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p2">Part 2 - Networking</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p3">Part 3 - Server</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p4">Part 4 - Data structures</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p5">Part 5 - Topic abstraction</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p6">Part 6 - Handlers</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus">Bonus - Multithreading</a></li>
</ul>
</li>
</ul>
<h3 id="opengl">OpenGL:</h3>
<ul>
<li>Creating 2D Breakout game clone in C++ with OpenGL
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Breakout">Breakout</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Setting-up">Setting up</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Rendering-Sprites">Rendering Sprites</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Levels">Levels</a></li>
<li>Collisions
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Ball">Ball</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-detection">Collision detection</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-resolution">Collision resolution</a></li>
</ul>
</li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Particles">Particles</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Postprocessing">Postprocessing</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Powerups">Powerups</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Audio">Audio</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Render-text">Render text</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Final-thoughts">Final thoughts</a></li>
</ul>
</li>
<li><a href="https://handmadehero.org">Handmade Hero</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLMZ_9w2XRxiZq1vfw1lrpCMRDufe2MKV_">How to Make Minecraft in C++/OpenGL</a> (video)</li>
</ul>
<h2 id="c">C#:</h2>
<ul>
<li><a href="https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/">Learn C# By Building a Simple RPG Game</a></li>
<li><a href="https://roguesharp.wordpress.com/">Create a Rogue-like game in C#</a></li>
<li><a href="https://www.intertech.com/Blog/xamarin-tutorial-part-1-create-a-blank-app/">Create a Blank App with C# and Xamarin (work in progress)</a></li>
<li><a href="https://www.raywenderlich.com/134049/building-ios-apps-with-xamarin-and-visual-studio">Build iOS Photo Library App with Xamarin and Visual Studio</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLVMqA0_8O85yC78I4Xj7z48ES48IQBa7p">Building the CoreWiki</a> This is a Wiki-style content management system that has been completely written in C# with ASP.NET Core and Razor Pages. You can find the source code <a href="https://github.com/csharpfritz/CoreWiki">here</a>.</li>
</ul>
<h2 id="clojure">Clojure:</h2>
<ul>
<li><a href="https://howistart.org/posts/clojure/1/index.html">Build a Twitter Bot with Clojure</a></li>
<li><a href="https://bernhardwenzel.com/articles/clojure-spellchecker/">Building a Spell-Checker</a></li>
<li><a href="https://hackernoon.com/building-a-jira-integration-with-clojure-atlassian-connect-506ebd112807">Building a JIRA integration with Clojure &amp; Atlassian Connect</a></li>
<li><a href="https://github.com/aliaksandr-s/prototyping-with-clojure">Prototyping with Clojure</a></li>
<li><a href="https://shaunlebron.github.io/t3tr0s-slides">Tetris in ClojureScript</a></li>
</ul>
<h2 id="dart">Dart:</h2>
<h3 id="flutter">Flutter:</h3>
<ul>
<li><a href="https://youtu.be/O3nmP-lZAdg">Amazon Clone with Admin Panel</a></li>
<li><a href="https://youtu.be/7dAt-JMSCVQ">Food Delivery App</a></li>
<li><a href="https://youtu.be/0_GJ1w_iG44">Google Docs Clone</a></li>
<li><a href="https://youtu.be/mEPm9w5QlJM">Instagram Clone</a></li>
<li><a href="https://youtu.be/Aut-wfXacXg">Multiplayer TicTacToe Game</a></li>
<li><a href="https://youtu.be/4E4V9F3cbp4">TikTok Clone</a></li>
<li><a href="https://youtu.be/71AsYo2q_0Y">Ticket Booking App</a></li>
<li><a href="https://youtu.be/x4DydJKVvQk">Travel App</a></li>
<li><a href="https://youtu.be/U9YKZrDX0CQ">Twitch Clone</a></li>
<li><a href="https://youtu.be/yqwfP2vXWJQ">WhatsApp Clone</a></li>
<li><a href="https://youtu.be/_W0RN_Cqhpg">Wordle Clone</a></li>
<li><a href="https://youtu.be/sMA1dKbv33Y">Zoom Clone</a></li>
</ul>
<h2 id="elixir">Elixir</h2>
<ul>
<li><a href="https://sheharyar.me/blog/simple-chat-phoenix-elixir/">Building a Simple Chat App With Elixir and Phoenix</a></li>
<li><a href="https://medium.com/free-code-camp/how-to-write-a-super-fast-link-shortener-with-elixir-phoenix-and-mnesia-70ffa1564b3c">How to write a super fast link shortener with Elixir, Phoenix, and Mnesia</a></li>
</ul>
<h2 id="erlang">Erlang</h2>
<ul>
<li><a href="https://medium.com/@kansi/chatbus-build-your-first-multi-user-chat-room-app-with-erlang-otp-b55f72064901">ChatBus : build your first multi-user chat room app with Erlang/OTP</a></li>
<li><a href="https://marianoguerra.org/posts/making-a-chat-app-with-erlang-rebar-cowboy-and-bullet.html">Making a Chat App with Erlang, Rebar, Cowboy and Bullet</a></li>
</ul>
<h2 id="f">F#:</h2>
<ul>
<li><a href="https://tomasp.net/blog/2018/write-your-own-excel">Write your own Excel in 100 lines of F#</a></li>
</ul>
<h2 id="java">Java:</h2>
<ul>
<li><a href="https://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 4-13 is written in Java)</li>
<li><a href="https://javarevisited.blogspot.com/2015/06/how-to-create-http-server-in-java-serversocket-example.html">Build a Simple HTTP Server with Java</a></li>
<li><a href="https://www.youtube.com/watch?v=dhWL4DC7Krs">Build an Android Flashlight App</a> (video)</li>
<li><a href="https://spring.io/guides/gs/securing-web/">Build a Spring Boot App with User Authentication</a></li>
</ul>
<h2 id="javascript">JavaScript:</h2>
<ul>
<li><a href="https://javascript30.com">Build 30 things in 30 days with 30 tutorials</a></li>
<li><a href="https://medium.com/codingthesmartway-com-blog/pure-javascript-building-a-real-world-application-from-scratch-5213591cfcd6">Build an App in Pure JS</a></li>
<li><a href="https://link.medium.com/wWUO7TN8SS">Build a Jupyter Notebook Extension</a></li>
<li><a href="https://medium.com/javascript-in-plain-english/build-tic-tac-toe-game-using-javascript-3afba3c8fdcc">Build a TicTacToe Game with JavaScript</a></li>
<li><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893">Build a Simple Weather App With Vanilla JavaScript</a></li>
<li><a href="https://github.com/dwyl/javascript-todo-list-tutorial">Build a Todo List App in JavaScript</a></li>
</ul>
<h2 id="html-and-css">HTML and CSS:</h2>
<ul>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-delightful-loading-screen-in-5-minutes-847991da509f">Build A Loading Screen</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-an-html-calculator-app-from-scratch-using-javascript-4454b8714b98">Build an HTML Calculator with JS</a></li>
<li><a href="https://www.freecodecamp.org/news/think-like-a-programmer-how-to-build-snake-using-only-javascript-html-and-css-7b1479c3339e/">Build Snake using only JavaScript, HTML &amp; CSS</a></li>
</ul>
<h3 id="mobile-application">Mobile Application:</h3>
<ul>
<li><a href="https://egghead.io/courses/build-a-react-native-todo-application">Build a React Native Todo Application</a></li>
<li><a href="https://medium.com/@alialhaddad/how-to-use-redux-thunk-in-react-and-react-native-4743a1321bd0">Build a React Native Application with Redux Thunk</a></li>
</ul>
<h3 id="web-applications">Web Applications:</h3>
<h4 id="react">React:</h4>
<ul>
<li><a href="https://serverless-stack.com/">Create Serverless React.js Apps</a></li>
<li><a href="https://codeloveandboards.com/blog/2016/01/04/trello-tribute-with-phoenix-and-react-pt-1/">Create a Trello Clone</a></li>
<li><a href="https://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio">Create a Character Voting App with React, Node, MongoDB and SocketIO</a></li>
<li><a href="https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/">React Tutorial: Cloning Yelp</a></li>
<li><a href="https://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html">Build a Full Stack Movie Voting App with Test-First Development using Mocha, React, Redux and Immutable</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">Build a Twitter Stream with React and Node</a></li>
<li><a href="https://medium.com/@kris101/clone-medium-on-node-js-and-react-js-731cdfbb6878">Build A Simple Medium Clone using React.js and Node.js</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-integrate-mailchimp-in-a-javascript-web-app-2a889fb43f6f">Integrate MailChimp in JS</a></li>
<li><a href="https://medium.freecodecamp.org/building-chrome-extensions-in-react-parcel-79d0240dd58f">Build A Chrome Extension with React + Parcel</a></li>
<li><a href="https://blog.hasura.io/tutorial-fullstack-react-native-with-graphql-and-authentication-18183d13373a">Build A ToDo App With React Native</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-chat-application-using-react-redux-redux-saga-and-web-sockets-47423e4bc21a">Make a Chat Application</a></li>
<li><a href="https://medium.freecodecamp.org/create-a-news-app-using-react-native-ced249263627">Create a News App with React Native</a></li>
<li><a href="https://medium.freecodecamp.org/learn-webpack-for-react-a36d4cac5060">Learn Webpack For React</a></li>
<li><a href="https://blog.bitsrc.io/testing-your-react-app-with-puppeteer-and-jest-c72b3dfcde59">Testing React App With Puppeteer and Jest</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-your-own-react-boilerplate-2f8cbbeb9b3f">Build Your Own React Boilerplate</a></li>
<li><a href="https://medium.freecodecamp.org/create-gameoflife-with-react-in-one-hour-8e686a410174">Code The Game Of Life With React</a></li>
<li><a href="https://hackernoon.com/a-basic-react-redux-introductory-tutorial-adcc681eeb5e">A Basic React+Redux Introductory Tutorial</a></li>
<li><a href="https://hackernoon.com/build-an-appointment-scheduler-using-react-twilio-and-cosmic-js-95377f6d1040">Build an Appointment Scheduler</a></li>
<li><a href="https://codeburst.io/build-a-chat-app-with-sentiment-analysis-using-next-js-c43ebf3ea643">Build A Chat App with Sentiment Analysis</a></li>
<li><a href="https://hackernoon.com/full-stack-web-application-using-react-node-js-express-and-webpack-97dbd5b9d708">Build A Full Stack Web Application Setup</a></li>
<li><a href="https://www.youtube.com/watch?v=hT3j87FMR6M">Create Todoist clone with React and Firebase</a></li>
<li>Build A Random Quote Machine
<ul>
<li><a href="https://www.youtube.com/watch?v=3QngsWA9IEE">Part 1</a></li>
<li><a href="https://www.youtube.com/watch?v=XnoTmO06OYo">Part 2</a></li>
<li><a href="https://www.youtube.com/watch?v=us51Jne67_I">Part 3</a></li>
<li><a href="https://www.youtube.com/watch?v=iZx7hqHb5MU">Part 4</a></li>
<li><a href="https://www.youtube.com/watch?v=lpba9vBqXl0">Part 5</a></li>
<li><a href="https://www.youtube.com/watch?v=Jvp8j6zrFHE">Part 6</a></li>
<li><a href="https://www.youtube.com/watch?v=M_hFfrN8_PQ">Part 7</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=-edmQKcOW8s">React Phone E-Commerce Project(video)</a></li>
</ul>
<h4 id="angular">Angular:</h4>
<ul>
<li>
<p><a href="https://hackhands.com/building-instagram-clone-angularjs-satellizer-nodejs-mongodb/">Build an Instagram Clone with Angular 1.x</a></p>
</li>
<li>
<p>Build an offline-capable Hacker News client with Angular 2+</p>
<ul>
<li><a href="https://houssein.me/angular2-hacker-news">Part 1</a></li>
<li><a href="https://houssein.me/progressive-angular-applications">Part 2</a></li>
</ul>
</li>
<li>
<p><a href="https://thinkster.io/django-angularjs-tutorial">Build a Google+ clone with Django and AngularJS (Angular 1.x)</a></p>
</li>
<li>
<p>Build A Beautiful Real World App with Angular 8 :</p>
<ul>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e">Part I</a></li>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-8-the-ultimate-guide-2019-part-ii-fe70852b2d6d">Part II</a></li>
</ul>
</li>
<li>
<p><a href="https://medium.com/@tomastrajan/how-to-build-responsive-layouts-with-bootstrap-4-and-angular-6-cfbb108d797b">Build Responsive layout with BootStrap 4 and Angular 6</a></p>
</li>
<li>
<p>ToDo App with Angular 5</p>
<ul>
<li><a href="https://www.discoversdk.com/blog/intro-to-angular-and-the-evolution-of-the-web">Introduction to Angular</a></li>
<li><a href="https://www.discoversdk.com/blog/angular-5-to-do-list-app-part-1">Part 1</a></li>
</ul>
</li>
</ul>
<h4 id="node">Node:</h4>
<ul>
<li><a href="https://scotch.io/tutorials/building-a-real-time-markdown-viewer">Build a real-time Markdown Editor with NodeJS</a></li>
<li><a href="https://mherman.org/blog/2016/04/28/test-driven-development-with-node/">Test-Driven Development with Node, Postgres and Knex</a></li>
<li>Write a Twitter Bot in Node.js
<ul>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-in-just-38-lines-of-code-ed92db9eb078">Part 1</a></li>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-part-2-do-more-2ef1e039715d">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-simple-search-bot-in-30-minutes-eb56fcedcdb1">Build A Simple Search Bot in 30 minutes</a></li>
<li><a href="https://medium.freecodecamp.org/how-i-built-a-job-scraping-web-app-using-node-js-and-indreed-7fbba124bbdc">Build A Job Scraping Web App</a></li>
<li><a href="https://blog.scottlogic.com/2017/05/22/gifbot-github-integration.html">Building a GitHub App</a></li>
<li>How to build your own Uber-for-X App using JavaScript, Node.JS, MongoDB and Web Sockets
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app-part-2/">Part 2</a></li>
</ul>
</li>
</ul>
<h4 id="vue">Vue</h4>
<ul>
<li><a href="https://medium.com/@anas.mammeri/vue-2-firebase-how-to-build-a-vue-app-with-firebase-authentication-system-in-15-minutes-fdce6f289c3c">Vue 2 + Firebase: How to build a Vue app with Firebase authentication system in 15 minutes</a></li>
<li><a href="https://matthiashager.com/complete-vuejs-application-tutorial/">Vue.js Application Tutorial ‚Äì Creating a Simple Budgeting App with Vue</a></li>
<li><a href="https://scotch.io/tutorials/build-a-blog-with-vue-graphql-and-apollo-client">Build a Blog with Vue, GraphQL and Apollo</a></li>
<li>Build a full stack web application using MEVN (MongoDB, Express, Vue, Node) stack
<ul>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0">Part 1</a></li>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-2-2-9ebcf8a22753">Part 2</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=78tNYZUS-ps">Vue.js To-Do List Tutorial (video)</a></li>
<li><a href="https://www.ably.io/tutorials/peer-to-peer-vue">Vue 2 + Pub/Sub: Build a peer to peer multi-user platform for games</a></li>
</ul>
<h4 id="others-hapi-express">Others (Hapi, Express&hellip;):</h4>
<ul>
<li>Build a Progressive Web Application (PWA)
<ul>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-1-offline-first-with-service-worker/">Part 1</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-2-instant-loading-with-indexeddb/">Part 2</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-3-push-notifications/">Part 3</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/build-native-desktop-apps-with-javascript-a49ede90d8e9">Build A Native Desktop App with JS</a></li>
<li>Build a Powerful API with NodeJs,GraphQL and Hapi
<ul>
<li><a href="https://medium.com/@wesharehoodies/how-to-setup-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-e251ac189649">Part I</a></li>
</ul>
</li>
</ul>
<h4 id="d3js">D3.js</h4>
<ul>
<li><a href="https://www.sitepoint.com/d3-js-data-visualizations/">Learn D3 using examples</a></li>
<li><a href="https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b">Learn To Make A Line Chart</a></li>
</ul>
<h3 id="game-development">Game Development:</h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser">Make 2D Breakout Game using Phaser</a></li>
<li>Make Flappy Bird in HTML5 and JavaScript with Phaser
<ul>
<li><a href="https://www.lessmilk.com/tutorial/flappy-bird-phaser-1">Part 1</a></li>
<li><a href="https://www.lessmilk.com/tutorial/flappy-bird-phaser-2">Part 2</a></li>
</ul>
</li>
</ul>
<h3 id="desktop-application">Desktop Application:</h3>
<ul>
<li><a href="https://medium.freecodecamp.org/build-a-desktop-chat-app-with-react-electron-and-chatkit-744d168e6f2f">Build A Desktop Chat App with React and Electron</a></li>
</ul>
<h3 id="miscellaneous">Miscellaneous:</h3>
<ul>
<li><a href="https://www.pubnub.com/blog/build-yourself-a-web-framework-in-less-than-20-lines-of-code/">How to Build a Web Framework in Less Than 20 Lines of Code</a></li>
<li><a href="https://zapier.com/engineering/how-to-build-redux/">Build Yourself a Redux</a></li>
<li><a href="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060">How to write your own Virtual DOM</a></li>
<li><a href="https://andrewgriffithsonline.com/blog/serverless-websockets-on-aws/">Build A Realtime Serverless GraphQL API with WebSockets on AWS</a></li>
</ul>
<h2 id="kotlin">Kotlin:</h2>
<ul>
<li><a href="https://medium.com/@juanchosaravia/learn-kotlin-while-developing-an-android-app-introduction-567e21ff9664">Keddit - Learn Kotlin While Developing an Android Application</a></li>
</ul>
<h2 id="lua">Lua:</h2>
<h3 id="l√∂ve">L√ñVE:</h3>
<ul>
<li>BYTEPATH: Creation of a Complete Game with Lua and L√ñVE
<ul>
<li><a href="https://github.com/SSYGEN/blog/issues/30">Part 0: Introduction</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/15">Part 1: Game Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/16">Part 2: Libraries</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/17">Part 3: Rooms and Areas</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/18">Part 4: Exercises</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/19">Part 5: Game Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/20">Part 6: Player Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/21">Part 7: Player Stats and Attacks</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/22">Part 8: Enemies</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/23">Part 9: Director and Gameplay Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/24">Part 10: Coding Practices</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/25">Part 11: Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/26">Part 12: More Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/27">Part 13: Skill Tree</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/28">Part 14: Console</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/29">Part 15: Final</a></li>
</ul>
</li>
</ul>
<h2 id="python">Python:</h2>
<h3 id="web-scraping">Web Scraping:</h3>
<ul>
<li><a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/">Mining Twitter Data with Python</a></li>
<li><a href="https://realpython.com/blog/python/web-scraping-with-scrapy-and-mongodb/">Scrape a Website with Scrapy and MongoDB</a></li>
<li><a href="https://www.byperth.com/2018/04/25/guide-web-scraping-101-what-you-need-to-know-and-how-to-scrape-with-python-selenium-webdriver/">How To Scrape With Python and Selenium WebDriver</a></li>
<li><a href="https://medium.com/@nishantsahoo.in/which-movie-should-i-watch-5c83a3c0f5b1">Which Movie Should I Watch using BeautifulSoup</a></li>
</ul>
<h3 id="web-applications-1">Web Applications:</h3>
<ul>
<li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">Build a Microblog with Flask</a></li>
<li><a href="https://tutorial.djangogirls.org/en/">Create a Blog Web App In Django</a></li>
<li><a href="https://www.twilio.com/blog/2015/03/choose-your-own-adventures-presentations-wizard-mode-part-1-of-3.html">Choose Your Own Adventure Presentations</a></li>
<li><a href="https://realpython.com/blog/python/rethink-flask-a-simple-todo-list-powered-by-flask-and-rethinkdb/">Build a Todo List with Flask and RethinkDB</a></li>
<li><a href="https://www.obeythetestinggoat.com/">Build a Todo List with Django and Test-Driven Development</a></li>
<li><a href="https://www.skybert.net/python/developing-a-restful-micro-service-in-python/">Build a RESTful Microservice in Python</a></li>
<li><a href="https://testdriven.io/">Microservices with Docker, Flask, and React</a></li>
<li><a href="https://pythonspot.com/flask-web-app-with-python/">Build A Simple Web App With Flask</a></li>
<li><a href="https://codeburst.io/create-a-django-api-in-under-20-minutes-2a082a60f6f3">Create A Django API in under 20 minutes</a></li>
<li>Build a Community-driven delivery application with Django, Postgres and JavaScript
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead-part-2/">Part 2</a></li>
</ul>
</li>
<li>Realtime Chat application with Vue, django-notifs, RabbitMQ and uWSGI
<ul>
<li><a href="https://danidee10.github.io/2018/01/01/realtime-django-1.html">Part 1</a></li>
<li><a href="https://danidee10.github.io/2018/01/03/realtime-django-2.html">Part 2</a></li>
<li><a href="https://danidee10.github.io/2018/01/07/realtime-django-3.html">Part 3</a></li>
<li><a href="https://danidee10.github.io/2018/01/10/realtime-django-4.html">Part 4</a></li>
<li><a href="https://danidee10.github.io/2018/01/13/realtime-django-5.html">Part 5</a></li>
<li><a href="https://danidee10.github.io/2018/03/12/realtime-django-6.html">Part 6</a></li>
</ul>
</li>
</ul>
<h3 id="bots">Bots:</h3>
<ul>
<li><a href="https://pythonforengineers.com/build-a-reddit-bot-part-1/">Build a Reddit Bot</a></li>
<li><a href="https://www.youtube.com/watch?v=krTUf7BpTc0">How to Make a Reddit Bot - YouTube</a> (video)</li>
<li><a href="https://blog.hartleybrody.com/fb-messenger-bot/">Build a Facebook Messenger Bot</a></li>
<li><a href="https://pythontips.com/2017/04/13/making-a-reddit-facebook-messenger-bot/">Making a Reddit + Facebook Messenger Bot</a></li>
<li>How To Create a Telegram Bot Using Python
<ul>
<li><a href="https://khashtamov.com/en/how-to-create-a-telegram-bot-using-python/">Part 1</a></li>
<li><a href="https://khashtamov.com/en/how-to-deploy-telegram-bot-django/">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/creating-a-twitter-bot-in-python-with-tweepy-ac524157a607">Create a Twitter Bot In Python</a></li>
</ul>
<h3 id="data-science">Data Science:</h3>
<ul>
<li>Learn Python For Data Science by Doing Several Projects (video):
<ul>
<li><a href="https://www.youtube.com/watch?v=T5pRlIbr6gg">Part 1: Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=o_OZdbCzHUA">Part 2: Twitter Sentiment Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=9gBC9R-msAk&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=3">Part 3: Recommendation Systems</a></li>
<li><a href="https://www.youtube.com/watch?v=SSu00IRRraY&amp;index=4&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 4: Predicting Stock Prices</a></li>
<li><a href="https://www.youtube.com/watch?v=MrBzgvUNr4w&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=5">Part 5: Deep Dream in TensorFlow</a></li>
<li><a href="https://www.youtube.com/watch?v=dSofAXnnFrY&amp;index=6&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 6: Genetic Algorithms</a></li>
</ul>
</li>
</ul>
<h3 id="machine-learning">Machine Learning:</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=uwwWVAgJBcM">Write Linear Regression From Scratch in Python</a> (video)</li>
<li><a href="https://machinelearningmastery.com/machine-learning-in-python-step-by-step/">Step-By-Step Machine Learning In Python</a></li>
<li><a href="https://medium.freecodecamp.org/using-machine-learning-to-predict-the-quality-of-wines-9e2e13d7480d">Predict Quality Of Wine</a></li>
<li><a href="https://towardsdatascience.com/solving-a-simple-classification-problem-with-python-fruits-lovers-edition-d20ab6b071d2">Solving A Fruits Classification Problem</a></li>
<li><a href="https://scikit-learn.org/stable/unsupervised_learning.html">Learn Unsupervised Learning with Python</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6">Build Your Own Neural Net from Scratch in Python</a></li>
<li><a href="https://medium.com/we-are-orb/linear-regression-in-python-without-scikit-learn-50aef4b8d122">Linear Regression in Python without sklearn</a></li>
<li><a href="https://medium.com/we-are-orb/multivariate-linear-regression-in-python-without-scikit-learn-7091b1d45905">Multivariate Linear Regression without sklearn</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-a-simple-song-recommender-296fcbc8c85">Music Recommender using KNN</a></li>
<li>Find Similar Quora Questions-
<ul>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-bow-tfidf-and-random-forest-c54ad88d1370">Using BOW, TFIDF and Xgboost</a></li>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-word2vec-and-xgboost-1a19ad272c0d">Using Word2Vec and Xgboost</a></li>
</ul>
</li>
<li><a href="https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/">Detecting Fake News with Python and Machine Learning</a></li>
</ul>
<h3 id="opencv">OpenCV:</h3>
<ul>
<li><a href="https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/">Build A Document Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/">Build A Face Detector using OpenCV and Deep Learning</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLKHYJbyeQ1a0oGzgRXy-QwAN1tSV4XZxg">Build fastest custom object Detection system yusing YOLOv3(video playlist)</a></li>
<li><a href="https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/">Build a Face Recognition System using OpenCV, Python and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/16/opencv-saliency-detection/">Detect The Salient Features in an Image</a></li>
<li><a href="https://www.pyimagesearch.com/2018/05/21/an-opencv-barcode-and-qr-code-scanner-with-zbar/">Build A Barcode Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/">Learn Face Clustering with Python</a></li>
<li><a href="https://www.pyimagesearch.com/wp-content/uploads/2014/11/opencv_crash_course_camshift.pdf">Object Tracking with Camshift</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/03/semantic-segmentation-with-opencv-and-deep-learning/">Semantic Segmentation with OpenCV and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/20/opencv-text-detection-east-text-detector/">Text Detection in Images and Videos</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/">People Counter using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/06/tracking-multiple-objects-with-opencv/">Tracking Multiple Objects with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/27/neural-style-transfer-with-opencv/">Neural Style Transfer with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/">OpenCV OCR and Text Recognition</a></li>
<li><a href="https://www.pyimagesearch.com/2017/02/20/text-skew-correction-opencv-python/">Text Skew Correction Tutorial</a></li>
<li><a href="https://www.pyimagesearch.com/2017/04/03/facial-landmarks-dlib-opencv-python/">Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/deep-learning-based-object-detection-and-instance-segmentation-using-mask-r-cnn-in-opencv-python-c/">Object Detection using Mask-R-CNN</a></li>
<li><a href="https://www.pyimagesearch.com/2015/05/04/target-acquired-finding-targets-in-drone-and-quadcopter-video-streams-using-python-and-opencv/">Automatic Target Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/eigenface-using-opencv-c-python/">EigenFaces using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/04/02/faster-facial-landmark-detector-with-dlib/">Faster(5-point) Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/hand-keypoint-detection-using-deep-learning-and-opencv/">Hand Keypoint Detection</a></li>
<li>Dlib Correlation Object Tracking -
<ul>
<li><a href="https://www.pyimagesearch.com/2018/10/22/object-tracking-with-dlib/">Single Object Tracker</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/29/multi-object-tracking-with-dlib/">Mutiple Object Tracker</a></li>
</ul>
</li>
<li><a href="https://www.pyimagesearch.com/2018/12/17/image-stitching-with-opencv-and-python/">Image Stitching with OpenCV and Python</a></li>
<li><a href="https://www.pyimagesearch.com/2018/11/26/instance-segmentation-with-opencv/">Instance Segmentation with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2020/05/04/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning/">Face mask detector</a></li>
</ul>
<h3 id="deep-learning">Deep Learning:</h3>
<ul>
<li><a href="https://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/">Using Convolutional Neural Nets to Detect Facial Keypoints</a></li>
<li><a href="https://www.learnopencv.com/average-face-opencv-c-python-tutorial/">Generate an Average Face using Python and OpenCV</a></li>
<li><a href="https://medium.com/@ageitgey/how-to-break-a-captcha-system-in-15-minutes-with-machine-learning-dbebb035a710">Break A Captcha System using CNNs</a></li>
<li><a href="https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058">Use pre-trained Inception model to provide image predictions</a></li>
<li><a href="https://hackernoon.com/deep-learning-cnns-in-tensorflow-with-gpus-cba6efe0acc2">Create your first CNN</a></li>
<li><a href="https://hackernoon.com/building-a-facial-recognition-pipeline-with-deep-learning-in-tensorflow-66e7645015b8">Build A Facial Recognition Pipeline</a></li>
<li><a href="https://medium.freecodecamp.org/building-an-image-caption-generator-with-deep-learning-in-tensorflow-a142722e9b1f">Build An Image Caption Generator</a></li>
<li><a href="https://medium.freecodecamp.org/making-your-own-face-recognition-system-29a8e728107c">Make your Own Face Recognition System</a></li>
<li><a href="https://towardsdatascience.com/how-i-trained-a-language-detection-ai-in-20-minutes-with-a-97-accuracy-fdeca0fb7724">Train a Language Detection AI in 20 minutes</a></li>
<li><a href="https://towardsdatascience.com/object-detection-with-neural-networks-a4e2c46b4491">Object Detection With Neural Networks</a></li>
<li>Learn Twitter Sentiment Analysis -
<ul>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-bb5b01ebad90">Part I - Data Cleaning</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-2-333514854913">Part II - EDA, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-3-zipfs-law-data-visualisation-fc9eadda71e7">Part III - Zipf&rsquo;s Law, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-4-count-vectorizer-b3f4944e51b5">Part IV - Feature Extraction(count vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-5-50b4e87d9bdd">Part V - Feature Extraction(Tfidf vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-6-doc2vec-603f11832504">Part VI - Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-7-phrase-modeling-doc2vec-592a8a996867">Part VII - Phrase Modeling + Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-8-dimensionality-reduction-chi2-pca-c6d06fb3fcf3">Part VIII - Dimensionality Reduction</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-9-neural-networks-with-tfidf-vectors-using-d0b4af6be6d7">Part IX - Neural Nets with Tfdif vectors</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-10-neural-network-with-a6441269aa3c">Part X - Neural Nets with word2vec/doc2vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-11-cnn-word2vec-41f5e28eda74">Part XI - CNN with Word2Vec</a></li>
</ul>
</li>
<li><a href="https://becominghuman.ai/transfer-learning-retraining-inception-v3-for-custom-image-classification-2820f653c557">Use Transfer Learning for custom image classification</a></li>
<li><a href="https://iamtrask.github.io/2015/07/12/basic-python-network/">Learn to Code a simple Neural Network in 11 lines of Python</a></li>
<li><a href="https://iamtrask.github.io/2015/07/27/python-network-part2/">Build a Neural Network using Gradient Descent Approach</a></li>
<li><a href="https://heartbeat.fritz.ai/how-to-train-a-keras-model-to-generate-colors-3bc79e54971b">Train a Keras Model To Generate Colors</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/">Get Started with Keras on a Custom Dataset</a></li>
<li><a href="https://nicholastsmith.wordpress.com/2016/02/18/eigenfaces-versus-fisherfaces-on-the-faces94-database-with-scikit-learn/">Use EigenFaces and FisherFaces on Faces94 dataset</a></li>
<li><a href="https://medium.com/@lvarruda/how-to-get-top-2-position-on-kaggles-mnist-digit-recognizer-48185d80a2d4">Kaggle MNIST Digit Recognizer Tutorial</a></li>
<li><a href="https://medium.com/tensorflow/hello-deep-learning-fashion-mnist-with-keras-50fcff8cd74a">Fashion MNIST tutorial with tf.keras</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/15/deep-learning-hydroponics-and-medical-marijuana/">CNN using Keras to automatically classify root health</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/08/keras-vs-tensorflow-which-one-is-better-and-which-one-should-i-learn/">Keras vs Tensorflow</a></li>
<li><a href="https://www.pyimagesearch.com/2018/12/03/deep-learning-and-medical-image-analysis-with-keras/">Deep Learning and Medical Image Analysis for Malaria Detection</a></li>
<li><a href="https://towardsdatascience.com/transfer-learning-for-image-classification-using-keras-c47ccf09c8c8">Transfer Learning for Image Classification using Keras</a></li>
<li><a href="https://github.com/kylemcdonald/SmileCNN">Code a Smile Classifier using CNNS in Python</a></li>
<li><a href="https://towardsdatascience.com/natural-language-processing-count-vectorization-with-scikit-learn-e7804269bb5e">Natural Language Processing using scikit-learn</a></li>
<li><a href="https://towardsdatascience.com/ai-generates-taylor-swifts-song-lyrics-6fd92a03ef7e">Code a Taylor Swift Lyrics Generator</a></li>
<li><a href="https://towardsdatascience.com/how-i-built-a-face-mask-detector-for-covid-19-using-pytorch-lightning-67eb3752fd61">Mask detection using PyTorch Lightning</a></li>
</ul>
<h3 id="miscellaneous-1">Miscellaneous:</h3>
<ul>
<li><a href="https://ruslanspivak.com/lsbasi-part1/">Build a Simple Interpreter</a></li>
<li><a href="https://hackernoon.com/learn-blockchains-by-building-one-117428612f46">Build a Simple Blockchain in Python</a></li>
<li><a href="https://jeffknupp.com/blog/2014/09/01/what-is-a-nosql-database-learn-by-writing-one-in-python/">Write a NoSQL Database in Python</a></li>
<li><a href="https://hackernoon.com/building-a-gas-pump-scanner-with-opencv-python-ios-116fe6c9ae8b">Building a Gas Pump Scanner with OpenCV/Python/iOS</a></li>
<li><a href="https://codequs.com/p/S14jQ5UyG/build-a-distributed-streaming-system-with-apache-kafka-and-python">Build a Distributed Streaming System with Python and Kafka</a></li>
<li><a href="https://csl.name/post/python-jit/">Writing a basic x86-64 JIT compiler from scratch in stock Python</a></li>
<li>Making a low level (Linux) debugger
<ul>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger">Part 1</a></li>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger_part_2">Part 2: C</a></li>
</ul>
</li>
<li>Implementing a Search Engine
<ul>
<li><a href="https://www.ardendertat.com/2011/05/30/how-to-implement-a-search-engine-part-1-create-index/">Part 1</a></li>
<li><a href="https://www.ardendertat.com/2011/05/31/how-to-implement-a-search-engine-part-2-query-index/">Part 2</a></li>
<li><a href="https://www.ardendertat.com/2011/07/17/how-to-implement-a-search-engine-part-3-ranking-tf-idf/">Part 3</a></li>
</ul>
</li>
<li><a href="https://robertheaton.com/2018/07/20/project-2-game-of-life/">Build the Game of Life</a></li>
<li><a href="https://robertheaton.com/2018/06/12/programming-projects-for-advanced-beginners-ascii-art/">Create terminal ASCII art</a></li>
<li><a href="https://robertheaton.com/2018/10/09/programming-projects-for-advanced-beginners-3-a/">Write a Tic-Tac-Toe AI</a></li>
<li><a href="https://robertheaton.com/2018/11/03/programming-project-4-photomosaics/">Create photomosaic art</a></li>
<li><a href="https://robertheaton.com/2018/12/02/programming-project-5-snake/">Build the game &ldquo;Snake&rdquo; in the terminal</a></li>
<li><a href="https://wyag.thb.lt/">Write yourself a Git</a></li>
<li><a href="https://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html">A Python implementation of a Python bytecode runner</a></li>
<li><a href="https://www.geeksforgeeks.org/voice-assistant-using-python/">Create a Voice assistant using Python</a></li>
</ul>
<h2 id="go">Go:</h2>
<ul>
<li><a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/">Create a Real Time Chat App with Golang, Angular 2, and WebSocket</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin">Building Go Web Applications and Microservices Using Gin</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">How to Use Godog for Behavior-driven Development in Go</a></li>
<li>Building Blockchain in Go
<ul>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-1/">Part 1: Basic Prototype</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-2/">Part 2: Proof of Work</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-3/">Part 3: Persistence and CLI</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-4/">Part 4: Transactions 1</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-5/">Part 5: Address</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-6/">Part 6: Transactions 2</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-7/">Part 7: Network</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=8fi7uSYlOdc">Building a container from scratch in Go - Liz Rice (Microscaling Systems)(video)</a></li>
<li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/">Build Web Application with GoLang</a></li>
<li>Building a Chat Application in Go with ReactJS
<ul>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-1-initial-setup/">Part 1: Initial Setup</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-2-simple-communication/">Part 2: Simple Communication</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/">Part 3: Designing our Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/">Part 4: Handling Multiple Clients</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-5-improved-frontend/">Part 5: Improving the Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/">Part 6: Dockerizing your Backend</a></li>
</ul>
</li>
<li><a href="https://tutorialedge.net/golang/go-webassembly-tutorial/">Go WebAssembly Tutorial - Building a Calculator Tutorial</a></li>
<li>REST Servers in Go
<ul>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/">Part 1 - standard library</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/">Part 2 - using a router package</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-3-using-a-web-framework/">Part 3 - using a web framework</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-4-using-openapi-and-swagger/">Part 4 - using OpenAPI and Swagger</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-5-middleware/">Part 5 - middleware</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-6-authentication/">Part 6 - authentication</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-7-graphql/">Part 7 - GraphQL</a></li>
</ul>
</li>
<li>Let&rsquo;s build a URL shortener in Go - with Gin &amp; Redis
<ul>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go/">Part 1 - Project setup</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-with-redis-part-2-storage-layer/">Part 2 - Storage Layer</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-3-short-link-generation/">Part 3 - Short Link Generator</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-iv-forwarding/">Part 4 - Forwarding</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=Sphme0BqJiY">Building a TCP Chat in Go(video)</a></li>
<li><a href="https://blog.jse.li/posts/torrent/">Building a BitTorrent client from the ground up in Go</a></li>
<li><a href="https://www.youtube.com/watch?v=rx6CPDK_5mU&amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">REST API masterclass with Go, PostgreSQL and Docker(video playlist)<code>in progress</code></a></li>
</ul>
<h2 id="php">PHP:</h2>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLwAKR305CRO-Q90J---jXVzbOd4CDRbVx">How To Build A Blog With Laravel</a> (video)</li>
<li><a href="https://ilovephp.jondh.me.uk/en/tutorial/make-your-own-blog">Make Your Own Blog (in Pure PHP)</a></li>
<li><a href="https://www.silverstripe.org/learn/lessons/">Build A Real Estate Website Example with SilverStripe</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLXsbBbd36_uVjOFH_P25__XAyGsohXWlv">Building Realtime Chat App with Laravel 5.4 and VueJS</a> (video)</li>
<li><a href="https://www.youtube.com/playlist?list=PLfdtiltiRHWGGxaR6uFtwZnnbcXqyq8JD">Build A Social Network: Laravel 5 - Youtube</a> (video)</li>
<li>Build a full-featured multi-tenant app with Laravel
<ul>
<li><a href="https://medium.com/@ashokgelal/writing-a-full-featured-multi-tenant-laravel-app-from-scratch-a0e1a7350d9d">Part 0: Introduction</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-1-4049a3cc229d">Part 1: Setup</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-roles-and-permissions-d9a5bfe5d525">Part 2: Roles and Permissinos</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-3-invitation-c982dca55eb9">Part 3: Invitation</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-4-tenancy-aware-authentication-e0ee37270bc8">Part 4: Authentication</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-unit-tests-96d6dfbf0617">Part 5: Testing</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-5-user-profile-5c3d0c655f3a">Part 6: User Profile</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-7-deployment-40bb3c895627">Part 7: Deployment</a></li>
</ul>
</li>
<li><a href="https://www.codewall.co.uk/laravel-crud-demo-with-resource-controller-tutorial/">Build a Laravel CRUD Application From Scratch</a></li>
</ul>
<h2 id="ocaml">OCaml:</h2>
<ul>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm-in-objective-caml">Implement a Language with LLVM in OCaml</a></li>
</ul>
<h2 id="ruby">Ruby:</h2>
<ul>
<li><a href="https://medium.com/geckoboard-under-the-hood/how-to-build-a-network-stack-in-ruby-f73aeb1b661b">Build a Network Stack with Ruby</a></li>
<li>Build your own Redis
<ul>
<li><a href="https://rohitpaulk.com/articles/redis-0">Part 0: Introduction</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-1">Part 1: Barebones TCP Server</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-2">Part 2: PING &lt;-&gt; PONG</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-3">Part 3: Concurrent Clients</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-4">Part 4: ECHO</a></li>
</ul>
</li>
<li><a href="https://thoughtbot.com/blog/rebuilding-git-in-ruby">Rebuilding Git in Ruby</a></li>
</ul>
<h3 id="ruby-on-rails">Ruby on Rails:</h3>
<ul>
<li><a href="https://www.railstutorial.org/book">The Ruby on Rails Tutorial</a></li>
<li><a href="https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=0">Build Instagram From Scratch with Ruby on Rails</a></li>
<li><a href="https://medium.com/rails-ember-beyond/how-to-build-a-social-network-using-rails-eb31da569233">Build a Social Network using Rails</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-ruby-on-rails-application">How To Build a Ruby on Rails Application</a></li>
</ul>
<h2 id="haskell">Haskell:</h2>
<ul>
<li><a href="https://dev.stephendiehl.com/fun/">Write You a Haskell - Build a modern functional compiler</a></li>
<li><a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a></li>
<li><a href="https://github.com/write-you-a-scheme-v2/scheme">Write You A Scheme, Version 2</a></li>
<li><a href="https://wiki.haskell.org/Roll_your_own_IRC_bot">Roll Your Own IRC Bot</a></li>
<li><a href="https://lettier.github.io/posts/2016-08-15-making-movie-monad.html">Making Movie Monad</a></li>
<li><a href="https://adit.io/posts/2013-04-15-making-a-website-with-haskell.html">Making a Website with Haskell <strong>(outdated)</strong></a></li>
</ul>
<h2 id="r">R:</h2>
<ul>
<li><a href="https://shiny.rstudio.com/tutorial/">Build Web Apps with Shiny</a></li>
<li><a href="https://towardsdatascience.com/build-a-cryptocurrency-trading-bot-with-r-1445c429e1b1">Build A Cryptocurrency Bot</a></li>
<li><a href="https://towardsdatascience.com/association-rule-mining-in-r-ddf2d044ae50">Learn Associate Rule Mining in R</a></li>
</ul>
<h2 id="rust">Rust:</h2>
<ul>
<li>A Simple Web App in Rust
<ul>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-1/">Part 1</a></li>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2a/">Part 2a</a></li>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2b/">Part 2b</a></li>
</ul>
</li>
<li><a href="https://os.phil-opp.com/">Write an OS in pure Rust</a></li>
<li><a href="https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html">Build a browser engine in Rust</a></li>
<li><a href="https://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/">Write a Microservice in Rust</a></li>
<li><a href="https://cglab.ca/~abeinges/blah/too-many-lists/book/README.html">Learning Rust with Too Many Linked Lists</a></li>
<li>Rust in Detail: Writing Scalable Chat Service from Scratch
<ul>
<li><a href="https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html">Part 1: Implementing WebSocket. Introduction.</a></li>
<li><a href="https://nbaksalyar.github.io/2015/11/09/rust-in-detail-2.html">Part 2: Sending and Receiving Messages</a></li>
</ul>
</li>
<li><a href="https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/">Writing a Rust Roguelike for the Desktop and the Web</a></li>
<li><a href="https://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/">Single Page Applications using Rust</a></li>
<li><a href="https://bugzmanov.github.io/nes_ebook/">Writing NES Emulator in Rust</a></li>
<li>Create a simulation of evolution using neural network and genetic algorithm, and compile the application to WebAssembly
<ul>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt1/">Part 1</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt2/">Part 2</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt3/">Part 3</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt4/">Part 4</a></li>
</ul>
</li>
</ul>
<h2 id="scala">Scala:</h2>
<ul>
<li><a href="https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/">Simple actor-based blockchain</a></li>
<li><a href="https://rcoh.svbtle.com/no-magic-regular-expressions">No Magic: Regular Expressions</a></li>
</ul>
<h2 id="swift">Swift:</h2>
<ul>
<li><a href="https://www.hackingwithswift.com/read">Hacking with Swift - Learn Swift by doing 39 projects</a></li>
<li><a href="https://github.com/nicklockwood/RetroRampage">Retro first-person shooter from scratch</a></li>
</ul>
<h2 id="additional-resources">Additional Resources</h2>
<ul>
<li><a href="https://github.com/markerikson/react-redux-links">React Redux Links</a></li>
<li><a href="https://www.udemy.com/">Udemy.com</a></li>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://nodeschool.io/">Node School</a></li>
<li><a href="https://scotch.io/">ScotchIO</a></li>
<li><a href="https://www.exercism.io/">Exercism</a></li>
<li><a href="https://www.egghead.io/">Egghead.io</a></li>
<li><a href="https://mherman.org/">Michael Herman&rsquo;s Blog</a></li>
<li><a href="https://thinkster.io">Thinkster.io</a></li>
<li><a href="https://enlight.nyc/">Enlight</a></li>
<li><a href="https://hackclub.com/workshops/">Hack Club Workshops</a></li>
<li><a href="https://codecrafters.io/">CodeCrafters</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>High-level design</title>
      <link>https://samirpaulb.github.io/posts/high-level-design/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/high-level-design/</guid>
      <description>High-level design</description>
      <content:encoded><![CDATA[<h1 id="high-level-design-hld">High-level design (HLD)</h1>
<hr>
<h1 id="ticketmaster">Ticketmaster</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/ticketmaster-overview.png" alt="ticketmaster-overview"  />
</p>
<hr>
<h1 id="pastebin">Pastebin</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/pastebin-overview.png" alt="pastebin-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/pastebin-detail.png" alt="pastebin-detail"  />
</p>
<hr>
<h1 id="instagram">Instagram</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/instagram-overview.png" alt="instagram-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/instagram-detail.png" alt="instagram-detail"  />
</p>
<hr>
<h1 id="dropbox">Dropbox</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/dropbox-overview.png" alt="dropbox-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/dropbox-detail.png" alt="dropbox-detail"  />
</p>
<hr>
<h1 id="twitter">Twitter</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-overview.png" alt="twitter-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-detail.png" alt="twitter-detail"  />
</p>
<hr>
<h1 id="twitter-search">Twitter Search</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-search-overview.png" alt="twitter-search-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-search-detail.png" alt="twitter-search-detail"  />
</p>
<hr>
<h1 id="youtube">Youtube</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/youtube-overview.png" alt="youtube-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/youtube-detail.png" alt="youtube-detail"  />
</p>
<hr>
<h1 id="web-crawler">Web Crawler</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/web-crawler-overview.png" alt="web-crawler-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/web-crawler-detail.png" alt="web-crawler-detail"  />
</p>
<hr>
<h1 id="facebook-newsfeed">Facebook Newsfeed</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/facebook-newsfeed-overview.png" alt="facebook-newsfeed-overview"  />
</p>
<hr>
<h1 id="yelp">Yelp</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/yelp-overview.png" alt="yelp-overview"  />
</p>
<hr>
<h1 id="uber-backend">Uber Backend</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/uber-backend-overview.png" alt="uber-backend-overview"  />
</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>LeetCode all two pointers problems</title>
      <link>https://samirpaulb.github.io/posts/leetcode-all-two-pointers-problems/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/leetcode-all-two-pointers-problems/</guid>
      <description>LeetCode all two pointers problems</description>
      <content:encoded><![CDATA[<table>
<thead>
<tr>
<th>1. Running from both ends of an array</th>
</tr>
</thead>
</table>
<p>The first type of problems are, having two pointers at left and right end of array, then moving them to the center while processing something with them.<br>
<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/226705317-e62636ef-7fac-4897-a7d0-4625cd71826f.png" alt="image"  />
</p>
<ul>
<li>
<p>2 Sum problem<br>
(*) <a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/</a><br>
<a href="https://leetcode.com/problems/3sum/">https://leetcode.com/problems/3sum/</a><br>
<a href="https://leetcode.com/problems/4sum/">https://leetcode.com/problems/4sum/</a><br>
<a href="https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/">https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/</a><br>
<a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/">https://leetcode.com/problems/two-sum-iv-input-is-a-bst/</a><br>
<a href="https://leetcode.com/problems/sum-of-square-numbers/">https://leetcode.com/problems/sum-of-square-numbers/</a><br>
<a href="https://leetcode.com/problems/boats-to-save-people/">https://leetcode.com/problems/boats-to-save-people/</a><br>
<a href="https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/">https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/</a><br>
<a href="https://leetcode.com/problems/3sum-with-multiplicity/">https://leetcode.com/problems/3sum-with-multiplicity/</a></p>
</li>
<li>
<p>Trapping Water<br>
(*) <a href="https://leetcode.com/problems/trapping-rain-water/">https://leetcode.com/problems/trapping-rain-water/</a><br>
<a href="https://leetcode.com/problems/container-with-most-water/">https://leetcode.com/problems/container-with-most-water/</a></p>
</li>
<li>
<p>Next Permutation<br>
(*) <a href="https://leetcode.com/problems/next-permutation/">https://leetcode.com/problems/next-permutation/</a><br>
<a href="https://leetcode.com/problems/next-greater-element-iii/">https://leetcode.com/problems/next-greater-element-iii/</a><br>
<a href="https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/">https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/</a></p>
</li>
<li>
<p>Reversing / Swapping<br>
<a href="https://leetcode.com/problems/valid-palindrome/">https://leetcode.com/problems/valid-palindrome/</a><br>
(*) <a href="https://leetcode.com/problems/reverse-string/">https://leetcode.com/problems/reverse-string/</a><br>
<a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">https://leetcode.com/problems/reverse-vowels-of-a-string/</a><br>
<a href="https://leetcode.com/problems/valid-palindrome-ii/">https://leetcode.com/problems/valid-palindrome-ii/</a><br>
<a href="https://leetcode.com/problems/reverse-only-letters/">https://leetcode.com/problems/reverse-only-letters/</a><br>
<a href="https://leetcode.com/problems/remove-element/">https://leetcode.com/problems/remove-element/</a><br>
<a href="https://leetcode.com/problems/sort-colors/">https://leetcode.com/problems/sort-colors/</a><br>
<a href="https://leetcode.com/problems/flipping-an-image/">https://leetcode.com/problems/flipping-an-image/</a><br>
<a href="https://leetcode.com/problems/squares-of-a-sorted-array/">https://leetcode.com/problems/squares-of-a-sorted-array/</a><br>
<a href="https://leetcode.com/problems/sort-array-by-parity/">https://leetcode.com/problems/sort-array-by-parity/</a><br>
<a href="https://leetcode.com/problems/sort-array-by-parity-ii/">https://leetcode.com/problems/sort-array-by-parity-ii/</a><br>
<a href="https://leetcode.com/problems/pancake-sorting/">https://leetcode.com/problems/pancake-sorting/</a><br>
<a href="https://leetcode.com/problems/reverse-prefix-of-word/">https://leetcode.com/problems/reverse-prefix-of-word/</a><br>
<a href="https://leetcode.com/problems/reverse-string-ii/">https://leetcode.com/problems/reverse-string-ii/</a><br>
<a href="https://leetcode.com/problems/reverse-words-in-a-string/">https://leetcode.com/problems/reverse-words-in-a-string/</a><br>
<a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">https://leetcode.com/problems/reverse-words-in-a-string-iii/</a></p>
</li>
<li>
<p>Others<br>
<a href="https://leetcode.com/problems/bag-of-tokens/">https://leetcode.com/problems/bag-of-tokens/</a><br>
<a href="https://leetcode.com/problems/di-string-match/">https://leetcode.com/problems/di-string-match/</a><br>
<a href="https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/">https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/</a><br>
<a href="https://leetcode.com/problems/sentence-similarity-iii/">https://leetcode.com/problems/sentence-similarity-iii/</a><br>
<a href="https://leetcode.com/problems/find-k-closest-elements/">https://leetcode.com/problems/find-k-closest-elements/</a><br>
<a href="https://leetcode.com/problems/shortest-distance-to-a-character/">https://leetcode.com/problems/shortest-distance-to-a-character/</a></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>2.Slow &amp; Fast Pointers</th>
</tr>
</thead>
</table>
<p>Next type is using two pointers with different speed of movement. Typically they starts from the left end, then the first pointer advances fast and give some feedback to the slow pointer and do some calculation.<br>
<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/226705223-95601d5c-7c9c-416a-a561-3bc6213afd75.png" alt="image"  />
</p>
<ul>
<li>
<p>Linked List Operations<br>
(*) <a href="https://leetcode.com/problems/linked-list-cycle/">https://leetcode.com/problems/linked-list-cycle/</a><br>
<a href="https://leetcode.com/problems/linked-list-cycle-ii/">https://leetcode.com/problems/linked-list-cycle-ii/</a><br>
<a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">https://leetcode.com/problems/remove-nth-node-from-end-of-list/</a><br>
<a href="https://leetcode.com/problems/rotate-list/">https://leetcode.com/problems/rotate-list/</a><br>
<a href="https://leetcode.com/problems/reorder-list/">https://leetcode.com/problems/reorder-list/</a><br>
<a href="https://leetcode.com/problems/palindrome-linked-list/">https://leetcode.com/problems/palindrome-linked-list/</a></p>
</li>
<li>
<p>Cyclic Detection<br>
(*) <a href="https://leetcode.com/problems/find-the-duplicate-number/">https://leetcode.com/problems/find-the-duplicate-number/</a><br>
<a href="https://leetcode.com/problems/circular-array-loop/">https://leetcode.com/problems/circular-array-loop/</a></p>
</li>
<li>
<p>Sliding Window/Caterpillar Method<br>
<img loading="lazy" src="https://assets.leetcode.com/users/images/29d2e356-77fe-4caf-8921-7a39d06e56d2_1642139764.6173265.jpeg" alt="image"  />
<br>
(*) <a href="https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/">https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/</a><br>
<a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/">https://leetcode.com/problems/find-k-th-smallest-pair-distance/</a><br>
<a href="https://leetcode.com/problems/moving-stones-until-consecutive-ii/">https://leetcode.com/problems/moving-stones-until-consecutive-ii/</a><br>
<a href="https://leetcode.com/problems/count-pairs-of-nodes/">https://leetcode.com/problems/count-pairs-of-nodes/</a><br>
<a href="https://leetcode.com/problems/count-binary-substrings/">https://leetcode.com/problems/count-binary-substrings/</a><br>
<a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/">https://leetcode.com/problems/k-diff-pairs-in-an-array/</a></p>
</li>
<li>
<p>Rotation<br>
(*) <a href="https://leetcode.com/problems/rotating-the-box/">https://leetcode.com/problems/rotating-the-box/</a><br>
<a href="https://leetcode.com/problems/rotate-array/">https://leetcode.com/problems/rotate-array/</a></p>
</li>
<li>
<p>String<br>
(*) <a href="https://leetcode.com/problems/string-compression/">https://leetcode.com/problems/string-compression/</a><br>
<a href="https://leetcode.com/problems/last-substring-in-lexicographical-order/">https://leetcode.com/problems/last-substring-in-lexicographical-order/</a></p>
</li>
<li>
<p>Remove Duplicate<br>
(*) <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a><br>
<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/">https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/</a><br>
<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/</a><br>
<a href="https://leetcode.com/problems/duplicate-zeros/">https://leetcode.com/problems/duplicate-zeros/</a></p>
</li>
<li>
<p>Others<br>
<a href="https://leetcode.com/problems/statistics-from-a-large-sample/">https://leetcode.com/problems/statistics-from-a-large-sample/</a><br>
<a href="https://leetcode.com/problems/partition-labels/">https://leetcode.com/problems/partition-labels/</a><br>
<a href="https://leetcode.com/problems/magical-string/">https://leetcode.com/problems/magical-string/</a><br>
<a href="https://leetcode.com/problems/friends-of-appropriate-ages/">https://leetcode.com/problems/friends-of-appropriate-ages/</a><br>
<a href="https://leetcode.com/problems/longest-mountain-in-array/">https://leetcode.com/problems/longest-mountain-in-array/</a><br>
<a href="https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/">https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>3.Running from beginning of 2 arrays / Merging 2 arrays</th>
</tr>
</thead>
</table>
<p>In this category, you will be given 2 arrays or lists, then have to process them with individual pointers.<br>
<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/226705109-0e41c781-9c08-4796-90fd-8b2169cef242.png" alt="image"  />
</p>
<ul>
<li>
<p>Sorted arrays<br>
(*) <a href="https://leetcode.com/problems/merge-sorted-array/">https://leetcode.com/problems/merge-sorted-array/</a><br>
<a href="https://leetcode.com/problems/heaters/">https://leetcode.com/problems/heaters/</a><br>
<a href="https://leetcode.com/problems/find-the-distance-value-between-two-arrays/">https://leetcode.com/problems/find-the-distance-value-between-two-arrays/</a></p>
</li>
<li>
<p>Intersections/LCA like<br>
(*) <a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">https://leetcode.com/problems/intersection-of-two-linked-lists/</a><br>
<a href="https://leetcode.com/problems/intersection-of-two-arrays/">https://leetcode.com/problems/intersection-of-two-arrays/</a><br>
<a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/">https://leetcode.com/problems/intersection-of-two-arrays-ii/</a></p>
</li>
<li>
<p>SubString<br>
(*) <a href="https://leetcode.com/problems/implement-strstr/">https://leetcode.com/problems/implement-strstr/</a><br>
<a href="https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/">https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/</a><br>
<a href="https://leetcode.com/problems/long-pressed-name/">https://leetcode.com/problems/long-pressed-name/</a><br>
<a href="https://leetcode.com/problems/longest-uncommon-subsequence-ii/">https://leetcode.com/problems/longest-uncommon-subsequence-ii/</a><br>
<a href="https://leetcode.com/problems/compare-version-numbers/">https://leetcode.com/problems/compare-version-numbers/</a><br>
<a href="https://leetcode.com/problems/camelcase-matching/">https://leetcode.com/problems/camelcase-matching/</a><br>
<a href="https://leetcode.com/problems/expressive-words/">https://leetcode.com/problems/expressive-words/</a></p>
</li>
<li>
<p>Median Finder<br>
(*) <a href="https://leetcode.com/problems/find-median-from-data-stream/">https://leetcode.com/problems/find-median-from-data-stream/</a></p>
</li>
<li>
<p>Meet-in-the-middle / Binary Search<br>
(*) <a href="https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/">https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/</a><br>
<a href="https://leetcode.com/problems/closest-subsequence-sum/">https://leetcode.com/problems/closest-subsequence-sum/</a><br>
<a href="https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/">https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/</a><br>
<a href="https://leetcode.com/problems/3sum-closest/">https://leetcode.com/problems/3sum-closest/</a><br>
<a href="https://leetcode.com/problems/valid-triangle-number/">https://leetcode.com/problems/valid-triangle-number/</a></p>
</li>
<li>
<p>Others<br>
<a href="https://leetcode.com/problems/shortest-unsorted-continuous-subarray/">https://leetcode.com/problems/shortest-unsorted-continuous-subarray/</a><br>
<a href="https://leetcode.com/problems/most-profit-assigning-work/">https://leetcode.com/problems/most-profit-assigning-work/</a><br>
<a href="https://leetcode.com/problems/largest-merge-of-two-strings/">https://leetcode.com/problems/largest-merge-of-two-strings/</a><br>
<a href="https://leetcode.com/problems/swap-adjacent-in-lr-string/">https://leetcode.com/problems/swap-adjacent-in-lr-string/</a></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>4.Split &amp; Merge of an array / Divide &amp; Conquer</th>
</tr>
</thead>
</table>
<p>The last one is similiar to previous category but there is one thing is added. First, you need to split the given list into 2 separate lists and then do two pointers approach to merge or unify them. There aren&rsquo;t many tasks here.<br>
<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/226704881-583b72b9-d759-46f6-ab8f-a81310800c30.png" alt="image"  />
</p>
<ul>
<li>
<p>Partition<br>
(*) <a href="https://leetcode.com/problems/partition-list/">https://leetcode.com/problems/partition-list/</a></p>
</li>
<li>
<p>Sorting<br>
(*) <a href="https://leetcode.com/problems/sort-list/">https://leetcode.com/problems/sort-list/</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>LeetCode Greedy for Beginners</title>
      <link>https://samirpaulb.github.io/posts/leetcode-greedy-for-beginners/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/leetcode-greedy-for-beginners/</guid>
      <description>LeetCode Greedy for Beginners</description>
      <content:encoded><![CDATA[<p>Greedy for practice:</p>
<p>Sharing good Greedy problems for practice:<br>
List: <a href="https://leetcode.com/list/xyehq5j6">https://leetcode.com/list/xyehq5j6</a></p>
<p><strong>Sort/Array</strong><br>
<a href="https://leetcode.com/problems/jump-game/">https://leetcode.com/problems/jump-game/</a><br>
<a href="https://leetcode.com/problems/jump-game-ii/">https://leetcode.com/problems/jump-game-ii/</a><br>
<a href="https://leetcode.com/problems/gas-station/">https://leetcode.com/problems/gas-station/</a><br>
<a href="https://leetcode.com/problems/candy/">https://leetcode.com/problems/candy/</a><br>
<a href="https://leetcode.com/problems/remove-k-digits/">https://leetcode.com/problems/remove-k-digits/</a><br>
<a href="https://leetcode.com/problems/wiggle-subsequence/">https://leetcode.com/problems/wiggle-subsequence/</a><br>
<a href="https://leetcode.com/problems/assign-cookies/">https://leetcode.com/problems/assign-cookies/</a><br>
<a href="https://leetcode.com/problems/boats-to-save-people/">https://leetcode.com/problems/boats-to-save-people/</a><br>
<a href="https://leetcode.com/problems/bag-of-tokens/">https://leetcode.com/problems/bag-of-tokens/</a><br>
<a href="https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/">https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/</a><br>
<a href="https://leetcode.com/problems/queue-reconstruction-by-height/">https://leetcode.com/problems/queue-reconstruction-by-height/</a><br>
<a href="https://leetcode.com/problems/play-with-chips/">https://leetcode.com/problems/play-with-chips/</a><br>
<a href="https://leetcode.com/problems/previous-permutation-with-one-swap/">https://leetcode.com/problems/previous-permutation-with-one-swap/</a><br>
<a href="https://leetcode.com/problems/lemonade-change/">https://leetcode.com/problems/lemonade-change/</a><br>
<a href="https://leetcode.com/problems/bag-of-tokens/">https://leetcode.com/problems/bag-of-tokens/</a></p>
<p><strong>Hash/Multi-set:</strong><br>
<a href="https://leetcode.com/problems/task-scheduler/">https://leetcode.com/problems/task-scheduler/</a><br>
<a href="https://leetcode.com/problems/partition-labels/">https://leetcode.com/problems/partition-labels/</a><br>
<a href="https://leetcode.com/problems/car-pooling/">https://leetcode.com/problems/car-pooling/</a><br>
<a href="https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a><br>
<a href="https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/">https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/</a><br>
<a href="https://leetcode.com/problems/cinema-seat-allocation/">https://leetcode.com/problems/cinema-seat-allocation/</a><br>
<a href="https://leetcode.com/problems/construct-k-palindrome-strings/">https://leetcode.com/problems/construct-k-palindrome-strings/</a><br>
<a href="https://leetcode.com/problems/advantage-shuffle/">https://leetcode.com/problems/advantage-shuffle/</a></p>
<p><strong>Strings:</strong><br>
<a href="https://leetcode.com/problems/reorganize-string/">https://leetcode.com/problems/reorganize-string/</a><br>
<a href="https://leetcode.com/problems/string-without-aaa-or-bbb/">https://leetcode.com/problems/string-without-aaa-or-bbb/</a><br>
<a href="https://leetcode.com/problems/check-if-a-string-can-break-another-string/">https://leetcode.com/problems/check-if-a-string-can-break-another-string/</a><br>
<a href="https://leetcode.com/problems/remove-duplicate-letters/">https://leetcode.com/problems/remove-duplicate-letters/</a></p>
<p><strong>Heap:</strong><br>
<a href="https://leetcode.com/problems/last-stone-weight/">https://leetcode.com/problems/last-stone-weight/</a><br>
<a href="https://leetcode.com/problems/reduce-array-size-to-the-half/">https://leetcode.com/problems/reduce-array-size-to-the-half/</a></p>
<p><strong>Stack:</strong><br>
<a href="https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/">https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/</a></p>
<p><strong>Sharing solutions for little tricky problems</strong>:</p>
<p><a href="https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool isPossibleDivide(vector&lt;int&gt;&amp; nums, int k) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">		if (n % k != 0) return false;
</span></span><span class="line"><span class="cl">		int ssize = n/k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		map&lt;int, int&gt;hm;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			hm[nums[i]]++;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (auto it = hm.begin(); it != hm.end(); it++) {
</span></span><span class="line"><span class="cl">			if (hm[it-&gt;first] &gt; 0) {
</span></span><span class="line"><span class="cl">				for (int i = k-1; i &gt;= 0; i--) {
</span></span><span class="line"><span class="cl">					hm[it-&gt;first+i] -= hm[it-&gt;first];
</span></span><span class="line"><span class="cl">					if (hm[it-&gt;first+i] &lt; 0)
</span></span><span class="line"><span class="cl">						return false;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return true;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/car-pooling/">https://leetcode.com/problems/car-pooling/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool carPooling(vector&lt;vector&lt;int&gt;&gt;&amp; trips, int capacity) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int trip_len = 1001;
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;stops(trip_len, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; trips.size(); i++) {
</span></span><span class="line"><span class="cl">			stops[trips[i][1]] += trips[i][0];
</span></span><span class="line"><span class="cl">			stops[trips[i][2]] -= trips[i][0];
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; trip_len; i++) {
</span></span><span class="line"><span class="cl">			if (i != 0) stops[i] += stops[i-1];
</span></span><span class="line"><span class="cl">			if (stops[i] &gt; capacity)
</span></span><span class="line"><span class="cl">				return false;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return true;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/reorganize-string/">https://leetcode.com/problems/reorganize-string/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span><span class="lnt" id="hl-2-30"><a class="lnlinks" href="#hl-2-30">30</a>
</span><span class="lnt" id="hl-2-31"><a class="lnlinks" href="#hl-2-31">31</a>
</span><span class="lnt" id="hl-2-32"><a class="lnlinks" href="#hl-2-32">32</a>
</span><span class="lnt" id="hl-2-33"><a class="lnlinks" href="#hl-2-33">33</a>
</span><span class="lnt" id="hl-2-34"><a class="lnlinks" href="#hl-2-34">34</a>
</span><span class="lnt" id="hl-2-35"><a class="lnlinks" href="#hl-2-35">35</a>
</span><span class="lnt" id="hl-2-36"><a class="lnlinks" href="#hl-2-36">36</a>
</span><span class="lnt" id="hl-2-37"><a class="lnlinks" href="#hl-2-37">37</a>
</span><span class="lnt" id="hl-2-38"><a class="lnlinks" href="#hl-2-38">38</a>
</span><span class="lnt" id="hl-2-39"><a class="lnlinks" href="#hl-2-39">39</a>
</span><span class="lnt" id="hl-2-40"><a class="lnlinks" href="#hl-2-40">40</a>
</span><span class="lnt" id="hl-2-41"><a class="lnlinks" href="#hl-2-41">41</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	static bool compare(pair&lt;char, int&gt;p1, pair&lt;char, int&gt;p2) {
</span></span><span class="line"><span class="cl">		return p1.second &gt; p2.second;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	string reorganizeString(string S) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = S.length();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		unordered_map&lt;char, int&gt;m;
</span></span><span class="line"><span class="cl">		vector&lt;pair&lt;char, int&gt;&gt;v;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) 
</span></span><span class="line"><span class="cl">			m[S[i]]++;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for(auto it = m.begin(); it != m.end(); it++) {
</span></span><span class="line"><span class="cl">			if (it-&gt;second &gt; (n+1)/2)
</span></span><span class="line"><span class="cl">				return &#34;&#34;;
</span></span><span class="line"><span class="cl">			v.push_back(make_pair(it-&gt;first, it-&gt;second));
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		sort(v.begin(), v.end(), compare);
</span></span><span class="line"><span class="cl">		string str;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; v.size(); i++) {
</span></span><span class="line"><span class="cl">			while (v[i].second--)
</span></span><span class="line"><span class="cl">				str += v[i].first;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		string ans;
</span></span><span class="line"><span class="cl">		int size = str.size();
</span></span><span class="line"><span class="cl">		int i = 0, j = (size-1)/2+1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		while (i &lt; (size-1)/2+1) {
</span></span><span class="line"><span class="cl">			ans += str[i];
</span></span><span class="line"><span class="cl">			ans += str[j];
</span></span><span class="line"><span class="cl">			i++; j++;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return ans;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/candy/">https://leetcode.com/problems/candy/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int candy(vector&lt;int&gt;&amp; ratings) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = ratings.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;left(n, 1); 
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			if (ratings[i] &gt; ratings[i-1])
</span></span><span class="line"><span class="cl">				left[i] = left[i-1]+1;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = left[n-1];
</span></span><span class="line"><span class="cl">		for (int i = n-2; i &gt;= 0; i--) {
</span></span><span class="line"><span class="cl">			if (ratings[i] &gt; ratings[i+1])
</span></span><span class="line"><span class="cl">				left[i] = max(left[i], left[i+1]+1);
</span></span><span class="line"><span class="cl">			sum += left[i];
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return sum;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Binary Search Template</title>
      <link>https://samirpaulb.github.io/posts/binary-search-template/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/binary-search-template/</guid>
      <description>Binary Search Template</description>
      <content:encoded><![CDATA[<p>Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). <strong>But when it comes to implementation, it&rsquo;s rather difficult to write a bug-free code in just a few minutes</strong>. Some of the most common problems include:</p>
<ul>
<li>When to exit the loop? Should we use <code>left &lt; right</code> or <code>left &lt;= right</code> as the while loop condition?</li>
<li>How to initialize the boundary variable <code>left</code> and <code>right</code>?</li>
<li>How to update the boundary? How to choose the appropriate combination from <code>left = mid</code>, <code>left = mid + 1</code> and <code>right = mid</code>, <code>right = mid - 1</code>?</li>
</ul>
<p>A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like &ldquo;Given a sorted array, find a specific value in it&rdquo;. As a matter of fact, it can be applied to much more complicated situations.</p>
<p>After a lot of practice in LeetCode, I&rsquo;ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I&rsquo;ll share the template with you guys in this post. <strong>I don&rsquo;t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems</strong>. Hopefully, after reading this post, people wouldn&rsquo;t be pissed off any more when LeetCoding, &ldquo;This problem could be solved with binary search! Why didn&rsquo;t I think of that before!&rdquo;</p>
<hr>
<h1 id="-most-generalized-binary-search">&gt;&gt; Most Generalized Binary Search</h1>
<p>Suppose we have a <strong>search space</strong>. It could be an array, a range, etc. Usually it&rsquo;s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:</p>
<p><strong>Minimize k , s.t. condition(k) is True</strong></p>
<p>The following code is the most generalized binary search template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def binary_search(array) -&gt; int:
</span></span><span class="line"><span class="cl">    def condition(value) -&gt; bool:
</span></span><span class="line"><span class="cl">        pass
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if condition(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s really nice of this template is that, for most of the binary search problems, <strong>we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more</strong>:</p>
<ul>
<li>Correctly initialize the boundary variables <code>left</code> and <code>right</code> to specify search space. Only one rule: set up the boundary to <strong>include all possible elements</strong>;</li>
<li>Decide return value. Is it <code>return left</code> or <code>return left - 1</code>? Remember this: <strong>after exiting the while loop, <code>left</code> is the minimal k‚Äã satisfying the <code>condition</code> function</strong>;</li>
<li>Design the <code>condition</code> function. This is the most difficult and most beautiful part. Needs lots of practice.</li>
</ul>
<p>Below I&rsquo;ll show you guys how to apply this powerful template to many LeetCode problems.</p>
<hr>
<h1 id="-basic-application">&gt;&gt; Basic Application</h1>
<h2 id="278-first-bad-version-easyhttpsleetcodecomproblemsfirst-bad-version"><a href="https://leetcode.com/problems/first-bad-version/">278. First Bad Version [Easy]</a></h2>
<p>You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Given n = 5, and version = 4 is the first bad version.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">call isBadVersion(3) -&gt; false
</span></span><span class="line"><span class="cl">call isBadVersion(5) -&gt; true
</span></span><span class="line"><span class="cl">call isBadVersion(4) -&gt; true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Then 4 is the first bad version. 
</span></span></code></pre></td></tr></table>
</div>
</div><p>First, we initialize <code>left = 1</code> and <code>right = n</code> to include all possible values. Then we notice that we don&rsquo;t even need to design the <code>condition</code> function. It&rsquo;s already given by the <code>isBadVersion</code> API. Finding the first bad version is equivalent to finding the minimal k satisfying <code>isBadVersion(k) is True</code>. Our template can fit in very nicely:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution:
</span></span><span class="line"><span class="cl">    def firstBadVersion(self, n) -&gt; int:
</span></span><span class="line"><span class="cl">        left, right = 1, n
</span></span><span class="line"><span class="cl">        while left &lt; right:
</span></span><span class="line"><span class="cl">            mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">            if isBadVersion(mid):
</span></span><span class="line"><span class="cl">                right = mid
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                left = mid + 1
</span></span><span class="line"><span class="cl">        return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="69-sqrtx-easyhttpsleetcodecomproblemssqrtx"><a href="https://leetcode.com/problems/sqrtx/">69. Sqrt(x) [Easy]</a></h2>
<p>Implement <code>int sqrt(int x)</code>. Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: 4
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: 8
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Easy one. First we need to search for minimal k satisfying condition <code>k^2 &gt; x</code>, then <code>k - 1</code> is the answer to the question. We can easily come up with the solution. Notice that I set <code>right = x + 1</code> instead of <code>right = x</code> to deal with special input cases like <code>x = 0</code> and <code>x = 1</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4">4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5">5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6">6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7">7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8">8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">def</span><span class="w"> </span><span class="nf">mySqrt</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">int</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">left</span><span class="p">,</span><span class="w"> </span><span class="k">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">right</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">right</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">left</span><span class="p">)</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="c1"># `left` is the minimum k value, `k - 1` is the answer
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="35-search-insert-position-easyhttpsleetcodecomproblemssearch-insert-position"><a href="https://leetcode.com/problems/search-insert-position/">35. Search Insert Position [Easy]</a></h2>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: [1,3,5,6], 5
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: [1,3,5,6], 2
</span></span><span class="line"><span class="cl">Output: 1
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very classic application of binary search. We are looking for the minimal k value satisfying <code>nums[k] &gt;= target</code>, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array <code>nums</code> has duplicates. Also notice that the input <code>target</code> might be larger than all elements in <code>nums</code> and therefore needs to placed at the end of the array. That&rsquo;s why we should initialize <code>right = len(nums)</code> instead of <code>right = len(nums) - 1</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution:
</span></span><span class="line"><span class="cl">    def searchInsert(self, nums: List[int], target: int) -&gt; int:
</span></span><span class="line"><span class="cl">        left, right = 0, len(nums)
</span></span><span class="line"><span class="cl">        while left &lt; right:
</span></span><span class="line"><span class="cl">            mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">            if nums[mid] &gt;= target:
</span></span><span class="line"><span class="cl">                right = mid
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                left = mid + 1
</span></span><span class="line"><span class="cl">        return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h1 id="-advanced-application">&gt;&gt; Advanced Application</h1>
<p>The above problems are quite easy to solve, because they already give us the array to be searched. We&rsquo;d know that we should use binary search to solve them at first glance. However, <strong>more often are the situations where the search space and search target are not so readily available</strong>. Sometimes we won&rsquo;t even realize that the problem should be solved with binary search &ndash; we might just turn to dynamic programming or DFS and get stuck for a very long time.</p>
<p>As for the question &ldquo;When can we use binary search?&rdquo;, my answer is that, <strong>If we can discover some kind of monotonicity, for example, if <code>condition(k) is True</code> then <code>condition(k + 1) is True</code>, then we can consider binary search</strong>.</p>
<h2 id="1011-capacity-to-ship-packages-within-d-days-mediumhttpsleetcodecomproblemscapacity-to-ship-packages-within-d-days"><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">1011. Capacity To Ship Packages Within D Days [Medium]</a></h2>
<p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days. The <code>i</code>-th package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>
<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
</span></span><span class="line"><span class="cl">Output: 15
</span></span><span class="line"><span class="cl">Explanation: 
</span></span><span class="line"><span class="cl">A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
</span></span><span class="line"><span class="cl">1st day: 1, 2, 3, 4, 5
</span></span><span class="line"><span class="cl">2nd day: 6, 7
</span></span><span class="line"><span class="cl">3rd day: 8
</span></span><span class="line"><span class="cl">4th day: 9
</span></span><span class="line"><span class="cl">5th day: 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Binary search probably would not come to our mind when we first meet this problem. We might automatically treat <code>weights</code> as search space and then realize we&rsquo;ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within <code>D</code> days with capacity <code>m</code>, then we can definitely ship them all with any capacity larger than <code>m</code>. Now we can design a <code>condition</code> function, let&rsquo;s call it <code>feasible</code>, given an input <code>capacity</code>, it returns whether it&rsquo;s possible to ship all packages within <code>D</code> days. This can run in a greedy way: if there&rsquo;s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds <code>D</code>, we return <code>False</code>, otherwise we return <code>True</code>.</p>
<p>Next, we need to initialize our boundary correctly. Obviously <code>capacity</code> should be at least <code>max(weights)</code>, otherwise the conveyor belt couldn&rsquo;t ship the heaviest package. On the other hand, <code>capacity</code> need not be more than<code>sum(weights)</code>, because then we can ship all packages in just one day.</p>
<p>Now we&rsquo;ve got all we need to apply our binary search template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def shipWithinDays(weights: List[int], D: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(capacity) -&gt; bool:
</span></span><span class="line"><span class="cl">        days = 1
</span></span><span class="line"><span class="cl">        total = 0
</span></span><span class="line"><span class="cl">        for weight in weights:
</span></span><span class="line"><span class="cl">            total += weight
</span></span><span class="line"><span class="cl">            if total &gt; capacity:  # too heavy, wait for the next day
</span></span><span class="line"><span class="cl">                total = weight
</span></span><span class="line"><span class="cl">                days += 1
</span></span><span class="line"><span class="cl">                if days &gt; D:  # cannot ship within D days
</span></span><span class="line"><span class="cl">                    return False
</span></span><span class="line"><span class="cl">        return True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = max(weights), sum(weights)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="410-split-array-largest-sum-hardhttpsleetcodecomproblemssplit-array-largest-sum"><a href="https://leetcode.com/problems/split-array-largest-sum/">410. Split Array Largest Sum [Hard]</a></h2>
<p>Given an array which consists of non-negative integers and an integer <em>m</em>, you can split the array into <em>m</em> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <em>m</em> subarrays.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4">4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5">5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6">6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7">7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8">8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">nums = [7,2,5,10,8]
</span></span><span class="line"><span class="cl">m = 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output:
</span></span><span class="line"><span class="cl">18
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a <code>feasible</code> function: given an input <code>threshold</code>, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to <code>threshold</code>. In this way, we discover the monotonicity of the problem: if <code>feasible(m)</code> is <code>True</code>, then all inputs larger than <code>m</code> can satisfy <code>feasible</code> function. You can see that the solution code is exactly the same as LC 1011.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1"> 1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2"> 2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3"> 3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4"> 4</a>
</span><span class="lnt" id="hl-12-5"><a class="lnlinks" href="#hl-12-5"> 5</a>
</span><span class="lnt" id="hl-12-6"><a class="lnlinks" href="#hl-12-6"> 6</a>
</span><span class="lnt" id="hl-12-7"><a class="lnlinks" href="#hl-12-7"> 7</a>
</span><span class="lnt" id="hl-12-8"><a class="lnlinks" href="#hl-12-8"> 8</a>
</span><span class="lnt" id="hl-12-9"><a class="lnlinks" href="#hl-12-9"> 9</a>
</span><span class="lnt" id="hl-12-10"><a class="lnlinks" href="#hl-12-10">10</a>
</span><span class="lnt" id="hl-12-11"><a class="lnlinks" href="#hl-12-11">11</a>
</span><span class="lnt" id="hl-12-12"><a class="lnlinks" href="#hl-12-12">12</a>
</span><span class="lnt" id="hl-12-13"><a class="lnlinks" href="#hl-12-13">13</a>
</span><span class="lnt" id="hl-12-14"><a class="lnlinks" href="#hl-12-14">14</a>
</span><span class="lnt" id="hl-12-15"><a class="lnlinks" href="#hl-12-15">15</a>
</span><span class="lnt" id="hl-12-16"><a class="lnlinks" href="#hl-12-16">16</a>
</span><span class="lnt" id="hl-12-17"><a class="lnlinks" href="#hl-12-17">17</a>
</span><span class="lnt" id="hl-12-18"><a class="lnlinks" href="#hl-12-18">18</a>
</span><span class="lnt" id="hl-12-19"><a class="lnlinks" href="#hl-12-19">19</a>
</span><span class="lnt" id="hl-12-20"><a class="lnlinks" href="#hl-12-20">20</a>
</span><span class="lnt" id="hl-12-21"><a class="lnlinks" href="#hl-12-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def splitArray(nums: List[int], m: int) -&gt; int:        
</span></span><span class="line"><span class="cl">    def feasible(threshold) -&gt; bool:
</span></span><span class="line"><span class="cl">        count = 1
</span></span><span class="line"><span class="cl">        total = 0
</span></span><span class="line"><span class="cl">        for num in nums:
</span></span><span class="line"><span class="cl">            total += num
</span></span><span class="line"><span class="cl">            if total &gt; threshold:
</span></span><span class="line"><span class="cl">                total = num
</span></span><span class="line"><span class="cl">                count += 1
</span></span><span class="line"><span class="cl">                if count &gt; m:
</span></span><span class="line"><span class="cl">                    return False
</span></span><span class="line"><span class="cl">        return True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = max(nums), sum(nums)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid     
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><p>But we probably would have doubts: It&rsquo;s true that <code>left</code> returned by our solution is the minimal value satisfying <code>feasible</code>, but how can we know that we can split the original array to <strong>actually get this subarray-sum</strong>? For example, let&rsquo;s say <code>nums = [7,2,5,10,8]</code> and <code>m = 2</code>. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: <code>25:[[7], [2,5,10,8]]</code>, <code>23:[[7,2], [5,10,8]]</code>, <code>18:[[7,2,5], [10,8]]</code>, <code>24:[[7,2,5,10], [8]]</code>. Only 4 values. But our search space <code>[max(nums), sum(nums)] = [10, 32]</code> has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.</p>
<p>Let&rsquo;s say <code>k</code> is the minimal value satisfying <code>feasible</code> function. We can prove the correctness of our solution with <strong>proof by contradiction</strong>. Assume that no subarray&rsquo;s sum is equal to <code>k</code>, that is, every subarray sum is less than <code>k</code>. The variable <code>total</code> inside <code>feasible</code> function keeps track of the total weights of current load. If our assumption is correct, then <code>total</code> would always be less than <code>k</code>. As a result, <code>feasible(k - 1)</code> must be <code>True</code>, because <code>total</code> would at most be equal to <code>k - 1</code> and would never trigger the if-clause <code>if total &gt; threshold</code>, <strong>therefore <code>feasible(k - 1)</code> must have the same output as <code>feasible(k)</code>, which is <code>True</code></strong>. But we already know that <code>k</code> is the minimal value satisfying <code>feasible</code> function, <strong>so <code>feasible(k - 1)</code> has to be <code>False</code>, which is a contradiction</strong>. So our assumption is incorrect. Now we&rsquo;ve proved that our algorithm is correct.</p>
<hr>
<h2 id="875-koko-eating-bananas-mediumhttpsleetcodecomproblemskoko-eating-bananas"><a href="https://leetcode.com/problems/koko-eating-bananas/">875. Koko Eating Bananas [Medium]</a></h2>
<p>Koko loves to eat bananas. There are <code>N</code> piles of bananas, the <code>i</code>-th pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>H</code> hours. Koko can decide her bananas-per-hour eating speed of <code>K</code>. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than <code>K</code> bananas, she eats all of them instead, and won&rsquo;t eat any more bananas during this hour.</p>
<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. <strong>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours</strong>.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span><span class="lnt" id="hl-13-2"><a class="lnlinks" href="#hl-13-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [3,6,7,11], H = 8
</span></span><span class="line"><span class="cl">Output: 4
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [30,11,23,4,20], H = 5
</span></span><span class="line"><span class="cl">Output: 30
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span><span class="lnt" id="hl-15-2"><a class="lnlinks" href="#hl-15-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [30,11,23,4,20], H = 6
</span></span><span class="line"><span class="cl">Output: 23
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very similar to LC 1011 and LC 410 mentioned above. Let&rsquo;s design a <code>feasible</code> function, given an input <code>speed</code>, determine whether Koko can finish all bananas within <code>H</code> hours with hourly eating speed <code>speed</code>. Obviously, the lower bound of the search space is 1, and upper bound is <code>max(piles)</code>, because Koko can only choose one pile of bananas to eat every hour.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def minEatingSpeed(piles: List[int], H: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(speed) -&gt; bool:
</span></span><span class="line"><span class="cl">        # return sum(math.ceil(pile / speed) for pile in piles) &lt;= H  # slower        
</span></span><span class="line"><span class="cl">        return sum((pile - 1) // speed + 1 for pile in piles) &lt;= H  # faster
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, max(piles)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left  + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1482-minimum-number-of-days-to-make-m-bouquets-mediumhttpsleetcodecomproblemsminimum-number-of-days-to-make-m-bouquets"><a href="https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/">1482. Minimum Number of Days to Make m Bouquets [Medium]</a></h2>
<p>Given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>. We need to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden. The garden consists of <code>n</code> flowers, the <code>ith</code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet. Return <em>the minimum number of days</em> you need to wait to be able to make <code>m</code> bouquets from the garden. If it is impossible to make <code>m</code> bouquets return <strong>-1</strong>.</p>
<p><strong>Examples:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1">1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2">2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3">3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4">4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5">5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6">6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
</span></span><span class="line"><span class="cl">Output: 3
</span></span><span class="line"><span class="cl">Explanation: Let&#39;s see what happened in the first three days. x means flower bloomed and _ means flower didn&#39;t bloom in the garden.
</span></span><span class="line"><span class="cl">We need 3 bouquets each should contain 1 flower.
</span></span><span class="line"><span class="cl">After day 1: [x, _, _, _, _]   // we can only make one bouquet.
</span></span><span class="line"><span class="cl">After day 2: [x, _, _, _, x]   // we can only make two bouquets.
</span></span><span class="line"><span class="cl">After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
</span></span><span class="line"><span class="cl">Output: -1
</span></span><span class="line"><span class="cl">Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now that we&rsquo;ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make <code>m</code> bouquets after waiting for <code>d</code> days, then we can definitely finish that as well if we wait for more than <code>d</code> days.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1"> 1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2"> 2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3"> 3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4"> 4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5"> 5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6"> 6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7"> 7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8"> 8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9"> 9</a>
</span><span class="lnt" id="hl-19-10"><a class="lnlinks" href="#hl-19-10">10</a>
</span><span class="lnt" id="hl-19-11"><a class="lnlinks" href="#hl-19-11">11</a>
</span><span class="lnt" id="hl-19-12"><a class="lnlinks" href="#hl-19-12">12</a>
</span><span class="lnt" id="hl-19-13"><a class="lnlinks" href="#hl-19-13">13</a>
</span><span class="lnt" id="hl-19-14"><a class="lnlinks" href="#hl-19-14">14</a>
</span><span class="lnt" id="hl-19-15"><a class="lnlinks" href="#hl-19-15">15</a>
</span><span class="lnt" id="hl-19-16"><a class="lnlinks" href="#hl-19-16">16</a>
</span><span class="lnt" id="hl-19-17"><a class="lnlinks" href="#hl-19-17">17</a>
</span><span class="lnt" id="hl-19-18"><a class="lnlinks" href="#hl-19-18">18</a>
</span><span class="lnt" id="hl-19-19"><a class="lnlinks" href="#hl-19-19">19</a>
</span><span class="lnt" id="hl-19-20"><a class="lnlinks" href="#hl-19-20">20</a>
</span><span class="lnt" id="hl-19-21"><a class="lnlinks" href="#hl-19-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def minDays(bloomDay: List[int], m: int, k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(days) -&gt; bool:
</span></span><span class="line"><span class="cl">        bonquets, flowers = 0, 0
</span></span><span class="line"><span class="cl">        for bloom in bloomDay:
</span></span><span class="line"><span class="cl">            if bloom &gt; days:
</span></span><span class="line"><span class="cl">                flowers = 0
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                bonquets += (flowers + 1) // k
</span></span><span class="line"><span class="cl">                flowers = (flowers + 1) % k
</span></span><span class="line"><span class="cl">        return bonquets &gt;= m
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    if len(bloomDay) &lt; m * k:
</span></span><span class="line"><span class="cl">        return -1
</span></span><span class="line"><span class="cl">    left, right = 1, max(bloomDay)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="668-kth-smallest-number-in-multiplication-table-hardhttpsleetcodecomproblemskth-smallest-number-in-multiplication-tabledescription"><a href="https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/">668. Kth Smallest Number in Multiplication Table [Hard]</a></h2>
<p>Nearly every one have used the <a href="https://en.wikipedia.org/wiki/Multiplication_table">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table? Given the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1">1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2">2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3">3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4">4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5">5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6">6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7">7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8">8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: m = 3, n = 3, k = 5
</span></span><span class="line"><span class="cl">Output: 3
</span></span><span class="line"><span class="cl">Explanation: 
</span></span><span class="line"><span class="cl">The Multiplication Table:
</span></span><span class="line"><span class="cl">1	2	3
</span></span><span class="line"><span class="cl">2	4	6
</span></span><span class="line"><span class="cl">3	6	9
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The 5-th smallest number is 3 (1, 2, 2, 3, 3).
</span></span></code></pre></td></tr></table>
</div>
</div><p>For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn&rsquo;t work out in this problem. We don&rsquo;t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these <code>m * n</code> values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing <code>condition</code> function is the most difficult part? In order to find the k-th smallest value in the table, we can design an <code>enough</code> function, given an input <code>num</code>, determine whether there&rsquo;re at least k values less than or equal to <code>num</code>. <strong>The minimal <code>num</code> satisfying <code>enough</code> function is the answer we&rsquo;re looking for</strong>. Recall that the key to binary search is discovering monotonicity. In this problem, if <code>num</code> satisfies <code>enough</code>, then of course any value larger than <code>num</code> can satisfy. This monotonicity is the fundament of our binary search algorithm.</p>
<p>Let&rsquo;s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is <code>m * n</code>, then we have search space <code>[1, m * n]</code>. The overwhelming advantage of binary search solution to heap solution is that it doesn&rsquo;t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply <code>enough</code> function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.</p>
<p>Next let&rsquo;s consider how to implement <code>enough</code> function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row <code>[3,6,9,12,15...]</code> are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input <code>num</code>. Following is the complete solution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def findKthNumber(m: int, n: int, k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def enough(num) -&gt; bool:
</span></span><span class="line"><span class="cl">        count = 0
</span></span><span class="line"><span class="cl">        for val in range(1, m + 1):  # count row by row
</span></span><span class="line"><span class="cl">            add = min(num // val, n)
</span></span><span class="line"><span class="cl">            if add == 0:  # early exit
</span></span><span class="line"><span class="cl">                break
</span></span><span class="line"><span class="cl">            count += add
</span></span><span class="line"><span class="cl">        return count &gt;= k                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, n * m
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left 
</span></span></code></pre></td></tr></table>
</div>
</div><p>In LC 410 above, we have doubt &ldquo;Is the result from binary search actually a subarray sum?&rdquo;. Here we have a similar doubt: &ldquo;<strong>Is the result from binary search actually in the Multiplication Table?</strong>&rdquo;. The answer is yes, and we also can apply proof by contradiction. Denote <code>num</code> as the minimal input that satisfies <code>enough</code> function. Let&rsquo;s assume that <code>num</code> is not in the table, which means that <code>num</code> is not divisible by any <code>val</code> in <code>[1, m]</code>, that is, <code>num % val &gt; 0</code>. Therefore, changing the input from <code>num</code> to <code>num - 1</code> doesn&rsquo;t have any effect on the expression <code>add = min(num // val, n)</code>. So <code>enough(num - 1)</code> would also return <code>True</code>, same as <code>enough(num)</code>. But we already know <code>num</code> is the minimal input satisfying <code>enough</code> function, so <code>enough(num - 1)</code> has to be <code>False</code>. Contradiction! The opposite of our original assumption is true: <code>num</code> is actually in the table.</p>
<hr>
<h2 id="719-find-k-th-smallest-pair-distance-hardhttpsleetcodecomproblemsfind-k-th-smallest-pair-distance"><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/">719. Find K-th Smallest Pair Distance [Hard]</a></h2>
<p>Given an integer array, return the k-th smallest <strong>distance</strong> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span><span class="lnt" id="hl-22-7"><a class="lnlinks" href="#hl-22-7">7</a>
</span><span class="lnt" id="hl-22-8"><a class="lnlinks" href="#hl-22-8">8</a>
</span><span class="lnt" id="hl-22-9"><a class="lnlinks" href="#hl-22-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">nums = [1,3,1]
</span></span><span class="line"><span class="cl">k = 1
</span></span><span class="line"><span class="cl">Output: 0 
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.
</span></span><span class="line"><span class="cl">(1,3) -&gt; 2
</span></span><span class="line"><span class="cl">(1,1) -&gt; 0
</span></span><span class="line"><span class="cl">(3,1) -&gt; 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an <code>enough</code> function, given an input <code>distance</code>, determine whether there&rsquo;re at least k pairs whose distances are less than or equal to <code>distance</code>. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to <code>distance</code>, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1">1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2">2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3">3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4">4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5">5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6">6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7">7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def enough(distance) -&gt; bool:  # two pointers
</span></span><span class="line"><span class="cl">    count, i, j = 0, 0, 0
</span></span><span class="line"><span class="cl">    while i &lt; n or j &lt; n:
</span></span><span class="line"><span class="cl">        while j &lt; n and nums[j] - nums[i] &lt;= distance:  # move fast pointer
</span></span><span class="line"><span class="cl">            j += 1
</span></span><span class="line"><span class="cl">        count += j - i - 1  # count pairs
</span></span><span class="line"><span class="cl">        i += 1  # move slow pointer
</span></span><span class="line"><span class="cl">    return count &gt;= k
</span></span></code></pre></td></tr></table>
</div>
</div><p>Obviously, our search space should be <code>[0, max(nums) - min(nums)]</code>. Now we are ready to copy-paste our template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-24-1"><a class="lnlinks" href="#hl-24-1"> 1</a>
</span><span class="lnt" id="hl-24-2"><a class="lnlinks" href="#hl-24-2"> 2</a>
</span><span class="lnt" id="hl-24-3"><a class="lnlinks" href="#hl-24-3"> 3</a>
</span><span class="lnt" id="hl-24-4"><a class="lnlinks" href="#hl-24-4"> 4</a>
</span><span class="lnt" id="hl-24-5"><a class="lnlinks" href="#hl-24-5"> 5</a>
</span><span class="lnt" id="hl-24-6"><a class="lnlinks" href="#hl-24-6"> 6</a>
</span><span class="lnt" id="hl-24-7"><a class="lnlinks" href="#hl-24-7"> 7</a>
</span><span class="lnt" id="hl-24-8"><a class="lnlinks" href="#hl-24-8"> 8</a>
</span><span class="lnt" id="hl-24-9"><a class="lnlinks" href="#hl-24-9"> 9</a>
</span><span class="lnt" id="hl-24-10"><a class="lnlinks" href="#hl-24-10">10</a>
</span><span class="lnt" id="hl-24-11"><a class="lnlinks" href="#hl-24-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def smallestDistancePair(nums: List[int], k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    nums.sort()
</span></span><span class="line"><span class="cl">    n = len(nums)
</span></span><span class="line"><span class="cl">    left, right = 0, nums[-1] - nums[0]
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1201-ugly-number-iii-mediumhttpsleetcodecomproblemsugly-number-iii"><a href="https://leetcode.com/problems/ugly-number-iii/">1201. Ugly Number III [Medium]</a></h2>
<p>Write a program to find the <code>n</code>-th ugly number. Ugly numbers are <strong>positive integers</strong> which are divisible by <code>a</code> <strong>or</strong> <code>b</code> <strong>or</strong> <code>c</code>.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-25-1"><a class="lnlinks" href="#hl-25-1">1</a>
</span><span class="lnt" id="hl-25-2"><a class="lnlinks" href="#hl-25-2">2</a>
</span><span class="lnt" id="hl-25-3"><a class="lnlinks" href="#hl-25-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: n = 3, a = 2, b = 3, c = 5
</span></span><span class="line"><span class="cl">Output: 4
</span></span><span class="line"><span class="cl">Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-26-1"><a class="lnlinks" href="#hl-26-1">1</a>
</span><span class="lnt" id="hl-26-2"><a class="lnlinks" href="#hl-26-2">2</a>
</span><span class="lnt" id="hl-26-3"><a class="lnlinks" href="#hl-26-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: n = 4, a = 2, b = 3, c = 4
</span></span><span class="line"><span class="cl">Output: 6
</span></span><span class="line"><span class="cl">Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Nothing special. Still finding the Kth-Smallest. We need to design an <code>enough</code> function, given an input <code>num</code>, determine whether there are at least n ugly numbers less than or equal to <code>num</code>. Since <code>a</code> might be a multiple of <code>b</code> or <code>c</code>, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-27-1"><a class="lnlinks" href="#hl-27-1"> 1</a>
</span><span class="lnt" id="hl-27-2"><a class="lnlinks" href="#hl-27-2"> 2</a>
</span><span class="lnt" id="hl-27-3"><a class="lnlinks" href="#hl-27-3"> 3</a>
</span><span class="lnt" id="hl-27-4"><a class="lnlinks" href="#hl-27-4"> 4</a>
</span><span class="lnt" id="hl-27-5"><a class="lnlinks" href="#hl-27-5"> 5</a>
</span><span class="lnt" id="hl-27-6"><a class="lnlinks" href="#hl-27-6"> 6</a>
</span><span class="lnt" id="hl-27-7"><a class="lnlinks" href="#hl-27-7"> 7</a>
</span><span class="lnt" id="hl-27-8"><a class="lnlinks" href="#hl-27-8"> 8</a>
</span><span class="lnt" id="hl-27-9"><a class="lnlinks" href="#hl-27-9"> 9</a>
</span><span class="lnt" id="hl-27-10"><a class="lnlinks" href="#hl-27-10">10</a>
</span><span class="lnt" id="hl-27-11"><a class="lnlinks" href="#hl-27-11">11</a>
</span><span class="lnt" id="hl-27-12"><a class="lnlinks" href="#hl-27-12">12</a>
</span><span class="lnt" id="hl-27-13"><a class="lnlinks" href="#hl-27-13">13</a>
</span><span class="lnt" id="hl-27-14"><a class="lnlinks" href="#hl-27-14">14</a>
</span><span class="lnt" id="hl-27-15"><a class="lnlinks" href="#hl-27-15">15</a>
</span><span class="lnt" id="hl-27-16"><a class="lnlinks" href="#hl-27-16">16</a>
</span><span class="lnt" id="hl-27-17"><a class="lnlinks" href="#hl-27-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def nthUglyNumber(n: int, a: int, b: int, c: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def enough(num) -&gt; bool:
</span></span><span class="line"><span class="cl">        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc
</span></span><span class="line"><span class="cl">        return total &gt;= n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ab = a * b // math.gcd(a, b)
</span></span><span class="line"><span class="cl">    ac = a * c // math.gcd(a, c)
</span></span><span class="line"><span class="cl">    bc = b * c // math.gcd(b, c)
</span></span><span class="line"><span class="cl">    abc = a * bc // math.gcd(a, bc)
</span></span><span class="line"><span class="cl">    left, right = 1, 10 ** 10
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1283-find-the-smallest-divisor-given-a-threshold-mediumhttpsleetcodecomproblemsfind-the-smallest-divisor-given-a-threshold"><a href="https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/">1283. Find the Smallest Divisor Given a Threshold [Medium]</a></h2>
<p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the <strong>smallest</strong> divisor such that the result mentioned above is less than or equal to <code>threshold</code>.</p>
<p>Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5). It is guaranteed that there will be an answer.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-28-1"><a class="lnlinks" href="#hl-28-1">1</a>
</span><span class="lnt" id="hl-28-2"><a class="lnlinks" href="#hl-28-2">2</a>
</span><span class="lnt" id="hl-28-3"><a class="lnlinks" href="#hl-28-3">3</a>
</span><span class="lnt" id="hl-28-4"><a class="lnlinks" href="#hl-28-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: nums = [1,2,5,9], threshold = 6
</span></span><span class="line"><span class="cl">Output: 5
</span></span><span class="line"><span class="cl">Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
</span></span><span class="line"><span class="cl">If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
</span></span></code></pre></td></tr></table>
</div>
</div><p>After so many problems introduced above, this one should be a piece of cake. We don&rsquo;t even need to bother to design a <code>condition</code> function, because the problem has already told us explicitly what condition we need to satisfy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-29-1"><a class="lnlinks" href="#hl-29-1"> 1</a>
</span><span class="lnt" id="hl-29-2"><a class="lnlinks" href="#hl-29-2"> 2</a>
</span><span class="lnt" id="hl-29-3"><a class="lnlinks" href="#hl-29-3"> 3</a>
</span><span class="lnt" id="hl-29-4"><a class="lnlinks" href="#hl-29-4"> 4</a>
</span><span class="lnt" id="hl-29-5"><a class="lnlinks" href="#hl-29-5"> 5</a>
</span><span class="lnt" id="hl-29-6"><a class="lnlinks" href="#hl-29-6"> 6</a>
</span><span class="lnt" id="hl-29-7"><a class="lnlinks" href="#hl-29-7"> 7</a>
</span><span class="lnt" id="hl-29-8"><a class="lnlinks" href="#hl-29-8"> 8</a>
</span><span class="lnt" id="hl-29-9"><a class="lnlinks" href="#hl-29-9"> 9</a>
</span><span class="lnt" id="hl-29-10"><a class="lnlinks" href="#hl-29-10">10</a>
</span><span class="lnt" id="hl-29-11"><a class="lnlinks" href="#hl-29-11">11</a>
</span><span class="lnt" id="hl-29-12"><a class="lnlinks" href="#hl-29-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def smallestDivisor(nums: List[int], threshold: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def condition(divisor) -&gt; bool:
</span></span><span class="line"><span class="cl">        return sum((num - 1) // divisor + 1 for num in nums) &lt;= threshold
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, max(nums)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if condition(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h1 id="end">End</h1>
<p>Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That&rsquo;s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template&rsquo;s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful <code>condition</code> function.</p>
<p>Hope this helps.</p>
<p><strong>Reference</strong></p>
<ul>
<li><a href="https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search">[C++ / Fast / Very clear explanation / Clean Code] Solution with Greedy Algorithm and Binary Search</a></li>
<li><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm">Approach the problem using the &ldquo;trial and error&rdquo; algorithm</a></li>
<li><a href="https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook">Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode</a></li>
<li><a href="https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template">ugly-number-iii Binary Search with picture &amp; Binary Search Template - LeetCode</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Company engineering blog links</title>
      <link>https://samirpaulb.github.io/posts/company-engineering-blog-links/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/company-engineering-blog-links/</guid>
      <description>Company engineering blog links</description>
      <content:encoded><![CDATA[<p>courtesy <a href="https://github.com/checkcheckzz/system-design-interview#toc">checkcheckzz</a></p>
<p>Depending on where you are interviewing, go through the company blog. VERY USEFUL IN INTERVIEWS! It really helps if you have an idea of the architecture, as the questions asked will generally be of that domain and your prior knowledge will help out here.</p>
<ul>
<li><a href="https://nerds.airbnb.com/">Airbnb Engineering</a></li>
<li><a href="https://developer.amazon.com/blogs">Amazon</a></li>
<li><a href="https://aws.amazon.com/blogs/">Amazon AWS</a></li>
<li><a href="https://bandcamptech.wordpress.com/">Bandcamp Tech</a></li>
<li><a href="https://www.simple.com/engineering/">BankSimple Simple Blog</a></li>
<li><a href="https://word.bitly.com/">Bitly Engineering Blog</a></li>
<li><a href="https://blog.cloudera.com/blog/">Cloudera Developer Blog</a></li>
<li><a href="https://tech.dropbox.com/">Dropbox Tech Blog</a></li>
<li><a href="https://engineering.quora.com/">Engineering at Quora</a></li>
<li><a href="https://codeascraft.com/">Etsy Code as Craft</a></li>
<li><a href="https://www.facebook.com/Engineering">Facebook Engineering</a></li>
<li><a href="https://code.flickr.net/">Flickr Code</a></li>
<li><a href="https://engineering.foursquare.com/">Foursquare Engineering Blog</a></li>
<li><a href="https://googleresearch.blogspot.com/">Google Research Blog</a></li>
<li><a href="https://engineering.groupon.com/">Groupn Engineering Blog</a></li>
<li><a href="https://highscalability.com/">High Scalability</a></li>
<li><a href="https://instagram-engineering.tumblr.com/">Instagram Engineering</a></li>
<li><a href="https://engineering.linkedin.com/blog">LinkedIn Engineering</a></li>
<li><a href="https://tech.oyster.com/">Oyster Tech Blog</a></li>
<li><a href="https://engineering.pinterest.com/">Pinterest Engineering Blog</a></li>
<li><a href="https://devblog.songkick.com/">Songkick Technology Blog</a></li>
<li><a href="https://developers.soundcloud.com/blog/">SoundCloud Backstage Blog</a></li>
<li><a href="https://corner.squareup.com/">Square The Corner</a></li>
<li><a href="https://www.redditblog.com/">THE REDDIT BLOG</a></li>
<li><a href="https://github.com/blog/category/engineering">The GitHub Blog</a></li>
<li><a href="https://techblog.netflix.com/">The Netflix Tech Blog</a></li>
<li><a href="https://www.twilio.com/engineering">Twilio Engineering Blog</a></li>
<li><a href="https://engineering.twitter.com/">Twitter Engineering</a></li>
<li><a href="https://eng.uber.com/">Uber Engineering</a></li>
<li><a href="https://medium.com/walmartlabs">Walmart Labs Tech Blog</a></li>
<li><a href="https://engineering.webengage.com/">WebEngage Engineering Blog</a></li>
<li><a href="https://eng.yammer.com/blog/">Yammer Engineering</a></li>
<li><a href="https://engineeringblog.yelp.com/">Yelp Engineering Blog</a></li>
<li><a href="https://smarketshq.com/">Smarkets Blog</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Complete Computer Science Study Plan to Become a Software Engineer</title>
      <link>https://samirpaulb.github.io/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</guid>
      <description>Complete Computer Science Study Plan to Become a Software Engineer</description>
      <content:encoded><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<h3 id="the-study-plan">The Study Plan</h3>
<ul>
<li><a href="#">What is it?</a></li>
<li><a href="#why-use-it">Why use it?</a></li>
<li><a href="#how-to-use-it">How to use it</a></li>
<li><a href="#dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</a></li>
<li><a href="#a-note-about-video-resources">A Note About Video Resources</a></li>
<li><a href="#choose-a-programming-language">Choose a Programming Language</a></li>
<li><a href="#books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</a></li>
<li><a href="#interview-prep-books">Interview Prep Books</a></li>
<li><a href="#dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</a></li>
<li><a href="#what-you-wont-see-covered">What you Won&rsquo;t See Covered</a></li>
<li><a href="#the-daily-plan">The Daily Plan</a></li>
<li><a href="#coding-question-practice">Coding Question Practice</a></li>
<li><a href="#coding-problems">Coding Problems</a></li>
</ul>
<h3 id="topics-of-study">Topics of Study</h3>
<ul>
<li><a href="#algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</a></li>
<li><a href="#data-structures">Data Structures</a>
<ul>
<li><a href="#arrays">Arrays</a></li>
<li><a href="#linked-lists">Linked Lists</a></li>
<li><a href="#stack">Stack</a></li>
<li><a href="#queue">Queue</a></li>
<li><a href="#hash-table">Hash table</a></li>
</ul>
</li>
<li><a href="#more-knowledge">More Knowledge</a>
<ul>
<li><a href="#binary-search">Binary search</a></li>
<li><a href="#bitwise-operations">Bitwise operations</a></li>
</ul>
</li>
<li><a href="#trees">Trees</a>
<ul>
<li><a href="#trees---intro">Trees - Intro</a></li>
<li><a href="#binary-search-trees-bsts">Binary search trees: BSTs</a></li>
<li><a href="#heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</a></li>
<li>balanced search trees (general concept, not details)</li>
<li>traversals: preorder, inorder, postorder, BFS, DFS</li>
</ul>
</li>
<li><a href="#sorting">Sorting</a>
<ul>
<li>selection</li>
<li>insertion</li>
<li>heapsort</li>
<li>quicksort</li>
<li>merge sort</li>
</ul>
</li>
<li><a href="#graphs">Graphs</a>
<ul>
<li>directed</li>
<li>undirected</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>traversals: BFS, DFS</li>
</ul>
</li>
<li><a href="#even-more-knowledge">Even More Knowledge</a>
<ul>
<li><a href="#recursion">Recursion</a></li>
<li><a href="#dynamic-programming">Dynamic Programming</a></li>
<li><a href="#design-patterns">Design Patterns</a></li>
<li><a href="#combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</a></li>
<li><a href="#np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</a></li>
<li><a href="#how-computers-process-a-program">How computers process a program</a></li>
<li><a href="#caches">Caches</a></li>
<li><a href="#processes-and-threads">Processes and Threads</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#string-searching--manipulations">String searching &amp; manipulations</a></li>
<li><a href="#tries">Tries</a></li>
<li><a href="#floating-point-numbers">Floating Point Numbers</a></li>
<li><a href="#unicode">Unicode</a></li>
<li><a href="#endianness">Endianness</a></li>
<li><a href="#networking">Networking</a></li>
</ul>
</li>
<li><a href="#final-review">Final Review</a></li>
</ul>
<h3 id="getting-the-job">Getting the Job</h3>
<ul>
<li><a href="#update-your-resume">Update Your Resume</a></li>
<li><a href="#find-a-job">Find a Job</a></li>
<li><a href="#interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</a></li>
<li><a href="#be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</a></li>
<li><a href="#have-questions-for-the-interviewer">Have questions for the interviewer</a></li>
<li><a href="#once-youve-got-the-job">Once You&rsquo;ve Got The Job</a></li>
</ul>
<p><strong>&mdash;&mdash;&mdash;&mdash;&mdash;- Everything below this point is optional &mdash;&mdash;&mdash;&mdash;&mdash;-</strong></p>
<h3 id="optional-extra-topics--resources">Optional Extra Topics &amp; Resources</h3>
<ul>
<li><a href="#additional-books">Additional Books</a></li>
<li><a href="#system-design-scalability-data-handling">System Design, Scalability, Data Handling</a> (if you have 4+ years experience)</li>
<li><a href="#additional-learning">Additional Learning</a>
<ul>
<li><a href="#compilers">Compilers</a></li>
<li><a href="#emacs-and-vim">Emacs and vi(m)</a></li>
<li><a href="#unix-command-line-tools">Unix command line tools</a></li>
<li><a href="#information-theory-videos">Information theory</a></li>
<li><a href="#parity--hamming-code-videos">Parity &amp; Hamming Code</a></li>
<li><a href="#entropy">Entropy</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#compression">Compression</a></li>
<li><a href="#computer-security">Computer Security</a></li>
<li><a href="#garbage-collection">Garbage collection</a></li>
<li><a href="#parallel-programming">Parallel Programming</a></li>
<li><a href="#messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</a></li>
<li><a href="#a">A*</a></li>
<li><a href="#fast-fourier-transform">Fast Fourier Transform</a></li>
<li><a href="#bloom-filter">Bloom Filter</a></li>
<li><a href="#hyperloglog">HyperLogLog</a></li>
<li><a href="#locality-sensitive-hashing">Locality-Sensitive Hashing</a></li>
<li><a href="#van-emde-boas-trees">van Emde Boas Trees</a></li>
<li><a href="#augmented-data-structures">Augmented Data Structures</a></li>
<li><a href="#balanced-search-trees">Balanced search trees</a>
<ul>
<li>AVL trees</li>
<li>Splay trees</li>
<li>Red/black trees</li>
<li>2-3 search trees</li>
<li>2-3-4 Trees (aka 2-4 trees)</li>
<li>N-ary (K-ary, M-ary) trees</li>
<li>B-Trees</li>
</ul>
</li>
<li><a href="#k-d-trees">k-D Trees</a></li>
<li><a href="#skip-lists">Skip lists</a></li>
<li><a href="#network-flows">Network Flows</a></li>
<li><a href="#disjoint-sets--union-find">Disjoint Sets &amp; Union Find</a></li>
<li><a href="#math-for-fast-processing">Math for Fast Processing</a></li>
<li><a href="#treap">Treap</a></li>
<li><a href="#linear-programming-videos">Linear Programming</a></li>
<li><a href="#geometry-convex-hull-videos">Geometry, Convex hull</a></li>
<li><a href="#discrete-math">Discrete math</a></li>
</ul>
</li>
<li><a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></li>
<li><a href="#video-series">Video Series</a></li>
<li><a href="#computer-science-courses">Computer Science Courses</a></li>
<li><a href="#papers">Papers</a></li>
</ul>
<hr>
<h2 id="why-use-it">Why use it?</h2>
<p>If you want to work as a software engineer for a large company, these are the things you have to know.</p>
<p>If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.</p>
<p>When I started this project, I didn&rsquo;t know a stack from a heap, didn&rsquo;t know Big-O anything, or anything about trees, or how to
traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.
Every data structure I had ever used was built into the language, and I didn&rsquo;t know how they worked
under the hood at all. I never had to manage memory unless a process I was running would give an &ldquo;out of
memory&rdquo; error, and then I&rsquo;d have to find a workaround. I used a few multidimensional arrays in my life and
thousands of associative arrays, but I never created data structures from scratch.</p>
<p>It&rsquo;s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.</p>
<h2 id="how-to-use-it">How to use it</h2>
<p>Everything below is an outline, and you should tackle the items in order from top to bottom.</p>
<p>I&rsquo;m using GitHub&rsquo;s special markdown flavor, including tasks lists to track progress.</p>
<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown">More about GitHub-flavored markdown</a></li>
</ul>
<h3 id="if-you-dont-want-to-use-git">If you don&rsquo;t want to use git</h3>
<p>On this page, click the Code button near the top, then click &ldquo;Download ZIP&rdquo;. Unzip the file and you can work with the text files.</p>
<p>If you&rsquo;re open in a code editor that understands markdown, you&rsquo;ll see everything formatted nicely.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png" alt="How to download the repo as a zip file"  />
</p>
<h3 id="if-youre-comfortable-with-git">If you&rsquo;re comfortable with git</h3>
<p>Create a new branch so you can check items like this, just put an x in the brackets: [x]</p>
<ol>
<li>
<p><em><strong>Fork the GitHub repo:</strong></em> <code>https://github.com/jwasham/coding-interview-university</code> by clicking on the Fork button.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png" alt="Fork the GitHub repo"  />
</p>
</li>
<li>
<p>Clone to your local repo:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git clone git@github.com:&lt;your_github_username&gt;/coding-interview-university.git
</span></span><span class="line"><span class="cl">cd coding-interview-university
</span></span><span class="line"><span class="cl">git checkout -b progress
</span></span><span class="line"><span class="cl">git remote add jwasham https://github.com/jwasham/coding-interview-university
</span></span><span class="line"><span class="cl">git fetch --all
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Mark all boxes with X after you completed your changes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m &#34;Marked x&#34;
</span></span><span class="line"><span class="cl">git rebase jwasham/main
</span></span><span class="line"><span class="cl">git push --set-upstream origin progress
</span></span><span class="line"><span class="cl">git push --force
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</h2>
<ul>
<li>Successful software engineers are smart, but many have an insecurity that they aren&rsquo;t smart enough.</li>
<li>Following videos may help you overcome this insecurity:
<ul>
<li><a href="https://www.youtube.com/watch?v=0SARbwvhupQ">The myth of the Genius Programmer</a></li>
<li><a href="https://www.youtube.com/watch?v=1i8ylq4j_EY">It&rsquo;s Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a></li>
</ul>
</li>
</ul>
<h2 id="a-note-about-video-resources">A Note About Video Resources</h2>
<p>Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.
Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.</p>
<p>It would be great to replace the online course resources with free and always-available public sources,
such as YouTube videos (preferably university lectures), so that you people can study these anytime,
not just when a specific online course is in session.</p>
<h2 id="choose-a-programming-language">Choose a Programming Language</h2>
<p>You&rsquo;ll need to choose a programming language for the coding interviews you do,
but you&rsquo;ll also need to find a language that you can use to study computer science concepts.</p>
<p>Preferably the language would be the same, so that you only need to be proficient in one.</p>
<h3 id="for-this-study-plan">For this Study Plan</h3>
<p>When I did the study plan, I used 2 languages for most of it: C and Python</p>
<ul>
<li>C: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures
and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that&rsquo;s terrific,
but when you&rsquo;re learning how these low-level data structures are built, it&rsquo;s great to feel close to the metal.
<ul>
<li>C is everywhere. You&rsquo;ll see examples in books, lectures, videos, <em>everywhere</em> while you&rsquo;re studying.</li>
<li><a href="https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628">The C Programming Language, Vol 2</a>
<ul>
<li>This is a short book, but it will give you a great handle on the C language and if you practice it a little
you&rsquo;ll quickly get proficient. Understanding C helps you understand how programs and memory work.</li>
<li>You don&rsquo;t need to go super deep in the book (or even finish it). Just get to where you&rsquo;re comfortable reading and writing in C.</li>
<li><a href="https://github.com/lekkas/c-algorithms">Answers to questions in the book</a></li>
</ul>
</li>
</ul>
</li>
<li>Python: Modern and very expressive, I learned it because it&rsquo;s just super useful and also allows me to write less code in an interview.</li>
</ul>
<p>This is my preference. You do what you like, of course.</p>
<p>You may not need it, but here are some sites for learning a new language:</p>
<ul>
<li><a href="https://exercism.org/tracks">Exercism</a></li>
<li><a href="https://www.codewars.com">Codewars</a></li>
<li><a href="https://www.hackerearth.com/for-developers/">HackerEarth</a></li>
<li><a href="https://www.scaler.com/topics/">Scaler Topics (Java, C++)</a></li>
</ul>
<h3 id="for-your-coding-interview">For your Coding Interview</h3>
<p>You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:</p>
<ul>
<li>C++</li>
<li>Java</li>
<li>Python</li>
</ul>
<p>You could also use these, but read around first. There may be caveats:</p>
<ul>
<li>JavaScript</li>
<li>Ruby</li>
</ul>
<p>Here is an article I wrote about choosing a language for the interview:
<a href="https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/">Pick One Language for the Coding Interview</a>.
This is the original article my post was based on: <a href="https://web.archive.org/web/20210516054124/https://blog.codingforinterviews.com/best-programming-language-jobs/">Choosing a Programming Language for Interviews</a></p>
<p>You need to be very comfortable in the language and be knowledgeable.</p>
<p>Read more about choices:</p>
<ul>
<li><a href="https://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/">Choose the Right Language for Your Coding Interview</a></li>
</ul>
<h2 id="books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</h2>
<p>This book will form your foundation for computer science.</p>
<p>Just choose one, in a language that you will be comfortable with. You&rsquo;ll be doing a lot of reading and coding.</p>
<h3 id="c">C</h3>
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080">Algorithms in C, Parts 1-5 (Bundle), 3rd Edition</a>
<ul>
<li>Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms</li>
</ul>
</li>
</ul>
<h3 id="python">Python</h3>
<ul>
<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/">Data Structures and Algorithms in Python</a>
<ul>
<li>by Goodrich, Tamassia, Goldwasser</li>
<li>I loved this book. It covered everything and more.</li>
<li>Pythonic code</li>
<li>my glowing book report: <a href="https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/">https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/</a></li>
</ul>
</li>
</ul>
<h3 id="java">Java</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, Goldwasser
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/">Data Structures and Algorithms in Java</a></li>
</ul>
</li>
<li>Sedgewick and Wayne:
<ul>
<li><a href="https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/">Algorithms</a></li>
<li>Free Coursera course that covers the book (taught by the authors!):
<ul>
<li><a href="https://www.coursera.org/learn/algorithms-part1">Algorithms I</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part2">Algorithms II</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="c-1">C++</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, and Mount
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275">Data Structures and Algorithms in C++, 2nd Edition</a></li>
</ul>
</li>
<li>Sedgewick and Wayne
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/">Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching</a></li>
<li><a href="https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/">Algorithms in C++ Part 5: Graph Algorithms</a></li>
</ul>
</li>
</ul>
<h2 id="interview-prep-books">Interview Prep Books</h2>
<p>You don&rsquo;t need to buy a bunch of these. Honestly &ldquo;Cracking the Coding Interview&rdquo; is probably enough,
but I bought more to give myself more practice. But I always do too much.</p>
<p>I bought both of these. They gave me plenty of practice.</p>
<ul>
<li><a href="https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/">Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition</a>
<ul>
<li>Answers in C++ and Java</li>
<li>This is a good warm-up for Cracking the Coding Interview</li>
<li>Not too difficult. Most problems may be easier than what you&rsquo;ll see in an interview (from what I&rsquo;ve read)</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/">Cracking the Coding Interview, 6th Edition</a>
<ul>
<li>answers in Java</li>
</ul>
</li>
</ul>
<h3 id="if-you-have-tons-of-extra-time">If you have tons of extra time:</h3>
<p>Choose one:</p>
<ul>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836">Elements of Programming Interviews (C++ version)</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/">Elements of Programming Interviews in Python</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/">Elements of Programming Interviews (Java version)</a>
- <a href="https://github.com/gardncl/elements-of-programming-interviews">Companion Project - Method Stub and Test Cases for Every Problem in the Book</a></li>
</ul>
<h2 id="dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</h2>
<p>This list grew over many months, and yes, it got out of hand.</p>
<p>Here are some mistakes I made so you&rsquo;ll have a better experience. And you&rsquo;ll save months of time.</p>
<h3 id="1-you-wont-remember-it-all">1. You Won&rsquo;t Remember it All</h3>
<p>I watched hours of videos and took copious notes, and months later there was much I didn&rsquo;t remember. I spent 3 days going
through my notes and making flashcards, so I could review. I didn&rsquo;t need all of that knowledge.</p>
<p>Please, read so you won&rsquo;t make my mistakes:</p>
<p><a href="https://startupnextdoor.com/retaining-computer-science-knowledge/">Retaining Computer Science Knowledge</a>.</p>
<h3 id="2-use-flashcards">2. Use Flashcards</h3>
<p>To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.
Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.</p>
<p>Make your own for free:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards">Flashcards site repo</a></li>
</ul>
<p><strong>I DON&rsquo;T RECOMMEND using my flashcards.</strong> There are too many and most of them are trivia that you don&rsquo;t need.</p>
<p>But if you don&rsquo;t want to listen to me, here you go:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db">My flash cards database (1200 cards)</a>:</li>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db">My flash cards database (extreme - 1800 cards)</a>:</li>
</ul>
<p>Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.
It&rsquo;s way too much for what&rsquo;s required.</p>
<p><strong>Note on flashcards:</strong> The first time you recognize you know the answer, don&rsquo;t mark it as known. You have to see the
same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in
your brain.</p>
<p>An alternative to using my flashcard site is <a href="https://ankisrs.net/">Anki</a>, which has been recommended to me numerous times.
It uses a repetition system to help you remember. It&rsquo;s user-friendly, available on all platforms and has a cloud sync system.
It costs $25 on iOS but is free on other platforms.</p>
<p>My flashcard database in Anki format: <a href="https://ankiweb.net/shared/info/25173560">https://ankiweb.net/shared/info/25173560</a> (thanks <a href="https://github.com/xiewenya">@xiewenya</a>).</p>
<p>Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the &ldquo;styling&rdquo; radio button, add the member &ldquo;white-space: pre;&rdquo; to the card class.</p>
<h3 id="3-do-coding-interview-questions-while-youre-learning">3. Do Coding Interview Questions While You&rsquo;re Learning</h3>
<p>THIS IS VERY IMPORTANT.</p>
<p>Start doing coding interview questions while you&rsquo;re learning data structures and algorithms.</p>
<p>You need to apply what you&rsquo;re learning to solving problems, or you&rsquo;ll forget. I made this mistake.</p>
<p>Once you&rsquo;ve learned a topic, and feel somewhat comfortable with it, for example, <strong>linked lists</strong>:</p>
<ol>
<li>Open one of the <a href="#interview-prep-books">coding interview books</a> (or coding problem websites, listed below)</li>
<li>Do 2 or 3 questions regarding linked lists.</li>
<li>Move on to the next learning topic.</li>
<li>Later, go back and do another 2 or 3 linked list problems.</li>
<li>Do this with each new topic you learn.</li>
</ol>
<p><strong>Keep doing problems while you&rsquo;re learning all this stuff, not after.</strong></p>
<p>You&rsquo;re not being hired for knowledge, but how you apply the knowledge.</p>
<p>There are many resources for this, listed below. Keep going.</p>
<h3 id="4-focus">4. Focus</h3>
<p>There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music
without lyrics and you&rsquo;ll be able to focus pretty well.</p>
<h2 id="what-you-wont-see-covered">What you won&rsquo;t see covered</h2>
<p>These are prevalent technologies but not part of this study plan:</p>
<ul>
<li>SQL</li>
<li>Javascript</li>
<li>HTML, CSS, and other front-end technologies</li>
</ul>
<h2 id="the-daily-plan">The Daily Plan</h2>
<p>This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.</p>
<p>Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation
of that data structure or algorithm in the language you chose for this course.</p>
<p>You can see my code here:</p>
<ul>
<li><a href="https://github.com/jwasham/practice-c">C</a></li>
<li><a href="https://github.com/jwasham/practice-cpp">C++</a></li>
<li><a href="https://github.com/jwasham/practice-python">Python</a></li>
</ul>
<p>You don&rsquo;t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.</p>
<h2 id="coding-question-practice">Coding Question Practice</h2>
<p>ü§î Why is this here? I&rsquo;m not ready to interview.</p>
<p><a href="#3-do-coding-interview-questions-while-youre-learning">Then go back and read this.</a></p>
<p>Why you need to practice doing programming problems:</p>
<ul>
<li>Problem recognition, and where the right data structures and algorithms fit in</li>
<li>Gathering requirements for the problem</li>
<li>Talking your way through the problem like you will in the interview</li>
<li>Coding on a whiteboard or paper, not a computer</li>
<li>Coming up with time and space complexity for your solutions (see Big-O below)</li>
<li>Testing your solutions</li>
</ul>
<p>There is a great intro for methodical, communicative problem solving in an interview. You&rsquo;ll get this from the programming
interview books, too, but I found this outstanding:
<a href="https://www.hiredintech.com/algorithm-design/">Algorithm design canvas</a></p>
<p>Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.</p>
<p>If you don&rsquo;t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.
This is my &ldquo;sofa whiteboard&rdquo;. I added the pen in the photo just for scale. If you use a pen, you&rsquo;ll wish you could erase.
Gets messy quick. <strong>I use a pencil and eraser.</strong></p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg" alt="my sofa whiteboard"  />
</p>
<p><strong>Coding question practice is not about memorizing answers to programming problems.</strong></p>
<h2 id="coding-problems">Coding Problems</h2>
<p>Don&rsquo;t forget your key coding interview books <a href="#interview-prep-books">here</a>.</p>
<p>Solving Problems:</p>
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution">How to Find a Solution</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content">How to Dissect a Topcoder Problem Statement</a></li>
</ul>
<p>Coding Interview Question Videos:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI">IDeserve (88 videos)</a></li>
<li><a href="https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&amp;view=50&amp;sort=dd">Tushar Roy (5 playlists)</a>
<ul>
<li>Super for walkthroughs of problem solutions</li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-">Nick White - LeetCode Solutions (187 Videos)</a>
<ul>
<li>Good explanations of solution and the code</li>
<li>You can watch several in a short time</li>
</ul>
</li>
<li><a href="https://youtube.com/FisherCoder">FisherCoder - LeetCode Solutions</a></li>
</ul>
<p>Challenge/Practice sites:</p>
<ul>
<li><a href="https://leetcode.com/">LeetCode</a>
<ul>
<li>My favorite coding problem site. It&rsquo;s worth the subscription money for the 1-2 months you&rsquo;ll likely be preparing.</li>
<li>See Nick White and FisherCoder Videos above for code walk-throughs.</li>
</ul>
</li>
<li><a href="https://www.hackerrank.com/">HackerRank</a></li>
<li><a href="https://www.topcoder.com/">TopCoder</a></li>
<li><a href="https://codeforces.com/">Codeforces</a></li>
<li><a href="https://codility.com/programmers/">Codility</a></li>
<li><a href="https://practice.geeksforgeeks.org/explore/?page=1">Geeks for Geeks</a></li>
<li><a href="https://www.interviewbit.com/">InterviewBit</a></li>
<li><a href="https://www.algoexpert.io/product">AlgoExpert</a>
<ul>
<li>Created by Google engineers, this is also an excellent resource to hone your skills.</li>
</ul>
</li>
<li><a href="https://projecteuler.net/">Project Euler</a>
<ul>
<li>very math focused, and not really suited for coding interviews</li>
</ul>
</li>
</ul>
<h2 id="lets-get-started">Let&rsquo;s Get Started</h2>
<p>Alright, enough talk, let&rsquo;s learn!</p>
<p>But don&rsquo;t forget to do coding problems from above while you learn!</p>
<h2 id="algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</h2>
<ul>
<li>Nothing to implement here, you&rsquo;re just watching videos and taking notes! Yay!</li>
<li>There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.</li>
<li>Don&rsquo;t worry if you don&rsquo;t understand all the math behind it.</li>
<li>You just need to understand how to express the complexity of an algorithm in terms of Big-O.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iOq5kSKqeR4">Harvard CS50 - Asymptotic Notation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=V6mKVRU1evU">Big O Notations (general quick tutorial) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ei-A_wy5Yxw&amp;index=2&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Big O Notation (and Omega and Theta) - best mathematical explanation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z1mkCe3kVUA">Skiena (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98">UC Berkeley Big O (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B3SpQZaAZP4&amp;index=10&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Amortized Analysis (video)</a></li>
<li><input disabled="" type="checkbox"> TopCoder (includes recurrence relations and master theorem):
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one">Computational Complexity: Section 1</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two">Computational Complexity: Section 2</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://bigocheatsheet.com/">Cheat sheet</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/__vX2sjlpXU">[Review] Big-O notation in 5 minutes (video)</a></li>
</ul>
<p>Well, that&rsquo;s about enough of that.</p>
<p>When you go through &ldquo;Cracking the Coding Interview&rdquo;, there is a chapter on this, and at the end there is a quiz to see
if you can identify the runtime complexity of different algorithms. It&rsquo;s a super review and test.</p>
<h2 id="data-structures">Data Structures</h2>
<ul>
<li>
<h3 id="arrays">Arrays</h3>
<ul>
<li><input disabled="" type="checkbox"> About Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/arrays-OsBSF">Arrays (video)</a></li>
<li><a href="https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE">UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)</a> (Start watching from 15m 32s)</li>
<li><a href="https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV">Dynamic Arrays (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=1jtrQqYpt7g">Jagged Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement a vector (mutable array with automatic resizing):
<ul>
<li><input disabled="" type="checkbox"> Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.</li>
<li><input disabled="" type="checkbox"> New raw data array with allocated memory
<ul>
<li>can allocate int array under the hood, just not use its features</li>
<li>start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> size() - number of items</li>
<li><input disabled="" type="checkbox"> capacity() - number of items it can hold</li>
<li><input disabled="" type="checkbox"> is_empty()</li>
<li><input disabled="" type="checkbox"> at(index) - returns item at given index, blows up if index out of bounds</li>
<li><input disabled="" type="checkbox"> push(item)</li>
<li><input disabled="" type="checkbox"> insert(index, item) - inserts item at index, shifts that index&rsquo;s value and trailing elements to the right</li>
<li><input disabled="" type="checkbox"> prepend(item) - can use insert above at index 0</li>
<li><input disabled="" type="checkbox"> pop() - remove from end, return value</li>
<li><input disabled="" type="checkbox"> delete(index) - delete item at index, shifting all trailing elements left</li>
<li><input disabled="" type="checkbox"> remove(item) - looks for value and removes index holding it (even if in multiple places)</li>
<li><input disabled="" type="checkbox"> find(item) - looks for value and returns first index with that value, -1 if not found</li>
<li><input disabled="" type="checkbox"> resize(new_capacity) // private function
<ul>
<li>when you reach capacity, resize to double the size</li>
<li>when popping an item, if size is 1/4 of capacity, resize to half</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Time
<ul>
<li>O(1) to add/remove at end (amortized for allocations for more space), index, or update</li>
<li>O(n) to insert/remove elsewhere</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Space
<ul>
<li>contiguous in memory, so proximity helps performance</li>
<li>space needed = (array capacity, which is &gt;= n) * size of item, but even if 2n, still O(n)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="linked-lists">Linked Lists</h3>
<ul>
<li><input disabled="" type="checkbox"> Description:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK">Singly Linked Lists (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0">CS 61B - Linked Lists 1 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w">CS 61B - Linked Lists 2 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/F8AbOfQwl1c">[Review] Linked lists in 4 minutes (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=QN6FPiD0Gzo">C Code (video)</a>
- not the whole video, just portions about Node struct and memory allocation</li>
<li><input disabled="" type="checkbox"> Linked List vs Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9">Core Linked Lists Vs Arrays (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd">In The Real World Linked Lists Vs Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YQs6IC-vgmo">Why you should avoid linked lists (video)</a></li>
<li><input disabled="" type="checkbox"> Gotcha: you need pointer to pointer knowledge:
(for when you pass a pointer to a function that may change the address where that pointer points)
This page is just to get a grasp on ptr to ptr. I don&rsquo;t recommend this list traversal style. Readability and maintainability suffer due to cleverness.
<ul>
<li><a href="https://www.eskimo.com/~scs/cclass/int/sx8.html">Pointers to Pointers</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement (I did with tail pointer &amp; without):
<ul>
<li><input disabled="" type="checkbox"> size() - returns number of data elements in list</li>
<li><input disabled="" type="checkbox"> empty() - bool returns true if empty</li>
<li><input disabled="" type="checkbox"> value_at(index) - returns the value of the nth item (starting at 0 for first)</li>
<li><input disabled="" type="checkbox"> push_front(value) - adds an item to the front of the list</li>
<li><input disabled="" type="checkbox"> pop_front() - remove front item and return its value</li>
<li><input disabled="" type="checkbox"> push_back(value) - adds an item at the end</li>
<li><input disabled="" type="checkbox"> pop_back() - removes end item and returns its value</li>
<li><input disabled="" type="checkbox"> front() - get value of front item</li>
<li><input disabled="" type="checkbox"> back() - get value of end item</li>
<li><input disabled="" type="checkbox"> insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index</li>
<li><input disabled="" type="checkbox"> erase(index) - removes node at given index</li>
<li><input disabled="" type="checkbox"> value_n_from_end(n) - returns the value of the node at nth position from the end of the list</li>
<li><input disabled="" type="checkbox"> reverse() - reverses the list</li>
<li><input disabled="" type="checkbox"> remove_value(value) - removes the first item in the list with this value</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Doubly-linked List
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD">Description (video)</a></li>
<li>No need to implement</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="stack">Stack</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/stacks-UdKzQ">Stacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/KcT3aVgrrpU">[Review] Stacks in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Will not implement. Implementing with array is trivial</li>
</ul>
</li>
<li>
<h3 id="queue">Queue</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/queues-EShpq">Queue (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Circular_buffer">Circular buffer/FIFO</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/D6gu-_tmEpQ">[Review] Queues in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement using linked-list, with tail pointer:
<ul>
<li>enqueue(value) - adds value at position at tail</li>
<li>dequeue() - returns value and removes least recently added element (front)</li>
<li>empty()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement using fixed-sized array:
<ul>
<li>enqueue(value) - adds item at end of available storage</li>
<li>dequeue() - returns value and removes least recently added element</li>
<li>empty()</li>
<li>full()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cost:
<ul>
<li>a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)
because you&rsquo;d need the next to last element, causing a full traversal each dequeue</li>
<li>enqueue: O(1) (amortized, linked list and array [probing])</li>
<li>dequeue: O(1) (linked list and array)</li>
<li>empty: O(1) (linked list and array)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="hash-table">Hash table</h3>
<ul>
<li>
<p><input disabled="" type="checkbox"> Videos:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0M_kIqhwbFo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=8">Hashing with Chaining (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;index=9&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Table Doubling, Karp-Rabin (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rvdJDijO2Ro&amp;index=10&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Open Addressing, Cryptographic Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=C4Kc8xzcA68">PyCon 2010: The Mighty Dictionary (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=66P5FMkWoVU">PyCon 2017: The Dictionary Even Mightier (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z0lJ2k0sl1g&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=11">(Advanced) Randomization: Universal &amp; Perfect Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N0COwN14gt0&amp;list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&amp;index=4">(Advanced) Perfect hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/knV86FlSXJ8">[Review] Hash tables in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Online Courses:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP">Core Hash Tables (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/home/week/4">Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP">Phone Book Problem (video)</a></li>
<li><input disabled="" type="checkbox"> distributed hash tables:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb">Instant Uploads And Storage Optimization In Dropbox (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H">Distributed Hash Tables (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement with array using linear probing</p>
<ul>
<li>hash(k, m) - m is size of hash table</li>
<li>add(key, value) - if key already exists, update value</li>
<li>exists(key)</li>
<li>get(key)</li>
<li>remove(key)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="more-knowledge">More Knowledge</h2>
<ul>
<li>
<h3 id="binary-search">Binary search</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=D5SrAga1pno">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Binary%20Search">detail</a></li>
<li><input disabled="" type="checkbox"> <a href="https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems">blueprint</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fDKIpRe8GW4">[Review] Binary search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li>binary search (on sorted array of integers)</li>
<li>binary search using recursion</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="bitwise-operations">Bitwise operations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf">Bits cheat sheet</a> - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)</li>
<li><input disabled="" type="checkbox"> Get a really good understanding of manipulating bits with: &amp;, |, ^, ~, &raquo;, &laquo;
<ul>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Word_(computer_architecture)">words</a></li>
<li><input disabled="" type="checkbox"> Good intro:
<a href="https://www.youtube.com/watch?v=7jkIUgLC29I">Bit Manipulation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=d0AwjSpNXR0">C Programming Tutorial 2-10: Bitwise Operators (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bit_manipulation">Bit Manipulation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise Operation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://graphics.stanford.edu/~seander/bithacks.html">Bithacks</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/">The Bit Twiddler</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/interactive.html">The Bit Twiddler Interactive</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZusiKXcz_ac">Bit Hacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/">Practice Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 2s and 1s complement
<ul>
<li><a href="https://www.youtube.com/watch?v=lKTsv6iVxV4">Binary: Plusses &amp; Minuses (Why We Use Two&rsquo;s Complement) (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ones%27_complement">1s Complement</a></li>
<li><a href="https://en.wikipedia.org/wiki/Two%27s_complement">2s Complement</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Count set bits
<ul>
<li><a href="https://youtu.be/Hzuzo9NJrlc">4 ways to count bits in a byte (video)</a></li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan">Count Bits</a></li>
<li><a href="https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer">How To Count The Number Of Set Bits In a 32 Bit Integer</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Swap values:
<ul>
<li><a href="https://bits.stephan-brumme.com/swap.html">Swap</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Absolute value:
<ul>
<li><a href="https://bits.stephan-brumme.com/absInteger.html">Absolute Integer</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="trees">Trees</h2>
<ul>
<li>
<h3 id="trees---intro">Trees - Intro</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/trees-95qda">Intro to Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b">Tree Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uWL6FJhq5fM">BFS(breadth-first search) and DFS(depth-first search) (video)</a>
<ul>
<li>BFS notes:
<ul>
<li>level order (BFS, using queue)</li>
<li>time complexity: O(n)</li>
<li>space complexity: best: O(1), worst: O(n/2)=O(n)</li>
</ul>
</li>
<li>DFS notes:
<ul>
<li>time complexity: O(n)</li>
<li>space complexity:
best: O(log n) - avg. height of tree
worst: O(n)</li>
<li>inorder (DFS: left, self, right)</li>
<li>postorder (DFS: left, right, self)</li>
<li>preorder (DFS: self, left, right)</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/HZ5YTanv5QE">[Review] Breadth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Urx87-NMm6c">[Review] Depth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b">[Review] Tree Traversal (playlist) in 11 minutes (video)</a></li>
</ul>
</li>
<li>
<h3 id="binary-search-trees-bsts">Binary search trees: BSTs</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=x6At0nzX92o&amp;index=1&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary Search Tree Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=76dhtgZt38A&amp;ab_channel=MITOpenCourseWare">MIT (video)</a></li>
<li>C/C++:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=COZK7NATh4k&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=28">Binary search tree - Implementation in C/C++ (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=hWokyBoo0aI&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=29">BST implementation - memory allocation in stack and heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Ut90klNN264&amp;index=30&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Find min and max element in a binary search tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_pnqMz5nrRs&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=31">Find height of a binary tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9RHO6jU--GU&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=32">Binary tree traversal - breadth-first and depth-first strategies (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=86g8jAQug04&amp;index=33&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree: Level Order Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gm8DUJJhmY4&amp;index=34&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree traversal: Preorder, Inorder, Postorder (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=yEwSGhSsT0U&amp;index=35&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Check if a binary tree is binary search tree or not (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gcULXE7ViZw&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=36">Delete a node from Binary Search Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=5cPbNCrdotA&amp;index=37&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Inorder Successor in a binary search tree (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li><input disabled="" type="checkbox"> insert    // insert value into tree</li>
<li><input disabled="" type="checkbox"> get_node_count // get count of values stored</li>
<li><input disabled="" type="checkbox"> print_values // prints the values in the tree, from min to max</li>
<li><input disabled="" type="checkbox"> delete_tree</li>
<li><input disabled="" type="checkbox"> is_in_tree // returns true if given value exists in the tree</li>
<li><input disabled="" type="checkbox"> get_height // returns the height in nodes (single node&rsquo;s height is 1)</li>
<li><input disabled="" type="checkbox"> get_min   // returns the minimum value stored in the tree</li>
<li><input disabled="" type="checkbox"> get_max   // returns the maximum value stored in the tree</li>
<li><input disabled="" type="checkbox"> is_binary_search_tree</li>
<li><input disabled="" type="checkbox"> delete_value</li>
<li><input disabled="" type="checkbox"> get_successor // returns next-highest value in tree after given value, -1 if none</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</h3>
<ul>
<li>visualized as a tree, but is usually linear in storage (array, linked list)</li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/introduction-2OpTs">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees">Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark">Tree Height Remark (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations">Basic Operations (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees">Complete Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode">Pseudocode (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3291">Heap Sort - jumps to start (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO">Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS">Building a heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM&amp;index=4&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">MIT: Heaps and Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE">CS 61B Lecture 24: Priority Queues (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MiyLo8adrWw">Linear Time BuildHeap (max-heap)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6">[Review] Heap (playlist) in 13 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement a max-heap:
<ul>
<li><input disabled="" type="checkbox"> insert</li>
<li><input disabled="" type="checkbox"> sift_up - needed for insert</li>
<li><input disabled="" type="checkbox"> get_max - returns the max item, without removing it</li>
<li><input disabled="" type="checkbox"> get_size() - return number of elements stored</li>
<li><input disabled="" type="checkbox"> is_empty() - returns true if heap contains no elements</li>
<li><input disabled="" type="checkbox"> extract_max - returns the max item, removing it</li>
<li><input disabled="" type="checkbox"> sift_down - needed for extract_max</li>
<li><input disabled="" type="checkbox"> remove(x) - removes item at index x</li>
<li><input disabled="" type="checkbox"> heapify - create a heap from an array of elements, needed for heap_sort</li>
<li><input disabled="" type="checkbox"> heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="sorting">Sorting</h2>
<ul>
<li>
<p><input disabled="" type="checkbox"> Notes:</p>
<ul>
<li>Implement sorts &amp; know best case/worst case, average complexity of each:
<ul>
<li>no bubble sort - it&rsquo;s terrible - O(n^2), except when n &lt;= 16</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Stability in sorting algorithms (&ldquo;Is Quicksort stable?&rdquo;)
<ul>
<li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">Sorting Algorithm Stability</a></li>
<li><a href="https://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms">Stability In Sorting Algorithms</a></li>
<li><a href="https://www.geeksforgeeks.org/stability-in-sorting-algorithms/">Stability In Sorting Algorithms</a></li>
<li><a href="https://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf">Sorting Algorithms - Stability</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Which algorithms can be used on linked lists? Which on arrays? Which on both?
<ul>
<li>I wouldn&rsquo;t recommend sorting a linked list, but merge sort is doable.</li>
<li><a href="https://www.geeksforgeeks.org/merge-sort-for-linked-list/">Merge Sort For Linked List</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>For heapsort, see Heap data structure above. Heap sort is great, but not stable</p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Mergesort (5 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq">1. Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort">2. Bottom up Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF">3. Sorting Complexity</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS">4. Comparators</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability">5. Stability</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Quicksort (4 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC">1. Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT">2. Selection</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd">3. Duplicate Keys</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7">4. System Sorts</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> UC Berkeley:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I">CS 61B Lecture 29: Sorting I (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk">CS 61B Lecture 30: Sorting II (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc">CS 61B Lecture 32: Sorting III (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4">CS 61B Lecture 33: Sorting V (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI">CS 61B 2014-04-21: Radix Sort(video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=P00xJgWzz2c&amp;index=1&amp;list=PL89B61F78B552C1AB">Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ni_zk257Nqo&amp;index=7&amp;list=PL89B61F78B552C1AB">Analyzing Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Kg4bqzAqRBM&amp;index=3&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Insertion Sort, Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=c4BRHC7kTaQ&amp;index=2&amp;list=PL89B61F78B552C1AB">Insertion Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=GCae1WNvnZM&amp;index=3&amp;list=PL89B61F78B552C1AB">Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=y_G9BkAm6B8&amp;index=4&amp;list=PL89B61F78B552C1AB">Quicksort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6nDMgr0-Yyo&amp;index=8&amp;list=PL89B61F78B552C1AB">Selection Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> Merge sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c">Using output array (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py">Using output array (Python)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc">In-place (C++)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Quick sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py">Implementation (Python)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl">[Review] Sorting (playlist) in 18 minutes</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Hoixgm4-P4M">Quick sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/2DmK_H7IdTo">Heap sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/4VqmGXwpLqc">Merge sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/xli_FI7CuzA">Bubble sort in 2 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/g-PGLbMth_g">Selection sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/JU767SDMDvA">Insertion sort in 2 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement:</p>
<ul>
<li><input disabled="" type="checkbox"> Mergesort: O(n log n) average and worst case</li>
<li><input disabled="" type="checkbox"> Quicksort O(n log n) average case</li>
<li>Selection sort and insertion sort are both O(n^2) average and worst case</li>
<li>For heapsort, see Heap data structure above</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Not required, but I recommended them:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/3">Sedgewick - Radix Sorts (6 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java">1. Strings in Java</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z">2. Key Indexed Counting</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort">3. Least Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort">4. Most Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5">5. 3 Way Radix Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">6. Suffix Arrays</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort">Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=xhr26ia4k38">Radix Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;index=7&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Radix Sort, Counting Sort (linear time given constraints) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cNB2lADK3_s&amp;index=8&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Matrix Multiply, Quicksort, Freivalds&rsquo; algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=pOKy3RZbSws&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=14">Sorting in Linear Time (video)</a></li>
</ul>
</li>
</ul>
<p>As a summary, here is a visual representation of <a href="https://www.youtube.com/watch?v=kPRA0W1kECg">15 sorting algorithms</a>.
If you need more detail on this subject, see &ldquo;Sorting&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></p>
<h2 id="graphs">Graphs</h2>
<p>Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.</p>
<ul>
<li>
<p>Notes:</p>
<ul>
<li>There are 4 basic ways to represent a graph in memory:
<ul>
<li>objects and pointers</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>adjacency map</li>
</ul>
</li>
<li>Familiarize yourself with each representation and its pros &amp; cons</li>
<li>BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code</li>
<li>When asked a question, look for a graph-based solution first, then move on if none</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> MIT(videos):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oFVYVzlvk9c&amp;t=14s&amp;ab_channel=MITOpenCourseWare">Breadth-First Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IBfWDYSffUU&amp;t=32s&amp;ab_channel=MITOpenCourseWare">Depth-First Search</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Skiena Lectures - great intro:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Sjk0xqWWPCc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=10">CSE373 2020 - Lecture 10 - Graph Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZTwjXj81NVY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=11">CSE373 2020 - Lecture 11 - Graph Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=KyordYB3BOs&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=12">CSE373 2020 - Lecture 12 - Depth First Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oolm2VnJUKw&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=13">CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RktgPx0MarY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=14">CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con&rsquo;t) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MUe5DXRhyAo&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=15">CSE373 2020 - Lecture 15 - Graph Algorithms (con&rsquo;t 2) (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Graphs (review and more):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Aa2sqUhIn-E&amp;index=15&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">6.006 Single-Source Shortest Paths Problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NSHizBK9JD8&amp;t=1731s&amp;ab_channel=MITOpenCourseWare">6.006 Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=f9cVS_URPc0&amp;ab_channel=MITOpenCourseWare">6.006 Bellman-Ford (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=CHvQ3q_gJ7E&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=18">6.006 Speeding Up Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=i_AQT_XfvD8&amp;index=6&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim&rsquo;s Algorithm -  Lecture 6 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ufj5_bppBsA&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=7">Aduni: Graph Algorithms II - DFS, BFS, Kruskal&rsquo;s Algorithm, Union Find Data Structure - Lecture 7 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=DiedsPsMKXc&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=8">Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XIAQRlNkJAw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=9">Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k">CS 61B 2014: Weighted graphs (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=tKwnms5iRBU&amp;index=16&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Greedy Algorithms: Minimum Spanning Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RpgcYiky7uw">Strongly Connected Components Kosaraju&rsquo;s Algorithm Graph Algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw">[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV">[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p>Full Coursera Course:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-on-graphs/home/welcome">Algorithms on Graphs (video)</a></li>
</ul>
</li>
<li>
<p>I&rsquo;ll implement:</p>
<ul>
<li><input disabled="" type="checkbox"> DFS with adjacency list (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency list (iterative with stack)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (iterative with stack)</li>
<li><input disabled="" type="checkbox"> BFS with adjacency list</li>
<li><input disabled="" type="checkbox"> BFS with adjacency matrix</li>
<li><input disabled="" type="checkbox"> single-source shortest path (Dijkstra)</li>
<li><input disabled="" type="checkbox"> minimum spanning tree</li>
<li>DFS-based algorithms (see Aduni videos above):
<ul>
<li><input disabled="" type="checkbox"> check for cycle (needed for topological sort, since we&rsquo;ll check for cycle before starting)</li>
<li><input disabled="" type="checkbox"> topological sort</li>
<li><input disabled="" type="checkbox"> count connected components in a graph</li>
<li><input disabled="" type="checkbox"> list strongly connected components</li>
<li><input disabled="" type="checkbox"> check for bipartite graph</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="even-more-knowledge">Even More Knowledge</h2>
<ul>
<li>
<h3 id="recursion">Recursion</h3>
<ul>
<li><input disabled="" type="checkbox"> Stanford lectures on recursion &amp; backtracking:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gl3emqCuueQ&amp;list=PLFE6E58F856038C69&amp;index=8">Lecture 8 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uFJhEPrbycQ&amp;list=PLFE6E58F856038C69&amp;index=9">Lecture 9 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NdF1QDTRkck&amp;index=10&amp;list=PLFE6E58F856038C69">Lecture 10 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p-gpaIGRCQI&amp;list=PLFE6E58F856038C69&amp;index=11">Lecture 11 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>When it is appropriate to use it?</li>
<li>How is tail recursion better than not?
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad">What Is Tail Recursion Why Is It So Bad?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1">Tail Recursion (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/ngCos392W4w">5 Simple Steps for Solving Any Recursive Problem(video)</a></li>
</ul>
<p>Backtracking Blueprint: <a href="https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)">Java</a>
<a href="https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A">Python</a></p>
</li>
<li>
<h3 id="dynamic-programming">Dynamic Programming</h3>
<ul>
<li>You probably won&rsquo;t see any dynamic programming problems in your interview, but it&rsquo;s worth being able to recognize a
problem as being a candidate for dynamic programming.</li>
<li>This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.</li>
<li>I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.</li>
<li><input disabled="" type="checkbox"> Videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wAA0AMfcJHQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=18">Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=T3A4jlHlhtA&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=19">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iPnPVcZmRbE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=20">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3558">Simonson: Dynamic Programming 0 (starts at 59:18) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0EzHjQ_SOeU&amp;index=11&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Simonson: Dynamic Programming I - Lecture 11 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=v1qiRwuJU7g&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=12">Simonson: Dynamic programming II - Lecture 12 (video)</a></li>
<li><input disabled="" type="checkbox"> List of individual DP problems (each is short):
<a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">Dynamic Programming (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Yale Lecture notes:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming">Dynamic Programming</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Coursera:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem">The RNA secondary structure problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq">A dynamic programming algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2">Illustrating the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm">Running time of the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation">DP vs. recursive implementation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6">Global pairwise sequence alignment (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment">Local pairwise sequence alignment (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="design-patterns">Design patterns</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3cmzqZzwNDM&amp;list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&amp;index=3">Quick UML review (video)</a></li>
<li><input disabled="" type="checkbox"> Learn these patterns:
<ul>
<li><input disabled="" type="checkbox"> strategy</li>
<li><input disabled="" type="checkbox"> singleton</li>
<li><input disabled="" type="checkbox"> adapter</li>
<li><input disabled="" type="checkbox"> prototype</li>
<li><input disabled="" type="checkbox"> decorator</li>
<li><input disabled="" type="checkbox"> visitor</li>
<li><input disabled="" type="checkbox"> factory, abstract factory</li>
<li><input disabled="" type="checkbox"> facade</li>
<li><input disabled="" type="checkbox"> observer</li>
<li><input disabled="" type="checkbox"> proxy</li>
<li><input disabled="" type="checkbox"> delegate</li>
<li><input disabled="" type="checkbox"> command</li>
<li><input disabled="" type="checkbox"> state</li>
<li><input disabled="" type="checkbox"> memento</li>
<li><input disabled="" type="checkbox"> iterator</li>
<li><input disabled="" type="checkbox"> composite</li>
<li><input disabled="" type="checkbox"> flyweight</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLF206E906175C7E07">Series of videos (27 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124">Book: Head First Design Patterns</a>
<ul>
<li>I know the canonical book is &ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&rdquo;, but Head First is great for beginners to OO.</li>
</ul>
</li>
<li><a href="https://sourcemaking.com/design-patterns-and-tips">Handy reference: 101 Design Patterns &amp; Tips for Developers</a></li>
</ul>
</li>
<li>
<h3 id="combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8RRo6Ti9d0U">Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=sZkAAk9Wwa4">Make School: Probability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=dNaJg-mLobQ">Make School: More Probability and Markov Chains (video)</a></li>
<li><input disabled="" type="checkbox"> Khan Academy:
<ul>
<li>Course layout:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic">Basic Theoretical Probability</a></li>
</ul>
</li>
<li>Just the videos - 41 (each are simple and each are short):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uzkc-qNVoOk&amp;list=PLC58778F28211FA19">Probability Explained (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</h3>
<ul>
<li>Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,
and be able to recognize them when an interviewer asks you them in disguise.</li>
<li>Know what NP-complete means.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=moPtwq_cVH8&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=23">Computational Complexity (video)</a></li>
<li><input disabled="" type="checkbox"> Simonson:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=2939">Greedy Algs. II &amp; Intro to NP Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e0tGC6ZQdQE&amp;index=16&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness II &amp; Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=fCX1BGT3wjE&amp;index=17&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness III (Video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NKLDp3Rch3M&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=18">NP Completeness IV (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Skiena:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ItHp5laE1VE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=23">CSE373 2020 - Lecture 23 - NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=inaFJeCzGxU&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=24">CSE373 2020 - Lecture 24 - Satisfiability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B-bhKxjZLlc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=25">CSE373 2020 - Lecture 25 - More NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_EzetTkG_Cc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=26">CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=eHZifpgyH_4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=22">Complexity: P, NP, NP-completeness, Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MEz1J9wY2iM&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=24">Complexity: Approximation Algorithms (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4q-jmGrmxKs&amp;index=25&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Complexity: Fixed-Parameter Algorithms (video)</a></li>
<li>Peter Norvig discusses near-optimal solutions to traveling salesman problem:
<ul>
<li><a href="https://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb">Jupyter Notebook</a></li>
</ul>
</li>
<li>Pages 1048 - 1140 in CLRS if you have it.</li>
</ul>
</li>
<li>
<h3 id="how-computers-process-a-program">How computers process a program</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XM4lGflQFvA">How CPU executes a program (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/1I5ZMmrOfnA">How computers calculate - ALU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fpnE6UAfbtU">Registers and RAM (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/FZGugFqdr60">The Central Processing Unit (CPU) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/zltgXvg6r3k">Instructions and Programs (video)</a></li>
</ul>
</li>
<li>
<h3 id="caches">Caches</h3>
<ul>
<li><input disabled="" type="checkbox"> LRU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=R5ON3iwx78M">The Magic of LRU Cache (100 Days of Google Dev) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=bq6N7Ym81iI">Implementing LRU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8-FZRAjR7qU">LeetCode - 146 LRU Cache (C++) (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> CPU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=vjYF_fAZI5E&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&amp;index=24">MIT 6.004 L15: The Memory Hierarchy (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ajgC3-pyGlk&amp;index=25&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-">MIT 6.004 L16: Cache Issues (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="processes-and-threads">Processes and Threads</h3>
<ul>
<li><input disabled="" type="checkbox"> Computer Science 162 - Operating Systems (25 videos):
<ul>
<li>for processes and threads see videos 1-11</li>
<li><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c">Operating Systems and System Programming (video)</a></li>
</ul>
</li>
<li><a href="https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread">What Is The Difference Between A Process And A Thread?</a></li>
<li>Covers:
<ul>
<li>Processes, Threads, Concurrency issues
<ul>
<li>Difference between processes and threads</li>
<li>Processes</li>
<li>Threads</li>
<li>Locks</li>
<li>Mutexes</li>
<li>Semaphores</li>
<li>Monitors</li>
<li>How they work?</li>
<li>Deadlock</li>
<li>Livelock</li>
</ul>
</li>
<li>CPU activity, interrupts, context switching</li>
<li>Modern concurrency constructs with multicore processors</li>
<li><a href="https://youtu.be/O4nwUqQodAg">Paging, segmentation and virtual memory (video)</a></li>
<li><a href="https://youtu.be/iKlAWIKEyuw">Interrupts (video)</a></li>
<li>Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o)</li>
<li>Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)</li>
<li>Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.</li>
<li>Context switching
<ul>
<li>How context switching is initiated by the operating system and underlying hardware?</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M">threads in C++ (series - 10 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k">CS 377 Spring &lsquo;14: Operating Systems from University of Massachusetts</a></li>
<li><input disabled="" type="checkbox"> concurrency in Python (videos):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1">Short series on threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Bs7vPNbB9JM">Python Threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Obt-vMVdM8s">Understanding the Python GIL (2010)</a>
<ul>
<li><a href="https://www.dabeaz.com/GIL">reference</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZzfHjytDceU">Keynote David Beazley - Topics of Interest (Python Asyncio)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0zaPs8OtyKY">Mutex in Python</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="testing">Testing</h3>
<ul>
<li>To cover:
<ul>
<li>how unit testing works</li>
<li>what are mock objects</li>
<li>what is integration testing</li>
<li>what is dependency injection</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=SAhJf36_u5U">Agile Software Testing with James Bach (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ILkT_HV9DVU">Open Lecture by James Bach on Software Testing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://vimeo.com/83960706">Steve Freeman - Test-Driven Development (that‚Äôs not what we meant) (video)</a>
<ul>
<li><a href="https://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf">slides</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Dependency injection:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IKD2-MAkXyQ">video</a></li>
<li><input disabled="" type="checkbox"> <a href="https://jasonpolites.github.io/tao-of-testing/ch3-1.1.html">Tao Of Testing</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://jasonpolites.github.io/tao-of-testing/ch4-1.1.html">How to write tests</a></li>
</ul>
</li>
<li>
<h3 id="string-searching--manipulations">String searching &amp; manipulations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">Sedgewick - Suffix Arrays (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Substring Search (videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG">1. Introduction to Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search">2. Brute-Force Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt">3. Knuth-Morris Pratt</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore">4. Boyer-Moore</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT">5. Rabin-Karp</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text">Search pattern in text (video)</a></li>
</ul>
<p>If you need more detail on this subject, see &ldquo;String Matching&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a>.</p>
</li>
<li>
<h3 id="tries">Tries</h3>
<ul>
<li>Note there are different kinds of tries. Some have prefixes, some don&rsquo;t, and some use string instead of bits
to track the path</li>
<li>I read through code, but will not implement</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Tries (3 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries">1. R Way Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries">2. Ternary Search Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations">3. Character Based Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries">Notes on Data Structures and Programming Techniques</a></li>
<li><input disabled="" type="checkbox"> Short course videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries">Introduction To Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries">Performance Of Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie">Implementing A Trie (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.toptal.com/java/the-trie-a-neglected-data-structure">The Trie: A Neglected Data Structure</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Using%20Tries">TopCoder - Using Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TJ8SkcUSdbU">Stanford Lecture (real world use case) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NinWEPPrkDQ&amp;index=16&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)</a></li>
</ul>
</li>
<li>
<h3 id="floating-point-numbers">Floating Point Numbers</h3>
<ul>
<li><input disabled="" type="checkbox"> simple 8-bit: <a href="https://www.youtube.com/watch?v=ji3SfClm8TU">Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)</a></li>
</ul>
</li>
<li>
<h3 id="unicode">Unicode</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a></li>
<li><input disabled="" type="checkbox"> <a href="https://kunststube.net/encoding/">What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text</a></li>
</ul>
</li>
<li>
<h3 id="endianness">Endianness</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20180107141940/https://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html">Big And Little Endian</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=JrNF0KRAlyo">Big Endian Vs Little Endian (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oBSuXP-1Tc0">Big And Little Endian Inside/Out (video)</a>
<ul>
<li>Very technical talk for kernel devs. Don&rsquo;t worry if most is over your head.</li>
<li>The first half is enough.</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="networking">Networking</h3>
<ul>
<li><strong>If you have networking experience or want to be a reliability engineer or operations engineer, expect questions</strong></li>
<li>Otherwise, this is just good to know</li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/code-org/computers-and-the-internet">Khan Academy</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Vdc8TCESIg8">UDP and TCP: Comparison of Transport Protocols (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e5DEVa9eSN0">TCP/IP and the OSI Model Explained! (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=nomyRJehhnM">Packet Transmission across the Internet. Networking &amp; TCP/IP tutorial. (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=WGJrLqtX7As">HTTP (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=S2iBR2ZlZf0">SSL and HTTPS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Rp3iZUvXWlM">SSL/TLS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=E9FxNzv1Tr8">HTTP 2.0 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j">Video Series (21 videos) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=t5xYI0jzOf4">Subnetting Demystified - Part 5 CIDR Notation (video)</a></li>
<li><input disabled="" type="checkbox"> Sockets:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6G_W54zuadg&amp;t=6s">Java - Sockets - Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=G75vN2mnJeQ">Socket Programming (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="final-review">Final Review</h2>
<ul>
<li>
<p>This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.
It&rsquo;s nice if you want a refresher often.</p>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-3 minutes short subject videos (23 videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4r1DZcx1cM&amp;list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&amp;index=22">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-5 minutes short subject videos - Michael Sambol (38 videos):</p>
<ul>
<li><a href="https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1">Sedgewick Videos - Algorithms I</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2">Sedgewick Videos - Algorithms II</a></p>
</li>
</ul>
<hr>
<h2 id="update-your-resume">Update Your Resume</h2>
<ul>
<li>See Resume prep information in the books: &ldquo;Cracking The Coding Interview&rdquo; and &ldquo;Programming Interviews Exposed&rdquo;</li>
<li>I don&rsquo;t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:
<ul>
<li><a href="https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free">How to Create or Check if your Resume is ATS Compliant</a></li>
</ul>
</li>
<li><a href="https://www.careercup.com/resume">&ldquo;This Is What A GOOD Resume Should Look Like&rdquo; by Gayle McDowell (author of Cracking the Coding Interview)</a>,
<ul>
<li>Note by the author: &ldquo;This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.&rdquo;</li>
</ul>
</li>
<li><a href="https://www.techinterviewhandbook.org/resume/guide">&ldquo;Step-by-step resume guide&rdquo; by Tech Interview Handbook</a>
<ul>
<li>Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume</li>
</ul>
</li>
</ul>
<h2 id="find-a-job">Find a Job</h2>
<ul>
<li><a href="https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs">Sites for Finding Jobs</a></li>
</ul>
<h2 id="interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1">How to Pass the Engineering Interview in 2021</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N233T0epWTs">Demystifying Tech Recruiting</a></li>
<li><input disabled="" type="checkbox"> How to Get a Job at the Big 4:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YJZCUhxNCv8">How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp; Microsoft (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6790FVXWBw8&amp;feature=youtu.be">How to Get a Job at the Big 4.1 (Follow-up video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking The Coding Interview Set 1:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rEJzOhC5ZtQ">Gayle L McDowell - Cracking The Coding Interview (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=aClxtDcdpsQ">Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking the Facebook Coding Interview:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wCl9kvQGHPI">The Approach</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4UWDyJq8jZg">Problem Walkthrough</a></li>
</ul>
</li>
<li>Prep Courses:
<ul>
<li><a href="https://www.udemy.com/software-engineer-interview-unleashed">Software Engineer Interview Unleashed (paid course)</a>:
<ul>
<li>Learn how to make yourself ready for software engineer interviews from a former Google interviewer.</li>
</ul>
</li>
<li><a href="https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/">Python for Data Structures, Algorithms, and Interviews (paid course)</a>:
<ul>
<li>A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513">Intro to Data Structures and Algorithms using Python (Udacity free course)</a>:
<ul>
<li>A free Python centric data structures and algorithms course.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256">Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)</a>:
<ul>
<li>Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.</li>
</ul>
</li>
<li><a href="https://www.educative.io/courses/grokking-the-behavioral-interview">Grokking the Behavioral Interview (Educative free course)</a>:
<ul>
<li>Many times, it‚Äôs not your technical competency that holds you back from landing your dream job, it‚Äôs how you perform on the behavioral interview.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Mock Interviews:</p>
<ul>
<li><a href="https://www.gainlo.co/#!/">Gainlo.co: Mock interviewers from big companies</a> - I used this and it helped me relax for the phone screen and on-site interview</li>
<li><a href="https://www.pramp.com/">Pramp: Mock interviews from/with peers</a> - peer-to-peer model of practice interviews</li>
<li><a href="https://interviewing.io">interviewing.io: Practice mock interview with senior engineers</a> - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously</li>
</ul>
<h2 id="be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</h2>
<p>Think of about 20 interview questions you&rsquo;ll get, along with the lines of the items below. Have at least one answer for each.
Have a story, not just data, about something you accomplished.</p>
<ul>
<li>
<p>Why do you want this job?</p>
</li>
<li>
<p>What&rsquo;s a tough problem you&rsquo;ve solved?</p>
</li>
<li>
<p>Biggest challenges faced?</p>
</li>
<li>
<p>Best/worst designs seen?</p>
</li>
<li>
<p>Ideas for improving an existing product</p>
</li>
<li>
<p>How do you work best, as an individual and as part of a team?</p>
</li>
<li>
<p>Which of your skills or experiences would be assets in the role and why?</p>
</li>
<li>
<p>What did you most enjoy at [job x / project y]?</p>
</li>
<li>
<p>What was the biggest challenge you faced at [job x / project y]?</p>
</li>
<li>
<p>What was the hardest bug you faced at [job x / project y]?</p>
</li>
<li>
<p>What did you learn at [job x / project y]?</p>
</li>
<li>
<p>What would you have done better at [job x / project y]?</p>
</li>
<li>
<p>If you find it hard to come up with good answers of these types of interview questions, here are some ideas:</p>
<ul>
<li><a href="https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs">General Interview Questions and their Answers</a></li>
</ul>
</li>
</ul>
<h2 id="have-questions-for-the-interviewer">Have questions for the interviewer</h2>
<p>Some of mine (I already may know the answers, but want their opinion or team perspective):</p>
<ul>
<li>How large is your team?</li>
<li>What does your dev cycle look like? Do you do waterfall/sprints/agile?</li>
<li>Are rushes to deadlines common? Or is there flexibility?</li>
<li>How are decisions made in your team?</li>
<li>How many meetings do you have per week?</li>
<li>Do you feel your work environment helps you concentrate?</li>
<li>What are you working on?</li>
<li>What do you like about it?</li>
<li>What is the work life like?</li>
<li>How is the work/life balance?</li>
</ul>
<h2 id="once-youve-got-the-job">Once You&rsquo;ve Got The Job</h2>
<p>Congratulations!</p>
<p>Keep learning.</p>
<p>You&rsquo;re never really done.</p>
<hr>
<p>Everything below this point is optional. It is NOT needed for an entry-level interview.
However, by studying these, you&rsquo;ll get greater exposure to more CS concepts, and will be better prepared for
any software engineering job. You&rsquo;ll be a much more well-rounded software engineer.</p>
<hr>
<h2 id="additional-books">Additional Books</h2>
<p>üìö These are here so you can dive into a topic you find interesting.</p>
<ul>
<li><a href="https://www.amazon.com/dp/013937681X">The Unix Programming Environment</a>
<ul>
<li>An oldie but a goodie</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/1593273894/">The Linux Command Line: A Complete Introduction</a>
<ul>
<li>A modern option</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/TCP/IP_Illustrated">TCP/IP Illustrated Series</a></li>
<li><a href="https://www.amazon.com/gp/product/0596007124/">Head First Design Patterns</a>
<ul>
<li>A gentle introduction to design patterns</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns: Elements of Reusable Object-Oriente‚Äãd Software</a>
<ul>
<li>AKA the &ldquo;Gang Of Four&rdquo; book, or GOF</li>
<li>The canonical design patterns book</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202">Algorithm Design Manual</a> (Skiena)
<ul>
<li>As a review and problem recognition</li>
<li>The algorithm catalog portion is well beyond the scope of difficulty you&rsquo;ll get in an interview</li>
<li>This book has 2 parts:
<ul>
<li>Class textbook on data structures and algorithms
<ul>
<li>Pros:
<ul>
<li>Is a good review as any algorithms textbook would be</li>
<li>Nice stories from his experiences solving problems in industry and academia</li>
<li>Code examples in C</li>
</ul>
</li>
<li>Cons:
<ul>
<li>Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects</li>
<li>Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have</li>
<li>Don&rsquo;t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material</li>
</ul>
</li>
</ul>
</li>
<li>Algorithm catalog:
<ul>
<li>This is the real reason you buy this book.</li>
<li>This book is better as an algorithm reference, and not something you read cover to cover.</li>
</ul>
</li>
</ul>
</li>
<li>Can rent it on Kindle</li>
<li>Answers:
<ul>
<li><a href="https://web.archive.org/web/20150404194210/https://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)">Solutions</a></li>
</ul>
</li>
<li><a href="https://www3.cs.stonybrook.edu/~skiena/algorist/book/errata">Errata</a></li>
</ul>
</li>
<li><a href="https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038">Write Great Code: Volume 1: Understanding the Machine</a>
<ul>
<li>The book was published in 2004, and is somewhat outdated, but it&rsquo;s a terrific resource for understanding a computer in brief</li>
<li>The author invented <a href="https://en.wikipedia.org/wiki/High_Level_Assembly">HLA</a>, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like</li>
<li>These chapters are worth the read to give you a nice foundation:
<ul>
<li>Chapter 2 - Numeric Representation</li>
<li>Chapter 3 - Binary Arithmetic and Bit Operations</li>
<li>Chapter 4 - Floating-Point Representation</li>
<li>Chapter 5 - Character Representation</li>
<li>Chapter 6 - Memory Organization and Access</li>
<li>Chapter 7 - Composite Data Types and Memory Objects</li>
<li>Chapter 9 - CPU Architecture</li>
<li>Chapter 10 - Instruction Set Architecture</li>
<li>Chapter 11 - Memory Architecture and Organization</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X">Introduction to Algorithms</a>
<ul>
<li><strong>Important:</strong> Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won&rsquo;t teach you how to write good code. You have to be able to code a decent solution efficiently</li>
<li>AKA CLR, sometimes CLRS, because Stein was late to the game</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/0128119055">Computer Architecture, Sixth Edition: A Quantitative Approach</a>
<ul>
<li>For a richer, more up-to-date (2017), but longer treatment</li>
</ul>
</li>
</ul>
<h2 id="system-design-scalability-data-handling">System Design, Scalability, Data Handling</h2>
<p><strong>You can expect system design questions if you have 4+ years of experience.</strong></p>
<ul>
<li>Scalability and System Design are very large topics with many topics and resources, since
there is a lot to consider when designing a software/hardware system that can scale.
Expect to spend quite a bit of time on this</li>
<li>Considerations:
<ul>
<li>Scalability
<ul>
<li>Distill large data sets to single values</li>
<li>Transform one data set to another</li>
<li>Handling obscenely large amounts of data</li>
</ul>
</li>
<li>System design
<ul>
<li>features sets</li>
<li>interfaces</li>
<li>class hierarchies</li>
<li>designing a system under certain constraints</li>
<li>simplicity and robustness</li>
<li>tradeoffs</li>
<li>performance analysis and optimization</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>START HERE</strong>: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023">How Do I Prepare To Answer Design Questions In A Technical Interview?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/">8 Things You Need to Know Before a System Design Interview</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=UrYLYV7WSHM">Database Normalization - 1NF, 2NF, 3NF and 4NF (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/checkcheckzz/system-design-interview">System Design Interview</a> - There are a lot of resources in this one. Look through the articles and examples. I put some of them below</li>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20120716060051/https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">How to ace a systems design interview</a></li>
<li><input disabled="" type="checkbox"> <a href="https://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/">Numbers Everyone Should Know</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html">How long does it take to make a context switch?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=srOgpXECblk">Transactions Across Datacenters (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://ksat.me/a-plain-english-introduction-to-cap-theorem">A plain English introduction to CAP Theorem</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></li>
<li><input disabled="" type="checkbox"> Consensus Algorithms:
<ul>
<li><input disabled="" type="checkbox"> Paxos - <a href="https://www.youtube.com/watch?v=s8JqcZtvnsM">Paxos Agreement - Computerphile (video)</a></li>
<li><input disabled="" type="checkbox"> Raft - <a href="https://www.youtube.com/watch?v=P9Ydif5_qvE">An Introduction to the Raft Distributed Consensus Algorithm (video)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://raft.github.io/">Easy-to-read paper</a></li>
<li><input disabled="" type="checkbox"> <a href="https://thesecretlivesofdata.com/raft/">Infographic</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.tom-e-white.com/2007/11/consistent-hashing.html">Consistent Hashing</a></li>
<li><input disabled="" type="checkbox"> <a href="https://horicky.blogspot.com/2009/11/nosql-patterns.html">NoSQL Patterns</a></li>
<li><input disabled="" type="checkbox"> Scalability:
<ul>
<li>You don&rsquo;t need all of these. Just pick a few that interest you.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=-W9F__D3oY4">Great overview (video)</a></li>
<li><input disabled="" type="checkbox"> Short series:
<ul>
<li><a href="https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Clones</a></li>
<li><a href="https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">Database</a></li>
<li><a href="https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">Cache</a></li>
<li><a href="https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism">Asynchronism</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.aosabook.org/en/distsys.html">Scalable Web Architecture and Distributed Systems</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf">Fallacies of Distributed Computing Explained</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=modXC5IWTJI">Jeff Dean - Building Software Systems At Google and Lessons Learned (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://lethain.com/introduction-to-architecting-systems-for-scale/">Introduction to Architecting Systems for Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9nWyWwY2Onc">Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=H4vMcD7zKM0">How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms">The Importance of Algorithms</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html">Sharding</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p0jGmgIrf_M&amp;list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&amp;index=4">Engineering for the Long Game - Astrid Atkinson Keynote(video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html">7 Years Of YouTube Scalability Lessons In 30 Minutes</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=G-lGCC4KKok">video</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html">How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/">How to Remove Duplicates in Large Datasets</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3vV4YiqKm1o">A look inside Etsy&rsquo;s scale and engineering culture with Jon Cowie (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://thenewstack.io/led-amazon-microservices-architecture/">What Led Amazon to its Own Microservices Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="https://eng.uber.com/trip-data-squeeze/">To Compress Or Not To Compress, That Was Uber&rsquo;s Question</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html">When Should Approximate Query Processing Be Used?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html">Google&rsquo;s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html">The Image Optimization Technology That Serves Millions Of Requests Per Day</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html">A Patreon Architecture Short</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html">Tinder: How Does One Of The Largest Recommendation Engines Decide Who You&rsquo;ll See Next?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html">Design Of A Modern Cache</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html">Live Video Streaming At Facebook Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html">A 360 Degree View Of The Entire Netflix Stack</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it">Latency Is Everywhere And It Costs You Sales - How To Crush It</a></li>
<li><input disabled="" type="checkbox"> <a href="https://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">ESPN&rsquo;s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second</a></li>
<li><input disabled="" type="checkbox"> See &ldquo;Messaging, Serialization, and Queueing Systems&rdquo; way below for info on some of the technologies that can glue services together</li>
<li><input disabled="" type="checkbox"> Twitter:
<ul>
<li><a href="https://www.youtube.com/watch?v=5cKTP36HVgI">O&rsquo;Reilly MySQL CE 2011: Jeremy Cole, &ldquo;Big and Small Data at @Twitter&rdquo; (video)</a></li>
<li><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">Timelines at Scale</a></li>
</ul>
</li>
<li>For even more, see &ldquo;Mining Massive Datasets&rdquo; video series in the <a href="#video-series">Video Series</a> section</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:
<ul>
<li>review: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><a href="https://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf">cheat sheet</a></li>
<li>flow:
<ol>
<li>Understand the problem and scope:
<ul>
<li>Define the use cases, with interviewer&rsquo;s help</li>
<li>Suggest additional features</li>
<li>Remove items that interviewer deems out of scope</li>
<li>Assume high availability is required, add as a use case</li>
</ul>
</li>
<li>Think about constraints:
<ul>
<li>Ask how many requests per month</li>
<li>Ask how many requests per second (they may volunteer it or make you do the math)</li>
<li>Estimate reads vs. writes percentage</li>
<li>Keep 80/20 rule in mind when estimating</li>
<li>How much data written per second</li>
<li>Total storage required over 5 years</li>
<li>How much data read per second</li>
</ul>
</li>
<li>Abstract design:
<ul>
<li>Layers (service, data, caching)</li>
<li>Infrastructure: load balancing, messaging</li>
<li>Rough overview of any key algorithm that drives the service</li>
<li>Consider bottlenecks and determine solutions</li>
</ul>
</li>
</ol>
</li>
<li>Exercises:
<ul>
<li><a href="https://blog.twitter.com/2010/announcing-snowflake">Design a random unique ID generation system</a></li>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Design a key-value database</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Design a picture sharing system</a></li>
<li><a href="https://ijcai13.org/files/tutorial_slides/td3.pdf">Design a recommendation system</a></li>
<li><a href="https://www.hiredintech.com/system-design/the-system-design-process/">Design a URL-shortener system: copied from above</a></li>
<li><a href="https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/">Design a cache system</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="additional-learning">Additional Learning</h2>
<p>I added them to help you become a well-rounded software engineer, and to be aware of certain
technologies and algorithms, so you&rsquo;ll have a bigger toolbox.</p>
<ul>
<li>
<h3 id="compilers">Compilers</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=IhC7sdYe-Jg">How a Compiler Works in ~1 minute (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=CSZLNYF4Klo">Harvard CS50 - Compilers (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=twodd1KFfGk">C++ (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=FnGCDLhaxKU">Understanding Compiler Optimization (C++) (video)</a></li>
</ul>
</li>
<li>
<h3 id="emacs-and-vim">Emacs and vi(m)</h3>
<ul>
<li>Familiarize yourself with a unix-based code editor</li>
<li>vi(m):
<ul>
<li><a href="https://www.youtube.com/watch?v=5givLEMcINQ&amp;index=1&amp;list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr">Editing With vim 01 - Installation, Setup, and The Modes (video)</a></li>
<li><a href="https://vim-adventures.com/">VIM Adventures</a></li>
<li>set of 4 videos:
<ul>
<li><a href="https://www.youtube.com/watch?v=SI8TeVMX8pk">The vi/vim editor - Lesson 1</a></li>
<li><a href="https://www.youtube.com/watch?v=F3OO7ZIOaJE">The vi/vim editor - Lesson 2</a></li>
<li><a href="https://www.youtube.com/watch?v=ZYEccA_nMaI">The vi/vim editor - Lesson 3</a></li>
<li><a href="https://www.youtube.com/watch?v=1lYD5gwgZIA">The vi/vim editor - Lesson 4</a></li>
</ul>
</li>
<li><a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs">Using Vi Instead of Emacs</a></li>
</ul>
</li>
<li>emacs:
<ul>
<li><a href="https://www.youtube.com/watch?v=hbmV1bnQ-i0">Basics Emacs Tutorial (video)</a></li>
<li>set of 3 (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=ujODL7MD04Q">Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands</a></li>
<li><a href="https://www.youtube.com/watch?v=XWpsRupJ4II">Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes</a></li>
<li><a href="https://www.youtube.com/watch?v=paSgzPso-yc">Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=JWD1Fpdd4Pc">Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)</a></li>
<li><a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs">Writing C Programs With Emacs</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=48JlgiBpw_I&amp;t=0s">The Absolute Beginner&rsquo;s Guide to Emacs (video by David Wilson)</a></li>
<li><a href="https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/">The Absolute Beginner&rsquo;s Guide to Emacs (notes by David Wilson)</a></li>
</ul>
</li>
<li>
<h3 id="unix-command-line-tools">Unix command line tools</h3>
<ul>
<li>I filled in the list below from good tools.</li>
<li>bash</li>
<li>cat</li>
<li>grep</li>
<li>sed</li>
<li>awk</li>
<li>curl or wget</li>
<li>sort</li>
<li>tr</li>
<li>uniq</li>
<li><a href="https://en.wikipedia.org/wiki/Strace">strace</a></li>
<li><a href="https://danielmiessler.com/study/tcpdump/">tcpdump</a></li>
</ul>
</li>
<li>
<h3 id="information-theory-videos">Information theory (videos)</h3>
<ul>
<li><a href="https://www.khanacademy.org/computing/computer-science/informationtheory">Khan Academy</a></li>
<li>More about Markov processes:
<ul>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation">Core Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation">Core Implementing Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through">Project = Markov Text Generation Walk Through</a></li>
</ul>
</li>
<li>See more in MIT 6.050J Information and Entropy series below</li>
</ul>
</li>
<li>
<h3 id="parity--hamming-code-videos">Parity &amp; Hamming Code (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=q-3BctoUpHE">Intro</a></li>
<li><a href="https://www.youtube.com/watch?v=DdMcAUlxh1M">Parity</a></li>
<li>Hamming Code:
<ul>
<li><a href="https://www.youtube.com/watch?v=1A_NcXxdoCc">Error detection</a></li>
<li><a href="https://www.youtube.com/watch?v=JAMLuxdHH8o">Error correction</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=wbH2VxzmoZk">Error Checking</a></li>
</ul>
</li>
<li>
<h3 id="entropy">Entropy</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://youtu.be/JnJq3Py0dyM?t=176">Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp; Bits (video)</a></li>
</ul>
</li>
<li>
<h3 id="cryptography">Cryptography</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://www.khanacademy.org/computing/computer-science/cryptography">Khan Academy Series</a></li>
<li><a href="https://www.youtube.com/watch?v=KqqOXndnvic&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=30">Cryptography: Hash Functions</a></li>
<li><a href="https://www.youtube.com/watch?v=9TNI2wHmaeI&amp;index=31&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Cryptography: Encryption</a></li>
</ul>
</li>
<li>
<h3 id="compression">Compression</h3>
<ul>
<li>Make sure to watch information theory videos first</li>
<li>Computerphile (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=Lto-ajuqW3w">Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=M5c_RFKVkko">Entropy in Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=umTbivyJoiI">Upside Down Trees (Huffman Trees)</a></li>
<li><a href="https://www.youtube.com/watch?v=DV8efuB3h2g">EXTRA BITS/TRITS - Huffman Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=goOa3DGezUA">Elegant Compression in Text (The LZ 77 Method)</a></li>
<li><a href="https://www.youtube.com/watch?v=cCDCfoHTsaU">Text Compression Meets Probabilities</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H">Compressor Head videos</a></li>
<li><a href="https://www.youtube.com/watch?v=whGwm0Lky2s">(optional) Google Developers Live: GZIP is not enough!</a></li>
</ul>
</li>
<li>
<h3 id="computer-security">Computer Security</h3>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT (23 videos)</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Introduction, Threat Models</a></li>
<li><a href="https://www.youtube.com/watch?v=6bwzNg5qQ0o&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=2">Control Hijacking Attacks</a></li>
<li><a href="https://www.youtube.com/watch?v=drQyrzRoRiA&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=3">Buffer Overflow Exploits and Defenses</a></li>
<li><a href="https://www.youtube.com/watch?v=6SIJmoE9L9g&amp;index=4&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Privilege Separation</a></li>
<li><a href="https://www.youtube.com/watch?v=8VqTSY-11F4&amp;index=5&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Capabilities</a></li>
<li><a href="https://www.youtube.com/watch?v=VEV74hwASeU&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=6">Sandboxing Native Code</a></li>
<li><a href="https://www.youtube.com/watch?v=chkFBigodIw&amp;index=7&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Web Security Model</a></li>
<li><a href="https://www.youtube.com/watch?v=EBQIGy1ROLY&amp;index=8&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Securing Web Applications</a></li>
<li><a href="https://www.youtube.com/watch?v=yRVZPvHYHzw&amp;index=9&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Symbolic Execution</a></li>
<li><a href="https://www.youtube.com/watch?v=SIEVvk3NVuk&amp;index=11&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Security</a></li>
<li><a href="https://www.youtube.com/watch?v=QOtA76ga_fY&amp;index=12&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Protocols</a></li>
<li><a href="https://www.youtube.com/watch?v=PuVMkSEcPiI&amp;index=15&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Side-Channel Attacks</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="garbage-collection">Garbage collection</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=iHVs_HkjdmI">GC in Python (video)</a></li>
<li><a href="https://www.infoq.com/presentations/garbage-collection-benefits">Deep Dive Java: Garbage Collection is Good!</a></li>
<li><a href="https://www.youtube.com/watch?v=P-8Z0-MhdQs&amp;list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&amp;index=3">Deep Dive Python: Garbage Collection in CPython (video)</a></li>
</ul>
</li>
<li>
<h3 id="parallel-programming">Parallel Programming</h3>
<ul>
<li><a href="https://www.coursera.org/learn/parprog1/home/week/1">Coursera (Scala)</a></li>
<li><a href="https://www.youtube.com/watch?v=uY85GkaYzBk">Efficient Python for High Performance Parallel Computing (video)</a></li>
</ul>
</li>
<li>
<h3 id="messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</h3>
<ul>
<li><a href="https://thrift.apache.org/">Thrift</a>
<ul>
<li><a href="https://thrift-tutorial.readthedocs.io/en/latest/intro.html">Tutorial</a></li>
</ul>
</li>
<li><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/tutorials">Tutorials</a></li>
</ul>
</li>
<li><a href="https://www.grpc.io/">gRPC</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=5tmPvSe7xXQ&amp;list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&amp;index=1">gRPC 101 for Java Developers (video)</a></li>
</ul>
</li>
<li><a href="https://redis.io/">Redis</a>
<ul>
<li><a href="https://try.redis.io/">Tutorial</a></li>
</ul>
</li>
<li><a href="https://aws.amazon.com/sqs/">Amazon SQS (queue)</a></li>
<li><a href="https://aws.amazon.com/sns/">Amazon SNS (pub-sub)</a></li>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a>
<ul>
<li><a href="https://www.rabbitmq.com/getstarted.html">Get Started</a></li>
</ul>
</li>
<li><a href="https://www.celeryproject.org/">Celery</a>
<ul>
<li><a href="https://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">First Steps With Celery</a></li>
</ul>
</li>
<li><a href="https://zeromq.org/">ZeroMQ</a>
<ul>
<li><a href="https://zeromq.org/intro:read-the-manual">Intro - Read The Manual</a></li>
</ul>
</li>
<li><a href="https://activemq.apache.org/">ActiveMQ</a></li>
<li><a href="https://kafka.apache.org/documentation.html#introduction">Kafka</a></li>
<li><a href="https://msgpack.org/index.html">MessagePack</a></li>
<li><a href="https://avro.apache.org/">Avro</a></li>
</ul>
</li>
<li>
<h3 id="a">A*</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=-L-WgKMFuhE">A* Pathfinding (E01: algorithm explanation) (video)</a></li>
</ul>
</li>
<li>
<h3 id="fast-fourier-transform">Fast Fourier Transform</h3>
<ul>
<li><a href="https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/">An Interactive Guide To The Fourier Transform</a></li>
<li><a href="https://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/">What is a Fourier transform? What is it used for?</a></li>
<li><a href="https://www.youtube.com/watch?v=Xxut2PN-V8Q">What is the Fourier Transform? (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iTMn0Kt18tg&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=4">Divide &amp; Conquer: FFT (video)</a></li>
<li><a href="https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/">Understanding The FFT</a></li>
</ul>
</li>
<li>
<h3 id="bloom-filter">Bloom Filter</h3>
<ul>
<li>Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)</li>
<li><a href="https://www.youtube.com/watch?v=-SuTGoFYjZs">Bloom Filters (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=qBTdukbzc78">Bloom Filters | Mining of Massive Datasets | Stanford University (video)</a></li>
<li><a href="https://billmill.org/bloomfilter-tutorial/">Tutorial</a></li>
<li><a href="https://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/">How To Write A Bloom Filter App</a></li>
</ul>
</li>
<li>
<h3 id="hyperloglog">HyperLogLog</h3>
<ul>
<li><a href="https://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html">How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory</a></li>
</ul>
</li>
<li>
<h3 id="locality-sensitive-hashing">Locality-Sensitive Hashing</h3>
<ul>
<li>Used to determine the similarity of documents</li>
<li>The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same</li>
<li><a href="https://ferd.ca/simhashing-hopefully-made-simple.html">Simhashing (hopefully) made simple</a></li>
</ul>
</li>
<li>
<h3 id="van-emde-boas-trees">van Emde Boas Trees</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hmReJCupbNU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=6">Divide &amp; Conquer: van Emde Boas Trees (video)</a></li>
<li><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf">MIT Lecture Notes</a></li>
</ul>
</li>
<li>
<h3 id="augmented-data-structures">Augmented Data Structures</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc">CS 61B Lecture 39: Augmenting Data Structures</a></li>
</ul>
</li>
<li>
<h3 id="balanced-search-trees">Balanced search trees</h3>
<ul>
<li>
<p>Know at least one type of balanced binary tree (and know how it&rsquo;s implemented):</p>
</li>
<li>
<p>&ldquo;Among balanced search trees, AVL and 2/3 trees are now pass√©, and red-black trees seem to be more popular.
A particularly interesting self-organizing data structure is the splay tree, which uses rotations
to move any accessed key to the root.&rdquo; - Skiena</p>
</li>
<li>
<p>Of these, I chose to implement a splay tree. From what I&rsquo;ve read, you won&rsquo;t implement a
balanced search tree in your interview. But I wanted exposure to coding one up
and let&rsquo;s face it, splay trees are the bee&rsquo;s knees. I did read a lot of red-black tree code</p>
<ul>
<li>Splay tree: insert, search, delete functions
If you end up implementing red/black tree try just these:</li>
<li>Search and insertion functions, skipping delete</li>
</ul>
</li>
<li>
<p>I want to learn more about B-Tree since it&rsquo;s used so widely with very large data sets</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">Self-balancing binary search tree</a></p>
</li>
<li>
<p><strong>AVL trees</strong></p>
<ul>
<li>In practice:
From what I can tell, these aren&rsquo;t used much in practice, but I could see where they would be:
The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly
balanced than red‚Äìblack trees, leading to slower insertion and removal but faster retrieval. This makes it
attractive for data structures that may be built once and loaded without reconstruction, such as language
dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)</li>
<li><a href="https://www.youtube.com/watch?v=FNeL18KsWPc&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=6">MIT AVL Trees / AVL Sort (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees">AVL Trees (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation">AVL Tree Implementation (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge">Split And Merge</a></li>
</ul>
</li>
<li>
<p><strong>Splay trees</strong></p>
<ul>
<li>In practice:
Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,
data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,
networking and file system code) etc</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY">CS 61B: Splay Trees (video)</a></li>
<li>MIT Lecture: Splay Trees:
<ul>
<li>Gets very mathy, but watch the last 10 minutes for sure.</li>
<li><a href="https://www.youtube.com/watch?v=QnPl_Y6EqMo">Video</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Red/black trees</strong></p>
<ul>
<li>These are a translation of a 2-3 tree (see below).</li>
<li>In practice:
Red‚Äìblack trees offer worst-case guarantees for insertion time, deletion time, and search time.
Not only does this make them valuable in time-sensitive applications such as real-time applications,
but it makes them valuable building blocks in other data structures which provide worst-case guarantees;
for example, many data structures used in computational geometry can be based on red‚Äìblack trees, and
the Completely Fair Scheduler used in current Linux kernels uses red‚Äìblack trees. In the version 8 of Java,
the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor
hashcodes, a Red-Black tree is used</li>
<li><a href="https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3871">Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hm2GHwyKF1o&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=5">Aduni - Algorithms - Lecture 5 (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-Black Tree</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees">An Introduction To Binary Search And Red Black Tree</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin">[Review] Red-Black Trees (playlist) in 30 minutes (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3 search trees</strong></p>
<ul>
<li>In practice:
2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).</li>
<li>You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.</li>
<li><a href="https://www.youtube.com/watch?v=C3SsdUqasD4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=2">23-Tree Intuition and Definition (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iYvBtGKsqSg&amp;index=3&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary View of 23-Tree</a></li>
<li><a href="https://www.youtube.com/watch?v=TOb1tuEZ2X4&amp;index=5&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">2-3 Trees (student recitation) (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3-4 Trees (aka 2-4 trees)</strong></p>
<ul>
<li>In practice:
For every 2-4 tree, there are corresponding red‚Äìblack trees with data elements in the same order. The insertion and deletion
operations on 2-4 trees are also equivalent to color-flipping and rotations in red‚Äìblack trees. This makes 2-4 trees an
important tool for understanding the logic behind red‚Äìblack trees, and this is why many introductory algorithm texts introduce
2-4 trees just before red‚Äìblack trees, even though <strong>2-4 trees are not often used in practice</strong>.</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q">CS 61B Lecture 26: Balanced Search Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=DQdMYevEyE4&amp;index=4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Bottom Up 234-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2679VQ26Fp4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=5">Top Down 234-Trees (video)</a></li>
</ul>
</li>
<li>
<p><strong>N-ary (K-ary, M-ary) trees</strong></p>
<ul>
<li>note: the N or K is the branching factor (max branches)</li>
<li>binary trees are a 2-ary tree, with branching factor = 2</li>
<li>2-3 trees are 3-ary</li>
<li><a href="https://en.wikipedia.org/wiki/K-ary_tree">K-Ary Tree</a></li>
</ul>
</li>
<li>
<p><strong>B-Trees</strong></p>
<ul>
<li>Fun fact: it&rsquo;s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).</li>
<li>In Practice:
B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to
its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary
block in a particular file. The basic problem is turning the file block i address into a disk block
(or perhaps to a cylinder-head-sector) address</li>
<li><a href="https://en.wikipedia.org/wiki/B-tree">B-Tree</a></li>
<li><a href="https://btechsmartclass.com/data_structures/b-trees.html">B-Tree Datastructure</a></li>
<li><a href="https://www.youtube.com/watch?v=I22wEC1tTGo&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=6">Introduction to B-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=s3bCdZGrgpA&amp;index=7&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Definition and Insertion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=svfnVhJOfMc&amp;index=8&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Deletion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=V3omVLzI0WE&amp;index=7&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT 6.851 - Memory Hierarchy Models (video)</a>
- covers cache-oblivious B-Trees, very interesting data structures
- the first 37 minutes are very technical, may be skipped (B is block size, cache line size)</li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz">[Review] B-Trees (playlist) in 26 minutes (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="k-d-trees">k-D Trees</h3>
<ul>
<li>Great for finding number of points in a rectangle or higher dimension object</li>
<li>A good fit for k-nearest neighbors</li>
<li><a href="https://www.youtube.com/watch?v=Y4ZgLlDfKDg">kNN K-d tree algorithm (video)</a></li>
</ul>
</li>
<li>
<h3 id="skip-lists">Skip lists</h3>
<ul>
<li>&ldquo;These are somewhat of a cult data structure&rdquo; - Skiena</li>
<li><a href="https://www.youtube.com/watch?v=2g9OSRKJuzM&amp;index=10&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Skip Lists (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Skip_list">For animations and a little more detail</a></li>
</ul>
</li>
<li>
<h3 id="network-flows">Network Flows</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=Tl90tNtKvxs">Ford-Fulkerson in 5 minutes ‚Äî Step by step example (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=v1VgJmkEJW0">Ford-Fulkerson Algorithm (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2vhN4Ice5jI">Network Flows (video)</a></li>
</ul>
</li>
<li>
<h3 id="disjoint-sets--union-find">Disjoint Sets &amp; Union Find</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI">UCB 61B - Disjoint Sets; Sorting &amp; selection (video)</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part1/home/week/1">Sedgewick Algorithms - Union-Find (6 videos)</a></li>
</ul>
</li>
<li>
<h3 id="math-for-fast-processing">Math for Fast Processing</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=eCaXlAaN2uE&amp;index=11&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Integer Arithmetic, Karatsuba Multiplication (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=ru7mWZJlRQg">The Chinese Remainder Theorem (used in cryptography) (video)</a></li>
</ul>
</li>
<li>
<h3 id="treap">Treap</h3>
<ul>
<li>Combination of a binary search tree and a heap</li>
<li><a href="https://en.wikipedia.org/wiki/Treap">Treap</a></li>
<li><a href="https://www.youtube.com/watch?v=6podLUYinH8">Data Structures: Treaps explained (video)</a></li>
<li><a href="https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf">Applications in set operations</a></li>
</ul>
</li>
<li>
<h3 id="linear-programming-videos">Linear Programming (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=M4K6HYLHREQ">Linear Programming</a></li>
<li><a href="https://www.youtube.com/watch?v=2ACJ9ewUC6U">Finding minimum cost</a></li>
<li><a href="https://www.youtube.com/watch?v=8AA_81xI3ik">Finding maximum value</a></li>
<li><a href="https://www.youtube.com/watch?v=44pAWI7v5Zk">Solve Linear Equations with Python - Simplex Algorithm</a></li>
</ul>
</li>
<li>
<h3 id="geometry-convex-hull-videos">Geometry, Convex hull (videos)</h3>
<ul>
<li><a href="https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3164">Graph Alg. IV: Intro to geometric algorithms - Lecture 9</a></li>
<li><a href="https://www.youtube.com/watch?v=J5aJEcOr6Eo&amp;index=10&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Geometric Algorithms: Graham &amp; Jarvis - Lecture 10</a></li>
<li><a href="https://www.youtube.com/watch?v=EzeYI7p9MjU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=2">Divide &amp; Conquer: Convex Hull, Median Finding</a></li>
</ul>
</li>
<li>
<h3 id="discrete-math">Discrete math</h3>
<ul>
<li><a href="https://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html">Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t">Discrete Mathematics by Shai Simonson (19 videos)</a></li>
<li><a href="https://nptel.ac.in/courses/106/106/106106183/">Discrete Mathematics By IIT Ropar NPTEL</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="additional-detail-on-some-subjects">Additional Detail on Some Subjects</h2>
<ul>
<li>
<p>I added these to reinforce some ideas already presented above, but didn&rsquo;t want to include them
above because it&rsquo;s just too much. It&rsquo;s easy to overdo it on a subject.
You want to get hired in this century, right?</p>
</li>
<li>
<p><strong>SOLID</strong></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TMuno5RZNeE">Bob Martin SOLID Principles of Object Oriented and Agile Design (video)</a></li>
<li><input disabled="" type="checkbox"> S - <a href="https://www.oodesign.com/single-responsibility-principle.html">Single Responsibility Principle</a> | <a href="https://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html">Single responsibility to each Object</a>
<ul>
<li><a href="https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> O - <a href="https://www.oodesign.com/open-close-principle.html">Open/Closed Principle</a>  | <a href="https://en.wikipedia.org/wiki/Open/closed_principle">On production level Objects are ready for extension but not for modification</a>
<ul>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> L - <a href="https://www.oodesign.com/liskov-s-substitution-principle.html">Liskov Substitution Principle</a> | <a href="https://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle">Base Class and Derived class follow ‚ÄòIS A‚Äô Principle</a>
<ul>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> I - <a href="https://www.oodesign.com/interface-segregation-principle.html">Interface segregation principle</a> | clients should not be forced to implement interfaces they don&rsquo;t use
<ul>
<li><a href="https://www.youtube.com/watch?v=3CtAfl7aXAQ">Interface Segregation Principle in 5 minutes (video)</a></li>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> D -<a href="https://www.oodesign.com/dependency-inversion-principle.html">Dependency Inversion principle</a> | Reduce the dependency In composition of objects.
<ul>
<li><a href="https://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important">Why Is The Dependency Inversion Principle And Why Is It Important</a></li>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&amp;hl=en">more flavor</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Union-Find</strong></p>
<ul>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/JssSY/overview">Overview</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations">Naive Implementation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees">Trees</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank">Union By Rank</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression">Path Compression</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional">Analysis Options</a></li>
</ul>
</li>
<li>
<p><strong>More Dynamic Programming</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4-cftqTcdI&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming I: Fibonacci, Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=KLBCUx1is2c&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming II: Text Justification, Blackjack</a></li>
<li><a href="https://www.youtube.com/watch?v=TDo3r5M1LNo&amp;ab_channel=MITOpenCourseWare">6.006: DP III: Parenthesization, Edit Distance, Knapsack</a></li>
<li><a href="https://www.youtube.com/watch?v=i9OAOk0CUQE&amp;ab_channel=MITOpenCourseWare">6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.</a></li>
<li><a href="https://www.youtube.com/watch?v=Tw1k46ywN6E&amp;index=14&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">6.046: Dynamic Programming &amp; Advanced DP</a></li>
<li><a href="https://www.youtube.com/watch?v=NzgFUwOaoIw&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=15">6.046: Dynamic Programming: All-Pairs Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=krZI60lKPek&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=12">6.046: Dynamic Programming (student recitation)</a></li>
</ul>
</li>
<li>
<p><strong>Advanced Graph Processing</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=mUBmcbbJNf4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=27">Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=kQ-UQAzcnzA&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=28">Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees</a></li>
</ul>
</li>
<li>
<p>MIT <strong>Probability</strong> (mathy, and go slowly, which is good for mathy things) (videos):</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=SmFwFdESMHI&amp;index=18&amp;list=PLB7540DEDD482705B">MIT 6.042J - Probability Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=E6FbvM-FGZ8&amp;index=19&amp;list=PLB7540DEDD482705B">MIT 6.042J - Conditional Probability</a></li>
<li><a href="https://www.youtube.com/watch?v=l1BCv3qqW4A&amp;index=20&amp;list=PLB7540DEDD482705B">MIT 6.042J - Independence</a></li>
<li><a href="https://www.youtube.com/watch?v=MOfhhFaQdjw&amp;list=PLB7540DEDD482705B&amp;index=21">MIT 6.042J - Random Variables</a></li>
<li><a href="https://www.youtube.com/watch?v=gGlMSe7uEkA&amp;index=22&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation I</a></li>
<li><a href="https://www.youtube.com/watch?v=oI9fMUqgfxY&amp;index=23&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation II</a></li>
<li><a href="https://www.youtube.com/watch?v=q4mwO2qS2z4&amp;index=24&amp;list=PLB7540DEDD482705B">MIT 6.042J - Large Deviations</a></li>
<li><a href="https://www.youtube.com/watch?v=56iFMY8QW2k&amp;list=PLB7540DEDD482705B&amp;index=25">MIT 6.042J - Random Walks</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=oDniZCmNmNw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=19">Simonson: Approximation Algorithms (video)</a></p>
</li>
<li>
<p><strong>String Matching</strong></p>
<ul>
<li>Rabin-Karp (videos):
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw">Rabin Karps Algorithm</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation">Precomputing</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis">Optimization: Implementation and Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=9">Table Doubling, Karp-Rabin</a></li>
<li><a href="https://www.youtube.com/watch?v=w6nuXg0BISo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=32">Rolling Hashes, Amortized Analysis</a></li>
</ul>
</li>
<li>Knuth-Morris-Pratt (KMP):
<ul>
<li><a href="https://www.youtube.com/watch?v=5i7oKodCRJo">TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm</a></li>
</ul>
</li>
<li>Boyer‚ÄìMoore string search algorithm
<ul>
<li><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm">Boyer-Moore String Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=QDZpzctPf10">Advanced String Searching Boyer-Moore-Horspool Algorithms (video)</a></li>
</ul>
</li>
<li><a href="https://www.coursera.org/learn/algorithms-on-strings/home/week/1">Coursera: Algorithms on Strings</a>
<ul>
<li>starts off great, but by the time it gets past KMP it gets more complicated than it needs to be</li>
<li>nice explanation of tries</li>
<li>can be skipped</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Sorting</strong></p>
<ul>
<li>Stanford lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=ENp00xylP7c&amp;index=15&amp;list=PLFE6E58F856038C69">Lecture 15 | Programming Abstractions (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=y4M9IVgrVKo&amp;index=16&amp;list=PLFE6E58F856038C69">Lecture 16 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>Shai Simonson, <a href="https://www.aduni.org/">Aduni.org</a>:
<ul>
<li><a href="https://www.youtube.com/watch?v=odNJmw5TOEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=2">Algorithms - Sorting - Lecture 2 (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hj8YKFTFKEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=3">Algorithms - Sorting II - Lecture 3 (video)</a></li>
</ul>
</li>
<li>Steven Skiena lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=jUf-UQ3a0kg&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=8">CSE373 2020 - Mergesort/Quicksort (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=0ksyQKmre84&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=9">CSE373 2020 - Linear Sorting (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="video-series">Video Series</h2>
<p>Sit back and enjoy.</p>
<ul>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">List of individual Dynamic Programming problems (each is short)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0">x86 Architecture, Assembly, Applications (11 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8">MIT 18.06 Linear Algebra, Spring 2005 (35 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL3B08AE665AB9002A">Excellent - MIT Calculus Revisited: Single Variable Calculus</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=22hwcnXIGgk&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=1">Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd">UC Berkeley 61B (Spring 2014): Data Structures (25 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C">UC Berkeley 61B (Fall 2006): Data Structures (39 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_">UC Berkeley 61C: Machine Structures (26 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO">OOSE: Software Dev Using UML and Java (21 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu">MIT 6.004: Computation Structures (49 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq">Carnegie Mellon - Computer Architecture Lectures (39 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;nohtml5=False">MIT 6.006: Intro to Algorithms (47 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=zm2VP0kHl1M&amp;list=PL6535748F59DCA484">MIT 6.033: Computer System Engineering (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi">MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;list=PLB7540DEDD482705B">MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=2P-yW7LQr08&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">MIT 6.046: Design and Analysis of Algorithms (34 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=T0yzrZL1py0&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=1">MIT 6.851: Advanced Data Structures (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c">MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf">Harvard COMPSCI 224: Advanced Algorithms (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT 6.858 Computer Systems Security, Fall 2014</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL9D558D49CA734A02">Stanford: Programming Paradigms (27 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy">Introduction to Cryptography by Christof Paar</a></p>
<ul>
<li><a href="https://www.crypto-textbook.com/">Course Website along with Slides and Problem Sets</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV">Mining Massive Datasets - Stanford University (94 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&amp;view=50&amp;sort=dd">Graph Theory by Sarada Herke (67 videos)</a></p>
</li>
</ul>
<h2 id="computer-science-courses">Computer Science Courses</h2>
<ul>
<li><a href="https://github.com/open-source-society/computer-science">Directory of Online CS Courses</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses">Directory of CS Courses (many with online lectures)</a></li>
</ul>
<h2 id="algorithms-implementation">Algorithms implementation</h2>
<ul>
<li><a href="https://algs4.cs.princeton.edu/code">Multiple Algorithms implementation by Princeton University</a></li>
</ul>
<h2 id="papers">Papers</h2>
<ul>
<li><a href="https://www.cs.cmu.edu/~crary/819-f09/">Love classic papers?</a></li>
<li><a href="https://spinroot.com/courses/summer/Papers/hoare_1978.pdf">1978: Communicating Sequential Processes</a>
<ul>
<li><a href="https://godoc.org/github.com/thomas11/csp">implemented in Go</a></li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">2003: The Google File System</a>
<ul>
<li>replaced by Colossus in 2012</li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">2004: MapReduce: Simplified Data Processing on Large Clusters</a>
<ul>
<li>mostly replaced by Cloud Dataflow?</li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">2006: Bigtable: A Distributed Storage System for Structured Data</a></li>
<li><a href="https://research.google.com/archive/chubby-osdi06.pdf">2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems</a></li>
<li><a href="https://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf">2007: Dynamo: Amazon‚Äôs Highly Available Key-value Store</a>
<ul>
<li>The Dynamo paper kicked off the NoSQL revolution</li>
</ul>
</li>
<li><a href="https://www.akkadia.org/drepper/cpumemory.pdf">2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)</a></li>
<li>2012: AddressSanitizer: A Fast Address Sanity Checker:
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf">paper</a></li>
<li><a href="https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany">video</a></li>
</ul>
</li>
<li>2013: Spanner: Google‚Äôs Globally-Distributed Database:
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">paper</a></li>
<li><a href="https://www.usenix.org/node/170855">video</a></li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf">2015: Continuous Pipelines at Google</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf">2015: High-Availability at Massive Scale: Building Google‚Äôs Data Infrastructure for Ads</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf">2015: How Developers Search for Code: A Case Study</a></li>
<li>More papers: <a href="https://github.com/0voice/computer_expert_paper">1,000 papers</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Computer Networks Notes</title>
      <link>https://samirpaulb.github.io/posts/computer-networks-notes/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/computer-networks-notes/</guid>
      <description>Computer Networks Notes</description>
      <content:encoded><![CDATA[<h1 id="chapter-1-computer-networks-and-the-internet">Chapter 1: Computer Networks and the Internet</h1>
<h2 id="11-what-is-the-internet">1.1 What is the Internet?</h2>
<h3 id="111-a-nuts-and-bolts-description">1.1.1 A nuts-and-bolts description</h3>
<p>The Internet is a computer networks that interconnects hundreds of millions of computing devices through the world. Today not only computers and workstation are being connected to the network, therefore the term <em>computer network</em> may sound a bit dated.</p>
<p>All the devices connected to the Internet are called <strong>hosts</strong> or <strong>end systems</strong>. End systems are connected together by a network of <strong>communication links</strong> and <strong>packets switches</strong>.</p>
<p>Different links can transmit data at different rates, with the <strong>transmission rate</strong> of a link measured in bits/second.</p>
<p>When one end system has data to send to another end system, the sending end system <em>segments</em> the data and adds <em>header bytes</em> to each segment. The resulting packages of information, called <strong>packets</strong>, are then sent through the network to the destination and system where they a reassembled into the original data.</p>
<p>A packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. The two most prominent types of packets switches are <strong>routers</strong> and <strong>link switches</strong>. The sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as <strong>route</strong> or <strong>path</strong>.</p>
<p>End systems access the Internet through <strong>Internet Service Providers (ISPs)</strong>, including residential ISPs (cable or phone company), corporate, university ISPs &hellip;
Each ISP in itself is a network of packet switches and communication links.
<em>Lower tier</em> (which interconnect end-systems) ISPs are interconnected through national and international <em>upper tier</em> ISP. An upper-tier ISP consists of high speed routers interconnected with high-speed fiber-optic links. Each ISP network is managed independently.</p>
<p>End systems, packet switches and other pieces of the Internet run <strong>protocols</strong> that control the sending and receiving of information within the Internet.</p>
<h3 id="112-a-services-description">1.1.2 A Services Description</h3>
<p>The Internet can be described as <em>an infrastructure that provides services to applications</em>. These applications (Web, social networks, VoIP&hellip;) are said to be <strong>distributed</strong> since they involve multiple end systems that exchange data with each other.
<strong>Internet applications run on end systems, not in the packet switches or routers</strong>, packet switches facilitate the exchange of data, but they are not concerned with the application that is the source or sink of data.</p>
<p>End systems attached to the Internet provide and <strong>Application Programming Interface (API)</strong> that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system.</p>
<h3 id="113-what-is-a-protocol">1.1.3 What Is a Protocol?</h3>
<p>All the activity in the Internet that involves two or more communicating remote entities is governed by a protocol.</p>
<p><strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as weel as the actions taken on the trasmission and/or receipt of a message or other event</strong></p>
<h2 id="12-the-network-edge">1.2 The Network Edge</h2>
<p>Computers and other devices connected to the Internet are often referred to as <em>end systems</em> as they sit at the edge of the Internet. They are also called <em>hosts</em> as they host, run, applications programs such as a Web Browser or an email client.</p>
<p>Hosts are sometimes further divided into two categories: <em>clients</em> and <em>servers</em>. The former being desktop, mobile pcs, smartphones, the latter being powerful machines that store and distribute Web pages, streams&hellip;
Nowadays most of the servers reside in large <em>data centers</em></p>
<h3 id="121-access-networks">1.2.1 Access Networks</h3>
<p>They are the networks that physically connect end systems to the first router on a path from the end system to any other distant end system.
Examples: mobile network, national or global ISP, local or regional ISP, home networks enterprise networks.</p>
<h4 id="home-access-dsl-cable-fith-dial-up-and-satellite">Home Access: DSL, Cable, FITH, Dial-Up and Satellite</h4>
<p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and <strong>cable</strong>.</p>
<p>A residence typically obtains DSL access from the telephone company (telco) that provides its wired local phone access. The customer&rsquo;s telco is therefore its ISP.
DSL modem use the existing telephone lines to exchange data with DSLAMs (digital subscriber line access multiplexer) located in the telco local central office. The DSL modem takes digital data and translates it to high-frequency tones for transmission over telephone wires, these analog signals from many houses are translated back into digital format at the DSLAM. The use of different frequencies allows the phone line to carry a high-speed downstream channel, a medium-speed upstream channel and an ordinary two-way telephone channel.
Hundreds or even thousands of households connect to a single DSLAM.</p>
<p>DSL: 24 Mbps downstream and 2.5 Mbps upstream (MAX VALUES). Because of the difference between these two values, the access is said to be <strong>asymmetric</strong>.</p>
<p><strong>Cable Internet</strong> access makes use of the cable television company&rsquo;s existing cable television infrastructure. Cable modems connect to CMTS (Cablem Modem Termination System) which does the same job the DSLAM does for phone lines. The access is typically asymmetric.
CABLE: 42.8 Mbps downstream and 30.7 Mbps upstream (MAX VALUES).
Cable Internet access is a shared broadcast medium: each packet travels downstream on every link to every home and viceversa. For this, if several users are simultaneously using the downstream channel, the actual rate will be significantly lower.</p>
<p>Another up-and-coming technology that promises very high speeds is <strong>fiber to the home (FTTH)</strong>. The concept is simple: provide an optical fiber path from the Central Office (CO)</p>
<h4 id="access-in-the-enterprise-and-the-home-ethernet-and-wifi">Access in the Enterprise and the Home: Ethernet and WiFi</h4>
<p>On corporate and university campuses, and increasingly in home settings, a <strong>Local Area Network (LAN)</strong> is used to connect an end system to the edge router.
Ethernet is by far the most prevalent access technology is corporate, university and home networks. Ethernet uses twisted-pair copper wire to connect to an Ethernet switch which is connected into the larger Internet.
The Internet is increasingly accessed wirelessly: wireless users transmit/receive packets to/from an access point connected into the enterprise&rsquo;s network which in turn is connected to the wired Internet.</p>
<h4 id="wide-area-wireless-access-3g-and-lte">Wide-Area Wireless Access: 3G and LTE</h4>
<p>Smartphones and Tablets employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station operated by the cellular network provider. Third generation (3G) wireless and fourth generation (4G) of wide-area network are being deployed. LTE (&ldquo;Long-Term Evolution&rdquo;) has its root in 3G and can potentially achieve rates in excess of 10 Mbps.</p>
<h3 id="122-physical-media">1.2.2 Physical Media</h3>
<p>The book talks about it in detail but we haven&rsquo;t talked about it in class</p>
<p>A bit, when traveling from source to destination, passes through a series of transmitter-receiver pairs, for each pair, the bit is sent by propagating electromagnetic waves or optical pulses across a <strong>physical medium</strong>. This can take many shapes and forms and doesn&rsquo;t have to be of the same type for each transmitter-receiver pair along the path.
Physical media fall into two categories:</p>
<ul>
<li><strong>guided media</strong>: the waves are guided along a solid medium (fiber-optic cable, twisted-pair copper wire, coaxial cable)</li>
<li><strong>unguided media</strong>: the waves propagate in the atmosphere and in outer space (wireless LAN, digital satellite channel)</li>
</ul>
<h2 id="13-the-network-core">1.3 The Network Core</h2>
<h3 id="131-packet-switching">1.3.1 Packet Switching</h3>
<p>In a network application, end systems exchange <strong>messages</strong> with each other. To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as <strong>packets</strong>.
Between source and destination, each packet travels through communication links and <strong>packet switches</strong> (for which there are two predominant types, <strong>routers</strong> and <strong>link-layer switches</strong>).
Packets are transmitted over each communication link at a rate equal to the <em>full</em> transmission rate of the link. So, if a source end system or a packet switch is send a packet of L bits over a link with transmission rate R bits/sec, then the time to transmit the packet is L/R seconds.</p>
<h4 id="store-and-forward-transmission">Store-and-forward Transmission</h4>
<p>Most packet switches use <strong>store-and-forward transmission</strong> at the inputs to the links. Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. The link must <strong>buffer</strong> (&ldquo;store&rdquo;) the packet&rsquo;s bits and only after the router has received all of the packet&rsquo;s bits can it begin to transmit (&ldquo;forward&rdquo;) the packet onto the outbound link.</p>
<h4 id="queuing-delays-and-packet-loss">Queuing Delays and Packet Loss</h4>
<p>Each packet switch has multiple links attached to it. For each attached link, the packet switch has an <strong>output buffer</strong> (or <strong>output queue</strong>) which stores packets that the router is about to send into that link.
If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, packets suffer output buffer <strong>queuing delays</strong> which are variable and depend on the level of congestion in the network. Since the amount of buffer space is finite, an arriving packet may find the buffer completely full. In this case, <strong>packet loss</strong> will occur, either the arriving packet or one of the already queued packets will be dropped.</p>
<h4 id="forwarding-tables-and-routing-protocols">Forwarding tables and routing protocols</h4>
<p>In the Internet, every end system has an address called an IP address. When a source end system wants to send a packet to a destination end system, the source includes the destination&rsquo;s IP address in the packet&rsquo;s header.
Each router has a <strong>forwarding table</strong> that maps destination addresses (or portions of the destination addresses) to that router&rsquo;s outbound links. When a packet arrives at the router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link.
A number of special <strong>routing protocols</strong> are used to automatically set the forwarding tables.</p>
<h3 id="132-circuit-switching">1.3.2 Circuit Switching</h3>
<p>In circuit-switched networks, the resources needed along a path(buffers, link transmission rate) to provide for communication between the end systems are <strong>reserved</strong> for the duration of the communication sessions.
When two hosts want to communicate, the network establishes a <strong>dedicated end-to-end connection</strong> between them.</p>
<h4 id="multiplexing-in-circuit-switched-networks">Multiplexing in Circuit-Switched Networks</h4>
<p>A circuit in a link is implemented with either <strong>frequency-division multiplexing (FDM)</strong> or <strong>time-division multiplexing (TDM)</strong>.
With FDM, the frequency spectrum of a link is divided up among the connections established across the link. The width of the band is called the <strong>bandwidth</strong>.
For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots.</p>
<h4 id="packet-switching-versus-circuit-switching">Packet Switching Versus Circuit Switching</h4>
<p>Packet switching is more flexible, uses resources efficiently and is simpler to implement (even if it requires congestion control).
Circuit switching offers performance guarantees but uses resources inefficiently</p>
<h3 id="133-a-network-of-networks">1.3.3 A Network of Networks</h3>
<p>To create the Internet, ISPs must be interconnected, thus creating a <em>network of networks</em>.
Much of the evolution of the structure of the Internet is driven by economics and national policy, rather than by performance consideration.</p>
<p>Today&rsquo;s Internet is complex, consisting of a dozen or so tier-1 ISPs and hundreds of thousands of lower-tier ISPs. The ISPs are diverse in their coverage, with some spanning multiple continents and oceans, and others limited to narrow geographic regions. The lower-tier ISPs connect to the higher-tier ISPs and the higher-tier ISPs interconnect with one another. Users and content providers are customers of lower-tier ISPs and lower-tier ISPs are customers of higher-tier ISPs. Recently, major content providers (Google) have also created their own networks and connect directly into lower-tier ISPs where possible.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-network_of_networks.png" alt="network_of_networks"  />
</p>
<h2 id="14-delay-loss-and-throughput-in-packet-switched-networks">1.4 Delay, Loss and Throughput in Packet-Switched Networks</h2>
<p>Computer networks necessarily constrain <strong>throughput</strong> (the amount of data per second that can be transferred) between end system, introduce delays between end systems and can actually lose packets.</p>
<h3 id="141-overview-of-delay-in-packet-switched-networks">1.4.1 Overview of Delay in Packet-Switched networks</h3>
<p>As a packet travels from one node (host or router) to the subsequent host along his path, it suffers from several types of delays at <em>each</em> node along the path.</p>
<h4 id="types-of-delay">Types of Delay</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-type_of_delays.png" alt="type_of_delays"  />
</p>
<h5 id="processing-delay">Processing Delay</h5>
<p>The <strong>processing delay</strong> consists of the time required to examine the packet&rsquo;s header and determine where to direct the packet. It may also include other factors, such as the time needed to check for bit-level errors occurred during transmission.
They typically are of the order of microseconds or less.
After processing the packet is sent to the queue preceding the link to the next router</p>
<h5 id="queuing-delay">Queuing Delay</h5>
<p>At the queue, the packet experiences a <strong>queuing delay</strong> as it waits to be transmitted onto the link. It depends on the number of earlier-arriving packets, therefore if the queue is empty, then the packet&rsquo;s queuing delay will be 0.
Typically of the order of microseconds or milliseconds.</p>
<h5 id="transmission-delays">Transmission delays</h5>
<p>If the length of the packet is <em>L</em> bits, and the <strong>transmission rate</strong> of the link is <em>R</em> bits/sec, then the <strong>transmission delay</strong> is <em>L/R</em>.
This is the amount of time required to push (transmit) all of the packet&rsquo;s bits into the link.
Typically on the order of microseconds to milliseconds.</p>
<h5 id="propagation-delay">Propagation Delay</h5>
<p>The time required to propagate a bit from the beginning of the link to the next router is the <strong>propagation delay</strong>. The bit propagates at the propagation speed of the link, which depends on the physical medium of the link.
The propagation delay is the distance between two routers divided by the propagation speed of the link.</p>
<h5 id="total-nodal-delay">Total nodal delay</h5>
<p>it is the summation of the previous delays</p>
<h3 id="142-queuing-delay-and-packet-loss">1.4.2 Queuing Delay and Packet Loss</h3>
<p>The queuing delay depends can vary from packet to packet, therefore when characterizing queuing delay, one typically uses statistical measures, such as <em>average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value</em>.</p>
<h4 id="packet-loss">Packet Loss</h4>
<p>A queue preceding a link has finite capacity. If a packet finds a full queue, then the router will <strong>drop</strong> it, the packet will be lost.
The fraction of lost packets increases as the traffic intensity increases.</p>
<h3 id="143-end-to-end-delay">1.4.3 End-to-End Delay</h3>
<p>Let&rsquo;s now consider the <strong>total delay, from source to destination</strong> (not only the nodal delay). Let&rsquo;s suppose there are <em>N-1</em> routers between the source host and the destination host, then the nodal delays accumulate and give an <strong>end-to-end delay</strong>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">d(end_end) = N * [d(proc) + d(queue) + d(trans) + d(prop)]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="144-throughput-in-computer-networks">1.4.4 Throughput in Computer Networks</h3>
<p>Another critical performance measure in computer networks is <em>end-to-end throughput</em>.
The <strong>instantaneous throughput</strong> at any instant of time is the rate (in bits/sec) at which host B is receiving a file.
If the file consists of <em>F</em> bits and the transfers takes <em>T</em> seconds to transfer the whole file, then the <strong>average throughput</strong> of the file is <em>F/T bits/sec</em>.
For a simple two-link network, the throughput is the min of all the throughputs, that is the transmission rate of the <strong>bottleneck link</strong>.
Therefore, the constraining factor for throughput in today&rsquo;s Internet is typically the <em>access network</em>.</p>
<h2 id="15-protocol-layers-and-their-service-models">1.5 Protocol Layers and Their Service Models</h2>
<h3 id="151-layered-architecture">1.5.1 Layered Architecture</h3>
<p>A layered architecture allows us to discuss a well-defined, specific part of a large and complex system. This simplification itself is of considerable value by providing <em>modularity</em>, making it much easier to change the implementation of the service provided by the layer: as long as the layer provides the same service to the layer above it, and uses the same services from the layer below it, the remainder of the system remains unchanged when a layer&rsquo;s implementation is changed.</p>
<h4 id="protocol-layering">Protocol Layering</h4>
<p>To provide structure to the design of network protocols, the network designers organize protocols in <strong>layers</strong>. <strong>Each protocol belongs to one of the layers</strong>. We are interested in the <strong>services</strong> that a layer offers to the layer above, <strong>service model</strong> of a layer.
When taken together, the protocols of the various layers are called the <strong>protocol stack</strong>. The Internet protocol stack consists of five layers:</p>
<ul>
<li>Application</li>
<li>Transport</li>
<li>Network</li>
<li>Link</li>
<li>Physical</li>
</ul>
<h5 id="application-layer">Application Layer</h5>
<p>Where network applications and their applications-layer protocols reside.
The Internet&rsquo;s application layer includes many protocols: HTTP, SMTP, FTP, DNS.
An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. This packet of information at the application layer is called <strong>message</strong>.</p>
<h5 id="transport-layer">Transport Layer</h5>
<p>It transports application-layer messages between application endpoints.
In the Internet there are two transport protocols: TCP and UDP.
TCP provides a connection-oriented service to its application: the service includes guaranteed delivery of application-layer messages to the destination and flow control unit. TCP also breaks long messages into shorter segments and provides a <strong>congestion-control mechanism</strong>, so that a source throttles its transmission rate when the network is congested.
HTTP and SMTP use TCP</p>
<p>UDP provides a connectionless service to its applications: it&rsquo;s a no-frills service that provides no guarantees, no reliability, no flow control and no congestion control.
A transport-layer packet is called <strong>segment</strong>
Skype uses UDP (speed required)</p>
<h5 id="network-layer">Network Layer</h5>
<p>It is responsible for moving network-layer packets known as <strong>datagrams</strong> from one host to another.
The Internet&rsquo;s network layer includes the IP Protocol. There is only one IP Protocol and all the Internet components that have a network layer must run it.
The Internet&rsquo;s network layer also contains routing protocols that determine the routes that datagrams take between sources and destinations.
The Internet has many routing protocols.
Often it is simply referred to as the IP protocols, forgetting that it includes routing too.</p>
<h5 id="link-layer">Link Layer</h5>
<p>To move a packet from one node to the next, the network layer relies on the services of the link layer.
The services provided by the link layer depend on the specific link-layer protocol that is employed over the link.
Examples are Ethernet, WiFi.
We will refer to the link-layer packets as <strong>frames</strong></p>
<h5 id="physical-layer">Physical Layer</h5>
<p>The job of the physical layer is to move the individual bits within the frame from one node to the next.
The protocols are link dependent and further depend of the actual transmission medium of the link.</p>
<h3 id="152-encapsulation">1.5.2 Encapsulation</h3>
<p>Routers and link-layer switches are both packet switches but routers and link-layer switches do not implement all of the layers in the protocol stack: link-layer switches implement Physical and Link while router add the Network Layer too.</p>
<p>From the Application Layer, the message passes to the transport layer, which appends additional information to it (the <strong>Header</strong>) that will be used by the receiver-side transport layer. The transport layer then adds its own header and passes the datagram to the link layer which adds it own link-layer header information.
Thus, we see that at each layer, a packet has two types of fields: <strong>header fields</strong> and a <strong>payload field</strong>, the payload typically being the packet from the layer above.</p>
<p>The process of encapsulation can be more complex: for example a large message may be divided into multiple transport-layer segments, which will be divided into multiple datagrams&hellip;.</p>
<h2 id="16-networks-under-attack">1.6 Networks Under Attack</h2>
<h3 id="malware">Malware</h3>
<p>Along with all the good files we exchange on the Internet, come malicious software, collectively known as <strong>malware</strong> that can also enter and infect our devices.
Once a device infected, the malware can do all kinds of evil things: deleting files, install spyware&hellip;
A compromised host may also be enrolled in a network of thousands of similarly compromised devices, known as <strong>botnet</strong> which can be used for spam or distributed denial-of-service.
Much of the malware is <strong>self-replicating</strong>: it seeks entry into other hosts from the infected machines. Malware can spread in the from of a virus or a worm.</p>
<ul>
<li><strong>Viruses</strong> are malware that requires some form of user interaction to infect the user&rsquo;s device.</li>
<li><strong>Worms</strong> are malware that can enter a device without any explicit user interaction.</li>
</ul>
<h3 id="dos">DoS</h3>
<p>Denial-of-Service attacks render a network, host, or other piece of infrastructure unusable by legittimate users. Most of them fall into one of the three categories:</p>
<ul>
<li><em>Vulnerability Attack</em>: a few well-crafted messages are sent to a vulnerable application or operating system running on the targeted host. The service might stop or the host might crash.</li>
<li><em>Bandwidth flooding</em>: a deluge of packets is sent to the targeted host, so many packets that the target&rsquo;s access link becomes clogged preventing legitimate packets from reaching the server</li>
<li><em>Connection flooding</em>: a large number of half-open or fully open TCP connections are established at the targeted host, which can become so bogged down that it stops accepting legitimate connections.</li>
</ul>
<p>In a <strong>distributed DoS</strong> (<strong>DDoS</strong>) attack the attacker controls multiple sources and has each source blast traffic at the target.</p>
<h3 id="sniffing">Sniffing</h3>
<p>A passive receiver can record a copy of every packet that passes through the network. It is then called a <strong>packet sniffer</strong>.
Because packet sniffers are <em>passive</em> (they do not inject packets into the channel), they are difficult to detect. Some of the best defenses against packet sniffing involve cryptography.</p>
<h3 id="spoofing">Spoofing</h3>
<p>The ability to inject packets into the Internet with a false source address is known as <strong>IP Spoofing</strong> and is but one of many ways in which one user can masquerade as another user.
To solve this problem we will need <em>end-point authentication</em>.</p>
<h3 id="the-history-of-the-internet-shaped-is-structure">The history of the Internet shaped is structure</h3>
<p>The Internet was originally designed to be based on the model of a <em>group of mutually trusting users attached to a transparent network</em>, a model in which there is no need for security. Many aspects of the original Internet architecture deeply reflect this notion of mutual trust, such as the ability for one to send a packet to any other user is the default rather than a requested/granted capability.
However today&rsquo;s Internet certainly does not involve &ldquo;mutually trusted users&rdquo;: communication among mutually trusted users is the exception rather the rule.</p>
<h2 id="history-of-computer-networking-and-the-internet">History of Computer Networking and the Internet</h2>
<h1 id="chapter-2-application-layer">Chapter 2: Application Layer</h1>
<p>Network applications are the <em>raison d&rsquo;√™tre</em> of a computer network. They include  text email, remote access to computers, file transfers, the WorldWideWeb (mid 90s), web searching, e-commerce, Twitter/Facebook, Amazon, Netflix, Youtube, WoW&hellip;</p>
<h2 id="21-principles-of-network-applications">2.1 Principles of Network Applications</h2>
<p>At the core of network application development is writing programs that run on different <strong>end systems</strong> and communicate with each over the network. The programs running on end systems might be different (server-client architecture) or identical (Peer-to-Peer architecture).
Importantly we write programs that run on end systems/hosts, not on network-core devices (routers/link-layer switches).</p>
<h3 id="211-network-application-architectures">2.1.1 Network Application Architectures</h3>
<p>From the application developer&rsquo;s perspective, the network architecture is fixed and provides a specific set of services to applications.
The <strong>application architecture</strong>, on the other hand, is chosen by him. In choosing the application architecture, a developer will likely draw one of the two predominant architectural paradigms used in modern network applications:</p>
<ul>
<li><strong>Client-server architecture</strong>: there is an always on host, called the <em>server</em> which serves requests from many other hosts, called <em>clients</em>: [Web Browser and Web Server]. Clients do not communicate directly with each other. The server has a fixed, well-known address, called an IP address that clients use to connect to him. Often, a single server host is incapable of keeping up with all the requests from clients, for this reason, a <strong>data center</strong>, housing a large number of hosts, is often used to create a powerful virtual server (via <em>proxyin</em>).</li>
<li><strong>P2P architecture</strong>: there is minimal or no reliance on dedicated servers in data centers, the application exploits direct communication between pairs of intermittently connected bots, called <em>peers</em>. They are end systems owned and controlled by users. [Bittorrent, Skype]. P2P applications provide <strong>self-scalability</strong> (the network load is distributed) They are also <strong>cost-effective</strong> since they don&rsquo;t require significant infrastructure and server bandwidth. P2P face challenges:
<ol>
<li>ISP Friendly (asymmetric nature of residential ISPs)</li>
<li>Security</li>
<li>Incentives (convincing users to participate)</li>
</ol>
</li>
</ul>
<p>Some applications have hybrid architectures, such as for many instant messaging applications: a server keeps track of the IP addresses of users, but user-to-user messages are sent directly between users.</p>
<h3 id="212-processes-communicating">2.1.2 Processes Communicating</h3>
<p>In the jargon of operating systems, it&rsquo;s not programs but <strong>processes</strong> that communicate. A process can be thought of as a program that is running within an end system.
Processes on two different end systems communicate with each other by exchanging <strong>messages</strong> across the computer network: a sending process creates and sends messages into the network, a receiving process receives these messages and possibly responds by sending messages back.</p>
<h4 id="client-and-server-processes">Client and Server Processes</h4>
<p>A network application consists of pairs of processes that send messages to each other over a network. For each pair of communicating processes we label:</p>
<ul>
<li>the process that initiates the communication as the <strong>client</strong> [web browser]</li>
<li>the process that waits to be contacted to begin the session as the <strong>server</strong> [web server]</li>
</ul>
<p>This labels stand even for P2P applications in the <em>context of a communication session</em>.</p>
<h4 id="the-interface-between-the-process-and-the-computer-network">The Interface Between the Process and the Computer Network</h4>
<p>A process sends messages into, and receives messages from, the network through a software interface called a <strong>socket</strong>.
<strong>A socket is the interface between the application layer and the transport layer within a host</strong>, it is also referred to as the <strong>Application Programming Interface</strong> (<strong>API</strong>) between the application and the network.
The application developer has control of everything on the application-layer of the socket but has little control of the transport-layer side of the socket. The only control that he has over the transport-layer is:</p>
<ol>
<li>The choice of the transport protocol</li>
<li>Perhaps the ability to fix a few transport-layer parameters such as maximum buffer and maximum segment sizes</li>
</ol>
<h4 id="addressing-processes">Addressing Processes</h4>
<p>In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address. To identify the receiving processes, two pieces of information need to be specified:</p>
<ol>
<li>The address of the host. In the Internet, the host is identified by its <strong>IP Address</strong>, a 32-bit (or 64) quantity that identifies the host uniquely.</li>
<li>An identifier that specifies the receiving process in the destination host: the destination <strong>port number</strong>. Popular applications have been assigned specific port numbers (web server -&gt; 80)</li>
</ol>
<h3 id="213-transport-services-available-to-applications">2.1.3 Transport Services Available to Applications</h3>
<p>What are the services that a transport-layer protocol can offer to applications invoking it?</p>
<h4 id="reliable-data-transfer">Reliable Data Transfer</h4>
<p>For many applications, such as email, file transfer, web document transfers and financial applications, packet&rsquo;s drops and data loss can have devastating consequences. If a protocol provides guarantees that the data sent is delivered completely and correctly, it is said to provide <strong>reliable data transfer</strong>. The sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process.</p>
<h4 id="throughput">Throughput</h4>
<p>A transport-layer protocol could provide guaranteed available throughput at some specific rate. Applications that have throughput requirements are said to be <strong>bandwidth-sensitive applications</strong>.</p>
<h4 id="timing">Timing</h4>
<p>A transport-layer protocol can also provide timing guarantees. Example: guarantees that every bit the sender pumps into the socket arrives at the receiver&rsquo;s socket no more than 100 msec later, interesting for real-time applications such as telephony, virtual environments&hellip;</p>
<h4 id="security">Security</h4>
<p>A transport-layer protocol can provide an application with one or more security services. It could encrypt all data transmitted by sending process and in the receiving host decrypt it.</p>
<h3 id="214-transport-services-provided-by-the-internet">2.1.4 Transport Services Provided by the Internet</h3>
<p>The Internet makes two transport protocols available to applications: TCP and UDP.</p>
<h4 id="tcp-services">TCP Services</h4>
<p>TCP includes a connection-oriented service and a reliable data transfer service:</p>
<ul>
<li><strong>Connection-oriented service</strong>: client and server exchange transport-layer control information <em>before</em> the application-level messages begin to flow. This so-called <em>handshaking</em> procedure alerts the client and server, allowing them to prepare for an onslaught of packets. Then a <strong>TCP connection</strong> is said to exist between the sockets of the two processes. When the application finishes sending messages, it must tear down the connection</li>
</ul>
<h5 id="securing-tcp">SECURING TCP</h5>
<p>Nether TCP nor UDP provide encryption. Therefore the Internet community has developed an enhancement for TCP called <strong>Secure Sockets Layer (SSL)</strong>, which not only does everything that traditional TCP does but also provides critical process-to-process security services including <em>encryption</em>, <em>data integrity</em> and <em>end-point authentication</em>. It is not a third protocol, but an enhancement of TCP, <strong>the enhancement being implemented in the application layer</strong> in both the client and the server side of the application (highly optimized libraries exist). SSL has its own socket API, similar to the traditional one. Sending processes passes cleartext data to the SSL socket which encrypts it.</p>
<ul>
<li><strong>Reliable data transfer service</strong> The communicating processes can rely on TCP to deliver all data sent without error and in the proper order.</li>
</ul>
<p>TCP also includes a <strong>congestion-control mechanism</strong>, a service for the general welfare of the Internet rather than for the direct benefit of the communicating processes. It throttles a sending process when the network is congested between sender and receiver.</p>
<h4 id="udp-services">UDP Services</h4>
<p>UDP is a no-frills, lightweight transport protocol, providing minimal services. It is connectionless, there&rsquo;s no handshaking. The data transfer is unreliable: there are no guarantees that the message sent will ever reach the receiving process. Furthermore messages may arrive out of order. UDP does not provide a congestion-control mechanism neither.</p>
<h4 id="services-not-provided-by-internet-transport-protocols">Services Not Provided by Internet Transport Protocols</h4>
<p>These two protocols do not provide timing or throughput guarantees, services not provided by today&rsquo;s Internet transport protocols. We therefore design applications to cope, to the greatest extent possible, with this lack of guarantees.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-app_tras.png" alt="app tras"  />
</p>
<h3 id="215-application-layer-protocols">2.1.5 Application-Layer Protocols</h3>
<p>An <strong>application-layer protocol</strong> defines how an application&rsquo;s processes, running on different end systems, pass messages to each other. It defines:</p>
<ul>
<li>The type of the messages exchanged (request/response)</li>
<li>The syntax of the various message types</li>
<li>The semantics of the fields (meaning of the information in fields)</li>
<li>The rules for determining whem and how a process sends messages and responds to messages</li>
</ul>
<h2 id="22-the-web-and-http">2.2 The Web and HTTP</h2>
<p>In the early 1990s, a major new application arrived on the scene: the World Wide Web (Berners-Lee 1994), the first application that caught the general public&rsquo;s eye.
The Web operates <em>on demand</em>: users receives what they want, when they want it.
It is enormously easy for an individual to make information available over the web, hyperlinks and search engines help us navigate through the ocean of web sites&hellip;</p>
<h3 id="221-overview-of-http">2.2.1 Overview of HTTP</h3>
<p>The <strong>HyperText Transfer Protocol (HTTP)</strong>, the Web&rsquo;s application-layer protocol is a the heart of the Web. It is implemented in two programs: a client program and a server program.
The two programs talk to each other by exchanging HTTP messages.
A <strong>Web page</strong> (or document) consists of objects. An <strong>object</strong> is simply a file (HTML file, jpeg image&hellip;) that is <em>addressable by a single URL</em>.
Most Web pages consist of a <strong>base HTML file</strong> and several referenced objects. The HTML file references the other objects in the page with the objects&rsquo; URLs.
Each URL has two components: the hostname of the server that houses the object and the object&rsquo;s path name.
<strong>Web Browsers</strong> implement the client side of HTTP.
<strong>HTTP</strong> uses TCP as its underlying transport protocol.
The server sends requested files to clients without storing any state information about the client: it is a <strong>stateless protocol</strong></p>
<h3 id="222-non-persistent-and-persistent-connections">2.2.2 Non-Persistent and Persistent Connections</h3>
<p>In many Internet applications, the client and server communicate for an extended period of time, depending on the application and on how the application is being used, the series of requests may be back-to-back, periodically at regular intervals or intermittently. When this is happening over TCP, the developer must take an important decision: should each request/response pair be sent over a <em>separate</em> TCP connection or should all of the requests and their corresponding responses be sent over the <em>same</em> TCP connection?
In the former approach, the application is said to use <strong>non-persistent connections</strong> and in the latter it is said to use <strong>persistent connections</strong>
By default HTTP uses non-persistent connections but can be configured to be use persistent connections.
To estimate the amount of time that elapses when a client requests the base HTML file until the entire file is received by the client we define the <strong>round-trip time</strong> (<strong>RTT</strong>) which is the time it takes for a small packet to travel from client to server and then back to the client.</p>
<h4 id="http-with-non-persistent-connections">HTTP with Non-Persistent Connections</h4>
<p>For the page and each object it contains, a TCP connection must be opened (handshake request, handshake answer), we therefore observe an addition RTT, and for each object we will have a request followed by the reply
This model can be expensive on the server side: a new connection needs to be established for each requested object, for each connection a TCP buffer must be allocated along some memory to store TCP variables.</p>
<h4 id="http-with-persistent-connections">HTTP with Persistent Connections</h4>
<p>The server leaves the TCP connection open after sending a response, subsequent requests and responses between the same client and server will be sent over the same connection. In particular an entire web page (text + objects) ca be sent over a single persistent TCP connection, multiple web pages residing on the same server can be sent from the server to the same client over a single persistent TCP connection.
<strong>These requests can be make back-to-back</strong> without waiting for replies to pending requests (<strong>pipelining</strong>).
When the server receives back-to-back requests, it sends the objects back-to-back.
If connection isn&rsquo;t used for a pre-decided amount of time, it will be closed.</p>
<h3 id="223-http-message-format">2.2.3 HTTP Message Format</h3>
<p>Two types of HTTP messages:</p>
<h4 id="http-request-message">HTTP Request Message</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET /somedir/page.html HTTP/1.1
</span></span><span class="line"><span class="cl">Host: www.someschool.edu
</span></span><span class="line"><span class="cl">Connection: close
</span></span><span class="line"><span class="cl">User-agent: Mozilla/5.0
</span></span><span class="line"><span class="cl">Accept-language: fr
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Ordinary ASCII text</li>
<li>First line: <strong>request line</strong></li>
<li>Other lines: <strong>header lines</strong></li>
<li>the first lines has 3 fields: method field, URL field, HTTP version field:
<ul>
<li>method field possible values: <code>GET, POST, HEAD, PUT, DELETE</code></li>
</ul>
</li>
</ul>
<p>The majority of HTTP requests use the GET method, used to request an object.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-http_request.png" alt="http requests"  />
</p>
<p>The entity body (empty with <code>GET</code>) is used by the <code>POST</code> method, for example for filling out forms. The user is still requesting a Web page but the specific contents of the page depend on what the user entered into the form fields. When <code>POST</code> is used, the entity body contains what the user entered into the form fields.
Requests can also be made with <code>GET</code> including the inputted data in the requested URL.
The <code>HEAD</code> method is similar to <code>GET</code>, when a server receives it, it responds with an HTTP message but it leaves out the requested object. It is often used for debugging.
<code>PUT</code> is often used in conjunction with web publishing tools, to allow users to upload an object to a specific path on the web servers.
Finally, <code>DELETE</code> allows a user or application to delete an object on a web server.</p>
<h4 id="http-response-message">HTTP Response Message</h4>
<p>A typical HTTP response message:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6">6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7">7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8">8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">HTTP/1.1 200 OK
</span></span><span class="line"><span class="cl">Connection: close
</span></span><span class="line"><span class="cl">Date: ...
</span></span><span class="line"><span class="cl">Server: ...
</span></span><span class="line"><span class="cl">Last-Modified: ...
</span></span><span class="line"><span class="cl">Content-Length: ...
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(data data data data data ...)
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Status line: protocol version, status code, corresponding status message</li>
<li>six header lines:
<ul>
<li>the connection will be closed after sending the message</li>
<li>date and time when the response was created (when the server retrieves the object from the file system, insert object in the message, sends the response message)</li>
<li>Type of the server / software</li>
<li>Last modified: useful for object caching</li>
<li>Content-Length: number of bytes in the object</li>
<li>Content-Type</li>
</ul>
</li>
<li>entity body: contains the requested object itself (data)</li>
</ul>
<p>Some common status codes:</p>
<ul>
<li><code>200 OK</code>: request succeeded, information returned</li>
<li><code>301 Moved Permanently</code>: the object has moved, the new location is specified in the header of the response</li>
<li><code>400 Bad Request</code>: generic error code, request not understood</li>
<li><code>404 Not Found</code>: The requested document doesn&rsquo;t exist on the server</li>
<li><code>505 HTTP Version Not Supported</code>: The requested HTTP protocol version is not supported by the server</li>
</ul>
<h3 id="224-user-server-interaction-cookies">2.2.4 User-Server Interaction: Cookies</h3>
<p>An HTTP server is <em>stateless</em> in order to simplify server design and improves performances. A website can identify users using <strong>cookies</strong>.
Cookie technology has 4 components:</p>
<ol>
<li>Cookie header in HTTP response message</li>
<li>Cookie header in HTTP request message</li>
<li>Cookie file on the user&rsquo;s end-system managed by the browser</li>
<li>Back-end database at the Website</li>
</ol>
<p>User connects to website using cookies:</p>
<ul>
<li>Server creates a unique identification number and creates an entry in its back-end database indexed by the identification number
-server responds to user&rsquo;s browser including in the header: <code>Set-cookie: identification number</code></li>
<li>The browser will append to the cookie file the hostname of the server and the identification number header</li>
<li>Each time the browser will request a page, it will consult the cookie file, extract the identification number for the site and put a cookie header line including the identification number</li>
</ul>
<p>The server can track the user&rsquo;s activity: it knows exactly what pages, in which order and at what times that identification number has visited. This is also why cookies are controversial: a website can learn a lot about a user and sell this information to a third party.</p>
<p>Therefore <strong>cookies can be used to create a user session layer on top of stateless HTTP</strong>.</p>
<h3 id="225-web-caching">2.2.5 Web Caching</h3>
<p>A <strong>Web cache</strong>, also called <strong>proxy server</strong> is a network entity that satisfies HTTP requests on behalf of an origin Web server. It has its own disk storage and keeps copies of recently requested objects in this storage.</p>
<ol>
<li>The browser establishes a TCP connection to the web cache, sending an HTTP request for the object to the Web cache.</li>
<li>The web cache checks to see if it has a copy of the object stored locally. If yes, it will return it within an HTTP response message to the browser.</li>
<li>If not, the Web cache opens a TCP connection to the origin server, which responds with the requested object.</li>
<li>The Web caches receives the object, stores a copy in its storage and sends a copy, within an HTTP response message, to the browser over the existing TCP connection.</li>
</ol>
<p>Therefore a <strong>cache is both a server and a client at the same time</strong>.
Usually caches are purchased and installed by ISPs.
They can substantially reduce the response time for a client request and substantially reduce traffic on an institution&rsquo;s access link to the Internet.</p>
<p>Through the use of <strong>Content Distribution Networks (CDNs)</strong> web caches are increasingly playing an important role in the Internet. A CDN installs many geographically distributed caches throughout the Internet, localizing much of the traffic.</p>
<h3 id="226-the-conditional-get">2.2.6 The Conditional <code>GET</code></h3>
<p>Caches introduce a new problem: what if the copy of an object residing in the cache is stale?
The <strong>conditional GET</strong> is used to verify that an object is up to date.
An HTTP request message is a conditional get if</p>
<ol>
<li>the request message uses the <code>GET</code> method</li>
<li>the request message includes an <code>If-modified-since:</code> header line.</li>
</ol>
<p>A conditional get message is sent from the cache to server which responds only if the object has been modified.</p>
<h2 id="25-dns---the-internets-directory-service">2.5 DNS - The Internet&rsquo;s Directory Service</h2>
<p>One identifier for a host is its <strong>hostname</strong> [<code>cnn.com</code>, <code>www.yahoo.com</code>]. Hostnames are mnemonic and therefore used by humans. Hosts are also identified by <strong>IP addresses</strong>.</p>
<h3 id="251-services-provided-by-dns">2.5.1 Services provided by DNS</h3>
<p>Routers and use IP addresses. The Internet&rsquo;s <strong>domain name system (DNS)</strong> translates hostnames to IP addresses. The DNS is:</p>
<ol>
<li>A distributed database implemented in a hierarchy of <strong>DNS Servers</strong></li>
<li>An application-layer protocol that allows hosts to query the distributed database.</li>
</ol>
<p>DNS servers are often UNIX machines running the <strong>B</strong>erkeley <strong>I</strong>nternet <strong>N</strong>ame <strong>D</strong>omaine (BIND) software.</p>
<p><strong>DNS runs over UDP and uses port 53</strong>
It is often employed by other application-layer protocols (HTTP, FTP&hellip;) to translate user-supplied hostnames to IP addresses.</p>
<p>How it works:</p>
<ul>
<li>The user machine runs the client side of the DNS application</li>
<li>The browser extracts <code>www. xxxxx . xxx</code> from the URL and passes the hostname to the client side of the DNS application</li>
<li>The DNS sends a query containing the hostname to a DNS server</li>
<li>The DNS client eventually receives a reply including the IP address for the hostname</li>
<li>The browser can initiate a TCP connection.</li>
</ul>
<p><strong>DNS adds an additional delay</strong></p>
<p>DNS provides other services in addition to translating hostnames to IP addresses:</p>
<ul>
<li><strong>host aliasing</strong>: a host with a complicated hostname can have more alias names. The original one is said to be a <strong>canonical hostname</strong>.</li>
<li><strong>mail server aliasing</strong>: to make email servers&rsquo; hostnames more mnemonic. This also allows for an e-mail server and an Web server to have the same hostname.</li>
<li><strong>load distribution</strong>: replicated servers can have the same hostname. In this case, a set of IP addresses is associated with one canonical hostname. When a client make a DNS query for a name mapped to a set of addresses, the server responds with the entire set, but rotates the ordering within each reply.</li>
</ul>
<h3 id="252-overview-of-how-dns-works">2.5.2 Overview of How DNS Works</h3>
<p>From the perspective of the invoking application in the user&rsquo;s host, DNS is a black box providing a simple, straightforward translation service.
Having one single global DNS server would be simple, but it&rsquo;s not realistic because it would a <strong>single point of failure</strong>, it would have an impossible <strong>traffic volume</strong>, it would be <strong>geographically too distant</strong> from some querying clients, its <strong>maintenance</strong> would be impossible.</p>
<h4 id="a-distributed-hierarchical-database">A Distributed, Hierarchical Database</h4>
<p>The DNS uses a large number of servers, organized in a hierarchical fashion and distributed around the world.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-dns-servers.png" alt="dns servers"  />
</p>
<p>The three classes of DNS servers:</p>
<ul>
<li><strong>Root DNS servers</strong>: In the Internet there are 13 root DNS servers, most hosted in North America, each of these is in reality a network of replicated servers, for both security and reliability purposes (total: 247)</li>
<li><strong>Top-level domain (TLD) servers</strong>: responsible for top-level domains such as com org net edu and govand all of the country top-level domains uk fr jp</li>
<li><strong>Authoritative DNS servers</strong>: every organization with publicly accessible hosts must provide publicly accessible DNS records that map the names of those hosts to IP addresses. An organization can choose to implement its own authoritative DNS server or to pay to have the records stored in an authoritative DNS of some service provider.</li>
</ul>
<p>Finally there are <strong>local DNS servers</strong> which is central to the DNS architecture. They are hosted by ISPs. When a hosts connects to one of these, the local DNS server provides the host with the IP addresses of one or more of its local DNS servers. Requests can ho up to the root DNS servers and back down.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-distributedDNS.png" alt="distriuted dns"  />
</p>
<p>We can have both <strong>recursive</strong> and <strong>iterative queries</strong>.
In <strong>recursive queries</strong> the user sends the request its nearest DNS which will ask to a higher-tier server, which will ask to lower order&hellip; the chain goes on until it reaches a DNS that can reply, the reply will follow the inverse path that the request had.
In <strong>iterative queries</strong> the same machine sends requests and receives replies.
Any DNS can be iterative or recursive or both.</p>
<h4 id="dns-caching">DNS Caching</h4>
<p>DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages ricocheting around the Internet.
In a query chain, when a DNS receives a DNS reply it can cache the mapping in its local memory.</p>
<h3 id="253-dns-records-and-messages">2.5.3 DNS Records and Messages</h3>
<p>The DNS servers that implement the DNS distributed database store <strong>resource records (RRs)</strong> including RRs that provide hostname-to-IP address mappings.
Each DNS reply messages carries one or more resource records.</p>
<p>A resource record is a four-tuple that contains the fields: <code>(Name, Value, Type, TTL)</code>
<code>TTL</code> is the time to live of the resource record (when a resource should be removed from a cache). The meaning of <code>Name</code> and <code>Value</code> depend on <code>Type</code>:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>a hostname</td>
<td>IP address</td>
</tr>
<tr>
<td>NS</td>
<td>a domain (foo.com)</td>
<td>hostname of an  authoritative DNS server which knows how to obtain the IP addresses for hosts in the domain. Used to route queries further along in the query chain</td>
</tr>
<tr>
<td>CNAME</td>
<td>a alias name</td>
<td>canonical hostname for the name in Name</td>
</tr>
<tr>
<td>MX</td>
<td>alias hostname</td>
<td>canonical hostname of a mail server that has an alias hostname Name</td>
</tr>
</tbody>
</table>
<h4 id="dns-messages">DNS Messages</h4>
<p>The only types of DNS messages are DNS queries and reply messages. They have the same format:</p>
<ul>
<li>first 12 bytes in the <em>header section</em>: 16-bit number identifying the query, which will be copied into the reply query so that the client can match received replies with sent queries. 1 bit query/reply flag (0 query, 1 reply). 1 bit flag authoritative flag set in reply messages when DNS server is an authoritative for a queried name. 1 bit recursion flag if the client desires that the server performs recursion when it doesn&rsquo;t have a record, 1 bit recursion-available field is set in the reply if the DNS server supports recursion</li>
<li><em>question section</em>: information about the query: name field containing the name being queried, type field</li>
<li><em>answer section</em>: resource records for the name originally queried: Type, Value, TTL. Multiple RRs can be returned if the server has multiple IP addresses</li>
<li><em>authority section</em>: records for other authoritative servers.</li>
<li><em>additional section</em>: other helpful records: canonical hostnames&hellip;</li>
</ul>
<h4 id="inserting-records-into-the-dns-database">Inserting Records into the DNS Database</h4>
<p>We created a new company. Next we register th domain name <code>newcompany.com</code> at a registrar. A <strong>registrar is a commercial entity that verifies the uniqueness of the domain name, enters it into the DNS database and collects a small fee for these services</strong>. When we register the address, <strong>we need the provide the registrar with the IP address of our primary and secondary authoritative DNS servers</strong>, that will make sure that a Type NS and a Type A records are entered into the TLD com servers for our two DNS servers.</p>
<h5 id="focus-on-security-dns-vulnerabilities">Focus on security: DNS vulnerabilities</h5>
<ul>
<li>DDoS bandwidth-flooding attack</li>
<li>MITM: the mitm answers queries with false replies tricking the user into connecting to another server.</li>
<li>The DNS infrastructure can be used to launch a DDoS attack against a targeted host</li>
</ul>
<p>To date, there hasn&rsquo;t been an attack that that has successfully impeded the DNS service, DNS has demonstrated itself to be surprisingly robust against attacks. However there have been successful reflector attacks, these can be addressed by appropriate configuration of DNS servers.</p>
<h2 id="26-peer-to-peer-applications">2.6 Peer-to-Peer Applications</h2>
<h3 id="261-file-distribution">2.6.1 File Distribution</h3>
<p>In P2P file distribution, each peer can redistribute any portion of the file it has received to any peers, thereby assisting the server in the distribution process. As of 2012 the most popular P2P file distribution protocol is BitTorrent, developed by Bram Cohen.</p>
<h4 id="scalability-of-p2p-architectures">Scalability of P2P architectures</h4>
<p>Denote the upload rate of the server&rsquo;s access link by $u_s$, the upload rate of the <em>i</em>th peer&rsquo;s access link by $u_i$ and the download rate of the <em>i</em>th access link by $d_i$, tthe size of the to be distributed in bits ()
Comparison client-server and P2P.</p>
<h4 id="client-server">Client-Server</h4>
<p>The server must transmit one copy of the file to <em>N</em> peers, thus it transmits *NF *bits. The time to distribute the file is at least <strong>NF/u_s</strong>.
Denote $d_min = min{ d_i }$ the link with the slowest download rate cannot obtain all <em>F</em> bits in less than $F/d_min$ seconds
Therefore:
$$ D_{cs} \geq \max \left{ \frac{NF}{u_s} , \frac{F}{d_min} \right} $$</p>
<h4 id="p2p">P2P</h4>
<p>When a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers.</p>
<ul>
<li>At the beginning of the distribution only the server has the file. It must send all the bits at least once. $D \geq F/u_s$</li>
<li>The peer with the lowest download rate cannot obtain all <em>F</em> bits of the file in less than $F/d_min $ seconds.</li>
<li>The total upload capacity of the system is equal to the summation of the upload rates of the server and of all the peers. The system must upload <em>F</em> bits to <em>N</em> peers, thus delivering a total of <em>NF</em> bits which can&rsquo;t be done faster that $u_total$.</li>
</ul>
<p>We obtain:
$$ D_{P2P} = \max \left{ \frac{F}{u_s} , \frac{F}{d_{min}} , \frac{NF}{u_s + \sum_{i=1}^N u_j} \right} $$</p>
<h4 id="bittorrent">BitTorrent</h4>
<p>In BitTorrent the collection of all peers participating in the distribution of a particular file is called a <em>torrent</em>. Peers in a torrent download equal-size <em>chunks</em> of the file from one another with a typical chunk size of 256 KBytes.
At the beginning a peer has no chunks, it accumulates more and more chunks over time. While it downloads chunks it also uploads chunks to other peers. Once a peer has acquired the entire file it may leave the torrent or remain in it and continue to upload chunks to other peers (becoming a <em>seeder</em>). Any peer can leave the torrent at any time and later rejoin it at anytime as well.</p>
<p>Each torrent has an infrastructure node called a <em>tracker</em>: when a peer joins a torrent, it registers itself with the tracker and periodically informs it that it is still in the torrent. The tracker keeps track of the peers participating in the torrent. A torrent can have up to thousands of peers participating at any instant of time.</p>
<p>User joins the torrent, the tracker randomly selects a subset of peers from the set of participating peers. User establishes concurrent TCP connections with all of these peers, called <em>neighboring peers</em>. The neighboring peers can change over time.
The user will ask each of his neighboring peers for the list of chunks they have (one list per neighbor).
The user starts downloading the chunks that have the fewest repeated copies among the neighbors (<strong>rares first</strong> technique). In this manner the rarest chunks get more quickly redistributed, roughly equalizing the numbers of copies of each chunk in the torrent.</p>
<p>Every 10 seconds the user measures the rate at which she receives bits and determines the four peers that are sending to her at the highest rate. It then reciprocates by sending chunks to these same four peers. The four peers are called <strong>unchocked</strong>. Every 30 seconds it also choses one additional neighbor and sends it chunks. These peers are called <strong>optmistically unchocked</strong>.</p>
<h3 id="262-distributed-hash-tables-dhts">2.6.2 Distributed Hash Tables (DHTs)</h3>
<p>How to implement a simple database in a P2P network?
In the P2P system each peer will only hold a small subset of the totality of the (key, value) pairs. Any peer can query the distributed database with a particular key, the database will locate the peers that have the corresponding pair and return the pair to querying peer. Any peer can also insert a new pair in the databse. Such a distributed database is referred to as a <strong>distributed hash table (DHT)</strong>.
In a P2P file sharing application a DHT can be used to store the chunks associated to the IP of the peer in possession of them.</p>
<h6 id="an-approach">An approach:</h6>
<p>Let&rsquo;s assign an identifier to each peer, where the identifier is an integer in the range <strong><code>[0, 2^n -1]</code></strong> for some fixed <strong><code>n</code></strong>. Such an identifier can be expressed by a <strong><code>n-bit</code></strong> representation. A hash function is used to transform non-integer values into integer values. We suppose that this function is available to all peers.
<strong>How to assign keys to peers?</strong> We assign each <code>(key,value)</code> pair to the peer <em><strong>whose identifier is the closest to key</strong></em>, which is the identifier defined as <em><strong>the closest successor of the key</strong></em>.
To avoid having each peer keeping track of all other peers (scalability issue) we use</p>
<h4 id="circular-dht">Circular DHT</h4>
<p>If we organize peers into a circle, each peer only keeps track of its immediate successor and predecessor <strong>(modulo <code>2^n</code>)</strong>. This circular arrangement of peers is a special case of an <strong>overlay network</strong>: the peers form an abstract logical network which resides above the &ldquo;underlay&rdquo; computer network, the overlay links are not physical but virtual liaisons between pairs of peers. A single overlay link typically uses many physical links and physical routers in the underlying network.</p>
<p>In the circle a peer asks &ldquo;who is responsible for key <em>k</em>?&rdquo; and it sends the message clockwise around the circle. Whenever a peer receives such message, it knows the identifier of its predecessor and predecessor, it can determine whether it is responsible (closest to) for the key in question. If not, it passes the message to its successor. When the message reaches the peer responsible for the key, it can send a message back to the querying peer indicating that it is responsible for that key.
Using this system <strong><code>N/2*</code></strong> messages are sent on average <strong>(N = number of peers)</strong>. In designing a DHT there is always a tradeoff between the number of neighbors for each peer and the number of DHT messages needed to resolve a single query. (1 message if each peer keeps track of all other peers; <strong><code>N/2</code></strong> messages if each knows only 2 neighbors).
To improve our circular DHT we could add shortcuts so that each peer not only keeps track of its immediate successor and predecessor but also of relatively small number of shortcut peers scattered around the circle.
<strong>How many shortcut neighbors?</strong> Studies show that DHT can be designed so that the number of neighbors per peer as well as the number of messages per query is <strong><code>O(log *N*)</code> (<code>N</code> the number of peers)</strong>.</p>
<h4 id="peer-churn">Peer Churn</h4>
<p>In a P2P system, a peer can come or go without warning. To keep the DHT overlay in place in presence of a such peer churn we require each peer to keep track (know to IP address) of its predecessor and successor, and to periodically verify that its two successors are alive.
If a peer abruptly leaves, its successor and predecessor need to update their information. The predecessor replaces its first successor with its second successor and ask it for the identifier and IP address of its immediate successor.</p>
<p>What if a peer joins? If it only knows one peer, it will ask him what will be his predecessor and successor. The message will reach the predecessor which will send the new arrived its predecessor and successor information. The new arrived can join the DHT making its predecessor successor its own successor and by notifying its predecessor to change its successor information.</p>
<h2 id="27-socket-programming-creating-network-applications">2.7 Socket Programming: Creating Network Applications</h2>
<p>Only code explication &mdash;-&gt; skipping</p>
<h1 id="chapter-3-transport-layer">Chapter 3: Transport Layer</h1>
<h2 id="31-introduction-and-transport-layer-services">3.1 Introduction and Transport-Layer Services</h2>
<p>A transport-layer protocol provides for <strong>logical communication</strong> (as if the hosts running the processes were directly connected) between application processes running on different hosts. Application processes use the logical communication provided by the transport layer to send messages to each other, free from the worry of the details of the physical infrastructure used.
<strong>Transport-layer protocols are implemented in the end systems but not in network routers</strong>.
On the sending side, the transport layer converts the application messages into transport-layer packets, known as transport-layer <strong>segments</strong>. This is done by breaking them into smaller chunks and adding a transport-layer header to each chunk. The transport-layer then passes the segment to the network-layer packet at the sending end-system.
On the receiving side, the network layer extracts the transport-layer segment from the datagram and passes the segment up to the transport-layer which then processes the received segment, making the data in the segment available to the received application.</p>
<h3 id="311-relationship-between-transport-and-network-layers">3.1.1 Relationship Between Transport and Network Layers</h3>
<p>A transport-layer protocol provides logical communication between <strong><em>processes</em></strong> running on different hosts. Whereas a network-layer protocol provides logical communication between <strong><em>hosts</em></strong>.</p>
<h3 id="312-overview-of-the-transport-layer-in-the-internet">3.1.2 Overview of the Transport Layer in the Internet</h3>
<p>A TCP/IP network (such as the Internet) makes two distinct transport-layer protocols available to the application layer:</p>
<ul>
<li><strong>UDP</strong> [ <strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol], which provides an unreliable, connectionless service to the invoking application</li>
<li><strong>TCP</strong> [<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol] which provides a reliable, connection-oriented service to the invoking application.</li>
</ul>
<p>We need to spend a few words on the network-layer protocol: the Internet network-layer protocol is the IP (Internet Protocol). It provides a logical communication between hosts. The IP service model is a <strong>best-effort delivery service</strong>: it makes the best effort to deliver segments between hosts, <em>but it <strong>doesnt</strong> provide guarantees</em>:</p>
<ul>
<li>it doesn&rsquo;t guarantee segment <strong>delivery</strong></li>
<li>it doesn&rsquo;t guarantee <strong>orderly</strong> delivery of segments</li>
<li>it doesn&rsquo;t guarantee the <strong>integrity</strong> of the data in the segments</li>
</ul>
<p>Thus IP is said to be an <strong>unreliable service</strong>.
Every host has <strong>at least one network-layer address</strong> a so-called IP address.</p>
<p>UDP and TCP extend IP&rsquo;s delivery service between 2 end systems to a delivery service between two processes running on the end systems.
Extend host-to-host delivery to process-to-process delivery is called <strong>transport-layer multiplexing and demultiplexing</strong>.
UDP provides process-to-process delivery and error checking services. Therefore it is an <strong>unreliable service</strong>.
TCP provides <strong>reliable data transfer</strong> using flow control, sequence numbers, acknowledgements and timers. <strong>TCP thus converts IP&rsquo;s unreliable service between end systems into a reliable data transport service between processes</strong>.
TCP also provides <strong>congestion control</strong>, a service not really provided to the invoking application as it is to the Internet as a whole: <strong>it prevents any TCP connection from swamping the links and routers between communication hosts with an excessive amount of traffic giving each connection traversing a congested link an equal share of the bandwidth.</strong></p>
<h2 id="32-multiplexing-and-demultiplexing">3.2 Multiplexing and Demultiplexing</h2>
<p>Here we&rsquo;ll cover multiplexing &amp; demultiplexing in the context of the Internet but <strong>a multiplexing/demultiplexing service is needed for all computer networks</strong>.</p>
<ul>
<li>The job of delivering the data in a transport-layer segment to the correct socket is called <strong>demultiplexing</strong>.</li>
<li>The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (which will be used in demultiplexing) to create segments and passing the segments to the networks layer is called <strong>multiplexing</strong>.</li>
</ul>
<p>Therefore sockets need to have unique identifiers and each segment needs to have special fields that indicate the socket to which the segment is delivered. These fields are the <strong>source port number field</strong> and the <strong>destination port number field</strong>. Each port number is a <strong>16-bit number</strong> ranging from 0 to 65535.
Port numbers ranging from 0 to 1023 are called <strong>well-known port numbers</strong> and are restricted, reserved for us by well-known application protocols such as HTTP (80) and FTP (21). Designing an application, we should assign it a port number.</p>
<h4 id="connectionless-multiplexing-and-demultiplexing">Connectionless Multiplexing and Demultiplexing</h4>
<p>A UDP socket is fully identified by the <strong>two-tuple</strong>:
<code>(destination IP address , destination port number)</code>
therefore if two UDP segments have different source IP address and/or source port numbers but have the same destination IP address and destination port number, than the two segments will be directed to the same destination process via the same destination socket.
The source port number serves as part of the <strong><code>return address</code></strong>.</p>
<h4 id="connection-oriented-multiplexing-and-demultiplexing">Connection-oriented Multiplexing and Demultiplexing</h4>
<p>A TCP socket is identified by the <strong>four-tuple</strong>:
<code>(source IP address, source port number, destination IP address, destination port number)</code>
When a TCP segment arrives from the network to a host, the <strong>host uses all four values to demultiplex the segment to the appropriate socket</strong>.
Two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP carrying the original connection establishment request) be directed to two different sockets.</p>
<p>Routine:</p>
<ul>
<li>The TCP server application always has a <strong>welcoming socket</strong> that waits for connection establishment requests from TCP clients on port number <code>X</code></li>
<li>The TCP client creates a socket and sends a connection <strong>establishment request</strong> (a TCP segment including destination port, source port number and <em>a special connection-establishment bit set in the TCP header</em>)</li>
<li>The server OS receives the incoming connection-request segment on port <code>X</code>, it locates the server process that is waiting to accept a connection on port number <code>X</code>, then creates <strong>a new socket</strong> which will be identified by
<code>(source port number in the segment (cleint), IP address of source host (client), the destination port number in the segment (its own), its own IP address)</code></li>
<li>With the TCP connection in place, client and server can now send data to each other</li>
</ul>
<p>The server may support many simultaneous TCP connection sockets, with each socket attached to a process and each socket identified by its own four-tuple.
When a TCP segment arrives at the host, all the fours fields are used to demultiplex the segment to the appropriate socket.</p>
<h5 id="port-scanning">Port Scanning</h5>
<p>Can be used both by attackers and system administrator to find vulnerabilities in the target or to know network applications are running in the network.
The most used port scanner is <strong>nmap</strong> free and open source.
For TCP it scans port looking for port accepting connections, for UDP looking for UDP ports that respond to transmitted UDP segments.
It then returns a list of open, closed or unreachable ports.
A host running nmap can attempt to scan any target <em>anywhere</em> in the Internet</p>
<h4 id="web-servers-and-tcp">Web Servers and TCP</h4>
<p>In a web server, all segments have destination port 80 and both the initial connection-establishment segments and the segments carrying HTTP request messages will have destination port 80, the server will distinguish clients using the source IP addresses and port numbers.
Moreover in today&rsquo;s high-performing Web, servers often use only one process and <em>create a new thread with a new connection soket for each new client connection</em>.</p>
<p>If using persistent HTTP, client and server will exchange messages via the same server socket. If using non-persistent HTTP, a new TCP connection is created and closed for every request/response and hence a new socket is created and closed for every request/response.</p>
<h2 id="33-connectionless-transport-udp">3.3 Connectionless Transport: UDP</h2>
<p>UDP does multiplexing/demultiplexing, light error checking, nothing more. If the developer chooses UDP, the application is almost directly talking with IP.
Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason UDP is said to be <strong>connectionless</strong>.
DNS is an example of an application layer protocol that typically uses UDP: there is no handshaking and when a client doesn&rsquo;t receive a reply either it tries sending the query to another name server or it informs the invoking application that it can&rsquo;t get a reply. Why should a developer choose UDP?</p>
<ul>
<li><em>Finer application-level controll over what data is sent and when</em>: as soon as the application passes data to UDP, UDP will package the data inside a segment and immediately pass it to the network layer. TCP&rsquo;s congestion control can delay the sending of the segment and will try sending the packet until this is received. In real time applications the sending rate is important, so we can trade off some data loss for some sending rate.</li>
<li><em>No connection establishement</em> UDP justs send data without any formal preliminaries without introducing any delay, probably the reason why DNS runs over UDP.</li>
<li><em>No connection state</em>: because a UDP application doesn&rsquo;t need to keep track of the users or to keep connections alive, it can typically support many more active clients than a TCP application</li>
<li><em>Small packet header overhead</em> TCP has 20 bytes of header overhead in every segment versus the 8 of UDP</li>
</ul>
<p>It is possible for an application developer to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (eg adding acknowledgement and retransmission mechanisms) but it is a nontrivial task and may keep the developer busy for a long time.</p>
<h3 id="331-udp-segment-structure">3.3.1 UDP Segment Structure</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-udp_segment.png" alt="udp segment"  />
</p>
<p>The UDP header has only four fields, each consisting of two bytes:</p>
<ul>
<li><code>source port number</code></li>
<li><code>destination port number</code></li>
<li><code>checksum</code> (used for error detection.)</li>
<li><code>length</code> (which specifies the number of bytes in the UDP segment, header + data)</li>
</ul>
<p>This <code>length</code> field is needed since the size of the data field may differ from one UDP segment to the next.</p>
<h3 id="332-udp-checksum">3.3.2 UDP Checksum</h3>
<p>Provides for error detection, to determine whether the bits in the segment have been altered as it moves from source to destination.</p>
<p>At the send side, UDP performs the 1s complement of the sum of all the 16-bit (max 64) words in the segment, with any overflow encountered during the sum being wrapped around. This result is put in the checksum field of the UDP segment header.</p>
<p>UDP implements error detection according to the <strong>end-end principle</strong>: certain functionality (error detection in this case) must be implemented on an end-end basis: &ldquo;functions placed at the lower levels may be redundant or of little value when compared to the cost of providing them at the higher level&rdquo;.</p>
<h2 id="34-principles-of-reliable-data-transfer">3.4 Principles of Reliable Data Transfer</h2>
<p>It is the responsibility of a <strong>realiable data transfer protocol</strong> to implement reliable data service: no transferred data bits are corrupted or lost and all are delivered in the order in which they were sent.
We will consider the following actions:</p>
<ul>
<li>The sending side of the data transfer protocol will be invoked from above by a call to <code>rdt_send()</code></li>
<li>On the receiving side <code>rdt_rcv()</code> will be called when a packet arrives while <code>deliver_data()</code> will be called when the <code>rdt</code> protocol wants to deliver data to the upper layer.</li>
</ul>
<p>We use the term packet rather than segment because the concepts explained here applies to computer networks in general.
We will only consider the case of <strong>unidirectional data transfer</strong> that is data transfer from the sending to the receiving side. The case of reliable <strong>bidirectional</strong> (full-duplex) <strong>data transfer</strong> is not more difficult but more tedious to explain. Nonetheless sending and receiving side will need to transmit packets in <em>both directions</em>.</p>
<h3 id="341-building-a-reliable-data-transfer-protocol">3.4.1 Building a Reliable Data Transfer Protocol</h3>
<p><strong>Finite-state machine</strong>s (FSM) are boring! And unlikely to be asked at the exam, therefore I decided not to cover them here.</p>
<h3 id="342-pipelined-reliable-data-transfer-protocols">3.4.2 Pipelined Reliable Data Transfer Protocols</h3>
<p>In today&rsquo;s high-speed networks stop-and-wait protocols are simply not tolerable: we  cannot send one packet and wait for the ACK and then send the second one, it is inefficient as we can see computing the <strong>utilization of the channel</strong>:</p>
<p>$$ U = \frac{L/R}{RTT+ L/R} $$</p>
<p>The solution is simple: rather than operate in a stop-and-wait manner, the sender is allowed to send multiple packets without waiting for acknowledgements. Since the many in-transit send-to-receiver packets can be visualized as filling a pipeline, this technique is known as <strong>pipelining</strong>.</p>
<p>Some consequences:</p>
<ul>
<li>The range of sequence numbers must be increased: <strong>each in-transit packet must have a unique sequence number</strong></li>
<li>Sender and receiver may have to buffer more than one packet.</li>
</ul>
<p>Two basic approaches toward pipelined error recovery can be identified: <strong>Go-Back-N</strong> and <strong>Selective Repeat</strong></p>
<h3 id="343-go-back-n-gbn">3.4.3 Go-Back-N (GBN)</h3>
<p>The sender is allowed to send N packets (<strong>sender window size = N</strong>), the receiver has a window of size <strong>1</strong>.
If a segment from sender to receiver is lost, the receiver discards all the segments with sequence number greater than the sequence number of the dropped packet, answering with ACK with this sequence number. (no packet re-ordering)
The sender will wait for ACK in order to move the window and send new packets. The wait is not infinite, after a certain time a timeout will occur and the sender will retransmit all the packets in the sending window.
In a Go-Back-N protocol, acknowledgements are <strong>cumulative</strong>: if sender receives ACK3 he will know that all the packets from 0 to 3 have been received, even if hasn&rsquo;t received ACK2.</p>
<h3 id="344-selective-repeat">3.4.4 Selective Repeat</h3>
<p>When the window-size and bandwidth-delay product are both large, many packets can be in the pipeline and a single packet error can thus cause GBN to retransmit a large number of packets, many unnecessarily.
<strong>Selective Repeat</strong> avoid unnecessary retransmissions by having the sender retransmit only those that packets it suspects were received in error at the receiver:
<strong>individual acknowledgements</strong> (opposed to cumulative).
<strong>sender window size = N</strong> and <strong>receiver window site = N</strong>.
The sender has a timer for each packet in its window. When a timeout occurs, only the missing packet is resent.
The receiver buffers out of order packets.</p>
<h2 id="35-conncetion-oriented-transport-tcp">3.5 Conncetion-Oriented Transport: TCP</h2>
<h3 id="351-the-tcp-connection">3.5.1 The TCP Connection</h3>
<p>TCP is said to be <strong>connection-oriented</strong> because before one application process can begin to send data to another, the two processes must first &ldquo;handshake&rdquo; with each other. During the connection establishment, both sides of the connection will initialize many TCP state variables.
TCP connection is not an end-to-end TDM or FDM circuit nor is it a virtual circuit as <strong>the connection state resides entirely in the two end systems</strong> and not in the intermediate network elements.
A TCP connection provides a <strong>full-duplex service</strong>: when a connection between process A and process B, application layer data can flow from A to B and, at the same time, from B to A.
TCP is also <strong>point-to-point</strong>: a connection is always  between a <em>single sender</em> and a <em>single receiver</em>, no multicast possible.</p>
<p>Establishment of the connection: the client first sends a special TCP segment, the server responds with a second special TCP segment and the client answer again with a third special TCP segment. The first two cannot contain a payload while the third can. Three segments: <strong>three-way handshake</strong>.
Both the sender and the receiver have buffers that are set up during the handshake.
The maximum amount if data that can be grabbed and placed in a segment is limited by the <strong>maximum segment size (MSS)</strong>.
TCP therefore splits data into smaller chunks and pairs each chunk of client data with a TCP header thereby forming <strong>TCP segments</strong> which are passed down to the network layer. When TCP receives a segment at the other end, the segment&rsquo;s data is placed in the TCP connection&rsquo;s receive buffer. <strong>Each side of the connection has its own send buffer and its own receive buffer</strong></p>
<h3 id="352-tcp-segment-structure">3.5.2 TCP Segment Structure</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-tcp-segment.png" alt="tcp segment"  />
</p>
<ul>
<li>32 bit sequence number and acknowledgement number necessary for reliable data transmission</li>
<li>16 bit <strong>receive window</strong> used for flow control, indicates the number of bytes that a receiver is willing to accept</li>
<li>4 bit <strong>header length field</strong>. The TCP header can be of a variable length due to the TCP options field (usually empty therefore usual length is 20 bytes)</li>
<li><strong>options field</strong> used to negotiate MSS or as a window scaling factor for use in high speed networks.</li>
<li><strong>flag field</strong>: 6 bits:
<ol>
<li>ACK used to indicate that the value carried in the acknowledgement field is valid, that is the segment contains an acknowledgement for a segment that has been successfully received.</li>
<li>,  3. and 4. <strong>RST, SYN, FIN</strong> for connection setup and teardown</li>
<li><strong>PSH</strong> indicates that the receiver should pass the data to upper layer immediately</li>
<li>URG indicates that there is data in the segment that the sending side upper layer has marked as urgent.</li>
</ol>
</li>
</ul>
<h4 id="sequence-numbers-and-acknowledgment-numbers">Sequence Numbers and Acknowledgment Numbers</h4>
<p>TCP views data as <em>an unstructured, but ordered, stream of bytes</em> and TCP&rsquo;s use of sequence numbers reflects this view: sequence numbers are over the stream of bytes and not over the series of transmitted segments.
The <strong>sequence number for a segment</strong> is the byte-stream number of the first byte in the segment.
EX 500,000 bytes, MSS = 1,000 bytes =&gt; 500 segments are created. First is numbered 0, second 1000, third 2000&hellip;..</p>
<p><strong>The acknowledgement number</strong> <em>that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B</em>.
TCP is said to provide <strong>cumulative acknowledgements</strong>: if sender receives ACK 536 he will know that all the bytes from 0 to 535 have been well received.
What does a host do when it receives out-of-order segments? The receiver buffers the out-of-order bytes and waits for the missing bytes to fill in the gaps.
Usually both sides of a TCP connection randomly choose an initial sequence number <strong>randomly</strong> both for security and for minimizing the possibility that a segment that is still present in the network from an earlier, already terminated connection between two hosts is mistaken for a valid segment in a later connection between these same two hosts.</p>
<h3 id="353-round-trip-time-estimation-and-timeout">3.5.3 Round-Trip Time Estimation and Timeout</h3>
<p>TCP uses a timeout/retransmit mechanism to recover from lost segments. The question rises: How long should the timeout intervals be?
Clearly the timeout should be larger than the connection&rsquo;s round-trip time? How much larger? How can the RTT be evaluated?</p>
<h4 id="estimating-the-round-trip-time">Estimating the Round-Trip Time</h4>
<p>The sample RTT, <code>SampleRTT</code>, for a segment is the amount of time between when the segment is sent (passed to network layer) and when an acknowledgement for the segment is received.
Most TCP implementations take one <code>SampleRTT</code> at a time: at any point in time, the <code>SampleRTT</code> is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a <em>new value of <code>SampleRTT</code> for approximatively every RTT</em>.
TCP <strong>never computes a <code>SampleRTT</code> for a segment that has been retransmitted</strong>, only for segments transmitted once.
In order to estimate a typical RTT, TCP keeps an average called <code>EstimatedRTT</code> of the <code>SampleRTT</code> values. Upon obtaining a new <code>SampleRTT</code> TCP updates this estimation according to the formula:</p>
<p><code>EstimatedRTT = (1 - a) * EstimatedRTT + a * SampleRTT</code></p>
<p>where usually a = 1/8 = 0.125</p>
<p>We note that this weighted average puts more weight on recent samples than on old samples. In statistics such an average is called an <strong>exponential weighted moving average (EWMA)</strong>.
It is also useful to having an estimate of the <em>variability of the RTT</em>. We can measure how much <code>SampleRTT</code> typically deviates from <code>EstimatedRTT</code>:</p>
<p><code>DevRTT = (1 - b) * DevRTT + b* | SampleRTT - EstimatedRTT |</code></p>
<p>We note that this is an EWMA of the difference of estimated and last measured RTT. The recommended value for b is b = 0.25</p>
<h4 id="setting-and-managing-the-retransmission-timeout-interval">Setting and Managing the Retransmission Timeout Interval</h4>
<p><code>TimeoutInterval = EstimatedRTT + 4 * DevRTT</code></p>
<p>An initial <code>TimeoutInterval</code> value of 1 second is recommended.
Also <strong>when a timeout occurs, the value of <code>TimeoutInterval</code> is doubled</strong> in order to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. As soon as a segment is received and <code>EstimatedRTT</code> is updated, the <code>TimeoutInterval</code> is again computed using the formula above.</p>
<h3 id="354-reliable-data-transfer">3.5.4 Reliable Data Transfer</h3>
<p>TCP creates a <strong>reliable data transfer service</strong> on top of IP&rsquo;s unreliable best-effort service. It ensures that the data stream that a process reads out of its TCP receive buffer is <em>uncorrupted, without gaps, without duplication and in sequence</em>.
We supposed until now that an individual timer was associated with each transmitted segment. However timer management can require considerable overhead. Thus the recommended TCP timer management procedures (defined by RFC standards) use only a <em><strong>single</strong></em> retransmission timer (it is helpful to think of the timer as being <em>associated with the oldest unacknowledged segment</em>).</p>
<ol>
<li>Upon receiving data from the application layer, TCP encapsulates it in a segment and passes to the segment to IP. If the timer is not running for some other segment, TCP starts it when the segment is passed to IP, the timer expiration interval being <code>TimeoutInterval</code></li>
<li>If the timeout occurs, TCP responds by <strong>retransmitting the segment that caused the timeout</strong> and by restarting the timer</li>
<li>An valid acknowledgement segment is received: TCP compares the ACK <code>y</code> value with its <code>sendBase</code> (the sequence number of the oldest unacknowledged byte). If <code>y &gt; sendBase</code> then ACK is acknowledging one or more previously unacknowledged segments (cumulative acknowledgement). The <code>sendBase</code> variable is updated and the timer is restarted if there are not-yet-acknowledged segments.</li>
</ol>
<h4 id="doubling-the-timeout-interval">Doubling the Timeout Interval</h4>
<p>Each time TCP retransmits, it sets the next timeout interval to twice the prevous value. However when the timer is restarted after receiving data from the application layer or after receiving an ACK, the <code>TimeoutInterval</code> is recomputed as described previously</p>
<h4 id="fast-retransmit">Fast Retransmit</h4>
<p>The problem with timeout-triggered retransmission is that the timeout period can be relatively long.
The sender can however often detect packet loss before the timeout event occurs by noting <em>duplicate ACKs</em>. A <strong>duplicate ACK</strong> is an ACK that reacknowledges a segment for which the sender has already received an earlier acknowledgement.
When the TCP sender receives <strong>three duplicate ACK for the same data</strong> it takes this as an indication that the segment following the segment that has been ACKed three times has been lost. In the case that three duplicate ACKs are received, the TCP sender performs a <strong>fast restransmit</strong>: it retransmits the missing segment <em>before</em> that segment&rsquo;s timer expires.</p>
<h4 id="go-back-n-or-selective-repeat">Go-Back-N or Selective Repeat?</h4>
<p>Acknowledgments are cumulative (GBN) but many TCP implementations will buffer correctly received but out-of-order segments.
Also consider fast retransmit where only the missing packet is resent (SR) instead of all the window (GBN).
We can see that TCP&rsquo;s error recovery mechanism is categorized as a <strong>hybdrid of GB and SR protocols</strong>.</p>
<h3 id="355-flow-control">3.5.5 Flow Control</h3>
<p>The host on each side of a TCP connection set aside a receive buffer for the connection. When TCP receives bytes that are correct and in sequence, it places the data in the receive buffer. The associated application process will read data from this buffer, but necessarily at the instant the data arrives (busy, not interested&hellip;). Thus the <em>the sender can easily overflow the connection&rsquo;s receive bufffer by sending too much data too quickly</em>. To avoid this event, TCP provides a <strong>flow-control service</strong>.
Flow control is a <em>speed-matching service</em>: matching the rate at which the sender is sending against the rate at which the receiving application is reading.</p>
<p><strong>Flow control and congestion control are not the same!</strong>: the former preventing overflow at the receiver side and being actuated only by the two end points, the latter preventing congestion of the network.</p>
<p>TCP provides flow control by having the <em>sender</em> maintain a variable called the <strong>receive window</strong>, used to give the sender an idea of how much free buffer space is available at the receiver.</p>
<p>Host A sends a large file to Host B over TCP.</p>
<h5 id="b-side">B side</h5>
<ul>
<li>B allocates a receive buffer to its connection, its size being <code>RcvBuffer</code></li>
<li>B also keeps the variables: <code>LastByteRead</code> (number of last byte in the data stream read by the application process) and <code>LastByteRcvd</code> (the number of the last byte arrived from the network and placed in the receive buffer)</li>
</ul>
<p>We have: <code>LastByteRcvd - LastByteRead &lt;= RcvBuffer</code> (we don&rsquo;t want overflow!)</p>
<p>Receive window aka the <em>amount of spare room in the buffer</em> <code>rwnd = RcvBuffer -  [LastByteRcvd - LastByteRead]</code>
<code>rwnd</code> is dynamic</p>
<h5 id="a-side">A side</h5>
<p>A keeps track of two variables:</p>
<pre><code>1. `LastByteSent`
2. `LastByteAcked`
</code></pre>
<p>Through the connection&rsquo;s life A must make sure that <code>LastByteSent - LastByteSent &lt;= rwnd</code></p>
<p>If B&rsquo;s buffer becomes full, he sends <code>rwnd = 0</code>.  If <em>B has nothing to send to A</em>, when the application process empties B&rsquo;s buffer, TCP does not send a new segment with the new value of <code>rwnd</code> to A (TCP sends to A only if it needs to send data or if it needs to send an ACK).
Therefore A is never informed that B&rsquo;s buffer has some free space and <strong>he is blocked and can trasmit no more data</strong>.
To solve this problem, TCP requires A to <strong>continue to send segments with one data byte when B&rsquo;s receive window is 0</strong>, these segments will be acknowledged by B. Eventually the buffer will begin to empty and the acknowledgements will contain √† non-zero <code>rwnd</code> value.</p>
<p>We remember that <strong>UDP has no flow control service</strong></p>
<h3 id="356-tcp-connection-management">3.5.6 TCP Connection Management</h3>
<h4 id="how-is-the-connection-established-three-way-handshake">How is the connection established? <strong>Three-way handshake</strong></h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-three-way.png" alt="three way"  />
</p>
<ol>
<li>The client-side TCP sends a special TCP segment to server-side TCP. This segment <strong>doesn&rsquo;t contain any application-layer data</strong> but the <strong>flag bit SYN is set to 1</strong>. The segment is referred to as a <em>SYN segment</em>. The client also <strong>randomly chooses an initial sequence number</strong> (<code>client_isn</code>) and <strong>puts this number in the sequence number field of the initial TCP SYN segment</strong>. (randomizing <code>client_isn</code> is interesting to avoid security attacks).</li>
<li>The TCP SYN segment arrives at the server-side, it is extracted from the datagram. The server allocates the TCP buffers and variables to the connection and <strong>sends a connection-granted segment to the client</strong>. This segment also contains no application-layer data. The <strong>SYN flag is set to 1</strong>, the <strong>ACK field in the header is set to <code>client_isn+1</code></strong>. <strong>The server chooses its own initial sequence number <code>server_isn</code></strong> and <strong>puts this value in the sequence number field of the TCP segment header</strong>. This segment is referred to as <em>SYNACK segment</em>.</li>
<li>Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client then <strong>sends the server yet another segment which acknowledges the SYNACK</strong> (<code>server_isn+1</code> is set the acknowledgement field of the TCP segment header)</li>
</ol>
<p>After this setup, all the segments will have the SYN bit set to 0 in their headers.</p>
<h4 id="tearing-down-a-tcp-connection">Tearing down a TCP connection</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-tcp-end.png" alt="tcp end"  />
</p>
<p>The client decides to end the connection:</p>
<ol>
<li>The client sends a special TCP segment to the server, this special segment having the <strong>FIN bit flag set to 1</strong> in the header.</li>
<li>The server receives the segment and sends an acknowledgement to the client.</li>
<li>The server then sends its own shutdown segment which also <strong>has the FIN bit set to 1</strong></li>
<li>The client acknowledges the server&rsquo;s shutdown segment.</li>
<li>The &ldquo;resources&rdquo; (buffers and variables) in the host<strong>s</strong> are deallocated.</li>
</ol>
<h4 id="what-if-the-two-ends-are-not-ready-for-communication">What if the two ends are not ready for communication?</h4>
<p>A host receives a TCP segment whose port number or source IP address do not match with any of the ongoing sockets in the host -&gt; the host sends a special reset segment to the source (RST flag bit set to 1) and drops the packet (UDP does responds with a special ICMP datagram)</p>
<h2 id="36-principles-of-congestion-control">3.6 Principles of Congestion Control</h2>
<h3 id="361-the-causes-and-the-costs-of-congestion">3.6.1 The Causes and the Costs of Congestion</h3>
<h4 id="scenario-1-two-senders-a-router-with-infinite-buffers">Scenario 1: Two Senders, A Router with Infinite Buffers</h4>
<p>A -&gt; D, B -&gt; C, A and B connect to the Internet through the same router, B and C connect to the Internet through the same router
(pas envie)</p>
<h2 id="37-tcp-congestion-control">3.7 TCP Congestion Control</h2>
<p>TCP limits the rate at which it sends traffic into its connection as a function of perceived network congestion.
The TCP congestion-control mechanism operating at the sender keeps track of an additional variable: the <strong>congestion window</strong>, noted <code>cwnd</code> which imposes a constraint on the rate at which a TCP sender can send traffic into the network. Specifically: <code>LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}</code>.
Limiting the amount of unacknowledged data at the sender we can limit the sender&rsquo;s send rate.
At the beginning of each RTT the sender sends <code>cwnd</code> bytes of data and at the end of the RTT he acknowledges. Thus <strong>the sender&rsquo;s send rate is roughly <code>cwnd/RTT</code> bytes/sec. Adjusting the value of <code>cwnd</code> the sender can adjust the rate at which it sends data into the connection</strong>.
Let now consider a <em>loss event</em> (timeout OR three duplicate ACKs). When there is excessive congestion some router buffers along the path overflows, causing a loss event at the sender <em>which is taken by the sender to be an indication of congestion on the sender-to-receiver path</em>.
If there is no congestion then all the acknowledgements will be received at the sender, which will take these arrivals as an indication that segments have been received and that he can increase the congestion window size and hence its transmission rate. If acknowledgements arrive at a slow rate then the congestion window will be increased at a relatively slow rate and, viceversa, it will be increased more quickly if ACKs arrive at a high rate.
Because TCP uses acknowledgements to trigger (or clock) its increase in congestion window size, TCP is said to be <strong>self-clocking</strong>. TCP uses the principles:</p>
<ol>
<li><em>A lost segment implies congestion therefore the sender rate should be decreased.</em></li>
<li><em>An acknowledged segment means the network&rsquo;s working, therefore the sender&rsquo;s rate can be increased</em> (if ACK of unacknowledged segment)</li>
<li><em>Bandwidth probing</em>: the transmission rates increases with ACKs and decreases with loss events: TCP is continuously checking (probing) the congestion state of the network</li>
</ol>
<h3 id="tcp-congestion-control-algorithm">TCP Congestion-Control Algorithm</h3>
<p>Three components :</p>
<h4 id="1---slow-start">1 - Slow Start</h4>
<p>When a TCP connection begins, <code>cwnd</code> is usually initialized to a small value of 1 MSS and only one segment is sent. <strong>Each acknowledged packet</strong> will cause the <code>cwnd</code> to be increased by 1 MSS and the sender will send now two segments (because the window is increased by one for each ack).
Therefore the number of segments doubles at each RTT, therefore the sending rate also doubles every RTT. Thus TCP send rate <strong>starts slow but grows exponentially during the slow start phase</strong>.
When does the growth end?</p>
<ul>
<li>Timeout: <code>cwnd</code> is set to 1 MSS and the slow start is started anew. Also the variable slow start threshold is initialized:
<code>ssthresh = cwnd / 2 - (half of value of cwnd when congestion is detected)</code></li>
<li>When <code>cwnd &gt;= ssthresh</code> slow starts is stopped -&gt; congestion avoidance state</li>
<li>Three duplicate ACKs: fast retransmit and fast recovery state</li>
</ul>
<h4 id="2---congestion-avoidance">2 - Congestion Avoidance</h4>
<p>TCP suppose congestion is present, how to adapt?
Instead of doubling <code>cwnd</code> every RTT, <code>cwnd</code> is increased <strong>by just a single MSS every RTT</strong>.
When should this linear increase stop?</p>
<ul>
<li>Timeout: <code>cwnd</code> is set to 1 MSS, and <code>ssthresh = cwnd (when loss happened) / 2</code></li>
<li>Three duplicate ACKs: <code>cwnd = (cwnd / 2) + 3 MSS</code> and <code>ssthresh = cwnd (when 3 ACKs received) / 2</code> -&gt; fast recovery state</li>
</ul>
<h4 id="3---fast-recovery">3 - Fast Recovery</h4>
<p><code>cwnd</code> is increased by 1 MSS for every duplicate ACK received for the missing state that caused TCP to enter this state. When the ACK arrives for the missing segment, TCP goes into Congestion Avoidance after reducing <code>cwnd</code>.
If a timeout occurs <code>cwnd</code> is set to 1 MSS and <code>ssthresh</code> is set to half the value of <code>cwnd</code> when the loss event occurred.
Fast recovery is recommended but not required in TCP, in fact only the newer version of TCP, <strong>TCP Reno</strong> incorporated fast recovery.</p>
<h4 id="macroscopic-description-of-tcp-throughput">Macroscopic Description of TCP Throughput</h4>
<p>What is the average throughput (average rate) of a long-lived TCP connection?
Ignoring the slow start phase (usually very short as the rate grows exponentially). When the window size is <em>w</em> the transmission rate is roughly <em>w</em>/RTT. <em>w</em> is increased by 1 MSS each RTT until a loss event.
Denote by <em>W</em> the value of <em>w</em> when a loss event occurs. Then we have</p>
<p>average throughput of a connection = (0.75 * W)/RTT</p>
<h4 id="tcp-over-high-bandwidth-paths">TCP Over High-Bandwidth Paths</h4>
<p>Today&rsquo;s high speed links allow to have huge windows. What happens if one of the segments in the window gets lost? What fraction of the transmitted segments could be lost that would allow the TCP congestion control to achieve the desired rate?</p>
<p>average throughput of a connection = (1.22 * MSS)/(RTT * sqrt(L))</p>
<p>Where L is the loss rate</p>
<h1 id="chapter-4-the-network-layer">Chapter 4: The Network Layer</h1>
<p>In the chapter, there is an important distinction between the <strong>routing</strong> and <strong>forwarding</strong> functions of the network layer. Forwarding involves the transfer of a packet from an incoming link to an outgoing link <em>within a single router</em> while routing involves <em>all of a network&rsquo;s routers</em> whose collective interactions via routing protocols determine the paths that packets take on their trips from source to destination.</p>
<h2 id="41-introduction">4.1 Introduction</h2>
<p>The primary role of routers is to forward datagrams from input links to output links. Routers do not run nor the application-layer or the transport-layer, they go only up until the network layer.</p>
<h3 id="411-forwarding-and-routing">4.1.1 Forwarding and Routing</h3>
<p>The role of the network layer is deceptively simple: <strong>to move packets from a sending hosts to a receiving host</strong>. To do so it performs two important functions:</p>
<ul>
<li><em><strong>Forwarding</strong></em>: When a packet arrives to a router&rsquo;s input link, the router must move the packet to the appropriate output link. It is an action <strong>local</strong> to the router</li>
<li><em><strong>Routing</strong></em>: The network layer must determine the route or path taken by packets as they flow from a sender to a receiver. The algorithms that calculate these paths are referred to as <strong>routing algorithsm</strong>. It is a <strong>network-wide</strong> action</li>
</ul>
<p>Every router has a <strong>forwarding table</strong>. When a router receives a packet, it extracts a value from a specific field in the header and searches for that value in in the forwarding table.
The procedure used to set up and update the table depends on the protocol used. However a router receives and sends <em>routing protocol messages</em> to configure its forwarding table.</p>
<p>We also need to mark the distinction between routers and <em>packet switches</em>.</p>
<ul>
<li>Packet-switches: performs forwarding according to the value in a field in the header of the packet. Some packet switches called <strong>link-layer switches</strong> base their forwarding decisions on values in the fields of the <em>link-layer frame</em> (link-layer devices)</li>
<li>Routers: base forwarding decisions on the value in the network-layer field. (network-layer devices) but also must implement link layer (no 3 without 2)</li>
</ul>
<h4 id="connection-setup">Connection Setup</h4>
<p>in some computer networks there is a third really important networks-layer function: <strong>connection setup</strong>: a <strong>path-wide</strong> process that sets up connection state in routers.</p>
<h3 id="412-network-service-models">4.1.2 Network Service Models</h3>
<p>The <strong>network service model</strong> defines the characteristics of end-to-end transport of packets between sending and receiving end systems. Some possible service for a network layer:</p>
<ol>
<li>Sending side:
<ul>
<li><em>Guaranteed delivery</em></li>
<li><em>Guaranteed delivery with bounded delay</em></li>
</ul>
</li>
<li>Flow and receiving side:
<ul>
<li><em>In-order packet delivery</em></li>
<li><em>Guaranteed minimal bandwidth</em></li>
<li><em>Guaranteed maximum jitter</em> (amount of time between transmission of two successive packets at the sender side is equal to the amount of time between their receipt at the destination, or that this spacing changes by no more than some specified value)</li>
<li><em>Security services</em>: encryption for confidentiality, data integrity and source authentication</li>
</ul>
</li>
</ol>
<p><strong>The Internet&rsquo;s network layer doesn&rsquo;t provide any of these</strong>: it provides a <strong>best-effort service</strong> there are no timing or bandwidth guarantees, no loss or order guarantees and congestion control indications.</p>
<h2 id="42-virtual--circuit-and-datagrams-networks">4.2 Virtual  Circuit and Datagrams Networks</h2>
<p>As in transport layer, the network layer can use connection or connection-less protocols. There however some differences with the transport layer:</p>
<ul>
<li>In the network layer these services are <strong>host-to-host</strong> services (not the case for the TL, just look at TCP)</li>
<li>The network layer provides either a host-to-host connectionless service or a host-to-host connection service <strong>but no both</strong>. Connection service -&gt; <strong>Virtual-Circuit (VC) networks</strong>, Connectionless service -&gt; <strong>datagram networks</strong></li>
</ul>
<h3 id="421-virtual-circuit-networks">4.2.1 Virtual-Circuit Networks</h3>
<p>The Internet is a datagram network but many alternative network architectures (ATM) are virtual-circuit networks. The connections in VC are called *<em>virtual circuits (VCs)3</em>.
A VC consists of</p>
<ol>
<li>A source-to-destination <em>path</em></li>
<li>VC numbers, one for each link along the path</li>
<li>Entries in the forwarding table in each router along the path</li>
</ol>
<p>A packet belonging to a virtual circuit will carry a VC number in its header. Because a VC may have different VC numbers on each link, each router must replace the VC number of traversing packets with a new VC number, which is obtained from the forwarding table. How is this determined?
Whenever a VC is established across a router, an entry is added to the forwarding table, and one (corresponding to the terminating VC) is removed whenever a VC ends.
The routers must maintain <strong>connection state information</strong> for the ongoing connections (using the tablea). There are 3 phases in a VC:</p>
<ul>
<li><em>VC Setup</em>: sending side contacts networks layer specifying the IP address of the destination. The network sets up the VC. The path is determined as well as the VC number for each link along the path. The forwarding tables are updated and resources reserved.</li>
<li><em>Data transfer</em>: the packets flow</li>
<li><em>VC teardown</em>: The call termination propagates along the path, the forwarding tables are updated</li>
</ul>
<p>During network-layer setup <em>all the routers along the path between source and destination are involved in VC setup, and each router is fully aware of all VCs passing through it</em> (not in TCP: setup and connection only between source and destination).
The messages used by end ssystems to initiate or terminate a VC are called <strong>signaling messages</strong> and the protocols used to exchange them are called <strong>signaling protocols</strong>.</p>
<h3 id="422-datagram-networks">4.2.2 Datagram Networks</h3>
<p>Each time an end system wants to send a packet, it sampts the packet with the address of the destination end system and pops the packet into the network. The routers along the path will use this address to forward it.
The router has a forward table that <em>maps destination addresses to link interfaces</em>. When a packet arrives, it reads the destination address, uses the table to determine what link to use, and forwards the packet to that output link interface.</p>
<p>If we consider IPv4, addresses are 32 bits long. To avoid having tables with 2^32 entries, routers use <strong>prefixes</strong>. When there are multiple mathces to one address, the router uses the <strong>longest prefix matching rule</strong>.</p>
<p>Although routers in datagram networks maintain no connection state information, they nevertheless maintain forwarding state information in their forwarding tables.</p>
<h3 id="423-origins-of-vc-and-datagram-networks">4.2.3 Origins of VC and Datagram Networks</h3>
<p>VC has its roots in the telephony world, which uses circuits switching too.
The datagram model instead comes from the need to simplify as much as possible the network to bring computers together.</p>
<h2 id="43-whats-inside-a-router">4.3 What&rsquo;s Inside a Router?</h2>
<ul>
<li><em>Input ports</em>: performs the physical layer functions of incoming link at the router. It is also here that the forwarding table is consulted to determine the output port to which the arriving packet will be forwarded via the switching fabric. Control packets (protocol info) are forwarded to the routing processor.</li>
<li><em>Switching fabric</em>: connects input prots to output ports.</li>
<li><em>Output ports</em>: stores packets received from the switching fabric and performs the necessary link layer and physical layer functions.</li>
<li><em>Routing processor</em>: executes the routing protocols (algorithms), maintains routing tables and attached link state information and computes the forwarding table for the router.</li>
</ul>
<p>Input ports, switching fabric and output ports implement the forwarding function and are almost always implemented in hardware (<em>routing forwarding plane hardware</em>) while the routing processor implements the routing function and is usually implemented in software running on traditional CPU (<em>router control plane</em>)</p>
<h3 id="431-input-processing">4.3.1 Input Processing</h3>
<p>The packet arrives and the link and phyisical layer unpacking functions are performed. The forwarding table is computed and updated by the routing processor with a shadow copy typically stored at each input port so that forwarding decision can be made locallly without invoking the centralized routing processor on a per packet basis and thus avoiding a centralized processing bottleneck. The table is transferred to ports through separated bus. The lookup is then just a search (implemented in hardware and using high performance algorithms), speed also depends on the memory technology (DRAM, SRAM&hellip;). Lookup is important but input processing also consists of</p>
<ul>
<li>physical and link layer processing</li>
<li>chekcing the packet&rsquo;s version number, checksum, time to live&hellip;.</li>
<li>updating counters for network management.</li>
</ul>
<p>Input ports than moves the packet to the switching fabric (eventually queuing them if this is busy)</p>
<h3 id="432-switching">4.3.2 Switching</h3>
<p>Can be performed in different ways:</p>
<h4 id="switching-via-memory">Switching via memory</h4>
<p>Switching under the control of the CPU and input and output ports functioned as traditional I/O devices in a traditional operating system. The packet arrives, is copied into the processor memory, the processor determines the output port and copies the packet to the output port&rsquo;s buffer.
No parallel forwarding (only 1 memory read/write bus)</p>
<h4 id="switching-via-a-bus">Switching via a bus</h4>
<p>An input port transfers a packet directly to the output port over a shared bus without intervention by the routing processor. The input port pre-pends an internal header to the packet. All the output ports receive the packet but only the one that matches the label in the internal header will keep the packet. The output port will remove this internal header. The switching speed is limited to the bus speed as one packet at a time can cross the bus (multiple arriving packets will have to wait). Sufficient only for small area and enterprise networks</p>
<h4 id="switching-via-an-interconnected-network">Switching via an interconnected network</h4>
<p>To overcome the bandwidth limitation of a single shared bus a more sophisticated interconnection network can be used.
A <em>crossbar switch</em> is an interconnection network consisting of 2N buses that connect N input ports to N output ports. Each vertical bus intersects each horizontal bus at a crosspoint which can be opened or closed at any time by the switch fabric controller. If a packet has to go from input X to output Y, only the crosspoint between the horizontal bus from X and the vertical bus to Y will be closed.
Thus packets directed to different output ports can be forwarded simultaneously, but not multiple packets directed to the same output port.</p>
<h3 id="433-output-processing">4.3.3 Output Processing</h3>
<p>takes packets stored in the output&rsquo;s port&rsquo;s memory and transmits them over the output link, thus selecting de dequeuing packets for transmission and performing the necessary link and physical layer transmission functions.</p>
<h3 id="434-where-does-queuing-occur">4.3.4 Where Does Queuing Occur?</h3>
<p>Queues may form at both the input ports and the output ports. The location and the extent of queuing will depend on traffic load, speed of the switching fabric, and line speed. As the queues grow large, the router&rsquo;s memory can eventually be exhausted and <strong>packet loss</strong> will occur. IS THIS USEFUL ? NOT COVERED BY TEACHER</p>
<h2 id="44-the-internet-protocol-ip-forwarding-and-addressing-in-the-internet">4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet</h2>
<p>We know move to study of the network layer in the Internet. There are two versions of the IP (Internet Protocol) in use today: IPv4 and IPv6.
There 3 main components in the Internet: the IP Protocol (addressing, datagram format and packet handling conventions), the routing protocol (path selection), the Internet Control Message Protocol (ICMP) (error reporting and network information).</p>
<h3 id="441-datagram-format">4.4.1 Datagram Format</h3>
<p>A network layer packet is referred to as a <strong>datagram</strong>.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-ipv4datagram.png" alt="ipv4 datagram"  />
</p>
<p>Some fields:</p>
<ul>
<li><em>Version number</em>: 4 bits specifying the IP protocol version of the datagram (IPv4 or IPv6 )</li>
<li><em>Header length</em>: the length of the packet is variable therefore this field tells where the header ends and the data begins. Usually datagrams contain no option so that the typical IP datagram has <strong>20-byte header</strong></li>
<li><em>Type of service</em> (TOS): allows different types of datagrams to be distinguished from each other. (eg real time vs non real time)</li>
<li><em>Datagram length</em>: 16 bits specifying the total length, that is header + data measured in bytes. 16 bits -&gt; max header length = 65535 bytes, but usually datagrams are rarely larger than 1500 bytes.</li>
<li><em>Identifier, flags, fragmentation offset</em>: used for IP fragmentation. (NB: IPv6 doesn&rsquo;t allow fragmentation at routers)</li>
<li><em>Time-to-live</em> (TTL): used to avoid that datagrams circulate forever. It is decreased by one each time the datagram is processed by a router. When TTL = 0, the datagram is dropped</li>
<li><em>Protocol</em>: only used when datagram reaches its final destination, it specifies what <em>transport protocol</em> to which the data of the datagram should be passed. EX: 6 -&gt; TCP, 17 -&gt; UDP</li>
<li><em>Header checksum</em>: helps the router to detect bit errors in a received IP datagram. Computation: each two bytes in the <strong>header</strong> are considered as numbers, summed up using the 1s complement arithmetic. The 1s complement of this sum is then put in the checksum field. A router computes the checksum for each datagram. If the computed one doesn&rsquo;t equal the one in the field then the router has detected an error. Usually the datagram is discarded. As it is recomputed at each router, it may change.</li>
<li><em>Source and destination IP addresses</em></li>
<li><em>Options</em>: rarely used, dropped by IPv6</li>
<li><em>Data (payload)</em>: usually contains the transport layer segment but can also contain ICMP messages</li>
</ul>
<h4 id="ip-datagram-fragmentation">IP Datagram Fragmentation</h4>
<p>The maximum amount of data that a link layer can carry is called the <strong>Maximum Transmission Unit (MTU)</strong>. As each datagram is encapsulated in a link layer frame, the MTU imposes a hard limit on the length of the datagram. Each of the links along the route can use different link-layer protocols and therefore can have different MTU.
We therefore have to break the IP datagram into smaller datagrams, each of which will go in different link layer frames. Each of these smaller datagrams is referred to as a <strong>fragment</strong>.
A fragment must be reassembled before it can be passed to the transport layer. To reduce the workload on routers, the designers of IPv4 decided that reassembling should only be done at the destination end system.</p>
<p>In IPv4, to comply with fragmentation, the header contains the fields:</p>
<ul>
<li><em>Identifiers</em>: identifies the <strong>unfragmented datagram</strong> (same for all fragments)</li>
<li><em>flags</em>: in particular there is one flag set to 0 if the fragment is the last or to 1 if there are more to come</li>
<li><em>fragmentation offset</em>: an integer x, the data in the fragment should be inserted beginning at byte x * 8</li>
</ul>
<p>If one fragment contains error or is lost, all the others are dropped and TCP will have the sender retransmit all the data.
Fragmentation complicates the network and end systems and can be used in lethal DoS attacks such as the Jolt2 attack</p>
<h3 id="442-ipv4-addressing">4.4.2 IPv4 Addressing</h3>
<p>The boundary between the host and the physical link is called an <strong>interface</strong>. A router has multiple links connected to it, therefore multiple interfaces and therefore a router has multiple IP addresses and <em>an IP address is technically associated with an interface rather than with a host or router</em>.
IPv4 addresses are 32 bits long (4 bytes) -&gt; max 2^32 possible addresses. They are typically writen in <strong>dotted decimal notation</strong> where each byte of the address is written in deciaml from and separated by a period from the others.
EX 193.32.216.9 === 11000001 00100000 11011000 00001001
Each interface on every host (except host behind NATs) must have a unique IP address. How are these computed?
A portion is determined by the subnet to which the host is connected.
A subnet is the portion of the network interconnected end systems and one one router. (also called <em>IP network</em> or <em>network</em>). IP assigns an address to a subnet x.x.x.x/y where /y notation, sometimes known as a <strong>subnet mask</strong> indicates <em>that the leftmost y bits of the 32 bit quantity define the subnet address</em>. If y is 24, then any host attached to the a.a.a.0/24 subnet would be <em>required</em> to have an address of the form a.a.a.xxx.</p>
<p>FIGURE 4.17 WTF</p>
<p>The Internet&rsquo;s address assignment strategy is known as <strong>Classless Interdomain Routing (CIDR)</strong>. It generalizes the notion of subnet addressing. Consider a.b.c.d/x : the x most significant bits constitute the network portion of the IP address and are often referred to as the <strong>prefix</strong> (or <em>network prefix</em>). EX an organization is assigned a block of contiguous addresses, that is, a range of addresses with a common prefix.
When someone outside the organization want to send a datagram to someone inside, he will only need this x bits. The remaining 32-x bits can be thought of as distinguishing among the devices within the organization. These bits may have an additional subnetting structure.
There is yet another type of IP address, the <em>IP broadcast address 255.255.255.255</em>. When a datagram is sent to this address, the datagram is delivered to all hosts on the same subnet.</p>
<h4 id="obtaining-a-block-of-addresses">Obtaining a Block of Addresses</h4>
<p>A network administrator contacts an ISP which would provide a partition of the addresses that had already been allocated to him.
EX ISP has 200.23.16.0/20, it splits in 8 equal sized blocks: 200.23.16.0/23, 200.23.18.0/23, 200.23.20.0/23, &hellip;, 200.23.30.0/23
Who assigns set of addresses to ISPs? The <em><strong>Internet Corporation for Assigned Names and Numbers (ICANN)</strong></em> which allocates IP addresses, manages DNS root servers, assigns domain names and solves domain name disputes.</p>
<h4 id="obtaining-a-host-address-the-dynamic-host-configuration-protocol">Obtaining a Host Address: The Dynamic Host Configuration Protocol</h4>
<p>Once an organization has obtained a block of addresses, it can assign individual IP addresses to the hosts and router interfaces which are part of it. This can be done either <strong>manually</strong> (by the network administrator) or automatically by the <strong>Dynamic Host Configuration Protocol (DHCP)</strong>.
It can be configured so that a host receives the same IP each time it connects to the network or a temporary IP addresses that will change upon each connection. DHCP also transmits to hosts additional information (subnet mask, address of first-hop = default gateway, address of local DNS server).
As it automates the connection of a host into the network, DHCP is often referred to as a <strong>plug-and-play protocol</strong>. It is also popular in *wireless LANs where hosts join and leave frequently and in <em>residential ISP access networks</em>.
DHCP is a <em>client-server protocol</em>, the client being a newly arriving host needing network configuration information and the server being a router or a <em>DHCP relay agent</em> that know the address of a DHCP server for that network.
For a new client there is a 4 step process i nthe DHCP protcol:</p>
<ol>
<li><em>DHCP server discovery</em> c (client) looks for a server sending <strong>DHCP discover message</strong> a UDP packet directed to port 67. This segment is encapsulated in datagram sent to 255.255.255.255 (broadcast address) from address 0.0.0.0</li>
<li><em>DHCP server offer(s)</em> s (server) replies with a <strong>DHCP offer message</strong> broadcast to all nodes on the subnet using (sent to 255.255.255.0). c may receiver many of these (more servers) containing the transaction ID, proposed IP address and an address lease time (amout of time for which the address will be valid)</li>
<li><em>DHCP request</em>: c chooses one offer and responds to s with a <strong>DHCP request message</strong> echoing back the configuration parameters</li>
<li><em>DHCP ACK</em> s responds with <strong>DHCP ACK message</strong> confirming</li>
</ol>
<p>DHCP also provides a mechanism for renewing the lease on an address.</p>
<h4 id="network-address-translation-nat">Network Address Translation (NAT)</h4>
<p>Every IP-capable device needs an IP address. The number of connected devices grows fast, how to deal with IPv4 address space exhaustion?
<strong>Network Address Translation (NAT)</strong>
The NAT-enabled router defines a <strong>realm</strong> (or private network) (a network whose addresses only have meaning to devices within that network) and it can use the whole 32 bit address space for devices connected to it, it will also have a public address used to communicate with the exterior. The picture is explicative.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-nat.png" alt="nat"  />
</p>
<p>From the outside the router looks like a single device with a single IP address. It hides the details of the internal network from the outside world. Internal addresses can be assigned using DHCP.</p>
<p>Problems with NAT:</p>
<ul>
<li>Port number should be used for addressingi processes not hosts</li>
<li>Routers shouldn&rsquo;t have access to the transport layer (ports)</li>
<li>NAT violates end-to-end argument (any host should be able to contact any other host)</li>
<li>NAT interferes with P2P applications (peers hidden by NAT), therefore the need of <strong>connection reversal</strong> for <strong>NAT traversal</strong></li>
</ul>
<h4 id="upnp">UPnP</h4>
<p>NAT traversal is increasingly provided by Universal Plug and Play. It requires both the host and the NAT to be compatible. Host requests a NAT mapping_
<em>(private IP address, private port number) -&gt; (public IP address, public port number)</em>
If the NAT accepts and creates the mapping, then outsiders can create connections to (public IP address, public port number).</p>
<h3 id="443-internet-control-message-protocol">4.4.3 Internet Control Message Protocol</h3>
<p>ICMP is used to communicate network-layer information between hosts and routers, usually for error reporting (ex Destination network unreachable).
ICMP is considered part of IP but architecturally lies just above IP as ICMP messages are carried inside IP datagrams as payloads.
ICMP have a type and a code field and carry the header and the first 8 bytes of the datagram that caused the message to be generated in the first place.
Ping and traceroute are implemented using ICMP messages</p>
<h4 id="inspecting-datagrams-firewalls-and-intrusion-detection-systems">Inspecting datagrams: firewalls and intrusion detection systems</h4>
<p>Firewalls inspect the datagram and segment header fields denying suspicious datagrams entry into the internal network. Firewalls can block ICMP packages or packets based on port numbers, addresses.
Additional protection can be provided by IDS, placed at the boundary of the network, performs <em>deep packet inspection</em> examining not only headers but also payloads (including application layer data). IDS have databases of packet signatures that are know to be dangerous. As packets flow through the IDS, it tries to match them to signatures in its database, if a match is found, an alert is created. IPS (intrusion prevention system) in addition to detecting, also blocks packets raising alerts.</p>
<h3 id="444-ipv6">4.4.4 IPv6</h3>
<p>Developed because of IPv4 address space exhaustion</p>
<h4 id="datagram-format">Datagram format</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-ipv6datagram.png" alt="ipv6 datagram"  />
</p>
<ul>
<li>the size of the source and destination addresses is increased <strong>from 32 to 128 bits</strong>: every grain of sand on the planet can be addressable.
Unicast and multicast addresses are joind by the <strong>anycast address</strong> which allow a datagram to be delivered to any one of a group of hosts.</li>
<li>A number of IPv4 fields have been dropped or made optional resulting in a <strong>40-byte fixed-length header</strong> which allows faster datagram processing.</li>
<li><em>Flow label</em> not clear definition. 20-bit</li>
<li><em>Version</em>: 4-bit for IPv6 or 4. If ipv6 -&gt; 0110</li>
<li><em>Traffic class</em>: 8 bit similar to TOS</li>
<li><em>Payload length</em>: 16 bit unsigned integer indicating number of bytes following the 40-byte datagram header</li>
<li><em>Next header</em>: transport layer protocol</li>
<li><em>Hop limit</em>: decremented by one by each router forwarding the datagram, when 0, the datagram is discarded</li>
</ul>
<p>Fragmentation and reassembly cannot be done by intermediate routers, only by source and destination. If a router cannot trasmit a datagram because too big, it drops it and sends back an ICMP error message &ldquo;Packet too big&rdquo;. This reduces a lot the workload on the network.</p>
<p>As the transport layer and the link layer already perform check-summing, this functionality has been removed from the network layer for faster datagram processing.</p>
<p>An option field is no longer part of the header, instead it is one of the possible next headers pointed to from the header.
A <strong>new version of ICMP has been defined for IPv6</strong> which includes messages adapted to IPv6 (&ldquo;packet too big&rdquo;) and replaces IGMP (Internet Group Management Protocol), used to manage a host&rsquo;s joining and leaving of multicast groups.</p>
<h4 id="transitioning-from-ipv4-to-ipv6">Transitioning from IPv4 to IPv6</h4>
<p>IPv6 is back compatible with IPv4 but not viceversa.</p>
<p>It&rsquo;s not humanable possible to decide a date on which all machines would change their protocol.
The most straightfoward way is a <strong>dual stack</strong> approach where IPv6 nodes also have a complete IPv4 implementation. To determine whether anotehr node is IPv6 or IPv4-only DNS can be used, just checking whether the node has a IPv6 address or an IPv4 one. However this will bring about the loss of data in specific IPv6 header fields.
Another approach would be <strong>tunneling</strong> : when two IPv6 nodes are connected by intervening IPv4 routers, we call the IPv4 nodes <strong>tunnel</strong>, the entire IPv6 datagram is put in the payload field of a IPv4 datagram which will be propagated by the tunnel unaware of the details and received by the destination IPv6 node which is able to extract the IPv6 datagram and to route it.
This migration shows the difficulty in changing network-layer protocols.</p>
<h1 id="45-routing-algorithms">4.5 Routing Algorithms</h1>
<p>A host is attached directly to one router, the <strong>default router</strong> for the host (also called <strong>first hop router</strong>). Whenever a host sends a packet, the packet is transferred to its default router, which we&rsquo;ll call <strong>source router</strong>, we&rsquo;ll call the default router for the destination host as the <strong>destination router</strong>. Routing a packet from source to destination boils down to routing the packet from source router to destination router.</p>
<p>The purpose of a routing algorithm is simple: given a set of routers connected by links, it finds a &ldquo;good&rdquo; path from source to destination router. <em>A good path is the least expensive one</em>.</p>
<p>Graphs (see Algorithms course) are used to formulate routing problems, the node representing routers and the edges the links connecting them. Each edge also has a <strong>value representing its cost</strong>. For any nodes x and y in the G(raph) we denote c(x,y) the cost of the edge between them. If (x,y) doesn&rsquo;t belong to G, we set c(x,y) = infinity. We only consider undirected graphs.
We just have to find the least costly paths between sources and destinations.
We can classify routing algorithms in two groups:</p>
<ul>
<li><strong>Global routing algorithms</strong>: compute the least-cost path between a source and a destination using complete, global knowledge about the network.
They are often referred to as <strong>link-state (LS) algorithms</strong> since the algorithm must be aware of the cost of each link in the network</li>
<li><strong>Decentralized routing algorthms</strong>: compute the least-cost path in an iterative, distributed manner: no node has complete information about the cost of all network links. Instead, each node begins with only the knowledge of the costs of its own directly attached links.</li>
</ul>
<p>We could also make another classification separating <strong>static routing algorithms</strong> (routes change very slowly, eg after human intervention) and <strong>dynamic routing algorithms</strong>( routing change as the load or topology change). Finally another distinction could be made between <strong>load-sensitive</strong> or <strong>load-insensitive</strong> algorithms according to whether link costs vary reflecting the level of congestion.</p>
<h3 id="451-the-link-state-ls-routing-algorithm">4.5.1 The Link-State (LS) Routing Algorithm</h3>
<p>All link costs are known. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, each packet containing the identities and costs of its attached links resulting in <strong>all nodes having an identical and complete view of the network</strong> (each node could run the algorithm).
A link-state algorithm can be <em><strong>Dijkstra&rsquo;s algorithm</strong></em> or <em><strong>Prim&rsquo;s algorithm</strong></em>.
Code and example page 394</p>
<h3 id="452-the-distance-vector-dv-routing-algorithm">4.5.2 The Distance-Vector (DV) Routing Algorithm</h3>
<p>The <strong>distance-vector</strong> algorithm is <strong>iterative</strong>, <strong>asynchronous</strong> and <strong>distributed</strong>.</p>
<ul>
<li><em>Distributed</em> because each node receives some information from one or more of its directly attached neighbors, performs a calculation and then distributes the results back to its neighbors.</li>
<li><em>iterative</em>: the process continues on until no more information is exchanged between neighbors (self terminating)</li>
<li><em>asynchronous</em>: the nodes are not required to operate in lockstep with each other</li>
</ul>
<p>The least cost between x and y d(x,y) can be determined using the <em><strong>Bellman-Ford</strong></em> equation :</p>
<p>d(x,y) = min_v {c(x,y) + d(v,y)}</p>
<p>&hellip; to be continued</p>
<h3 id="453-hierarchical-routing">4.5.3 Hierarchical Routing</h3>
<p>In practice it is not possible to have a network of interconnected routers running the same routing algorithm because of two reasons:</p>
<ul>
<li><em>Scale</em> if the number of routers is large, running LS or DV algorithms for the whole network becomes prohibitive for memory, processing, storing and timing costs.</li>
<li><em>Administrative autonomoy</em> an organization should be able to organize its network as it wishes, while still being able to connect its network to the outside world.</li>
</ul>
<p>Therefore routers are organized into <strong>autonomous systems (ASs)</strong>, each of which being under the same administrative control. Routers in the same AS run the same routing algorithm and have information about each other. The routing algorithm running <em>within</em> an AS is called an <strong>intra-autonomous system routing protocol</strong>. In an AS, one or more routers will have the task of being responsible for forwarding packets outside the AS, these routers are called <strong>gateway routers</strong>.
To obtain reachability information from neighboring ASs and propagating the reachability information to all routers interal to its AS, gateway routers use <strong>inter-AS routing protocols</strong>. Two communicating ASs must run the same inter-AS routing protocol.</p>
<p>When a router needs to forward a packet outside its AS and there are multiple gateway routers, the router has to make a choice. One often employed practice is to use <strong>hot-potato routing</strong>: the AS gets rid of the packet as quickly as possible (as inexpensively as possible), the router sends the packet to the gateway router that has the smallest router-to-gateway cost among all gateways with a path to the destination.
An AS can decide what (internal) destinations to advertise to neighboring ASs: this a <em>policy</em> decision.</p>
<h2 id="46-routing-in-the-internet">4.6 Routing in the Internet</h2>
<h3 id="461-intra-as-routing-in-the-internet-rip">4.6.1 Intra-AS Routing in the Internet: RIP</h3>
<p>Intra-AS routing protocols are also known as <strong>interior gateway protocols</strong>. Historically two of these have been used extensively in the Internet: <strong>Routing Information Protocol (RIP)</strong> and <strong>Open Shortest Path First (OSPF)</strong>.</p>
<p>RIP was started for the Xerox Network Systems (XNS) architecture and was was widely deployed after being included in BSD. It is a <strong>distance-vector</strong> protocol working very similarly to what studied before. RIP uses <em>hop count</em> as a cost metric (each link has cost 1). Costs are from source router a destination subnet (not router-to-router as previously seen).
<strong>hop</strong> = number of subnets traversed along the shortest path from source to destination subnet, including the destination subnet.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-riphop.png" alt="riphop"  />
</p>
<p>Routing updates [messages] are exchanged between neighbors approximately every 30 seconds using a <strong>RIP response message</strong>, which contains a list of up to 25 destination subnets within the AS as well as the sender&rsquo;s distance to each of those subnets. Response messages are also known as <strong>RIP advertisements</strong>.
Each router maintains a RIP table known as a <strong>routing table</strong> which includes both the router&rsquo;s distance vector and the router&rsquo;s forwarding table. There are three columns in it: the destination subnet, the identity of next router along shortest path to reach destination and the number of hops to get to the destination along the shortest path.</p>
<p>If a router doesn&rsquo;t hear from its neighbor for at least once every 180 seconds, that neighbor is considered to be no longer reachable (died or link down).
Routers can also request information about its neighbor&rsquo;s cost to a given destination using RIP&rsquo;s request messages, which are transmitted over UDP using port 520.
RIP is implemented in software but has access to the routing tables through the UNIX kernel.</p>
<h3 id="462-intra-as-routing-in-the-internet-ospf">4.6.2 Intra-AS Routing in the Internet: OSPF</h3>
<p>OSPF and the related IS-IS are typically deployed in upper-tier ISPs whereas RIP is deployed in lower-tier ISPs and enterprise networks. Open indicates that the routing protocol speficication is publicly available.
It was conceived as the successor to RIP. It is however a <strong>link state protocol</strong> that uses <strong>flooding of link-state information</strong> and a <strong>Dijkstra least-cost path algorithm</strong>: routers construct a complete topological map (graph) of the AS, then run Dijkstra&rsquo;s algorithm to determine a shortest-path tree to <em>all subnets</em> with itself as the root node. Link costs are individually configured by the networks administrator who might choose to set all the link costs to 1, thus achieving minimum hop routuing or might choose to set the link weights to be <em>inversely proportional to link capacity</em> in order to discourage traffic from using low-bandwidth links.
A router broadcasts routing information to <em><strong>all other routers</strong></em> in the AS, not just the neighbors. The broadcast happens whenever there is a change in a link&rsquo;s state or every 30 minutes if the link&rsquo;s state doesn&rsquo;t change. OSPF advertisements are contained in <strong>OSPF messages</strong>  that are carried by IP with an upper-lyerprotocol of 89 for OSPF, therefore OSPF must implement reliable message transfer and link-state broadcast; OSP also checks that links are operational using HELLO messages to attached neighbors. OSPF offers some services:</p>
<ul>
<li><em>security</em>: OSPF messages can be authenticated (not active by default).</li>
<li><em>multiple same-cost paths</em>: two paths having same cost can be used at the same time.</li>
<li><em>integrated support for unicast and multicast routing</em></li>
<li><em>support for hierarchy within a single routing domain</em>: ability to structure an autonomous system hierarchically. A OSPF AS can be configured hierarchically into areas, each running its own OSPF algorithm, with each router broadcasting its link state to all other routers in that area. <strong>Area border routers</strong> are responsible for routing packets outside the area and one area is configured to be the <strong>backbone area</strong>, which routes traffic between other areas in the AS, it contains area border routers but also normal routers.</li>
</ul>
<h3 id="463-inter-as-routing-bgp">4.6.3 Inter-AS Routing: BGP</h3>
<p>The <strong>Border Gateway Protocol (BGP)</strong> is the de facto standard inter-AS routing protocol in today&rsquo;s Internet. It provides each AS means to:</p>
<ul>
<li>obtain reachability information from neighboring ASs</li>
<li>propagate reachability information to all internal routers</li>
<li>determine good routes to subnets using reachability information and AS policy.</li>
<li>it allows <strong>each subnet to advertise its existence to the rest of the Internet</strong></li>
</ul>
<h4 id="basics">Basics</h4>
<p>It is a very complex algorithm. Routers exchange information over semipermanent TCP connections using port 179. There is typically one such BGP TCP connection for each link directly connecting two routers in two different ASs but there are also semipermanent TCP connections between routers in the same AS. For each connection, the two routers at the end of it are called <strong>BGP peers</strong> and the connection is called a <strong>BGP session</strong>. A session spanning two ASs is an <strong>external BGP (eBGP) session</strong> and BGP sessions between routers within an AS is called an <strong>internal BGP (iBGP) session</strong>. Destinations are not hosts, but CIDRized <strong>prefixes</strong>, each representing a subnet or collection of subnets.</p>
<h4 id="path-attributes-and-bgp-routes">Path Attributes and BGP Routes</h4>
<p>In BGP an AS is identified by its <strong>globally unique AS number (ASN)</strong> which is assigned by ICANN regional registries. When a router advertises a prefix across a BGP session, it includes with the prefix a number of <strong>BGP attributes</strong>, a prefix with its attributes is called a <strong>route</strong>. Two other important attributes are:</p>
<ul>
<li><em>AS-PATH</em>: contains the ASs through which the advertisement for the prefix has passed. When a prefix is passed into an AS, the AS adds its ASN to the AS-PATH.
This attribute is used to detect and prevent looping advertisements (if router sees that its AS is already in AS-PATH, it rejects the ad) and to choose among multiple paths to the same prefix.
-<em>NEXT-HOP</em>: <strong>the router interface that begins the AS-PATH</strong>.</li>
</ul>
<p>BGP also includes attributes allowing routers to assign preferences metrics to the routes and indicating how to prefix was inserted into BGP at the origins.
When a router receives a route advertisement, it uses its <strong>import policy</strong> to decide whether to accept or filter the route and whether to set certain attributes such as the router preference metrics.</p>
<h4 id="bgp-route-selection">BGP Route Selection</h4>
<p>The input of the selection is the set of all routes that have been learned and accepted by the router. If two or more routes exist for the same prefix, elimination rules are applied until only one remains.</p>
<h1 id="chapter-8-security-in-computer-networks">Chapter 8: Security in Computer Networks</h1>
<h2 id="81-what-is-network-security">8.1 What is Network Security?</h2>
<p>Desirable properties of <strong>secure communication</strong>:</p>
<ul>
<li><em>Confindentiality</em>: only sender and receiver should be able to understand the contents of the transmitted message -&gt; encryption</li>
<li><em>Message integrity</em>: make sure the content of the communication is not altered -&gt; checksum</li>
<li><em>End-point authentication</em>: sender and receiver should be able to confirm the identity of the other party involved in the communication.</li>
<li><em>Operation security</em>: ability to counter attacks to internal networks -&gt; firewalls, IPS, IDS</li>
</ul>
<p>Possible attacks:</p>
<ul>
<li><em>eavesdropping</em>: sniffing and recording messages flowing in a channel</li>
<li><em>modification, inserion, deletion</em> of messages or message content</li>
</ul>
<p>These two allow to mount many other types of attacks</p>
<h2 id="82-principle-of-cryptography">8.2 Principle of Cryptography</h2>
<p>See Information Science, BA2
ADDITION:</p>
<h4 id="block-ciphers">Block Ciphers</h4>
<p>Today there are two broad classes of symmetric encryption techniques: <strong>stream ciphers</strong> and <strong>block ciphers</strong>(used for PGP, SSL, IPssec)
In a block cipher, the message to be encrypted is processed into blocks of <em>k</em> bis and each block is encrypted independently. To encode a bloc, the cipher uses a <em>on-to-one</em> mapping to map the <em>k</em>-bit block of cleartext to a <em>k</em>-bit block of ciphertext. To avoid bruteforce attacks, cipher blocks usually employ large blocks (<em>k</em>=64) but longer blocks implies longer tables to store the mappings.
Block ciphers typically use functions that simulate randomly permuted tables. EX
64 bit input split into 8 8-bit chunks, each of which is processed by a 8-bit to 8-bit table, each chunk having its table. The encrypted chunks are reassembled into a 64 bits message which is fed again to the input. After <em>n</em> such cycles, the function provides a 64-bit block of ciphertext. The key for this block would be the eight permutation tables, assuming that the scramble function is publicly known. Popular block ciphers: DES (Data Encryption Standard), 3DES, AES (Advanced Encryption Standard). These use functions instead of predetermined tables. Each of them uses a string of bits for a key (64-bit blocks with 56-bit key in DES, 128-bits blocks and 128/192/256 bits-long keys)</p>
<h5 id="cipher-block-chaining">Cipher-Block Chaining</h5>
<p>We need to avoid long messages avoiding that two or more identical ciphertexts (produced for identical cleartexts by a symmetric encryption).
(I DON&rsquo;T FINISH THIS PART, IT GOES TOO DEEP INTO ENCRYPTION TECHNIQUES WHICH IS NOT WHAT WE ARE INTERESTED IN)</p>
<h2 id="83-message-integrity-and-digital-signatures">8.3 Message Integrity and Digital Signatures</h2>
<p>We want to provide <strong>message integrity</strong> (aka message authentication). Message integrity is verified when:</p>
<ul>
<li>The message received indeed originated from the sender</li>
<li>The message was not tampered with on its way to the receiver</li>
</ul>
<h3 id="831-cryptographic-hash-functions">8.3.1 Cryptographic Hash Functions</h3>
<p>A <strong>hash function</strong> takes an input <em>m</em> and computes a fixed length size string <em>H(m)</em> known as a hash. A <strong>cryptographic hash function</strong> is required to have an additional property:</p>
<p><strong>it is computationally infeasible to find any two different messages <em>x</em> and <em>y</em> such that H(x) = H(y)</strong>
Some used cryptographic hashing functions are md5, SHA&hellip;</p>
<h3 id="832-message-authentication-code">8.3.2 Message Authentication Code</h3>
<p>To perform message integrity we also need a shared secret <em>s</em>, called the <strong>authentication key</strong>. The procedure is then:</p>
<ol>
<li>Alice creates message <em>m</em>, concatenates <em>m+s</em> and computes the hash <em>H(m+s)</em> to create the <strong>message authentication code (MAC)</strong></li>
<li>Alice <strong>appends the MAC to the message</strong> <em>m</em> creating <em>(m+H(m+s))</em></li>
<li>Bob receives the message and knowing the hash function and the secret, computes the hash. He creates <em>H(m+s)</em> and compares it with what he received.</li>
</ol>
<p>MAC is nice because <em>it doesn&rsquo;t require any encryption algorithm</em>
The most popular standard of mac today is <strong>HMAC</strong> which can be used with either MD5 or SHA-1. The problem then is: how to distribute the secret?
Physically?</p>
<h3 id="833-digital-signatures">8.3.3 Digital Signatures</h3>
<p>A <strong>digital signature</strong> is a cryptographic technique to indicate the owner or creator of a document or to signify one&rsquo;s agreement with a document&rsquo;s content.
Just as with handwritten signatures, digital signatures should be created in a way that they are <strong>verifiable</strong> (prove that the the author of a signature is indeed the author) and nonforgeable** (prove that only that individual could have signed the document).
We can use the public and private keys we already created for asymmetric confidentiality.
To sign a message <em>m</em> Bob can encrypt the message with the <strong>private key</strong> (only the matching public key will be able to decrypt).
However encryption and decryption and computationally expensive therefore:</p>
<ol>
<li>Bob computes the hash of the message</li>
<li>Bob uses his private key to encrypt the hash</li>
<li>Bob contants the encrypted hash and the message</li>
<li>Alice can decrypt, find the hash, compute a hash herself check for identity</li>
</ol>
<p>We saw that both digital signatures and MACs involve using a hash function but digital signatures, requiring encryption, need heavier operations and also need a <em>Public Key infrastructure</em> (PKI) with certification authorities.</p>
<h4 id="public-key-certification">Public Key Certification</h4>
<p>An important application of digital signatures is <strong>public key certification</strong>, that is, <strong>certifying that a public key belongs to a specific entity</strong>. It is used in IPsec and SSL.
A <strong>Certification Authority</strong> binds a public key to a particular entity. It has the follow roles:</p>
<ol>
<li>A CA verifies that an entity (person, router, &hellip;) is who it says it is. The method depends on the authority</li>
<li>The CA creates a <strong>cerificate</strong> that binds the public key of the entity to the identity. The certificate contains the public key and globally unique identifying information about the owner of the public key. The <strong>certificate is digitally signed by the CA</strong></li>
</ol>
<h2 id="84-end-point-authentication">8.4 End-Point Authentication</h2>
<p><strong>End-point authentication</strong> is the process of one entity proving its identity to another entity over a computer network.
Authentication must be done solely on the basis of messages and data exchanged as part of an <strong>authentication protocol</strong>. Typically this would run before the two communicating parties run some other protocol.</p>
<p>We can analyze authentication developing a simple algorithm step by step:</p>
<h4 id="version-10">Version 1.0</h4>
<p>Alice simply sends a message to Bob saying &ldquo;I&rsquo;m Alice&rdquo;</p>
<h4 id="version-20">Version 2.0</h4>
<p>Alice and Bob always communicate using the same addresses. Bob can simply check that the message has the source IP of Alice. However is fairly easy to spoof an IP address: crafting a special datagram is feasible using a custom kernel e.g Linux.</p>
<h4 id="version-30">Version 3.0</h4>
<p>Alice and Bob could share a secret password, a secrete between the authenticator and the person being authenticated.
Alice: I&rsquo;m Alice, Password.
However password can be eavesdropped, sniffed (read and stored).</p>
<h4 id="version-31">Version 3.1</h4>
<p>We could encrypt the password using a shared symmetric cryptographic key.
However this protocol is subject to <strong>playback attacks</strong> an eavesdropper could sniff the encrypted secret and, without having to decrypt, could send it to impersonate Alice.</p>
<h4 id="version-40">Version 4.0</h4>
<p>To avoid playback attacks we could use the same principle behind TCP&rsquo;s three way handshake. A <strong>nonce</strong> is a number that a protocol will use only once in a lifetime.
The procedure is then:</p>
<ol>
<li>Alice sends: <code>I am Alice</code></li>
<li>bob chooses a nonce and sends it to Alice</li>
<li>Alice encrypts it using Alice and Bob&rsquo;s symmetric secret key and sends the encrypted nonce.</li>
<li>Bob decrypts the received nonce and checks for equality with the one he generated.</li>
</ol>
<h2 id="85-securing-e-mail">8.5 Securing e-mail</h2>
<p>Security functionalities are provided by many layers of the network stack. Why? There is a need for security at higher layers as well as blanket coverage at lower layers and it easier to provide security at higher layers.</p>
<h3 id="851-secure-e-mail">8.5.1 Secure E-Mail</h3>
<p>What features do we want? <em>Confindentiality, Sender authentication, Receiver authentication</em>.</p>
<ul>
<li>Confidentiality: to overcome the problem of sharing a symmetric secret, Alice and Bob use asymmetric cryptography. Bob makes his public key publicly available (key server or web page) and Alice encrypts her message with Bob&rsquo;s public key. Bob can decrypt using his private key. However asymmetric crypto is quite inefficient. A <em>session key</em> can be used: Alice selects a <strong>random symmetric key</strong>. She uses it to encrypt the message. She the encrypts this key using Bob&rsquo;s public key and concatenates the symmetricly encrypted message and the asymmetricly encrypted key.</li>
<li>Sender authentication and message integrity: we suppose that Alice and Bob don&rsquo;t care for confidentiality. They will use <strong>digital signatures</strong> and <strong>message digests</strong>.
Alice applies a hash function <em>H</em> to her message <em>m</em>, obtain a message digest, signs the digest with her private key to create a digital signature, concatenates the original message with the signature to create a package and sends the package to Bob&rsquo;s e-mail address.
Bob uses Alice&rsquo;s public key to the digest and compares the result fo this operation with his own hash <em>H</em> of the message.</li>
<li>Confidentiality, sender authentication and message integrity: the two procedures above can be combined, message and digest are concatenated and the treated as a new message which is encrypted using the first technique.</li>
</ul>
<p>These techniques suppose however that Alice and Bob are able to exchange their public keys. An intruder could in fact send a public key to Bob pretending to be Alice. <em>Certification is needed</em>.</p>
<h4 id="phil-zimmermann-and-pgp">Phil Zimmermann and PGP</h4>
<p>PZ was the creator of PGP. For that he was legally attacked by the US Government, he distributed PGP while it should have stayed a secret weapon in the heads of the defense. The US dropped the case and PGP became the most widely used e-mail encryption software in the world despite the lack of funding, paid staff.</p>
<h3 id="852-pgp">8.5.2 PGP</h3>
<p>Pretty Good Privacy (PGP) is an e-mail encryption scheme that has become the De Facto standard.
It uses the same design shown above, giving the option of signing, encrypting or both.
When PGP is installed, it creates a public key pair for the user, the public key can be posted online while the private key is protected by a password which has to be entered every time the user accesses the private key.
A PGP message appears after the <strong>MIME</strong> header.
PGP also provides a mechanism for public key certification. PGP public keys are certified by <em><strong>Web of Trust</strong></em>: Alice can certify any key/username pair when she believes the pair really belong together and, in addition, PGP permits Alice to say that she trusts another user to vouch for the authenticity of more keys. Some PGP users sign each other&rsquo;s key by holding <em>key-signing parties</em>.</p>
<h2 id="86-securing-tcp-connections-ssl">8.6 Securing TCP Connections: SSL</h2>
<p>We now move to the transport layer. The enhanced version of TCP is called <strong>Secure Socket Layer (SSL)</strong>, a slightly modified version of SSL v3 called <strong>Transport Layer Security (TLS)</strong> has been standardized by the IETF.
Originally developed by Netscape, SSL has enjoyed broad deployment since its origins, providing secure communication between all recent browsers and online services. <strong>SSL provides TCP with confidentiality, data integrity, server authentication and client authentication</strong>.
SSL is often used over HTTP, however, as it secures TCP, it can be employed by any application that runs over TCP. SSL provides a simple <em>Application Programming Interface</em> with sockets, similar to TCP&rsquo;s API.
When an application wants to use SSL, it must include SSL classes/libraries. <strong>Technically SSL resides in the application layer</strong> but from the developer&rsquo;s perspective it is a transport layer protocol that provides TCP&rsquo;s services enhanced with security services.</p>
<h3 id="861-the-big-picture-primitive-almost-ssl">8.6.1 The Big Picture (primitive almost-SSL)</h3>
<p>Three phases:</p>
<ol>
<li><strong>Handshake</strong>: Bob initiates a TCP connection is established (TCP SYN, SYNACK, ACK). Bob sends <em>SSL Hello</em>, Alice responds with her certificate containing her public key (the certificate being certified by a CA, Bob is sure that the key belongs to Alice). Bob generates a <em><strong>master secrect (MS)</strong></em>, encrypts it with Alice&rsquo;s public key to create the <em><strong>Encrypted Master Secret (EMS)</strong></em> and sends it to Alice who will decrypt it with her private key to get the MS which can be used for confidentiality and integrity as seen before.</li>
<li><strong>Key Derivation</strong> instead of using the MS for integrity and confidentiality, it is safer to use different keys for different functions. Therefore <em>both</em> Alice and Bob <strong>use the MS to generate</strong>:
<ul>
<li>Eb = session encryption key for data Bob -&gt; Alice</li>
<li>Mb = session MAC key for data Bob -&gt; Alice</li>
<li>Ea = session encryption key for data Alice -&gt; Bob</li>
<li>Ma = session MAC key for data Alice -&gt; Bob
The MS could simply be split in four chunks, but real SSL does it differently.</li>
</ul>
</li>
<li><strong>Data Transfer</strong> TCP is a byte-stream protocol, so where would we put the MAC for the integrity check? SSL breaks the data stream into <strong>records</strong>, appends a MAC to each record and then encrypts record+MAC. However, in a MITM attack, the order of packets could be reversed as TCP sequence numbers are not encrypted. SSL therefore uses sequence numbers. Bob keeps a sequence number counter which begins at zero and is incremented at each record transmission. He includesthe sequence number in the MAC calculation: MAC = hash(data+Mb+SeqNum). Alice tracks Bob&rsquo;s sequence numbers so that she can verify the MAC.</li>
</ol>
<h4 id="ssl-record">SSL Record</h4>
<p>The real SSL record:</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-sslrecord.png" alt="ssl record"  />
</p>
<ul>
<li>Type: handshake message, data message, connection teardown message</li>
<li>Length: used to extract the records out of the TCP byte stream</li>
</ul>
<h3 id="862-a-more-complete-picture">8.6.2 A More Complete Picture</h3>
<p>SSL allows Alice and Bob to agree on the cryptographic algorithms at the beginning of the SSL session, during handshake. Steps:</p>
<ol>
<li>The client sends a list of cryptographic algorithms it supports, along with a client nonce</li>
<li>The server chooses a symmetric algorithm (ex: AES), a public key algorithm (ex RSA) and a MAC algorithm. It sends back to the client its choices as well as a certificate and a server nonce.</li>
<li>The client verifies the certificate, extracts the server&rsquo;s public key, generates a <em>Pre-Master Secret</em> (PMS), encrypts it with the server&rsquo;s public key and sends the encrypted PMS to server.</li>
<li>Using the same key derivation function (specified by SSL standard), <em>client and server independently compute the Master Secret (MS) from the PMS and the nonces</em>. The MS is sliced up to create the two encryption and the two MAC keys. Furthemore when the symmetric cipher employs CBC (ex 3DES or AES) the two Initialization Vectors (IVs), one for each side of the connection, are also obtained from hte MS. Henceforth <strong>all messages sent between client and server are encrypted and authenticated (using MAC)</strong></li>
<li>The client sends a MAC of all the handshake messages</li>
<li>The server sends a MAC of the handshake messages.</li>
</ol>
<p>5 and 6 protect the handshake from tampering: if in the end MAC are not coherent with the previously sent messages, the connection is stopped. (prevents an attacker from impersonating the server and imposing weak algorithms).
Nonces are used to avoid <em>connection replay attacks</em> (resending packets sniffed during a previous connection again, using nonces allows to have different MACs and therefore messages at each connection, even if the content of the communication is the same).</p>
<h4 id="connection-closure">Connection Closure</h4>
<p>TCP FIN segments can be crafted by an attacker (<em>truncation attack</em>), therefore they cannot be used.
The type field of SSL records is used for these purpose, even if it sent in the clear, it is authenticated at the receivers using record&rsquo;s MAC.</p>
<h2 id="87-network-layer-security-ipsec-and-virtual-private-networks">8.7 Network-Layer Security: IPsec and Virtual Private Networks</h2>
<p>The IP security protocol is called <strong>IPsec</strong>, it secures IP datagrams between any two network-layer entities (host, routers)</p>
<h3 id="871-ipsec-and-virtual-private-networks-vpns">8.7.1 IPsec and Virtual Private Networks (VPNs)</h3>
<p>An institution extending overt multiple geographical regions might want its own IP network so that the machines in it can communicate securely. Such a disjoint network is a <strong>private network</strong>. A physical private network can be expensive. VPN can be used to deploy and maintain a private network over the existing public Internet. The traffic is sent over the Internet but encrypted before entering the public net.
Not all traffic sent into the Internet by the gateway routers or laptops will be IPsec secured (only the portion accessing internal resources)</p>
<h3 id="872-the-ah-and-esp-protocols">8.7.2 The AH and ESP Protocols</h3>
<p>In the IPsec protocol suite, there are two principal protocols: the <strong>Authentication Header (AH)</strong> protocol and the <strong>Encapsulation Security Payload (ESP)</strong> protocol.
When a source IPsec entity (router or host) sends secure datagrams to a destination entity it does so with either ESP or AH. AH provides <em>source authentication</em> and <em>data integrity</em> while ESP provides <em>source authentication, data integrity and confidentiality</em>. Because the latter is often critical for VPNs, ESP is much more widely used AH. We will only study ESP.</p>
<h3 id="873-security-associations">8.7.3 Security Associations</h3>
<p>Before sending IPsec datagrams from source entity to destination entity, source and destination create a network-layer logical connection called <strong>security association (SA)</strong>. SA is a simplex (unidirectional from source to destination) logical connection. If both entities want to send datagrams to each other, then two SAs need to be established, one in each direction.
The VPN server (headquarters gateway router) will maintain state information about the SA, which will include:</p>
<ul>
<li>32-bit identifier for the SA, called <em>Security Parameter Index (SPI)</em></li>
<li>The origin interface (client outside) of the SA and its destination (its out facing interface) [IP addresses]</li>
<li>Type of the encryption used</li>
<li>Encryption key</li>
<li>Type of the integrity check</li>
<li>Authentication key</li>
</ul>
<p>An IPsec entity often maintains state information for many SAs (all outside clients) using its <em>Security Association Database</em> (SAD) which is a data structure in the entity&rsquo;s OS kernel.</p>
<h3 id="874-the-ipsec-datagram">8.7.4 The IPsec Datagram</h3>
<p>IPsec has two different packet forms, one for <strong>tunnel mode</strong> and one for <strong>transport mode</strong>, the first one, being more appropriate for VPNs, is more widely deployed than the transport mode, we will therefore only focus on it.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-ipsecdatagram.png" alt="ipsec datagram"  />
</p>
<p>The headquarters&rsquo;s gateway receives an IPv4 datagram from inside the network directed to a VPN client outside. Here is what happens:</p>
<ol>
<li>It appends to the back of the original datagram (which includes the original header fields) in the <em>ESP trailer</em> field</li>
<li>It encrypts the result using the algorithm and key specified in the SA</li>
<li>Appends to the front of the result a <em>ESP Header</em> creating the &ldquo;enchilada&rdquo;</li>
<li>Creates an authentication MAC over the whole enchilada using algorithm and key specified in the SA</li>
<li>Appends the MAC to the back of the enchilada forming the <em>payload</em></li>
<li>Creates a brand new IP header with all the classic IPv4 header fields which it appends before the payload.</li>
</ol>
<p>The protocol number field is set to 50, designating IPsec. The routers along the path will treat the datagram as a normal one, oblivious that it is an IPsec datagram.
To decide whether outgoing packets should be treated as above or simply let through, the gateway maintains a <em>Security Policy Database</em> (SPD) which indicates what types of datagrams (as a function of the source and destination IPs and of the protocol) are to be IPsec processed and, for those that are, which SA should be used.
<strong>IPsec provides confidentiality, source authentication, data integrity, replay-attack prevention.</strong></p>
<h3 id="875-ike-key-management-in-ipsec">8.7.5 IKE: Key Management in IPsec</h3>
<p>Who/What should populate the SAD? For small VPNs this can be done manually. For larger ones there is the <em><strong>Internet Key Exchange (IKE) protocol</strong></em>.
IKE is similar to the handshake in SSL. Here are the steps:</p>
<ul>
<li>During the first exchange of messages, the two sides use Diffie-Hellman to create a Bi-Directional IKE SA between the routers, which is entirely different form the IPsec SA discussed above. This IKESA provides an authenticated and encrypted channel between the two routers. Keys are established for encryption and authentication for IKESA. Also established is a master secret.</li>
<li>During the second exchange of messages, both sides reveal their identity to each other by signing their messages. However the identities are not revealed to an eventual sniffer, since the messages are sent over the IKE sa channel. The two sides also negotiate the IPsec encryption and authentication algorithms to be employed by the IPsec SA. Finally the two sides create an SA n each direction.</li>
</ul>
<p>We have two phases to reduce computational costs: we don&rsquo;t need asymmetric cryptography during second phase, allowing IKE to generate many SAs with relatively little computational cost.</p>
<h2 id="89-operational-security-firewalls-and-intrusion-detection-systems">8.9 Operational Security: Firewalls and Intrusion Detection Systems</h2>
<h3 id="891-firewalls">8.9.1 Firewalls</h3>
<p>A firewall is a combination of hardware and software that isolates an organization&rsquo;s internal network from the Internet at large, allowing some packets to pass and blocking others. It has three goals</p>
<ol>
<li><em>All traffic from outside to inside, and vice versa, passes through the firewall</em></li>
<li><em>Only authorized traffic, as defined by the local security by the local policy, will be allowed to pass</em>.</li>
<li><em>The firewall itself is immune to penetration</em></li>
</ol>
<p>Firewalls can be classified in three categories:</p>
<h4 id="1-traditional-packet-filters">1: Traditional Packet Filters</h4>
<p>Packet filters examine each datagram in isolation determining whether the datagram should be allowed to pass or should be dropped based on administrator-specific rules.
Filtering decisions can be based on IP source/destination, protocol type, TCP/UDP, TCP flags/ ICMP message type, rules for leaving/entering, rules for different router interfaces.
The parameters are based on the policy of the organization taking account of user productivity and bandwidth usage as well as security concerns.</p>
<h4 id="2-stateful-packet-filters">2: Stateful Packet Filters</h4>
<p>Decisions are made on each packet in isolation. Stateful filters track TCP connecions and use this knowledge to make filtering decisions.</p>
<h4 id="3-application-gateways">3: Application Gateways</h4>
<p>Application Gateways look beyond the IP/TCP/UDP headers and make policy decisions based on application data. An <strong>Application Gateway</strong> is an application-specific server through which all application data must pass. Multiple AG can run on the same host, but each gateway is a separate server with its own processes.</p>
<h3 id="892-intrusion-detection-systems">8.9.2 Intrusion Detection Systems</h3>
<p>An <strong>intrusion detection system (IDS)</strong> is a device that alerts when it observes potentially malicious traffic. An <strong>intrusion prevention system (IPS)</strong>  is a device that filters out suspicious traffic. Both types of device perform <strong>deep packet inspection</strong>: they look beyond the header fields and into the actual application data that the packets carry.</p>
<p>An IDS can detect a wide range of attacks, including network mapping, port scans, TCP stack scans, DoS, worms, viruses, OS vulnerability attacks and application vulnerability attacks.
An organization can deploy one more IDS sensors in its network. When many are used, they work together, usually coordinated by a central server. More than one is often a good solution as each one compare each passing packet with tens of thousands of signatures. They are usually classified as either <strong>signature-based systems</strong> or <strong>anomaly-based systems</strong>.
A signature based IDS maintains an extensive database of attack signature, each of which being a set of rules pertaining to an intrusion activity. A signature can be a list of packet characteristics or may relate to a series of packets. They are created by network security engineers researching attacks. The ids sniffs every packet passing by it, comparing it with signatures.
Signature based IDS, although widely deployed, have a number of limitations: they require a previous knowledge of the attack to generate an accurate signature, false alarms may be generated, they can be slow and fail to detect attacks if overwhelmed.
Anomaly-based packets study normal traffic and looks for statistically unusual events. They don&rsquo;t rely on previous knowledge of attacks.</p>
<h1 id="chapter-5-the-link-layer-links-access-networks-and-lans">Chapter 5: The Link Layer: Links, Access Networks and LANs</h1>
<h2 id="51-introduction-to-the-link-layer">5.1 Introduction to the Link Layer</h2>
<p>Some terminology:</p>
<ul>
<li><strong>node</strong> = any device running a link-layer protocol (hosts, routers, switches&hellip;)</li>
<li><strong>link</strong> = communication channels connecting adjacent nodes along the path.</li>
<li>Over a given link, a transmitting node encapsulates the datagram in a <strong>link-layer frame</strong> and transmits the frame into the link.</li>
</ul>
<h3 id="511-the-services-provided-by-the-link-layer">5.1.1 The Services Provided by The Link Layer</h3>
<p>Possible services offered by a link-layer protocol include:</p>
<ul>
<li><em>Framing</em>: all link layer protocols encapsulate each network layer datagram  within a link-layer frame before transmission. A frame consists of a data field, containing the datagram, and a number of header fields, whose structure is determined by the protocol.</li>
<li><em>Link access</em>: A <strong>Medium Access Control</strong> (MAC) protocol specifies the rules by which a frame is transmitted onto the link.</li>
<li><em>Reliable delivery</em>: the protocol guarantees to move each datagram across the link without loss or errors. A reliable delivery protocol is often used for links highly prone to errors (WiFi) so that the error can be corrected locally, where it happens, rather than forcing an end-to-end retransmission. However it can represent a significant overhead for low bit-error links (cable) and therefore many wired link-layer protocols do not provide a reliable delivery service.</li>
<li><em>Error detection and correction</em>: signal attenuation and electromagnetic noise can introduce errors. Because there is no need to forward a datagram that has an error, may link-layer protocols provide a mechanism to detect such bit errors so that they can drop the frames. This can be accomplished transmitting error-detection bits in the frame. Link layer error detection is usually more sophisticated and <em>implemented in hardware</em>.</li>
</ul>
<h3 id="512-where-is-the-link-layer-implemented">5.1.2 Where Is the Link Layer Implemented?</h3>
<p>In routers, the link layer is implemented in the line card. Is a host&rsquo;s link layer implemented in hardware or software?
For the most part, the link layer is implemented in a <strong>network adapter</strong>, sometimes known as <strong>network interface card (NIC)</strong>. At the heart of the NIC is the link-layer controller, usually a single, special purpose chip that implements many of the link-layer services. Thus, much of a link-layer controller&rsquo;s functionality is implemented in hardware.
Part of the link layer is implemented in software that runs on the host&rsquo;s CPU, this part implement higher-level functionalities.
Link-Layer is a combination of hardware and software, the place in the protocol stack where software meets hardware.</p>
<h2 id="52-error-detection-and--correction-techniques">5.2 Error-Detection and -Correction Techniques</h2>
<p>Error detection and correction allow the receiver to sometimes, <em>but not always</em>, detect that bit errors have occurred. Even with the use of error-detection bits, there still may be <strong>undetected bit errors</strong> (the receiver is unaware of the presence of corrupted bits).
We want to keep the probability of such an event small. Let&rsquo;s now consider three techniques for detecting errors in the transmitted data: parity checks, checksumming methods and cyclic redundancy checks</p>
<h3 id="521-parity-checks">5.2.1 Parity Checks</h3>
<p>Perhaps the simplest form of error detection is the use of a single <strong>parity bit</strong>. Suppose that the information to be sent, <em>D</em>, has <em>d</em> bits.
In an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the <em>d+1</em> bits (original + parity bit) is even. (odd parity scheme, parity bit to one if #1s % 2 != 0).
The receiver only needs to count the number of 1s in the <em>d+1</em> bits. If an odd number of 1 valued bits are found with an even parity scheme, the receiver knows that <em>some odd number</em> of bit error has occurred.
If an even number of bit errors occur, this would result in an undetected error.
Another approach is to use a <em><strong>two dimensional even parity</strong></em>: the <em>d</em> bits are divided into <em>i</em> rows and <em>j</em> columns. A parity value is computed for each row and for each column. The result <em>i + j + 1</em> parity bits comprise the error-detection bits.
A single bit error in the original <em>d</em> bits will cause the parity of both the column and the row containing the flipped bit to to be in error. The receiver can not only detect the error, but also use the column and row indices of the column and row with parity errors to actually identify the bit that was corrupted and <em>correct</em> the error.
This technique also allows to detect an error in the <em>parity bits</em>.
The ability of the receiver to both detect and correct errors is known as <strong>forward error correction (FEC)</strong></p>
<h3 id="522-checksumming-methods">5.2.2 Checksumming Methods</h3>
<p>The <em>d</em> bits of data are treated as a sequence of <em>k</em>-bit integers for example the Internet checksum already studied: bytes of data are treated as integers and summed, the 1s complement of this sum forms the Internet checksum carried in the header. The receiver checks the checksum by taking the 1s complement of the sum of the received data (including checksum) and checking whether the result is all 1 bits, if there are any 0, an error is indicated. In TCP and UDP the checksum is computed over all fields (header and data).
Checksumming methods require little packet overhead but they provide relatively weak protection against errors.
Why is checksumming used in transport layer and cyclic redundancy check used at the link layer?
Transport layer is implemented in software (OS) and therefore needs a simple and fast error detection scheme while error detection at link layer is implemented in hardware which can perform the more complex CRC operations.</p>
<h3 id="523-cyclic-redundancy-check-crc">5.2.3 Cyclic Redundancy Check (CRC)</h3>
<p><strong>Cyclic Redundancy Check (CRC) codes</strong> are also known as <strong>polynomial codes</strong> since it is possible to view the string to be sent as a polynomial whose coefficients are the 0 and 1 values in the bit string with operation interpreted as polynomial arithmetic.
Sender and receiver must agree on a <em>r+1</em> bit pattern know as <strong>generator</strong> which we&rsquo;ll denote as <em>G</em>. We require the leftmost bit of G to be a 1. For a given piece of data <em>D</em> the sender will choose <em>r</em> additional bits, <em>R</em>, and append them to <em>D</em> such that the resulting <em>d + r</em> bit pattern, interpreted as a binary number, is exactly divisible by G using modulo-2 arithmetic.
Checking is therefore easy: the receiver divides the <em>d + r</em> received by bits by <em>G</em>, if the remainder is nonzero, an error has occurred, otherwise the data is accepted as being correct.
All CRC calculations are done in modulo 2 without carries in addition or borrows in subtraction (+ = - = xor).</p>
<h2 id="53-multiple-access-links-and-protocols">5.3 Multiple Access Links and Protocols</h2>
<p>There are two types of network links: point-to-point and broadcast links. A <strong>point-to-point link</strong> consists of a single sender at one end of the link and a single receiver at the other end of the link. A <strong>broadcast link</strong> can have multiple sending and receiving nodes all connected to the same, single, shared broadcast channel. The term <em>broadcast</em> is used because when any node transmits a frame, the channel broadcasts the frame and each other node receives a copy (ex: ethernet, wireless).</p>
<p>The <strong>multiple access problem</strong>: How to coordinate the access of multiple sending and receiving nodes to a shared broadcast channel?
Computer networks have <strong>multiple access protocols</strong> by which nodes regulate their transmission into the shared broadcast channel.
More than two nodes can transmit frames at the same time, which will result in all of the nodes receiving multiple frames at the same time: the frames <strong>collide</strong> at all of the receivers. Typically in case of collision, <em>none of the receiving nodes can make any sense of any of the frames</em>, they become inextricably tangled together and are therefore <strong>lost</strong>, the channel being wasted during collision.
Thus it is necessary to coordinate the transmission of the active nodes.
We can classify multiple access protocols in three categories: <strong>channel partitioning protocols, random access protocols, taking-turns protocols</strong>.</p>
<h3 id="531-channel-partitioning-protocols">5.3.1 Channel Partitioning Protocols</h3>
<p>TDM and FDM (from circuit switching) are in this category.
A third channel partitioning tool is <strong>code division multiple access (CDMA)</strong> which assigns a different <em>code</em> to each node. Each node then uses its unique code to encode the data bits it sends. If the codes are chosen carefully, then all nodes can transmit simultaneously and yet have their respective receivers correctly receive a sender&rsquo;s encoded data bits. Originally used in military systems, it&rsquo;s now widely used for civilian use, particularly in cellular telephony.</p>
<h3 id="532-random-access-protocols">5.3.2 Random Access Protocols</h3>
<p>A transmitting node always transmits at the full rate of the channel, <em>R</em> bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame until the frame gets through without a collision.
But when a node experiences a collision, <em>it waits a random dely before retransmitting the frame</em>. The delay is chosen independently.
Here a few of the most commonly used random access protocols:</p>
<h4 id="slotted-aloha">Slotted ALOHA</h4>
<p>All frames consist of <em>L</em> bits, time is divided into slots of size <em>L/R</em> seconds, nodes start to transmit frames only at the beginning of slots. Moreover nodes are synchronized so that each node when the slot begins. If two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends.</p>
<p>If <em>p</em> is a probability then the operation of slotted ALOHA in each node is simple:</p>
<ul>
<li>each node waits the beginning of the next slot to transmit the entire frame in a slot</li>
<li>If no collision occurs, the frame is considered delivered</li>
<li>If collision, this is detect before the end of the slot. The node retransmits its frame <em>in each subsequent slot</em> with probability <em>p</em> (probability of retransmission) until the frame is transmitted  without a collision.</li>
</ul>
<p>Slotted ALOHA allows transmission at full rate <em>R</em>, is highly decentralized, and is extremely simple.
The computed maximal efficiency (successfully used slots in transmission / total slots) of Slotted ALOHA) is 37% thus the effective transmission rate is 0.37<em>R</em> bps.</p>
<h4 id="aloha">Aloha</h4>
<p>all nodes synchronize their transmissions to start at the beginning of a slot. The node immediately transmits a frame in its entirety in the channel. In case of collision, the node will then immediately retransmit the frame with probability <em>p</em> otherwise the node waits for a frame transmission time, after which it transmits the frame with probability <em>p</em> or wait for another frame with probability <em>1-p</em>. The maximum efficiency is 1/(2e) but the protocol is fully decentralized.</p>
<h4 id="carrier-sense-multiple-access-csma">Carrier Sense Multiple Access (CSMA)</h4>
<p>CSMA and CSMA/CD (collision detection) embody two rules:</p>
<ul>
<li><strong>carrier sensing</strong>: if a node is transmitting, the others wait until they detect no transmission for a short amount of time and begin transmission.</li>
<li><strong>collision detection</strong>: a transmitting node listens to the channel while it&rsquo;s transmitting, if it detects that another node is transmitting, it stops transmitting and waits for a random amount of time before repeating the sense-and-transmit-when-idle-cycle.</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-csmaDIA.png" alt="csmaDIA"  />
</p>
<p>It is evident that the <strong>propagation delay</strong> of the channel plays a crucial role: the longer, the larger the chance that a carrier sensing node is not yet able to sense a transmission that has already begun.</p>
<h4 id="carrier-sense-multiple-access-with-collision-detection-csmacd">Carrier Sense Multiple Access with Collision Detection (CSMA/CD)</h4>
<p>When a node detects a collision, it ceases transmission immediately in Collision Detection.
A link layer frame is prepared, if the node senses that the channel is idle (no energy is entering the adapter from the channel), it starts to transmit the frame, else it waits until it detects idle. While transmitting, the node monitors the channel for usage from other nodes, if the entire frame is transmitted without detecting usage, then the adapter is finished. If energy is detected from other adapters while transmitting, the node aborts transmission (stops), waits for  a random amount of time and then returns to checking for idle.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-csmacdDIA.png" alt="csmacdDIA"  />
</p>
<p>The wait for random amount of time is required in order to avoid the nodes to keep colliding.</p>
<h4 id="csmacd-efficiency">CSMA/CD Efficiency</h4>
<p>Is the long run fraction of time during which frames are being transmitted without collision. If the propagation delay approaches 0, the efficiency approaches 1.
Also if the propagation delay becomes very large, efficiency approaches 1.</p>
<h3 id="533-taking-turns-protocols">5.3.3 Taking-Turns Protocols</h3>
<p>There are a lot of them, we&rsquo;ll cover two of the more important, the first one being the <strong>polling protocol</strong>. It requires one of the nodes to be designated as a master node which <strong>polls</strong> each of the nodes in a round-robin fashion.
The master tells node 1 that it can transmit up to some maximum number of frames, when node 1 is finished (the master checks for energy in the channel) the master tells the same to node 2 and so on.
The polling protocol eliminates the collisions and empty slots that plague random access protocols, resulting in a much higher efficiency.
However it introduces a <em>polling delay</em> (the amount of time required to notify a node that it can transmit) [if only one is transmitting, it will have to wait for the master to poll all the others]. Moreover the master node represents a single point of failure.</p>
<p>The second protocol is the <strong>token-passing protocol</strong> in which there is no master method. A small, special purpose frame known as <strong>token</strong> is exchanged among the nodes in some fixed order. When a node receives a toke, it holds it only if it has some frames to transmit otherwise it immediately forwards it to the next node.If a node has frames to transmit when it receives the token, it sends up to a maximum number of frames and then passes the token. Token passing is decentralized and highly efficient but the failure of one node could crash the entire channel, or a node could neglect to release the token&hellip;.</p>
<h3 id="534-docsis-the-link-layer-protocol-for-cable-internet-access">5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</h3>
<p>The Data-Over-Cable-Service-Interface-Specifications specifies the cable data network architecture and its protocols. DOCSIS uses FDM to divide the downstream and upstream network segments into multiple frequency channels. Each upstream and downstream channel is a broadcast channel. Several cable modems share the same upstream channel (frequency) to the CMTS and thus collision can potentially occur.
Each upstream channel is divided into intervals of time (TDM-like) each containing a sequence of mini-slots during which cable modems can transmit to the CMTS, which explicitly grants permission to individual modems to transmit during specific mini-slots. This is done sending a special control message known as a MAP message on a downstream channel to specify which cable modem can transmit during which mini-slot.
Modems send mini-slot-request frames to the CMTS during a special set of interval mini-slots dedicated for this purpose. The requests are transmitted in a random access manner and may collide with each other. The modem cannot detect activity nor collisions: it simply infers that its request experienced collision if it does not receive a response in the next downstream control message.
When a collision is inferred, a modem uses binary exponential backoff to defer the transmission to a future slot.</p>
<h2 id="54-switched-local-area-networks">5.4 Switched Local Area Networks</h2>
<p>Switched local networks connect hosts using link-layer switches which <strong>do not run networks-layer protocols</strong>.</p>
<h3 id="541-link-layer-addressing-and-arp">5.4.1 Link-Layer Addressing and ARP</h3>
<h4 id="mac-addresses">MAC Addresses</h4>
<p>Network interfaces in hosts and routers have link-layer addresses, however <em>link-layer switches do not have link-layer addresses associated with their interfaces</em> so that they can carry datagrams without having routers or hosts having to explicitly address the frame to the intervening switch.
A link-layer address is called <strong>LAN address</strong>, <strong>physical address</strong> or <strong>MAC address</strong>, the last name being the most popular. This address is <strong>6 bytes long</strong>, typically expressed in hexadecimal notation. They are supposed to be permanent but can be changed via software.
<strong>No two adapters have the same address</strong>: the IEEE manages the MAC address space, usually assigning a 24 prefix to each manufacturer and letting him choose the content of the remaining 24 bits.
MAC address have a flat structure (no hierarchy such as in IP) and do not change.
When an adapter wants to send a frame to some destination adapter, it inserts the destination adapter&rsquo;s MAC address into the frame and then sends the frame into the LAN. An adapter might receive a frame that isn&rsquo;t addressed to it, when this happens, the adapter checks whether the frame&rsquo;s destination address matches its own, if not it discards the frame. When a sending adapter want to broadcast to the whole network, it inserts a special <strong>MAC broadcast address</strong> into the destination address field, for 6bytes addresses that is FF-FF-FF-FF-FF-FF</p>
<h4 id="address-resolution-protocol-arp">Address Resolution Protocol (ARP)</h4>
<p>The <strong>Address Resolution Protocol (ARP)</strong> translates network-layer addresses into link-layer addresses, analogously to DNS, but ARP resolves IP addresses only for hosts and router interfaces on the same subnet.
Each host and router has an <strong>ARP table</strong> which contain mappings of IP addresses to MAC addresses and a time-to-live TTL value which indicates when each mapping will be deleted from the table. A typical TTL is 20 minutes from when an entry is placed in the ARP table.
The table does not necessarily contain an entry for every host and router on the subnet.
What if a frame has to be sent to an address which does not appear in the table?
The sender creates a special packet, an <strong>ARP packet</strong>, containing the sending and receiving IP and MAC addresses. Both ARP query and response have the same format: the sending forwards the ARP request to the broadcast address (destination address) the frame containing the query is received by all the other adapters in the subnet. Each adapter passes the frame to the ARP module which checks if its IP address matches the destination IP address in the query. The one with a match sends back the response with the desired mapping. The querying can update its table and send the IP datagram encapsulated in a link-layer frame.
ARP is plug and play: the table gets build automatically.
ARP stands in the boundary between the link and network layers.</p>
<h3 id="sending-a-datagram-off-the-subnet">Sending a Datagram off the Subnet</h3>
<p>A datagram that has to be sent out of the subnet is first sent to the first-hop router on the path to the final destination (which is outside the subnet). How is its MAC acquired? Using ARP.
When the frame reaches the next-hop router of the destination subnet, it has to be moved inside, the router having to decide what interface to use. This is done using the forwarding table: the router extracts the datagram and checks the destination IP. The datagram is encapsulated again and sent into the subnet, this time the MAC address of the frame is indeed the destination MAC address of the ultimate destination, which the router acquire via ARP.</p>
<h3 id="542-ethernet">5.4.2 Ethernet</h3>
<p>It has pretty much taken over the wired LAN market. Since its invention in the 70&rsquo;s, it has grown and become faster.
At the beginning the original Ethernet LAN used a coaxial bus to interconnect the nodes, creating a broadcast LAN. By the late 90s, most companies and universities had replaces their LANs with Ethernet installation using a hub-based star topology: hosts and routers are directly connected to a hub with twisted-pair copper wire. A <strong>hub</strong> is a physical layer device that acts on individual bits rather than frames. When a hub receives a bit, it simply recreates it boosting its energy strength and transmits the bit onto all the other interfaces (it&rsquo;s still a broadcast LAN). In the early 2000s, the star topology evolved: the hub was replaced with a <strong>switch</strong>, allowing a collision-less LAN.</p>
<h4 id="ethernet-frame-structure">Ethernet Frame Structure</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-ethernetframe.png" alt="ethernet frame"  />
</p>
<ul>
<li><em>Data fields</em> (46 to 1,500 bytes): carries the IP datagram (or other network-layer datagram). The MTU (maximum transmission unit) is 1500 bytes, compensated with fragmentation. The minimum is 46, is less, the data is &ldquo;stuffed&rdquo; and the receiving network layer uses the length field to eliminate the stuffing</li>
<li><em>Destination address</em> (6 bytes) destination MAC address.</li>
<li><em>Source address</em> (6 bytes)</li>
<li><em>Type field</em> (2 bytes) allows to multiplex network layer protocols (if not only IP is used, also ARP has its own type number 0x0806)</li>
<li><em>Cyclic redundant check (CRC)</em> (4 bytes): used for bit error detection</li>
<li><em>Preamble</em> (8 bytes): the first seven have value 10101010, the last has value 10101011. The first seven serve as &ldquo;wake up&rdquo; the receiving side and to <em>synchronize their clocks to that of the sender&rsquo;s clock</em> the two 1s at the end of byte 8 alerts the receiver that the important stuff is about to come.</li>
</ul>
<p>All of the Ethernet technologies provide <strong>connectionless service</strong>  (no handshaking, similar to UDP) and <strong>unrealiable service</strong> to the network layer (no ACK, drop in case of errors) which help to make Ethernet simple and cheap.
If there are gaps due to discarded Ethernet frames, the fact that the application sees the gaps or not depends on the transport layer protocol used: not with TCP (reliable data transfer), yes with UDP.</p>
<h4 id="ethernet-technologies">Ethernet Technologies</h4>
<p>There are many variants and flavors of Ethernet which have been standardized over the years by the IEEE. They vary in speed: 10 Megabit, 100 Megabit, 1000 Megabit, 10 Gigabit&hellip;
They can also vary in the type of traffic they can transport&hellip;.</p>
<h3 id="543-link-layer-switches">5.4.3 Link-Layer Switches</h3>
<p>Switch receive and forward frames. They are <strong>transparent</strong>: adapters address each other, without knowing that the switch is sitting in the middle. As they&rsquo;re output rate might be smaller than the input rate, they also have buffers to queue frames.</p>
<h3 id="forwarding-and-filtering">Forwarding and Filtering</h3>
<p><strong>Filtering</strong> is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped.
<strong>Forwarding</strong> is the switch function that the determines the interfaces to which a frame should be directed and then moves the frame to those interfaces.
Switch filtering and forwarding are done with a <strong>switch table</strong> which contains entries for some (not necessarily all) of the hosts and routers on a LAN. Each entry contains:
<code>(MAC address, interface leading toward that MAC, time at which the entry was placed in the table)</code>
Switches forward frames based on the MAC addresses rather than on IP addresses.</p>
<p>When a switch receives a frame:</p>
<ul>
<li>There is no entry in the table associated with the destination address -&gt; the packet is broadcast through all the interfaces (except the one through which the frame was received)</li>
<li>There is an entry in the table that point to the same interface through which the frame was received -&gt; The frame is discarded (filtering)</li>
<li>There is an entry in the table that point to an interface different from the one through which the frame was received -&gt; the frame is put in the output buffer preceding the interface discovered thanks to the table (forwarding)</li>
</ul>
<h4 id="self-learning">Self-Learning</h4>
<p>The switch table is build <em><strong>automatically, dynamically and autonomously</strong></em> without any intervention from a network administrator: <strong>switches are self learning</strong>.</p>
<ol>
<li>The switch table is initially empty</li>
<li>For each incoming frame, the switch stores in its table
<ol>
<li>the MAC address in the frame&rsquo;s <em>source address field</em></li>
<li>the interface from which the frame arrived</li>
<li>the current time</li>
</ol>
</li>
<li>The switch deletes an address in the table if no frame are received with that address as the source after some period (<strong>aging time</strong>) so that to eliminate unused entries from the table</li>
</ol>
<p>Thus switches are <strong>plug-and-play devices</strong>: they require no human intervention. Switches are also full-duplex, meaning any interface can send and receive at the same time.</p>
<h4 id="properties-of-link-layer-switching">Properties of Link-Layer Switching</h4>
<p>Advantages over buses or hubs:</p>
<ul>
<li><em>Elimination of collisions</em>: the switch buffers frames and never transmit more than one frame on a segment at any one time. The maximum aggregated throughput is the sum of all the switch interface rates</li>
<li><em>Heterogeneous links</em>: The switch providing isolation, different links can operate at different speeds and run over different media. Therefore switches are ideal for mixing legacy equipment with new equipment.</li>
<li><em>Management</em>: A switch can disconnect a malfunctioning adapter and a cut cable isolates only one host. Switches can gather statistics useful for debugging and planning the evolution of the network.</li>
</ul>
<h4 id="switches-versus-routers">Switches Versus Routers</h4>
<p>They are both packet switches but switches are layer-2 packet switches while routers are layer-3 packet switches.
Switches are plug-and-play, have relatively high filtering and forwarding rates.
However to <strong>prevent the cycling of broadcast frames, the active topology of a swtiched network is restricted to a spanning tree</strong>. A large network requires large ARP tables in hosts and routers and would generate substantial ARP traffic and processing. Switches are also susceptible to broadcast storms: if one goes crazy and send an endless stream of broadcast frames, the others will forward all of the frames resulting in a network collapse.
Routers network addressing is hierarchical, packets do not normally cycle and the topology is not limited to a spanning tree even when the network has redundant paths. Therefore packets can use the best path between source and destination. But routers are not plug-and-play (a host need the IP to connect) and often have a larger per-packet processing time than switches. Finally two pronunciation cause a lot of disputes.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaul1/assets/main/blog-interconnectiondevices.png" alt="interconnectiondevices"  />
</p>
<h1 id="pdf-note">PDF Noteüëá</h1>
<object data="https://spcdn.pages.dev/doc/computer_networking_notes_for_tech_placements.pdf" loading="lazy" type="application/pdf" width="100%" height="700px">
</object>
]]></content:encoded>
    </item>
    <item>
      <title>DP for Beginners</title>
      <link>https://samirpaulb.github.io/posts/dp-for-beginners/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/dp-for-beginners/</guid>
      <description>DP for Beginners</description>
      <content:encoded><![CDATA[<p><strong>Longest Increasing Subsequence variants:</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<p><strong>Partition Subset:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<p><strong>BitMasking:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<p><strong>Longest Common Subsequence Variant:</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<p><strong>Coin Change variant:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<p><strong>Matrix multiplication variant:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<p><strong>Depth First Search + DP:</strong><br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<p><strong>Misc:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
<hr>
<h1 id="sample-solutions-for-each-of-above-problem-type">Sample solutions for each of above problem type:</h1>
<hr>
<p><strong>Longest Increasing Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;LIS(n+1, 1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">				if (nums[i] &gt; nums[j])
</span></span><span class="line"><span class="cl">					LIS[i] = max(LIS[i], 1 + LIS[j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int ans = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			ans = max(ans, LIS[i]);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return ans;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Partition Subset Sum:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartition(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % 2 != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/2;
</span></span><span class="line"><span class="cl">		vector&lt;bool&gt;dp(target+1, false);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = true;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = target; j &gt;= nums[i]; j--) {
</span></span><span class="line"><span class="cl">				dp[j] = dp[j] | dp[j - nums[i]];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[target];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>BitMasking in DP:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int dp[(1&lt;&lt;16) + 2];
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		fill(dp, dp+(1&lt;&lt;16)+2, -1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % k != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = 0;
</span></span><span class="line"><span class="cl">		for (int mask = 0; mask &lt; (1&lt;&lt;n); mask++) {
</span></span><span class="line"><span class="cl">			if (dp[mask] == -1) continue;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">				if (!(mask &amp; (1 &lt;&lt; i)) &amp;&amp; dp[mask] + nums[i] &lt;= target)
</span></span><span class="line"><span class="cl">					dp[mask | (1 &lt;&lt; i)] = (dp[mask] + nums[i]) % target;
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[(1&lt;&lt;n)-1] == 0;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Longest Common Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) {
</span></span><span class="line"><span class="cl">		if (n == 0 || m == 0)
</span></span><span class="line"><span class="cl">			return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;L(n+1, vector&lt;int&gt;(m+1, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt;= n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt;= m; j++) {
</span></span><span class="line"><span class="cl">				if (i == 0 || j == 0)
</span></span><span class="line"><span class="cl">					L[i][j] = 0;
</span></span><span class="line"><span class="cl">				else if (text1[i-1] == text2[j-1])
</span></span><span class="line"><span class="cl">					L[i][j] = 1 + L[i-1][j-1];
</span></span><span class="line"><span class="cl">				else
</span></span><span class="line"><span class="cl">					L[i][j] = max(L[i][j-1], L[i-1][j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return L[n][m];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int longestCommonSubsequence(string text1, string text2) {
</span></span><span class="line"><span class="cl">		int n = text1.size();
</span></span><span class="line"><span class="cl">		int m = text2.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return longestCommonSubsequenceUtil(text1, text2, n, m);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span><span class="lnt" id="hl-4-32"><a class="lnlinks" href="#hl-4-32">32</a>
</span><span class="lnt" id="hl-4-33"><a class="lnlinks" href="#hl-4-33">33</a>
</span><span class="lnt" id="hl-4-34"><a class="lnlinks" href="#hl-4-34">34</a>
</span><span class="lnt" id="hl-4-35"><a class="lnlinks" href="#hl-4-35">35</a>
</span><span class="lnt" id="hl-4-36"><a class="lnlinks" href="#hl-4-36">36</a>
</span><span class="lnt" id="hl-4-37"><a class="lnlinks" href="#hl-4-37">37</a>
</span><span class="lnt" id="hl-4-38"><a class="lnlinks" href="#hl-4-38">38</a>
</span><span class="lnt" id="hl-4-39"><a class="lnlinks" href="#hl-4-39">39</a>
</span><span class="lnt" id="hl-4-40"><a class="lnlinks" href="#hl-4-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minCut(string s) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = s.length();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n];
</span></span><span class="line"><span class="cl">		bool P[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			P[i][i] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n-L+1; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L-1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				if (L == 2) {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]);
</span></span><span class="line"><span class="cl">				} else {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]) &amp;&amp; P[i+1][j-1];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			if (P[0][i])
</span></span><span class="line"><span class="cl">				res[i] = 0;
</span></span><span class="line"><span class="cl">			else {
</span></span><span class="line"><span class="cl">				res[i] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">					if (P[j+1][i] &amp;&amp; res[i] &gt; 1 + res[j])
</span></span><span class="line"><span class="cl">						res[i] = 1+res[j];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[n-1] == INT_MAX ? 1 : res[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Coin Change:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int coinChange(vector&lt;int&gt;&amp; coins, int amount) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = coins.size();
</span></span><span class="line"><span class="cl">		if (n == 0) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;res(amount+1, INT_MAX);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		res[0] = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j =  coins[i]; j &lt;= amount; j++) {
</span></span><span class="line"><span class="cl">				if (res[j-coins[i]] != INT_MAX)
</span></span><span class="line"><span class="cl">					res[j] = min(res[j], 1+res[j-coins[i]]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[amount] != INT_MAX ? res[amount] : -1;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix multiplication:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minScoreTriangulation(vector&lt;int&gt;&amp; A) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = A.size();        
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;dp(n, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+L &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L;
</span></span><span class="line"><span class="cl">				dp[i][j] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int k = i+1; k &lt; j; k++) {
</span></span><span class="line"><span class="cl">					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	vector&lt;vector&lt;int&gt;&gt; matrixBlockSum(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int m = mat.size();
</span></span><span class="line"><span class="cl">		int n = mat[0].size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;sum(m+1, vector&lt;int&gt;(n+1, 0));
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt;= m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 1; j &lt;= n; j++) {
</span></span><span class="line"><span class="cl">				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;res(m, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl">				int r1 = max(0, i-K); int c1 = max(0, j-K);
</span></span><span class="line"><span class="cl">				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);
</span></span><span class="line"><span class="cl">				r1++; r2++;
</span></span><span class="line"><span class="cl">				c1++; c2++;
</span></span><span class="line"><span class="cl">				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">		unordered_map&lt;int, int&gt;hm;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		hm[0] = 1;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			auto mp = hm;
</span></span><span class="line"><span class="cl">			hm.clear();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			for (auto it = mp.begin(); it != mp.end(); it++) {
</span></span><span class="line"><span class="cl">				hm[it-&gt;first + nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">				hm[it-&gt;first - nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return hm[S];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = prices.size();
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;buy(n, 0);
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;sell(n, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		buy[0] = -prices[0], sell[0] = 0;
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);
</span></span><span class="line"><span class="cl">			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return sell[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>Depth First Search +DP:<br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span><span class="lnt" id="hl-10-22"><a class="lnlinks" href="#hl-10-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int mod = 1000000007;
</span></span><span class="line"><span class="cl">	int dfs(int m, int n, int N, int r, int c,  vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) {
</span></span><span class="line"><span class="cl">		if (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n) return 1;
</span></span><span class="line"><span class="cl">		if (N == 0) return 0;
</span></span><span class="line"><span class="cl">		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int moves = 0;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[N][r][c] = moves%mod;
</span></span><span class="line"><span class="cl">		return dp[N][r][c];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findPaths(int m, int n, int N, int i, int j) {
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;dp(N+1, vector&lt;vector&lt;int&gt;&gt;(m+1, vector&lt;int&gt;(n+1, -1)));
</span></span><span class="line"><span class="cl">		return dfs(m, n, N, i, j, dp);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span><span class="lnt" id="hl-11-21"><a class="lnlinks" href="#hl-11-21">21</a>
</span><span class="lnt" id="hl-11-22"><a class="lnlinks" href="#hl-11-22">22</a>
</span><span class="lnt" id="hl-11-23"><a class="lnlinks" href="#hl-11-23">23</a>
</span><span class="lnt" id="hl-11-24"><a class="lnlinks" href="#hl-11-24">24</a>
</span><span class="lnt" id="hl-11-25"><a class="lnlinks" href="#hl-11-25">25</a>
</span><span class="lnt" id="hl-11-26"><a class="lnlinks" href="#hl-11-26">26</a>
</span><span class="lnt" id="hl-11-27"><a class="lnlinks" href="#hl-11-27">27</a>
</span><span class="lnt" id="hl-11-28"><a class="lnlinks" href="#hl-11-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool PredictTheWinner(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			res[i][i] = nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int l = 2; l &lt;= n; l++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+l-1 &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+l-1;
</span></span><span class="line"><span class="cl">				int a = (i+1 &lt;= j-1) ? res[i+1][j-1] : 0;
</span></span><span class="line"><span class="cl">				int b = (i+2 &lt;= j) ? res[i+2][j] : 0;
</span></span><span class="line"><span class="cl">				int c = (i &lt;= j-2) ? res[i][j-2] : 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int total = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			total += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[0][n-1] &gt;= total - res[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Miscellaneous:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Dynamic Programming Patterns</title>
      <link>https://samirpaulb.github.io/posts/dynamic-programming-patterns/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/dynamic-programming-patterns/</guid>
      <description>Dynamic Programming Patterns</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png" alt="Banner"  />
</p>
<p>Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.</p>
<p>Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.</p>
<h1 id="patterns">Patterns</h1>
<hr>
<p><a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target">Minimum (Maximum) Path to Reach a Target</a><br>
<a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways">Distinct Ways</a><br>
<a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals">Merging Intervals</a><br>
<a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings">DP on Strings</a><br>
<a href="https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making">Decision Making</a></p>
<h1 id="minimum-maximum-path-to-reach-a-target">Minimum (Maximum) Path to Reach a Target</h1>
<hr>
<p>Problem list: <a href="https://leetcode.com/list/55ac4kuc">https://leetcode.com/list/55ac4kuc</a></p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement">Statement</h3>
<blockquote>
<p>Given a target find minimum (maximum) cost / path / sum to reach the target.</p>
</blockquote>
<h3 id="approach">Approach</h3>
<blockquote>
<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Generate optimal solutions for all values in the target and return the value for the target.</p>
<h3 id="top-down">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int j = 0; j &lt; ways.size(); ++j) {
</span></span><span class="line"><span class="cl">    result = min(result, topDown(target - ways[j]) + cost/ path / sum);
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return memo[/*state parameters*/] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6">6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7">7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8">8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt;= target; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 0; j &lt; ways.size(); ++j) {
</span></span><span class="line"><span class="cl">       if (ways[j] &lt;= i) {
</span></span><span class="line"><span class="cl">           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return dp[target]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="similar-problems">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">746. Min Cost Climbing Stairs</a> <code>Easy</code></p>
<h3 id="top-down-1">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);
</span></span><span class="line"><span class="cl">return memo[n] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-1">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3">3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4">4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 2; i &lt;= n; ++i) {
</span></span><span class="line"><span class="cl">   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return dp[n]
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/minimum-path-sum/">64. Minimum Path Sum</a> <code>Medium</code></p>
<h3 id="top-down-2">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">return memo[i][j] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-2">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3">3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4">4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5">5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6">6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt; n; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 1; j &lt; m; ++j) {
</span></span><span class="line"><span class="cl">       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return grid[n-1][m-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code></p>
<h3 id="top-down-3">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5">5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 0; i &lt; coins.size(); ++i) {
</span></span><span class="line"><span class="cl">    if (coins[i] &lt;= target) { // check validity of a sub-problem
</span></span><span class="line"><span class="cl">        result = min(ans, CoinChange(target - coins[i], coins) + 1);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return memo[target] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-3">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1">1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2">2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3">3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4">4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5">5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6">6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int j = 1; j &lt;= amount; ++j) {
</span></span><span class="line"><span class="cl">   for (int i = 0; i &lt; coins.size(); ++i) {
</span></span><span class="line"><span class="cl">       if (coins[i] &lt;= j) {
</span></span><span class="line"><span class="cl">           dp[j] = min(dp[j], dp[j - coins[i]] + 1);
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/minimum-falling-path-sum/">931. Minimum Falling Path Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">983. Minimum Cost For Tickets</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/2-keys-keyboard/">650. 2 Keys Keyboard</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/perfect-squares/">279. Perfect Squares</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/last-stone-weight-ii/">1049. Last Stone Weight II</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/triangle/">120. Triangle</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/ones-and-zeroes/">474. Ones and Zeroes</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/maximal-square/">221. Maximal Square</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/">1240. Tiling a Rectangle with the Fewest Squares</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/dungeon-game/">174. Dungeon Game</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/minimum-number-of-refueling-stops/">871. Minimum Number of Refueling Stops</a> <code>Hard</code></p>
<h1 id="distinct-ways">Distinct Ways</h1>
<hr>
<p>Problem List: <a href="https://leetcode.com/list/55ajm50i">https://leetcode.com/list/55ajm50i</a></p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement-1">Statement</h3>
<blockquote>
<p>Given a target find a number of distinct ways to reach the target.</p>
</blockquote>
<h3 id="approach-1">Approach</h3>
<blockquote>
<p>Sum all possible ways to reach the current state.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Generate sum for all values in the target and return the value for the target.</p>
<h3 id="top-down-4">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int j = 0; j &lt; ways.size(); ++j) {
</span></span><span class="line"><span class="cl">    result += topDown(target - ways[j]);
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return memo[/*state parameters*/] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-4">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4">4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5">5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6">6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7">7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8">8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt;= target; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 0; j &lt; ways.size(); ++j) {
</span></span><span class="line"><span class="cl">       if (ways[j] &lt;= i) {
</span></span><span class="line"><span class="cl">           dp[i] += dp[i - ways[j]];
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return dp[target]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="similar-problems-1">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a> <code>Easy</code></p>
<h3 id="top-down-5">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2">2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">return memo[n] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-5">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span><span class="lnt" id="hl-13-2"><a class="lnlinks" href="#hl-13-2">2</a>
</span><span class="lnt" id="hl-13-3"><a class="lnlinks" href="#hl-13-3">3</a>
</span><span class="lnt" id="hl-13-4"><a class="lnlinks" href="#hl-13-4">4</a>
</span><span class="lnt" id="hl-13-5"><a class="lnlinks" href="#hl-13-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int stair = 2; stair &lt;= n; ++stair) {
</span></span><span class="line"><span class="cl">   for (int step = 1; step &lt;= 2; ++step) {
</span></span><span class="line"><span class="cl">       dp[stair] += dp[stair-step];   
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/unique-paths/">62. Unique Paths</a> <code>Medium</code></p>
<h3 id="top-down-6">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span><span class="lnt" id="hl-14-3"><a class="lnlinks" href="#hl-14-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">return memo[x][y] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-6">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span><span class="lnt" id="hl-15-2"><a class="lnlinks" href="#hl-15-2">2</a>
</span><span class="lnt" id="hl-15-3"><a class="lnlinks" href="#hl-15-3">3</a>
</span><span class="lnt" id="hl-15-4"><a class="lnlinks" href="#hl-15-4">4</a>
</span><span class="lnt" id="hl-15-5"><a class="lnlinks" href="#hl-15-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt; m; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 1; j &lt; n; ++j) {
</span></span><span class="line"><span class="cl">       dp[i][j] = dp[i][j-1] + dp[i-1][j];
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">1155. Number of Dice Rolls With Target Sum</a> <code>Medium</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int rep = 1; rep &lt;= d; ++rep) {
</span></span><span class="line"><span class="cl">   vector&lt;int&gt; new_ways(target+1);
</span></span><span class="line"><span class="cl">   for (int already = 0; already &lt;= target; ++already) {
</span></span><span class="line"><span class="cl">       for (int pipe = 1; pipe &lt;= f; ++pipe) {
</span></span><span class="line"><span class="cl">           if (already - pipe &gt;= 0) {
</span></span><span class="line"><span class="cl">               new_ways[already] += ways[already - pipe];
</span></span><span class="line"><span class="cl">               new_ways[already] %= mod;
</span></span><span class="line"><span class="cl">           }
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   ways = new_ways;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Note</strong></p>
<p>Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.</p>
<p><a href="https://leetcode.com/problems/knight-probability-in-chessboard/">688. Knight Probability in Chessboard</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/target-sum/">494. Target Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/combination-sum-iv/">377. Combination Sum IV</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/knight-dialer/">935. Knight Dialer</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/dice-roll-simulation/">1223. Dice Roll Simulation</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/soup-servings/">808. Soup Servings</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/domino-and-tromino-tiling/">790. Domino and Tromino Tiling</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/">801. Minimum Swaps To Make Sequences Increasing</a></p>
<p><a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">673. Number of Longest Increasing Subsequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/unique-paths-ii/">63. Unique Paths II</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/out-of-boundary-paths/">576. Out of Boundary Paths</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/">1269. Number of Ways to Stay in the Same Place After Some Steps</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/count-vowels-permutation/">1220. Count Vowels Permutation</a> <code>Hard</code></p>
<h1 id="merging-intervals">Merging Intervals</h1>
<hr>
<p>Problem List: <a href="https://leetcode.com/list/55aj8s16">https://leetcode.com/list/55aj8s16</a></p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement-2">Statement</h3>
<blockquote>
<p>Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.</p>
</blockquote>
<h3 id="approach-2">Approach</h3>
<blockquote>
<p>Find all optimal solutions for every interval and return the best possible answer.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1">1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// from i to j
</span></span><span class="line"><span class="cl">dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Get the best from the left and right sides and add a solution for the current position.</p>
<h3 id="top-down-7">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int k = i; k &lt;= j; ++k) {
</span></span><span class="line"><span class="cl">    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return memo[/*state parameters*/] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-7">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1"> 1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2"> 2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3"> 3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4"> 4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5"> 5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6"> 6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7"> 7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8"> 8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9"> 9</a>
</span><span class="lnt" id="hl-19-10"><a class="lnlinks" href="#hl-19-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for(int l = 1; l&lt;n; l++) {
</span></span><span class="line"><span class="cl">   for(int i = 0; i&lt;n-l; i++) {
</span></span><span class="line"><span class="cl">       int j = i+l;
</span></span><span class="line"><span class="cl">       for(int k = i; k&lt;j; k++) {
</span></span><span class="line"><span class="cl">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return dp[0][n-1];
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1"> 1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2"> 2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3"> 3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4"> 4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5"> 5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6"> 6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7"> 7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8"> 8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9"> 9</a>
</span><span class="lnt" id="hl-20-10"><a class="lnlinks" href="#hl-20-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for(int l = 1; l&lt;n; l++) {
</span></span><span class="line"><span class="cl">   for(int i = 0; i&lt;n-l; i++) {
</span></span><span class="line"><span class="cl">       int j = i+l;
</span></span><span class="line"><span class="cl">       for(int k = i; k&lt;j; k++) {
</span></span><span class="line"><span class="cl">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">return dp[0][n-1]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="similar-problems-2">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">1130. Minimum Cost Tree From Leaf Values</a> <code>Medium</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1">1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2">2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3">3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4">4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5">5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6">6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7">7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8">8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int l = 1; l &lt; n; ++l) {
</span></span><span class="line"><span class="cl">   for (int i = 0; i &lt; n - l; ++i) {
</span></span><span class="line"><span class="cl">       int j = i + l;
</span></span><span class="line"><span class="cl">       dp[i][j] = INT_MAX;
</span></span><span class="line"><span class="cl">       for (int k = i; k &lt; j; ++k) {
</span></span><span class="line"><span class="cl">           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">1039. Minimum Score Triangulation of Polygon</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/remove-boxes/">546. Remove Boxes</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-cost-to-merge-stones/">1000. Minimum Cost to Merge Stones</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/burst-balloons/">312. Burst Balloons</a> <code>Hard</code></p>
<h3 id="top-down-8">Top-Down</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int k = i; k &lt;= j; ++k) {
</span></span><span class="line"><span class="cl">    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return memo[i][j] = result;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bottom-up-8">Bottom-Up</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1">1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2">2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3">3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4">4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5">5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6">6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7">7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8">8</a>
</span><span class="lnt" id="hl-23-9"><a class="lnlinks" href="#hl-23-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for(int l = 1; l &lt; n; l++) {
</span></span><span class="line"><span class="cl">    for(int i = 0; i &lt; n-l; i++) {
</span></span><span class="line"><span class="cl">        int j = i+l;
</span></span><span class="line"><span class="cl">        for(int k = i; k &lt;= j; k++) {
</span></span><span class="line"><span class="cl">            dp[i][j] = max(dp[i][j], (((k&gt;i &amp;&amp; k&gt;0) ? dp[i][k-1] : 0) + (i&gt;0 ? nums[i-1] : 1) * nums[k] * (j&lt;n-1 ? nums[j+1] : 1) + ((k&lt;j &amp;&amp; k&lt;n-1) ? dp[k+1][j] : 0)));
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">return dp[0][n-1];
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/">375. Guess Number Higher or Lower II</a> <code>Medium</code></p>
<h1 id="dp-on-strings">DP on Strings</h1>
<hr>
<p>Problem List: <a href="https://leetcode.com/list/55afh7m7">https://leetcode.com/list/55afh7m7</a></p>
<p>General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big</p>
<h3 id="statement-3">Statement</h3>
<blockquote>
<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>some result</code>.</p>
</blockquote>
<h3 id="approach-3">Approach</h3>
<blockquote>
<p>Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-24-1"><a class="lnlinks" href="#hl-24-1"> 1</a>
</span><span class="lnt" id="hl-24-2"><a class="lnlinks" href="#hl-24-2"> 2</a>
</span><span class="lnt" id="hl-24-3"><a class="lnlinks" href="#hl-24-3"> 3</a>
</span><span class="lnt" id="hl-24-4"><a class="lnlinks" href="#hl-24-4"> 4</a>
</span><span class="lnt" id="hl-24-5"><a class="lnlinks" href="#hl-24-5"> 5</a>
</span><span class="lnt" id="hl-24-6"><a class="lnlinks" href="#hl-24-6"> 6</a>
</span><span class="lnt" id="hl-24-7"><a class="lnlinks" href="#hl-24-7"> 7</a>
</span><span class="lnt" id="hl-24-8"><a class="lnlinks" href="#hl-24-8"> 8</a>
</span><span class="lnt" id="hl-24-9"><a class="lnlinks" href="#hl-24-9"> 9</a>
</span><span class="lnt" id="hl-24-10"><a class="lnlinks" href="#hl-24-10">10</a>
</span><span class="lnt" id="hl-24-11"><a class="lnlinks" href="#hl-24-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// i - indexing string s1
</span></span><span class="line"><span class="cl">// j - indexing string s2
</span></span><span class="line"><span class="cl">for (int i = 1; i &lt;= n; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 1; j &lt;= m; ++j) {
</span></span><span class="line"><span class="cl">       if (s1[i-1] == s2[j-1]) {
</span></span><span class="line"><span class="cl">           dp[i][j] = /*code*/;
</span></span><span class="line"><span class="cl">       } else {
</span></span><span class="line"><span class="cl">           dp[i][j] = /*code*/;
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>If you are given one string <code>s</code> the approach may little vary</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-25-1"><a class="lnlinks" href="#hl-25-1"> 1</a>
</span><span class="lnt" id="hl-25-2"><a class="lnlinks" href="#hl-25-2"> 2</a>
</span><span class="lnt" id="hl-25-3"><a class="lnlinks" href="#hl-25-3"> 3</a>
</span><span class="lnt" id="hl-25-4"><a class="lnlinks" href="#hl-25-4"> 4</a>
</span><span class="lnt" id="hl-25-5"><a class="lnlinks" href="#hl-25-5"> 5</a>
</span><span class="lnt" id="hl-25-6"><a class="lnlinks" href="#hl-25-6"> 6</a>
</span><span class="lnt" id="hl-25-7"><a class="lnlinks" href="#hl-25-7"> 7</a>
</span><span class="lnt" id="hl-25-8"><a class="lnlinks" href="#hl-25-8"> 8</a>
</span><span class="lnt" id="hl-25-9"><a class="lnlinks" href="#hl-25-9"> 9</a>
</span><span class="lnt" id="hl-25-10"><a class="lnlinks" href="#hl-25-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int l = 1; l &lt; n; ++l) {
</span></span><span class="line"><span class="cl">   for (int i = 0; i &lt; n-l; ++i) {
</span></span><span class="line"><span class="cl">       int j = i + l;
</span></span><span class="line"><span class="cl">       if (s[i] == s[j]) {
</span></span><span class="line"><span class="cl">           dp[i][j] = /*code*/;
</span></span><span class="line"><span class="cl">       } else {
</span></span><span class="line"><span class="cl">           dp[i][j] = /*code*/;
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a> <code>Medium</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-26-1"><a class="lnlinks" href="#hl-26-1">1</a>
</span><span class="lnt" id="hl-26-2"><a class="lnlinks" href="#hl-26-2">2</a>
</span><span class="lnt" id="hl-26-3"><a class="lnlinks" href="#hl-26-3">3</a>
</span><span class="lnt" id="hl-26-4"><a class="lnlinks" href="#hl-26-4">4</a>
</span><span class="lnt" id="hl-26-5"><a class="lnlinks" href="#hl-26-5">5</a>
</span><span class="lnt" id="hl-26-6"><a class="lnlinks" href="#hl-26-6">6</a>
</span><span class="lnt" id="hl-26-7"><a class="lnlinks" href="#hl-26-7">7</a>
</span><span class="lnt" id="hl-26-8"><a class="lnlinks" href="#hl-26-8">8</a>
</span><span class="lnt" id="hl-26-9"><a class="lnlinks" href="#hl-26-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt;= n; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 1; j &lt;= m; ++j) {
</span></span><span class="line"><span class="cl">       if (text1[i-1] == text2[j-1]) {
</span></span><span class="line"><span class="cl">           dp[i][j] = dp[i-1][j-1] + 1;
</span></span><span class="line"><span class="cl">       } else {
</span></span><span class="line"><span class="cl">           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a> <code>Medium</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-27-1"><a class="lnlinks" href="#hl-27-1"> 1</a>
</span><span class="lnt" id="hl-27-2"><a class="lnlinks" href="#hl-27-2"> 2</a>
</span><span class="lnt" id="hl-27-3"><a class="lnlinks" href="#hl-27-3"> 3</a>
</span><span class="lnt" id="hl-27-4"><a class="lnlinks" href="#hl-27-4"> 4</a>
</span><span class="lnt" id="hl-27-5"><a class="lnlinks" href="#hl-27-5"> 5</a>
</span><span class="lnt" id="hl-27-6"><a class="lnlinks" href="#hl-27-6"> 6</a>
</span><span class="lnt" id="hl-27-7"><a class="lnlinks" href="#hl-27-7"> 7</a>
</span><span class="lnt" id="hl-27-8"><a class="lnlinks" href="#hl-27-8"> 8</a>
</span><span class="lnt" id="hl-27-9"><a class="lnlinks" href="#hl-27-9"> 9</a>
</span><span class="lnt" id="hl-27-10"><a class="lnlinks" href="#hl-27-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int l = 1; l &lt; n; ++l) {
</span></span><span class="line"><span class="cl">   for (int i = 0; i &lt; n-l; ++i) {
</span></span><span class="line"><span class="cl">       int j = i + l;
</span></span><span class="line"><span class="cl">       if (s[i] == s[j] &amp;&amp; dp[i+1][j-1] == j-i-1) {
</span></span><span class="line"><span class="cl">           dp[i][j] = dp[i+1][j-1] + 2;
</span></span><span class="line"><span class="cl">       } else {
</span></span><span class="line"><span class="cl">           dp[i][j] = 0;
</span></span><span class="line"><span class="cl">       }
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/longest-palindromic-subsequence/">516. Longest Palindromic Subsequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/shortest-common-supersequence/">1092. Shortest Common Supersequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/edit-distance/">72. Edit Distance</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/distinct-subsequences/">115. Distinct Subsequences</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">712. Minimum ASCII Delete Sum for Two Strings</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a> <code>Medium</code></p>
<h1 id="decision-making">Decision Making</h1>
<hr>
<p>Problem List: <a href="https://leetcode.com/list/55af7bu7">https://leetcode.com/list/55af7bu7</a></p>
<p>The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.</p>
<h3 id="statement-4">Statement</h3>
<blockquote>
<p>Given a set of values find an answer with an option to choose or ignore the current value.</p>
</blockquote>
<h3 id="approach-4">Approach</h3>
<blockquote>
<p>If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-28-1"><a class="lnlinks" href="#hl-28-1">1</a>
</span><span class="lnt" id="hl-28-2"><a class="lnlinks" href="#hl-28-2">2</a>
</span><span class="lnt" id="hl-28-3"><a class="lnlinks" href="#hl-28-3">3</a>
</span><span class="lnt" id="hl-28-4"><a class="lnlinks" href="#hl-28-4">4</a>
</span><span class="lnt" id="hl-28-5"><a class="lnlinks" href="#hl-28-5">5</a>
</span><span class="lnt" id="hl-28-6"><a class="lnlinks" href="#hl-28-6">6</a>
</span><span class="lnt" id="hl-28-7"><a class="lnlinks" href="#hl-28-7">7</a>
</span><span class="lnt" id="hl-28-8"><a class="lnlinks" href="#hl-28-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// i - indexing a set of values
</span></span><span class="line"><span class="cl">// j - options to ignore j values
</span></span><span class="line"><span class="cl">for (int i = 1; i &lt; n; ++i) {
</span></span><span class="line"><span class="cl">   for (int j = 1; j &lt;= k; ++j) {
</span></span><span class="line"><span class="cl">       dp[i][j] = max({dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]});
</span></span><span class="line"><span class="cl">       dp[i][j-1] = max({dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]});
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/house-robber/">198. House Robber</a> <code>Easy</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-29-1"><a class="lnlinks" href="#hl-29-1">1</a>
</span><span class="lnt" id="hl-29-2"><a class="lnlinks" href="#hl-29-2">2</a>
</span><span class="lnt" id="hl-29-3"><a class="lnlinks" href="#hl-29-3">3</a>
</span><span class="lnt" id="hl-29-4"><a class="lnlinks" href="#hl-29-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for (int i = 1; i &lt; n; ++i) {
</span></span><span class="line"><span class="cl">   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);
</span></span><span class="line"><span class="cl">   dp[i][0] = dp[i-1][1];
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a> <code>Easy</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. Best Time to Buy and Sell Stock with Transaction Fee</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. Best Time to Buy and Sell Stock with Cooldown</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">123. Best Time to Buy and Sell Stock III</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">188. Best Time to Buy and Sell Stock IV</a> <code>Hard</code></p>
<p>I hope these tips will be helpful üòä</p>
]]></content:encoded>
    </item>
    <item>
      <title>Embed MusicApp</title>
      <link>https://samirpaulb.github.io/posts/embed-music/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/embed-music/</guid>
      <description>Embed MusicApp</description>
      <content:encoded><![CDATA[<p>Embed <a href="https://samirpaulb.github.io/music/embed"><b>samirpaul.in/music/embed</b></a> music player(Lofi Study Music) to any website:</p>
<h3 id="demo">Demo:</h3>
<iframe src="https://samirpaulb.github.io/music/embed/index.html"
  title="Embed MusicApp"
	frameborder="0"
	loading="lazy"
	marginheight="0"
	marginwidth="0"
	width="100%"
	height="223"
	scrolling="no">
</iframe>
<h3 id="code">Code:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">iframe</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://samirpaulb.github.io/music/embed&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">title</span><span class="o">=</span><span class="s">&#34;Embed MusicApp&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">frameborder</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">loading</span><span class="o">=</span><span class="s">&#34;lazy&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">marginheight</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">marginwidth</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">width</span><span class="o">=</span><span class="s">&#34;100%&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">height</span><span class="o">=</span><span class="s">&#34;223&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">scrolling</span><span class="o">=</span><span class="s">&#34;no&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">iframe</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Google Programmable Search Engine</title>
      <link>https://samirpaulb.github.io/posts/google-programmable-search-engine/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/google-programmable-search-engine/</guid>
      <description>Google Programmable Search Engine</description>
      <content:encoded><![CDATA[<p>Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they&rsquo;re looking for. Because Programmable Search Engine is based on Google&rsquo;s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:</p>
<ul>
<li>Apply your site&rsquo;s look and feel to the search box and results page</li>
<li>Use search features such as refinements, autocomplete, and promotions to enhance your users&rsquo; search experience</li>
<li>Understand your users&rsquo; behavior by linking your search engine with  <a href="https://google.com/analytics/">Google Analytics</a></li>
<li>Make money from your search engine with  <a href="https://google.com/adsense">Google AdSense</a></li>
</ul>
<h3 id="demo">Demo:</h3>
<script async src="https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae">
</script>
<div class="gcse-search"></div>
<hr>
<h3 id="how-is-programmable-search-engine-different-from-google-web-search">How is Programmable Search Engine different from Google Web Search?</h3>
<p>You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:</p>
<ul>
<li>Emphasizes your results over anything else on the web</li>
<li>Doesn&rsquo;t include some  <a href="https://support.google.com/websearch#topic=3378866">Google Web Search features</a>, such as personalized results</li>
<li>May have a subset of results from the Google index if you include more than ten sites</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Graph For Beginners</title>
      <link>https://samirpaulb.github.io/posts/graph-for-beginners/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/graph-for-beginners/</guid>
      <description>Graph For Beginners</description>
      <content:encoded><![CDATA[<p><strong>Graph Problems For Practice</strong></p>
<p>Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.</p>
<p>List: <a href="https://leetcode.com/list/x1wy4de7">https://leetcode.com/list/x1wy4de7</a></p>
<ol>
<li>
<p><strong>Union Find:</strong></p>
<p>Identify if problems talks about finding groups or components.</p>
<p><a href="https://leetcode.com/problems/friend-circles/">https://leetcode.com/problems/friend-circles/</a><br>
<a href="https://leetcode.com/problems/redundant-connection/">https://leetcode.com/problems/redundant-connection/</a><br>
<a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a><br>
<a href="https://leetcode.com/problems/number-of-operations-to-make-network-connected/">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a><br>
<a href="https://leetcode.com/problems/satisfiability-of-equality-equations/">https://leetcode.com/problems/satisfiability-of-equality-equations/</a><br>
<a href="https://leetcode.com/problems/accounts-merge/">https://leetcode.com/problems/accounts-merge/</a></p>
<p>All the above problems can be solved by Union Find algorithm with minor tweaks.<br>
Below is a standard template for union find problems.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt;parent;
</span></span><span class="line"><span class="cl"> 	int find(int x) {
</span></span><span class="line"><span class="cl"> 		return parent[x] == x ? x : find(parent[x]);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int n = edges.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		parent.resize(n+1, 0);
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt;= n; i++)
</span></span><span class="line"><span class="cl"> 			parent[i] = i;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res(2, 0);
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl"> 			int x = find(edges[i][0]);
</span></span><span class="line"><span class="cl"> 			int y = find(edges[i][1]);
</span></span><span class="line"><span class="cl"> 			if (x != y)
</span></span><span class="line"><span class="cl"> 				parent[y] = x;
</span></span><span class="line"><span class="cl"> 			else {
</span></span><span class="line"><span class="cl"> 				res[0] = edges[i][0];
</span></span><span class="line"><span class="cl"> 				res[1] = edges[i][1];
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Depth First Search</strong></p>
<ol>
<li>
<p><strong>Start DFS from nodes at boundary:</strong><br>
<a href="https://leetcode.com/problems/surrounded-regions/">https://leetcode.com/problems/surrounded-regions/</a><br>
<a href="https://leetcode.com/problems/number-of-enclaves/">https://leetcode.com/problems/number-of-enclaves/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span><span class="lnt" id="hl-1-35"><a class="lnlinks" href="#hl-1-35">35</a>
</span><span class="lnt" id="hl-1-36"><a class="lnlinks" href="#hl-1-36">36</a>
</span><span class="lnt" id="hl-1-37"><a class="lnlinks" href="#hl-1-37">37</a>
</span><span class="lnt" id="hl-1-38"><a class="lnlinks" href="#hl-1-38">38</a>
</span><span class="lnt" id="hl-1-39"><a class="lnlinks" href="#hl-1-39">39</a>
</span><span class="lnt" id="hl-1-40"><a class="lnlinks" href="#hl-1-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	int rows, cols;
</span></span><span class="line"><span class="cl"> 	void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; A, int i, int j) {
</span></span><span class="line"><span class="cl"> 		if (i &lt; 0 || j &lt; 0 || i &gt;= rows || j &gt;= cols)
</span></span><span class="line"><span class="cl"> 			return;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (A[i][j] != 1) 
</span></span><span class="line"><span class="cl"> 			return;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		A[i][j] = -1;
</span></span><span class="line"><span class="cl"> 		dfs(A, i+1, j);
</span></span><span class="line"><span class="cl"> 		dfs(A, i-1, j);
</span></span><span class="line"><span class="cl"> 		dfs(A, i, j+1);
</span></span><span class="line"><span class="cl"> 		dfs(A, i, j-1);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	int numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; A) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (A.empty()) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		rows = A.size();
</span></span><span class="line"><span class="cl"> 		cols = A[0].size();
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl"> 				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)
</span></span><span class="line"><span class="cl"> 					dfs(A, i, j);
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int ans = 0;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl"> 				if (A[i][j] == 1)
</span></span><span class="line"><span class="cl"> 					ans++;
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return ans;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Time taken to reach all nodes or share information to all graph nodes:</strong><br>
<a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	void dfs(unordered_map&lt;int, vector&lt;int&gt;&gt;&amp;hm, int i, vector&lt;int&gt;&amp; informTime, int &amp;res, int curr) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		curr += informTime[i];
</span></span><span class="line"><span class="cl"> 		res = max(res, curr);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = hm[i].begin(); it != hm[i].end(); it++)
</span></span><span class="line"><span class="cl"> 			dfs(hm, *it, informTime, res, curr);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	int numOfMinutes(int n, int headID, vector&lt;int&gt;&amp; manager, vector&lt;int&gt;&amp; informTime) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		unordered_map&lt;int, vector&lt;int&gt;&gt;hm;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl"> 			if (manager[i] != -1) hm[manager[i]].push_back(i);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int res = 0, curr = 0;
</span></span><span class="line"><span class="cl"> 		dfs(hm, headID, informTime, res, curr);
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>DFS from each unvisited node/Island problems</strong><br>
<a href="https://leetcode.com/problems/number-of-closed-islands/">https://leetcode.com/problems/number-of-closed-islands/</a><br>
<a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a><br>
<a href="https://leetcode.com/problems/keys-and-rooms/">https://leetcode.com/problems/keys-and-rooms/</a><br>
<a href="https://leetcode.com/problems/max-area-of-island/">https://leetcode.com/problems/max-area-of-island/</a><br>
<a href="https://leetcode.com/problems/flood-fill/">https://leetcode.com/problems/flood-fill/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span><span class="lnt" id="hl-3-30"><a class="lnlinks" href="#hl-3-30">30</a>
</span><span class="lnt" id="hl-3-31"><a class="lnlinks" href="#hl-3-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int i, int j, int m, int n) {
</span></span><span class="line"><span class="cl"> 		if (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return;
</span></span><span class="line"><span class="cl"> 		if (grid[i][j] == &#39;0&#39; || visited[i][j]) return;
</span></span><span class="line"><span class="cl"> 		visited[i][j] = true;
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i+1, j, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i, j+1, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i-1, j, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i, j-1, m, n);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 	int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {
</span></span><span class="line"><span class="cl"> 		if (grid.empty()) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int m = grid.size();
</span></span><span class="line"><span class="cl"> 		int n = grid[0].size();
</span></span><span class="line"><span class="cl"> 		vector&lt;vector&lt;bool&gt;&gt;visited(m, vector&lt;bool&gt;(n, false));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int res = 0;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; m; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl"> 				if (grid[i][j] == &#39;1&#39; &amp;&amp; !visited[i][j]) {
</span></span><span class="line"><span class="cl"> 					dfs(grid, visited, i, j, m, n);
</span></span><span class="line"><span class="cl"> 					res++;
</span></span><span class="line"><span class="cl"> 				}
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> 	};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Cycle Find:</strong><br>
<a href="https://leetcode.com/problems/find-eventual-safe-states/">https://leetcode.com/problems/find-eventual-safe-states/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	bool dfs(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int v, vector&lt;int&gt;&amp; dp) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (dp[v])
</span></span><span class="line"><span class="cl"> 			return dp[v] == 1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		dp[v] = -1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = graph[v].begin(); it != graph[v].end(); it++)
</span></span><span class="line"><span class="cl"> 			if (!dfs(graph, *it, dp))
</span></span><span class="line"><span class="cl"> 				return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		dp[v] = 1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return true;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int V = graph.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res;
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;dp(V, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {    
</span></span><span class="line"><span class="cl"> 			if (dfs(graph, i, dp))
</span></span><span class="line"><span class="cl"> 				res.push_back(i);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span></code></pre></td></tr></table>
</div>
</div><p>};</p>
</li>
</ol>
</li>
<li>
<p><strong>Breadth First Search</strong></p>
<ol>
<li>
<p><strong>Shortest Path:</strong><br>
<a href="https://leetcode.com/problems/01-matrix/">https://leetcode.com/problems/01-matrix/</a><br>
<a href="https://leetcode.com/problems/as-far-from-land-as-possible/">https://leetcode.com/problems/as-far-from-land-as-possible/</a><br>
<a href="https://leetcode.com/problems/rotting-oranges/">https://leetcode.com/problems/rotting-oranges/</a><br>
<a href="https://leetcode.com/problems/shortest-path-in-binary-matrix/">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></p>
<p>Start BFS from nodes from which shortest path is asked for.<br>
Below is the sample BFS approach to find the path.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span><span class="lnt" id="hl-5-22"><a class="lnlinks" href="#hl-5-22">22</a>
</span><span class="lnt" id="hl-5-23"><a class="lnlinks" href="#hl-5-23">23</a>
</span><span class="lnt" id="hl-5-24"><a class="lnlinks" href="#hl-5-24">24</a>
</span><span class="lnt" id="hl-5-25"><a class="lnlinks" href="#hl-5-25">25</a>
</span><span class="lnt" id="hl-5-26"><a class="lnlinks" href="#hl-5-26">26</a>
</span><span class="lnt" id="hl-5-27"><a class="lnlinks" href="#hl-5-27">27</a>
</span><span class="lnt" id="hl-5-28"><a class="lnlinks" href="#hl-5-28">28</a>
</span><span class="lnt" id="hl-5-29"><a class="lnlinks" href="#hl-5-29">29</a>
</span><span class="lnt" id="hl-5-30"><a class="lnlinks" href="#hl-5-30">30</a>
</span><span class="lnt" id="hl-5-31"><a class="lnlinks" href="#hl-5-31">31</a>
</span><span class="lnt" id="hl-5-32"><a class="lnlinks" href="#hl-5-32">32</a>
</span><span class="lnt" id="hl-5-33"><a class="lnlinks" href="#hl-5-33">33</a>
</span><span class="lnt" id="hl-5-34"><a class="lnlinks" href="#hl-5-34">34</a>
</span><span class="lnt" id="hl-5-35"><a class="lnlinks" href="#hl-5-35">35</a>
</span><span class="lnt" id="hl-5-36"><a class="lnlinks" href="#hl-5-36">36</a>
</span><span class="lnt" id="hl-5-37"><a class="lnlinks" href="#hl-5-37">37</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">	vector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (matrix.empty()) return matrix;
</span></span><span class="line"><span class="cl">		int rows = matrix.size();
</span></span><span class="line"><span class="cl">		int cols = matrix[0].size();
</span></span><span class="line"><span class="cl">		queue&lt;pair&lt;int, int&gt;&gt;pq;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl">				if (matrix[i][j] == 0) {
</span></span><span class="line"><span class="cl">					pq.push({i-1, j}), pq.push({i+1, j}), pq.push({i, j-1}), pq.push({i, j+1}); 
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;bool&gt;&gt;visited(rows, vector&lt;bool&gt;(cols, false));
</span></span><span class="line"><span class="cl">		int steps = 0;
</span></span><span class="line"><span class="cl">		while (!pq.empty()) {
</span></span><span class="line"><span class="cl">			steps++;
</span></span><span class="line"><span class="cl">			int size = pq.size();
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; size; i++) {
</span></span><span class="line"><span class="cl">				auto front = pq.front();
</span></span><span class="line"><span class="cl">				int l = front.first;
</span></span><span class="line"><span class="cl">				int r = front.second;
</span></span><span class="line"><span class="cl">				pq.pop();
</span></span><span class="line"><span class="cl">				if (l &gt;= 0 &amp;&amp; r &gt;= 0 &amp;&amp; l &lt; rows &amp;&amp; r &lt; cols &amp;&amp; !visited[l][r] &amp;&amp; matrix[l][r] == 1) {
</span></span><span class="line"><span class="cl">					visited[l][r] = true;
</span></span><span class="line"><span class="cl">					matrix[l][r] = steps;
</span></span><span class="line"><span class="cl">					pq.push({l-1, r}), pq.push({l+1, r}), pq.push({l, r-1}), pq.push({l, r+1});
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return matrix;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
</li>
<li>
<p><strong>Graph coloring/Bipartition</strong><br>
<a href="https://leetcode.com/problems/possible-bipartition/">https://leetcode.com/problems/possible-bipartition/</a><br>
<a href="https://leetcode.com/problems/is-graph-bipartite/">https://leetcode.com/problems/is-graph-bipartite/</a></p>
<p>Problems asks to check if its possible to divide the graph nodes into 2 groups<br>
Apply BFS for same. Below is a sample graph coloring approach.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span><span class="lnt" id="hl-6-21"><a class="lnlinks" href="#hl-6-21">21</a>
</span><span class="lnt" id="hl-6-22"><a class="lnlinks" href="#hl-6-22">22</a>
</span><span class="lnt" id="hl-6-23"><a class="lnlinks" href="#hl-6-23">23</a>
</span><span class="lnt" id="hl-6-24"><a class="lnlinks" href="#hl-6-24">24</a>
</span><span class="lnt" id="hl-6-25"><a class="lnlinks" href="#hl-6-25">25</a>
</span><span class="lnt" id="hl-6-26"><a class="lnlinks" href="#hl-6-26">26</a>
</span><span class="lnt" id="hl-6-27"><a class="lnlinks" href="#hl-6-27">27</a>
</span><span class="lnt" id="hl-6-28"><a class="lnlinks" href="#hl-6-28">28</a>
</span><span class="lnt" id="hl-6-29"><a class="lnlinks" href="#hl-6-29">29</a>
</span><span class="lnt" id="hl-6-30"><a class="lnlinks" href="#hl-6-30">30</a>
</span><span class="lnt" id="hl-6-31"><a class="lnlinks" href="#hl-6-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 		bool isBipartite(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {
</span></span><span class="line"><span class="cl"> 			int n = graph.size();
</span></span><span class="line"><span class="cl"> 			vector&lt;int&gt;color(n, -1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 			for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl"> 				if (color[i] != -1) continue;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 				color[i] = 1;
</span></span><span class="line"><span class="cl"> 				queue&lt;int&gt;q;
</span></span><span class="line"><span class="cl"> 				q.push(i);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 				while (!q.empty()) {
</span></span><span class="line"><span class="cl"> 					int t = q.front();
</span></span><span class="line"><span class="cl"> 					q.pop();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 					for (int j = 0; j &lt; graph[t].size(); j++) {
</span></span><span class="line"><span class="cl"> 						if (color[graph[t][j]] == -1) {
</span></span><span class="line"><span class="cl"> 							color[graph[t][j]] = 1-color[t];
</span></span><span class="line"><span class="cl"> 							q.push(graph[t][j]);
</span></span><span class="line"><span class="cl"> 						} else if (color[graph[t][j]] == color[t]) {
</span></span><span class="line"><span class="cl"> 							return false;
</span></span><span class="line"><span class="cl"> 						}
</span></span><span class="line"><span class="cl"> 					}
</span></span><span class="line"><span class="cl"> 				}
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 			return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl"> 	};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Topological Sort:</strong><br>
Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0</p>
<p><a href="https://leetcode.com/problems/course-schedule/">https://leetcode.com/problems/course-schedule/</a><br>
<a href="https://leetcode.com/problems/course-schedule-ii/">https://leetcode.com/problems/course-schedule-ii/</a></p>
<p>Below is sample approach. Find if cycle is present, if not apply topological sort.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span><span class="lnt" id="hl-7-30"><a class="lnlinks" href="#hl-7-30">30</a>
</span><span class="lnt" id="hl-7-31"><a class="lnlinks" href="#hl-7-31">31</a>
</span><span class="lnt" id="hl-7-32"><a class="lnlinks" href="#hl-7-32">32</a>
</span><span class="lnt" id="hl-7-33"><a class="lnlinks" href="#hl-7-33">33</a>
</span><span class="lnt" id="hl-7-34"><a class="lnlinks" href="#hl-7-34">34</a>
</span><span class="lnt" id="hl-7-35"><a class="lnlinks" href="#hl-7-35">35</a>
</span><span class="lnt" id="hl-7-36"><a class="lnlinks" href="#hl-7-36">36</a>
</span><span class="lnt" id="hl-7-37"><a class="lnlinks" href="#hl-7-37">37</a>
</span><span class="lnt" id="hl-7-38"><a class="lnlinks" href="#hl-7-38">38</a>
</span><span class="lnt" id="hl-7-39"><a class="lnlinks" href="#hl-7-39">39</a>
</span><span class="lnt" id="hl-7-40"><a class="lnlinks" href="#hl-7-40">40</a>
</span><span class="lnt" id="hl-7-41"><a class="lnlinks" href="#hl-7-41">41</a>
</span><span class="lnt" id="hl-7-42"><a class="lnlinks" href="#hl-7-42">42</a>
</span><span class="lnt" id="hl-7-43"><a class="lnlinks" href="#hl-7-43">43</a>
</span><span class="lnt" id="hl-7-44"><a class="lnlinks" href="#hl-7-44">44</a>
</span><span class="lnt" id="hl-7-45"><a class="lnlinks" href="#hl-7-45">45</a>
</span><span class="lnt" id="hl-7-46"><a class="lnlinks" href="#hl-7-46">46</a>
</span><span class="lnt" id="hl-7-47"><a class="lnlinks" href="#hl-7-47">47</a>
</span><span class="lnt" id="hl-7-48"><a class="lnlinks" href="#hl-7-48">48</a>
</span><span class="lnt" id="hl-7-49"><a class="lnlinks" href="#hl-7-49">49</a>
</span><span class="lnt" id="hl-7-50"><a class="lnlinks" href="#hl-7-50">50</a>
</span><span class="lnt" id="hl-7-51"><a class="lnlinks" href="#hl-7-51">51</a>
</span><span class="lnt" id="hl-7-52"><a class="lnlinks" href="#hl-7-52">52</a>
</span><span class="lnt" id="hl-7-53"><a class="lnlinks" href="#hl-7-53">53</a>
</span><span class="lnt" id="hl-7-54"><a class="lnlinks" href="#hl-7-54">54</a>
</span><span class="lnt" id="hl-7-55"><a class="lnlinks" href="#hl-7-55">55</a>
</span><span class="lnt" id="hl-7-56"><a class="lnlinks" href="#hl-7-56">56</a>
</span><span class="lnt" id="hl-7-57"><a class="lnlinks" href="#hl-7-57">57</a>
</span><span class="lnt" id="hl-7-58"><a class="lnlinks" href="#hl-7-58">58</a>
</span><span class="lnt" id="hl-7-59"><a class="lnlinks" href="#hl-7-59">59</a>
</span><span class="lnt" id="hl-7-60"><a class="lnlinks" href="#hl-7-60">60</a>
</span><span class="lnt" id="hl-7-61"><a class="lnlinks" href="#hl-7-61">61</a>
</span><span class="lnt" id="hl-7-62"><a class="lnlinks" href="#hl-7-62">62</a>
</span><span class="lnt" id="hl-7-63"><a class="lnlinks" href="#hl-7-63">63</a>
</span><span class="lnt" id="hl-7-64"><a class="lnlinks" href="#hl-7-64">64</a>
</span><span class="lnt" id="hl-7-65"><a class="lnlinks" href="#hl-7-65">65</a>
</span><span class="lnt" id="hl-7-66"><a class="lnlinks" href="#hl-7-66">66</a>
</span><span class="lnt" id="hl-7-67"><a class="lnlinks" href="#hl-7-67">67</a>
</span><span class="lnt" id="hl-7-68"><a class="lnlinks" href="#hl-7-68">68</a>
</span><span class="lnt" id="hl-7-69"><a class="lnlinks" href="#hl-7-69">69</a>
</span><span class="lnt" id="hl-7-70"><a class="lnlinks" href="#hl-7-70">70</a>
</span><span class="lnt" id="hl-7-71"><a class="lnlinks" href="#hl-7-71">71</a>
</span><span class="lnt" id="hl-7-72"><a class="lnlinks" href="#hl-7-72">72</a>
</span><span class="lnt" id="hl-7-73"><a class="lnlinks" href="#hl-7-73">73</a>
</span><span class="lnt" id="hl-7-74"><a class="lnlinks" href="#hl-7-74">74</a>
</span><span class="lnt" id="hl-7-75"><a class="lnlinks" href="#hl-7-75">75</a>
</span><span class="lnt" id="hl-7-76"><a class="lnlinks" href="#hl-7-76">76</a>
</span><span class="lnt" id="hl-7-77"><a class="lnlinks" href="#hl-7-77">77</a>
</span><span class="lnt" id="hl-7-78"><a class="lnlinks" href="#hl-7-78">78</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	int V;
</span></span><span class="line"><span class="cl"> 	list&lt;int&gt;*adj;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	bool isCyclicUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;bool&gt;&amp;recStack) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		visited[v] = true;
</span></span><span class="line"><span class="cl"> 		recStack[v] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = adj[v].begin(); it != adj[v].end(); it++) {
</span></span><span class="line"><span class="cl"> 			if (!visited[*it] &amp;&amp; isCyclicUtil(*it, visited, recStack))
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 			else if (recStack[*it])
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		recStack[v] = false;
</span></span><span class="line"><span class="cl"> 		return false;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	bool isCyclic() {
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;visited(V, false);
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;recStack(V, false);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (isCyclicUtil(i, visited, recStack))
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return false;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	void topologicalSortUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;int&gt;&amp; res) {
</span></span><span class="line"><span class="cl"> 		visited[v] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = adj[v].begin(); it != adj[v].end(); it++)
</span></span><span class="line"><span class="cl"> 			if (!visited[*it])
</span></span><span class="line"><span class="cl"> 				topologicalSortUtil(*it, visited, res);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		res.push_back(v);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt;topologicalSort(int v) {
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;visited(V, false);
</span></span><span class="line"><span class="cl"> 		topologicalSortUtil(v, visited, res);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (!visited[i])
</span></span><span class="line"><span class="cl"> 				topologicalSortUtil(i, visited, res);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {
</span></span><span class="line"><span class="cl"> 		V = numCourses;
</span></span><span class="line"><span class="cl"> 		adj = new list&lt;int&gt;[V];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		unordered_map&lt;int, vector&lt;int&gt;&gt;hm;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; prerequisites.size(); i++) {
</span></span><span class="line"><span class="cl"> 			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
</span></span><span class="line"><span class="cl"> 			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (isCyclic()) return vector&lt;int&gt;();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int i = 0;
</span></span><span class="line"><span class="cl"> 		for (i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (hm.find(i) == hm.end())
</span></span><span class="line"><span class="cl"> 				break;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return topologicalSort(i);
</span></span><span class="line"><span class="cl"> 	}
</span></span></code></pre></td></tr></table>
</div>
</div><p>};</p>
</li>
<li>
<p><strong>Find Shortest Path (Dijkstra&rsquo;s/Bellman Ford)</strong><br>
<a href="https://leetcode.com/problems/network-delay-time/">https://leetcode.com/problems/network-delay-time/</a></p>
<p><strong>Dijkstras and Bellman Ford:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span><span class="lnt" id="hl-8-45"><a class="lnlinks" href="#hl-8-45">45</a>
</span><span class="lnt" id="hl-8-46"><a class="lnlinks" href="#hl-8-46">46</a>
</span><span class="lnt" id="hl-8-47"><a class="lnlinks" href="#hl-8-47">47</a>
</span><span class="lnt" id="hl-8-48"><a class="lnlinks" href="#hl-8-48">48</a>
</span><span class="lnt" id="hl-8-49"><a class="lnlinks" href="#hl-8-49">49</a>
</span><span class="lnt" id="hl-8-50"><a class="lnlinks" href="#hl-8-50">50</a>
</span><span class="lnt" id="hl-8-51"><a class="lnlinks" href="#hl-8-51">51</a>
</span><span class="lnt" id="hl-8-52"><a class="lnlinks" href="#hl-8-52">52</a>
</span><span class="lnt" id="hl-8-53"><a class="lnlinks" href="#hl-8-53">53</a>
</span><span class="lnt" id="hl-8-54"><a class="lnlinks" href="#hl-8-54">54</a>
</span><span class="lnt" id="hl-8-55"><a class="lnlinks" href="#hl-8-55">55</a>
</span><span class="lnt" id="hl-8-56"><a class="lnlinks" href="#hl-8-56">56</a>
</span><span class="lnt" id="hl-8-57"><a class="lnlinks" href="#hl-8-57">57</a>
</span><span class="lnt" id="hl-8-58"><a class="lnlinks" href="#hl-8-58">58</a>
</span><span class="lnt" id="hl-8-59"><a class="lnlinks" href="#hl-8-59">59</a>
</span><span class="lnt" id="hl-8-60"><a class="lnlinks" href="#hl-8-60">60</a>
</span><span class="lnt" id="hl-8-61"><a class="lnlinks" href="#hl-8-61">61</a>
</span><span class="lnt" id="hl-8-62"><a class="lnlinks" href="#hl-8-62">62</a>
</span><span class="lnt" id="hl-8-63"><a class="lnlinks" href="#hl-8-63">63</a>
</span><span class="lnt" id="hl-8-64"><a class="lnlinks" href="#hl-8-64">64</a>
</span><span class="lnt" id="hl-8-65"><a class="lnlinks" href="#hl-8-65">65</a>
</span><span class="lnt" id="hl-8-66"><a class="lnlinks" href="#hl-8-66">66</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">		int networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt;pq;
</span></span><span class="line"><span class="cl">			vector&lt;int&gt;dist(N+1, INT_MAX);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			pq.push(make_pair(0, K));
</span></span><span class="line"><span class="cl">			dist[K] = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			unordered_map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt;hm;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; times.size(); i++)
</span></span><span class="line"><span class="cl">				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			while (!pq.empty()) {
</span></span><span class="line"><span class="cl">				pair&lt;int, int&gt;p = pq.top();
</span></span><span class="line"><span class="cl">				pq.pop();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				int u = p.second;
</span></span><span class="line"><span class="cl">				for (auto it = hm[u].begin(); it != hm[u].end(); it++) {
</span></span><span class="line"><span class="cl">					int v = it-&gt;first;
</span></span><span class="line"><span class="cl">					int w = it-&gt;second;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					if (dist[v] &gt; dist[u] + w) {
</span></span><span class="line"><span class="cl">						dist[v] = dist[u] + w;
</span></span><span class="line"><span class="cl">						pq.push(make_pair(dist[v], v));
</span></span><span class="line"><span class="cl">					}
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			int res = 0;
</span></span><span class="line"><span class="cl">			for (int i = 1; i &lt;= N; i++)
</span></span><span class="line"><span class="cl">				res = max(res, dist[i]);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			return res == INT_MAX ? -1 : res;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	};
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">		int networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			int n = times.size();
</span></span><span class="line"><span class="cl">			if (!n) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			vector&lt;int&gt;dist(N+1, INT_MAX);
</span></span><span class="line"><span class="cl">			int res = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			dist[K] = 0;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; N; i++) {
</span></span><span class="line"><span class="cl">				for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl">					int u = times[j][0];
</span></span><span class="line"><span class="cl">					int v = times[j][1];
</span></span><span class="line"><span class="cl">					int w = times[j][2];
</span></span><span class="line"><span class="cl">					if (dist[u] != INT_MAX &amp;&amp; dist[u] + w &lt; dist[v])
</span></span><span class="line"><span class="cl">						dist[v] = w + dist[u];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			for (int i = 1; i &lt;= N; i++)
</span></span><span class="line"><span class="cl">				res = max(res, dist[i]);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			return res == INT_MAX ? -1 : res;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	}
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:<br>
(Updated on 14th June &lsquo;20)</p>
<p><strong>Union Find:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/friend-circles/">https://leetcode.com/problems/friend-circles/</a></li>
<li><a href="https://leetcode.com/problems/redundant-connection/">https://leetcode.com/problems/redundant-connection/</a></li>
<li><a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></li>
<li><a href="https://leetcode.com/problems/number-of-operations-to-make-network-connected/">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></li>
<li><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/">https://leetcode.com/problems/satisfiability-of-equality-equations/</a></li>
<li><a href="https://leetcode.com/problems/accounts-merge/">https://leetcode.com/problems/accounts-merge/</a></li>
<li><a href="https://leetcode.com/problems/connecting-cities-with-minimum-cost/">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></li>
</ol>
<p><strong>DFS:</strong><br>
DFS from boundary:</p>
<ol>
<li><a href="https://leetcode.com/problems/surrounded-regions/">https://leetcode.com/problems/surrounded-regions/</a></li>
<li><a href="https://leetcode.com/problems/number-of-enclaves/">https://leetcode.com/problems/number-of-enclaves/</a></li>
</ol>
<p>Shortest time:</p>
<ol>
<li><a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></li>
</ol>
<p>Islands Variants</p>
<ol>
<li><a href="https://leetcode.com/problems/number-of-closed-islands/">https://leetcode.com/problems/number-of-closed-islands/</a></li>
<li><a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a></li>
<li><a href="https://leetcode.com/problems/keys-and-rooms/">https://leetcode.com/problems/keys-and-rooms/</a></li>
<li><a href="https://leetcode.com/problems/max-area-of-island/">https://leetcode.com/problems/max-area-of-island/</a></li>
<li><a href="https://leetcode.com/problems/flood-fill/">https://leetcode.com/problems/flood-fill/</a></li>
<li><a href="https://leetcode.com/problems/coloring-a-border/">https://leetcode.com/problems/coloring-a-border/</a></li>
</ol>
<p>Hash/DFS:</p>
<ol>
<li><a href="https://leetcode.com/problems/employee-importance/">https://leetcode.com/problems/employee-importance/</a></li>
<li><a href="https://leetcode.com/problems/find-the-town-judge/">https://leetcode.com/problems/find-the-town-judge/</a></li>
</ol>
<p>Cycle Find:</p>
<ol>
<li><a href="https://leetcode.com/problems/find-eventual-safe-states/">https://leetcode.com/problems/find-eventual-safe-states/</a></li>
</ol>
<p><strong>BFS:</strong><br>
BFS for shortest path:</p>
<ol>
<li><a href="https://leetcode.com/problems/01-matrix/">https://leetcode.com/problems/01-matrix/</a></li>
<li><a href="https://leetcode.com/problems/as-far-from-land-as-possible/">https://leetcode.com/problems/as-far-from-land-as-possible/</a></li>
<li><a href="https://leetcode.com/problems/rotting-oranges/">https://leetcode.com/problems/rotting-oranges/</a></li>
<li><a href="https://leetcode.com/problems/shortest-path-in-binary-matrix/">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></li>
</ol>
<p><strong>Graph coloring:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/possible-bipartition/">https://leetcode.com/problems/possible-bipartition/</a></li>
<li><a href="https://leetcode.com/problems/is-graph-bipartite/">https://leetcode.com/problems/is-graph-bipartite/</a></li>
</ol>
<p><strong>Topological Sort:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/course-schedule-ii/">https://leetcode.com/problems/course-schedule-ii/</a></li>
</ol>
<p><strong>Shortest Path:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/network-delay-time/">https://leetcode.com/problems/network-delay-time/</a></li>
<li><a href="https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/">https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</a></li>
<li><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
