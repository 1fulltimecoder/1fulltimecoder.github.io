<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Samir Paul</title>
    <link>https://samirpaulb.github.io/series/blog/</link>
    <description>Recent content in Blog on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/series/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Joins - Inner, Left, Right and Full Joins</title>
      <link>https://samirpaulb.github.io/posts/sql-joins-inner-left-right-and-full-joins/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/sql-joins-inner-left-right-and-full-joins/</guid>
      <description>SQL Joins - Inner, Left, Right and Full Joins</description>
      <content:encoded><![CDATA[<p><strong>SQL Join</strong> statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: </p>
<ul>
<li>INNER JOIN</li>
<li>LEFT JOIN</li>
<li>RIGHT JOIN</li>
<li>FULL JOIN</li>
</ul>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png" alt="SQL Joins"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Open External Links in a New Window Using JavaScript</title>
      <link>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</guid>
      <description>Open External Links in a New Window Using JavaScript</description>
      <content:encoded><![CDATA[<p>This is a quick post showing how to use JavaScript to make links to external websites open in a new window (or tab) instead of in the current window. This is useful for <code>Jekyll</code> blogs because the Markdown converters don’t do this for you. I included two versions: one that uses straight JavaScript, and one that requires <code>jQuery</code> but is shorter.</p>
<p>Both versions work basically the same way: grab all anchor tags <code>&lt;a href=&quot;#&quot;&gt;</code> that are linking to somewhere other than your development environment or a page on your site and then attribute <code>target=&quot;_blank&quot;</code> to those tags. Because this is JavaScript, users with JavaScript disabled will still experience the old behavior, but otherwise won’t be adversely affected.</p>
<h3 id="straight-javascript">Straight JavaScript</h3>
<p>This version does not require any jQuery (or any other libraries):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">ready</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onreadystatechange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorEls</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorElsLength</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">anchorElsLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">anchorEl</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="jquery">jQuery</h3>
<p>This version requires jQuery in order to work, but if you’re using jQuery on your site anyway, it avoids reinventing the wheel:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="my-implementation-for-jekyll-blog">My Implementation for Jekyll Blog</h3>
<p>I have created a file called <a href="https://raw.githubusercontent.com/SamirPaul1/assets/main/external-links-new-window.html">external-links-new-window.html</a> inside <code>_includes</code> directory and referred it from <code>_layouts/default.html</code> as <a href="#"><img src="https://spcdn.pages.dev/img/include-external-links-new-window.html-code.png" alt="external-links-new-window"  width="370px" height="22px"></a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python Cheat Sheet for Leetcode</title>
      <link>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</guid>
      <description>Python Cheat Sheet for Leetcode</description>
      <content:encoded><![CDATA[<h1 id="basics">Basics</h1>
<ul>
<li>
<p>Data Types</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg" alt="Untitled"  />
</p>
</li>
<li>
<p>Operators and it’s precendence</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<h1 id="data-structures">Data Structures</h1>
<p><em>Important data structures for Leetcode</em></p>
<h2 id="lists">Lists</h2>
<blockquote>
<p>Lists are used to store multiple items in a single variable</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nums = [1,2,3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums.index(1) # returns index
</span></span><span class="line"><span class="cl">nums.append(1) # appends 1
</span></span><span class="line"><span class="cl">nums.insert(0,10) # inserts 10 at 0th index
</span></span><span class="line"><span class="cl">nums.remove(3) # removes all instances of 3
</span></span><span class="line"><span class="cl">nums.copy(1) # returns copy of the list
</span></span><span class="line"><span class="cl">nums.count(1) # returns no.of times &#39;1&#39; is present in the list
</span></span><span class="line"><span class="cl">nums.extend(someOtherList) # ...
</span></span><span class="line"><span class="cl">nums.pop() # pops last element [which element to pop can also be given as optional argument]
</span></span><span class="line"><span class="cl">nums.reverse() # reverses original list (nums in this case)
</span></span><span class="line"><span class="cl">nums.sort() # sorts list [does NOT return sorted list]
</span></span><span class="line"><span class="cl">#Python&#39;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">It&#39;s pretty simple really:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop]  # items start through stop-1
</span></span><span class="line"><span class="cl">a[start:]      # items start through the rest of the array
</span></span><span class="line"><span class="cl">a[:stop]       # items from the beginning through stop-1
</span></span><span class="line"><span class="cl">a[:]           # a copy of the whole array
</span></span><span class="line"><span class="cl">There is also the step value, which can be used with any of the above:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step] # start through not past stop, by step
</span></span><span class="line"><span class="cl">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[-1]    # last item in the array
</span></span><span class="line"><span class="cl">a[-2:]   # last two items in the array
</span></span><span class="line"><span class="cl">a[:-2]   # everything except the last two items
</span></span><span class="line"><span class="cl">Similarly, step may be a negative number:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[::-1]    # all items in the array, reversed
</span></span><span class="line"><span class="cl">a[1::-1]   # the first two items, reversed
</span></span><span class="line"><span class="cl">a[:-3:-1]  # the last two items, reversed
</span></span><span class="line"><span class="cl">a[-3::-1]  # everything except the last two items, reversed
</span></span><span class="line"><span class="cl">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relation to slice() object
</span></span><span class="line"><span class="cl">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step]
</span></span><span class="line"><span class="cl">is equivalent to:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[slice(start, stop, step)]
</span></span><span class="line"><span class="cl">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="dictionary">Dictionary</h2>
<blockquote>
<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dict = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dict.keys() # returns list of keys of dictionary
</span></span><span class="line"><span class="cl">dict.values() # returns list of values of dictionary
</span></span><span class="line"><span class="cl">dict.get(&#39;a&#39;) # returns value for any corresponding key
</span></span><span class="line"><span class="cl">dict.items() # returns [(&#39;a&#39;,1),(&#39;b&#39;,2),(&#39;c&#39;,3)]
</span></span><span class="line"><span class="cl">dict.copy() # returns copy of the dictionary
</span></span><span class="line"><span class="cl"># NOTE : items() Returns view object that will be updated with any future changes to dict
</span></span><span class="line"><span class="cl">dict.pop(KEY) # pops key-value pair with that key
</span></span><span class="line"><span class="cl">dict.popitem() # removes most recent pair added
</span></span><span class="line"><span class="cl">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned
</span></span><span class="line"><span class="cl"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.
</span></span><span class="line"><span class="cl"># If the key does not exist, DEFAULT_VALUE becomes the key&#39;s value. 2nd argument&#39;s default is None.
</span></span><span class="line"><span class="cl">dict.update({KEY:VALUE}) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)
</span></span><span class="line"><span class="cl"># defaultdict ensures that if any element is accessed that is not present in the dictionary
</span></span><span class="line"><span class="cl"># it will be created and error will not be thrown (which happens in normal dictionary)
</span></span><span class="line"><span class="cl"># Also, the new element created will be of argument type, for example in the below line
</span></span><span class="line"><span class="cl"># an element of type &#39;list&#39; will be made for a Key that does not exist
</span></span><span class="line"><span class="cl">myDictionary = defaultdict(list) 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="counter">Counter</h2>
<blockquote>
<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>
</blockquote>
<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import Counter #(capital &#39;C&#39;)
</span></span><span class="line"><span class="cl"># can also be used as &#39;collections.Counter()&#39; in code
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">list1 = [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;y&#39;, &#39;z&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Initialization
</span></span><span class="line"><span class="cl">Counter(list1) # =&gt; Counter({&#39;x&#39;: 4, &#39;y&#39;: 2, &#39;z&#39;: 2})
</span></span><span class="line"><span class="cl">Counter(&#34;Welcome to Guru99 Tutorials!&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39; &#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2.....})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Updating
</span></span><span class="line"><span class="cl">counterObject = collections.Counter(list1)
</span></span><span class="line"><span class="cl">counterObject.keys() = [ &#39;x&#39; , &#39;y&#39; , &#39;z&#39; ]
</span></span><span class="line"><span class="cl">most_common_element = counterObject.most_common(1) # [(&#39;x&#39;, 4)]
</span></span><span class="line"><span class="cl">counterObject.update(&#34;some string&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2, &#39;s&#39;: 2})
</span></span><span class="line"><span class="cl">counterObject[&#39;s&#39;] += 1 # Increase/Decrease frequency
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Accessing
</span></span><span class="line"><span class="cl">frequency_of_s = counterObject[&#39;s&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Deleting
</span></span><span class="line"><span class="cl">del couterObject[&#39;s&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="deque">Deque</h2>
<blockquote>
<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import deque
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue = deque([&#39;name&#39;,&#39;age&#39;,&#39;DOB&#39;])
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.append(&#34;append_from_right&#34;) # Append from right
</span></span><span class="line"><span class="cl">queue.pop() # Pop from right
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.appendleft(&#34;fromLeft&#34;) # Append from left
</span></span><span class="line"><span class="cl">queue.popleft() # Pop from left
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.
</span></span><span class="line"><span class="cl">queue.insert(index,element)
</span></span><span class="line"><span class="cl">queue.remove() # removes first occurrance
</span></span><span class="line"><span class="cl">queue.count() # obvious
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.reverse() # reverses order of queue elements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="heapq">Heapq</h2>
<blockquote>
<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library/module.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import heapq # (minHeap by Default)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums = [5, 7, 9, 1, 3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).
</span></span><span class="line"><span class="cl">heapq.heappush(nums,element) # Push an element into the heap
</span></span><span class="line"><span class="cl">heapq.heappop(nums) # Pop an element from the heap
</span></span><span class="line"><span class="cl">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Other Methods Available in the Library
</span></span><span class="line"><span class="cl"># Used to return the k largest elements from the iterable specified 
</span></span><span class="line"><span class="cl"># The key is a function with that accepts single element from iterable,
</span></span><span class="line"><span class="cl"># and the returned value from that function is then used to rank that element in the heap
</span></span><span class="line"><span class="cl">heapq.nlargest(k, iterable, key = fun)
</span></span><span class="line"><span class="cl">heapq.nsmallest(k, iterable, key = fun)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sets">Sets</h2>
<blockquote>
<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set = {1,2,3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.add(item)
</span></span><span class="line"><span class="cl">set.remove(item)
</span></span><span class="line"><span class="cl">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not
</span></span><span class="line"><span class="cl">set.pop() # removes random item (since unordered)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.isdisjoint(anotherSet) # returns true if no common elements
</span></span><span class="line"><span class="cl">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
</span></span><span class="line"><span class="cl">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.difference(anotherSet) # returns set containing items ONLY in first set
</span></span><span class="line"><span class="cl">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
</span></span><span class="line"><span class="cl">set.intersection(anotherSet) # returns new set with common elements
</span></span><span class="line"><span class="cl">set.intersection_update(anotherSet) # modifies first set keeping only common elements
</span></span><span class="line"><span class="cl">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
</span></span><span class="line"><span class="cl">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.union(anotherSet) # ...
</span></span><span class="line"><span class="cl">set.update(anotherSet) # adds anotherSet without duplicate
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="tuples">Tuples</h2>
<blockquote>
<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p>Similar to list</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tuple = (1,2,3,1)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tuple.count(1) # returns occurence of an item
</span></span><span class="line"><span class="cl">tuple.index(1) # returns index of 1 in array
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="strings">Strings</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ** split Function **
</span></span><span class="line"><span class="cl">#The split() method breaks up a string at the specified separator and returns a list of strings.
</span></span><span class="line"><span class="cl">text = &#39;Python is a fun programming language&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># split the text from space
</span></span><span class="line"><span class="cl">print(text.split(&#39; &#39;))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#convert string to list
</span></span><span class="line"><span class="cl">s=&#34;abcd&#34;
</span></span><span class="line"><span class="cl">s=list(s)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Output: [&#39;Python&#39;, &#39;is&#39;, &#39;a&#39;, &#39;fun&#39;, &#39;programming&#39;, &#39;language&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ** count Function **
</span></span><span class="line"><span class="cl">#The count() method returns the number of occurrences of a substring in the given string.
</span></span><span class="line"><span class="cl">#Example
</span></span><span class="line"><span class="cl">message = &#39;python is popular programming language&#39;
</span></span><span class="line"><span class="cl"># number of occurrence of &#39;p&#39;
</span></span><span class="line"><span class="cl">print(&#39;Number of occurrence of p:&#39;, message.count(&#39;p&#39;)) # Output: Number of occurrence of p: 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
</span></span><span class="line"><span class="cl">s = &#39;1242323&#39;
</span></span><span class="line"><span class="cl">print(s.isnumeric()) #Output: True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
</span></span><span class="line"><span class="cl"># check the index of &#39;fun&#39;
</span></span><span class="line"><span class="cl">print(message.find(&#39;fun&#39;)) # Output: 12
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">name = &#34;M3onica Gell22er &#34;
</span></span><span class="line"><span class="cl">print(name.isalnum()) # Output : False
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
</span></span><span class="line"><span class="cl">name = &#34;Monica&#34;
</span></span><span class="line"><span class="cl">print(name.isalpha()) #output true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#other imp functions
</span></span><span class="line"><span class="cl">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
</span></span><span class="line"><span class="cl">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.
</span></span><span class="line"><span class="cl">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
</span></span><span class="line"><span class="cl">string.islower()
</span></span><span class="line"><span class="cl">string.isdigit()
</span></span><span class="line"><span class="cl">string.isupper()
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="built-in-or-library-functions">Built-in or Library functions</h1>
<ul>
<li>
<p>Functions to iterate over list / other iterable (tuple, dictionaries)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span><span class="lnt" id="hl-9-18"><a class="lnlinks" href="#hl-9-18">18</a>
</span><span class="lnt" id="hl-9-19"><a class="lnlinks" href="#hl-9-19">19</a>
</span><span class="lnt" id="hl-9-20"><a class="lnlinks" href="#hl-9-20">20</a>
</span><span class="lnt" id="hl-9-21"><a class="lnlinks" href="#hl-9-21">21</a>
</span><span class="lnt" id="hl-9-22"><a class="lnlinks" href="#hl-9-22">22</a>
</span><span class="lnt" id="hl-9-23"><a class="lnlinks" href="#hl-9-23">23</a>
</span><span class="lnt" id="hl-9-24"><a class="lnlinks" href="#hl-9-24">24</a>
</span><span class="lnt" id="hl-9-25"><a class="lnlinks" href="#hl-9-25">25</a>
</span><span class="lnt" id="hl-9-26"><a class="lnlinks" href="#hl-9-26">26</a>
</span><span class="lnt" id="hl-9-27"><a class="lnlinks" href="#hl-9-27">27</a>
</span><span class="lnt" id="hl-9-28"><a class="lnlinks" href="#hl-9-28">28</a>
</span><span class="lnt" id="hl-9-29"><a class="lnlinks" href="#hl-9-29">29</a>
</span><span class="lnt" id="hl-9-30"><a class="lnlinks" href="#hl-9-30">30</a>
</span><span class="lnt" id="hl-9-31"><a class="lnlinks" href="#hl-9-31">31</a>
</span><span class="lnt" id="hl-9-32"><a class="lnlinks" href="#hl-9-32">32</a>
</span><span class="lnt" id="hl-9-33"><a class="lnlinks" href="#hl-9-33">33</a>
</span><span class="lnt" id="hl-9-34"><a class="lnlinks" href="#hl-9-34">34</a>
</span><span class="lnt" id="hl-9-35"><a class="lnlinks" href="#hl-9-35">35</a>
</span><span class="lnt" id="hl-9-36"><a class="lnlinks" href="#hl-9-36">36</a>
</span><span class="lnt" id="hl-9-37"><a class="lnlinks" href="#hl-9-37">37</a>
</span><span class="lnt" id="hl-9-38"><a class="lnlinks" href="#hl-9-38">38</a>
</span><span class="lnt" id="hl-9-39"><a class="lnlinks" href="#hl-9-39">39</a>
</span><span class="lnt" id="hl-9-40"><a class="lnlinks" href="#hl-9-40">40</a>
</span><span class="lnt" id="hl-9-41"><a class="lnlinks" href="#hl-9-41">41</a>
</span><span class="lnt" id="hl-9-42"><a class="lnlinks" href="#hl-9-42">42</a>
</span><span class="lnt" id="hl-9-43"><a class="lnlinks" href="#hl-9-43">43</a>
</span><span class="lnt" id="hl-9-44"><a class="lnlinks" href="#hl-9-44">44</a>
</span><span class="lnt" id="hl-9-45"><a class="lnlinks" href="#hl-9-45">45</a>
</span><span class="lnt" id="hl-9-46"><a class="lnlinks" href="#hl-9-46">46</a>
</span><span class="lnt" id="hl-9-47"><a class="lnlinks" href="#hl-9-47">47</a>
</span><span class="lnt" id="hl-9-48"><a class="lnlinks" href="#hl-9-48">48</a>
</span><span class="lnt" id="hl-9-49"><a class="lnlinks" href="#hl-9-49">49</a>
</span><span class="lnt" id="hl-9-50"><a class="lnlinks" href="#hl-9-50">50</a>
</span><span class="lnt" id="hl-9-51"><a class="lnlinks" href="#hl-9-51">51</a>
</span><span class="lnt" id="hl-9-52"><a class="lnlinks" href="#hl-9-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">,</span> <span class="n">iter</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="c1">#fun : It is a function to which map passes each element of given iterable.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#iter : It is a iterable which is to be mapped.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">zip</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">elem1</span><span class="p">,</span><span class="n">elem2</span> <span class="ow">in</span> <span class="n">zip</span><span class="p">(</span><span class="n">firstList</span><span class="p">,</span><span class="n">secondList</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># will merge both lists and produce tuples with both elements</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Tuples will stop at shortest list (in case of both lists having different len)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">a = (&#34;John&#34;, &#34;Charles&#34;, &#34;Mike&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">b = (&#34;Jenny&#34;, &#34;Christy&#34;, &#34;Monica&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">x = zip(a, b)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">#use the tuple() function to display a readable version of the result:
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">print(tuple(x))
</span></span></span><span class="line"><span class="cl"><span class="s1">o/p: ((&#39;John&#39;, &#39;Jenny&#39;), (&#39;Charles&#39;, &#39;Christy&#39;), (&#39;Mike&#39;, &#39;Monica&#39;))
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">any</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span> <span class="p">[</span> <span class="n">OPPOSITE</span> <span class="n">IS</span> <span class="o">=&gt;</span> <span class="o">**</span> <span class="n">all</span><span class="p">()</span> <span class="o">**</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">any</span><span class="p">(</span><span class="n">someList</span><span class="p">)</span> <span class="c1"># returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">list</span><span class="o">|</span><span class="n">tuple</span><span class="p">)</span> <span class="o">**</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># [when you need to attach indexes to lists or tuples ]</span>
</span></span><span class="line"><span class="cl"><span class="n">enumerate</span><span class="p">(</span><span class="n">anyList</span><span class="p">)</span> <span class="c1"># [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] =&gt; [(0, &#39;a&#39;), (1, &#39;b&#39;), (2, &#39;c&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">filter</span><span class="p">(</span><span class="n">function</span><span class="o">|</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="n">filter</span><span class="p">(</span><span class="n">myFunction</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="c1"># returns list with elements that returned true when passed in function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">*****************</span> <span class="n">import</span> <span class="n">bisect</span> <span class="o">***********************</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">number</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">)</span> <span class="o">**</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [ returns the index where the element should be inserted </span>
</span></span><span class="line"><span class="cl"><span class="c1">#		such that sorting order is maintained ]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># [1,2,4] =&gt; 2 coz &#39;3&#39; should be inserted in 2nd index to maintain sorting order</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># they have same arguments. Suppose the element we want to insert is already present</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the sorting list, the bisect_left() will return index left of the existing number</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and the bisect_right() or bisect() will return index right to the existing number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_right(list,number,begin,end) ** </span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_left(list,number,begin,end)  ** </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">The</span> <span class="n">above</span> <span class="mi">3</span> <span class="n">functions</span> <span class="n">are</span> <span class="n">exact</span> <span class="n">same</span> <span class="n">of</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(),</span> <span class="n">the</span> <span class="n">only</span> <span class="n">difference</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span> <span class="n">that</span> <span class="n">they</span> <span class="k">return</span> <span class="n">the</span> <span class="n">sorted</span> <span class="n">list</span> <span class="n">after</span> <span class="n">inserting</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">index</span><span class="o">.</span> <span class="n">The</span>
</span></span><span class="line"><span class="cl"><span class="n">left</span><span class="p">()</span> <span class="n">right</span><span class="p">()</span> <span class="n">logic</span> <span class="n">is</span> <span class="n">also</span> <span class="n">same</span> <span class="n">as</span> <span class="n">above</span><span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Getting ASCII value of a character</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">** ord(str) **
</span></span><span class="line"><span class="cl"># returns ascii value of the character , Example ord(&#34;a&#34;) = 97
</span></span><span class="line"><span class="cl">** chr(int) ** 
</span></span><span class="line"><span class="cl">#return character of given ascii value , Example chr(97) = &#34;a&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="clean-code-tips">Clean Code Tips</h1>
<ul>
<li>
<p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic 😎</p>
<p>A docstring is short for documentation string.</p>
<p>Python docstrings (documentation strings) are the <a href="https://www.programiz.com/python-programming/string">string</a> literals that appear right after the definition of a function, method, class, or module.</p>
<p>Triple quotes are used while writing docstrings. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span></code></pre></td></tr></table>
</div>
</div><p>Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>
<p>The docstrings are associated with the object as their <code>__doc__</code> attribute.</p>
<p>So, we can access the docstrings of the above function with the following lines of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2">2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3">3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span><span class="line"><span class="cl">print(double.__doc__)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Output</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Function to double the value
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>
<h3 id="definition-and-usage">Definition and Usage</h3>
<p>The <code>assert</code> keyword is used when debugging code.</p>
<p>The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>
<p>You can write a message to be written if the code returns False, check the example below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span><span class="lnt" id="hl-14-3"><a class="lnlinks" href="#hl-14-3">3</a>
</span><span class="lnt" id="hl-14-4"><a class="lnlinks" href="#hl-14-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">x = &#34;hello&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#if condition returns False, AssertionError is raised:
</span></span><span class="line"><span class="cl">assert x == &#34;goodbye&#34;, &#34;x should be &#39;hello&#39;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>
<ul>
<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>
</ul>
</li>
</ul>
<h1 id="miscellaneous">Miscellaneous</h1>
<ul>
<li>
<p>How to take multiple line input in python?</p>
<ul>
<li>Using split() method</li>
<li>Using List comprehension</li>
</ul>
<p><strong>Syntax :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">input().split(separator, maxsplit)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="example">Example</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span><span class="lnt" id="hl-16-14"><a class="lnlinks" href="#hl-16-14">14</a>
</span><span class="lnt" id="hl-16-15"><a class="lnlinks" href="#hl-16-15">15</a>
</span><span class="lnt" id="hl-16-16"><a class="lnlinks" href="#hl-16-16">16</a>
</span><span class="lnt" id="hl-16-17"><a class="lnlinks" href="#hl-16-17">17</a>
</span><span class="lnt" id="hl-16-18"><a class="lnlinks" href="#hl-16-18">18</a>
</span><span class="lnt" id="hl-16-19"><a class="lnlinks" href="#hl-16-19">19</a>
</span><span class="lnt" id="hl-16-20"><a class="lnlinks" href="#hl-16-20">20</a>
</span><span class="lnt" id="hl-16-21"><a class="lnlinks" href="#hl-16-21">21</a>
</span><span class="lnt" id="hl-16-22"><a class="lnlinks" href="#hl-16-22">22</a>
</span><span class="lnt" id="hl-16-23"><a class="lnlinks" href="#hl-16-23">23</a>
</span><span class="lnt" id="hl-16-24"><a class="lnlinks" href="#hl-16-24">24</a>
</span><span class="lnt" id="hl-16-25"><a class="lnlinks" href="#hl-16-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing how to
</span></span><span class="line"><span class="cl"># multiple input using split
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Number of boys: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three inputs at a time
</span></span><span class="line"><span class="cl">x, y, z = input(&#34;Enter a three value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Total number of students: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of boys is : &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls is : &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">a, b = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(a, b))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl"># and type casting using list() function
</span></span><span class="line"><span class="cl">x = list(map(int, input(&#34;Enter a multiple value: &#34;).split()))
</span></span><span class="line"><span class="cl">print(&#34;List of students: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1"> 1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2"> 2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3"> 3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4"> 4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5"> 5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6"> 6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7"> 7</a>
</span><span class="lnt" id="hl-17-8"><a class="lnlinks" href="#hl-17-8"> 8</a>
</span><span class="lnt" id="hl-17-9"><a class="lnlinks" href="#hl-17-9"> 9</a>
</span><span class="lnt" id="hl-17-10"><a class="lnlinks" href="#hl-17-10">10</a>
</span><span class="lnt" id="hl-17-11"><a class="lnlinks" href="#hl-17-11">11</a>
</span><span class="lnt" id="hl-17-12"><a class="lnlinks" href="#hl-17-12">12</a>
</span><span class="lnt" id="hl-17-13"><a class="lnlinks" href="#hl-17-13">13</a>
</span><span class="lnt" id="hl-17-14"><a class="lnlinks" href="#hl-17-14">14</a>
</span><span class="lnt" id="hl-17-15"><a class="lnlinks" href="#hl-17-15">15</a>
</span><span class="lnt" id="hl-17-16"><a class="lnlinks" href="#hl-17-16">16</a>
</span><span class="lnt" id="hl-17-17"><a class="lnlinks" href="#hl-17-17">17</a>
</span><span class="lnt" id="hl-17-18"><a class="lnlinks" href="#hl-17-18">18</a>
</span><span class="lnt" id="hl-17-19"><a class="lnlinks" href="#hl-17-19">19</a>
</span><span class="lnt" id="hl-17-20"><a class="lnlinks" href="#hl-17-20">20</a>
</span><span class="lnt" id="hl-17-21"><a class="lnlinks" href="#hl-17-21">21</a>
</span><span class="lnt" id="hl-17-22"><a class="lnlinks" href="#hl-17-22">22</a>
</span><span class="lnt" id="hl-17-23"><a class="lnlinks" href="#hl-17-23">23</a>
</span><span class="lnt" id="hl-17-24"><a class="lnlinks" href="#hl-17-24">24</a>
</span><span class="lnt" id="hl-17-25"><a class="lnlinks" href="#hl-17-25">25</a>
</span><span class="lnt" id="hl-17-26"><a class="lnlinks" href="#hl-17-26">26</a>
</span><span class="lnt" id="hl-17-27"><a class="lnlinks" href="#hl-17-27">27</a>
</span><span class="lnt" id="hl-17-28"><a class="lnlinks" href="#hl-17-28">28</a>
</span><span class="lnt" id="hl-17-29"><a class="lnlinks" href="#hl-17-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing
</span></span><span class="line"><span class="cl"># how to take multiple input
</span></span><span class="line"><span class="cl"># using List comprehension
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two input at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three input at a time
</span></span><span class="line"><span class="cl">x, y, z = [int(x) for x in input(&#34;Enter three value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Third Number is: &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(x, y))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time separated by comma
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split(&#34;,&#34;)]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4">4</a>
</span><span class="lnt" id="hl-18-5"><a class="lnlinks" href="#hl-18-5">5</a>
</span><span class="lnt" id="hl-18-6"><a class="lnlinks" href="#hl-18-6">6</a>
</span><span class="lnt" id="hl-18-7"><a class="lnlinks" href="#hl-18-7">7</a>
</span><span class="lnt" id="hl-18-8"><a class="lnlinks" href="#hl-18-8">8</a>
</span><span class="lnt" id="hl-18-9"><a class="lnlinks" href="#hl-18-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Syntax :
</span></span><span class="line"><span class="cl">math.log(a,Base)
</span></span><span class="line"><span class="cl">Parameters :a : The numeric value
</span></span><span class="line"><span class="cl">Base :  Base to which the logarithm has to be computed.
</span></span><span class="line"><span class="cl">Return Value :
</span></span><span class="line"><span class="cl">Returns natural log if 1 argument is passed and log with
</span></span><span class="line"><span class="cl">specified base if 2 arguments are passed.
</span></span><span class="line"><span class="cl">Exceptions :
</span></span><span class="line"><span class="cl">Raises ValueError is a negative no. is passed as argument.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2">2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3">3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4">4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5">5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6">6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7">7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8">8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base e of 14
</span></span><span class="line"><span class="cl">print (&#34;Natural logarithm of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base 5 of 14
</span></span><span class="line"><span class="cl">print (&#34;Logarithm base 5 of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14,5))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Finding the ceiling and the floor value
<ul>
<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1"> 1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2"> 2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3"> 3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4"> 4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5"> 5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6"> 6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7"> 7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8"> 8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9"> 9</a>
</span><span class="lnt" id="hl-20-10"><a class="lnlinks" href="#hl-20-10">10</a>
</span><span class="lnt" id="hl-20-11"><a class="lnlinks" href="#hl-20-11">11</a>
</span><span class="lnt" id="hl-20-12"><a class="lnlinks" href="#hl-20-12">12</a>
</span><span class="lnt" id="hl-20-13"><a class="lnlinks" href="#hl-20-13">13</a>
</span><span class="lnt" id="hl-20-14"><a class="lnlinks" href="#hl-20-14">14</a>
</span><span class="lnt" id="hl-20-15"><a class="lnlinks" href="#hl-20-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python code to demonstrate the working of
</span></span><span class="line"><span class="cl"># ceil() and floor()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># importing &#34;math&#34; for mathematical operations
</span></span><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a = 2.3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the ceil of 2.3 (i.e 3)
</span></span><span class="line"><span class="cl">print (&#34;The ceil of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.ceil(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the floor of 2.3 (i.e 2)
</span></span><span class="line"><span class="cl">print (&#34;The floor of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.floor(a))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Other Important functions</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span><span class="lnt" id="hl-21-19"><a class="lnlinks" href="#hl-21-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#Constants
</span></span><span class="line"><span class="cl"># Print the value of Euler e (2.718281828459045)
</span></span><span class="line"><span class="cl">print (math.e)
</span></span><span class="line"><span class="cl"># Print the value of pi (3.141592653589793)
</span></span><span class="line"><span class="cl">print (math.pi)
</span></span><span class="line"><span class="cl">print (math.gcd(b, a))
</span></span><span class="line"><span class="cl">print (pow(3,4))
</span></span><span class="line"><span class="cl"># print the square root of 4
</span></span><span class="line"><span class="cl">print(math.sqrt(4))
</span></span><span class="line"><span class="cl">a = math.pi/6
</span></span><span class="line"><span class="cl">b = 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from radians to degrees
</span></span><span class="line"><span class="cl">print (&#34;The converted value from radians to degrees is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.degrees(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from degrees to radians
</span></span><span class="line"><span class="cl">print (&#34;The converted value from degrees to radians is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.radians(b))
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** bin(int) **
</span></span><span class="line"><span class="cl">bin(anyNumber) # Returns binary version of number
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** divmod(int,int) **
</span></span><span class="line"><span class="cl">divmod(dividend,divisor) # returns tuple like (quotient, remainder)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-the-custom-comparator-works">How the custom comparator works</h2>
<p>When providing a custom comparator, it should generally return an integer/float value that follows the following pattern (as with most other programming languages and frameworks):</p>
<ul>
<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted <em>before</em> the right item</li>
<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted <em>after</em> the right item</li>
<li>return <code>0</code> when both the left and the right item have the same weight and should be ordered &ldquo;equally&rdquo; without precedence</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1"> 1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2"> 2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3"> 3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4"> 4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5"> 5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6"> 6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7"> 7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8"> 8</a>
</span><span class="lnt" id="hl-23-9"><a class="lnlinks" href="#hl-23-9"> 9</a>
</span><span class="lnt" id="hl-23-10"><a class="lnlinks" href="#hl-23-10">10</a>
</span><span class="lnt" id="hl-23-11"><a class="lnlinks" href="#hl-23-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">from</span> <span class="n">functools</span> <span class="n">import</span> <span class="n">cmp_to_key</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted</span><span class="p">(</span><span class="n">mylist</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="n">compare</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>Python integer division behaves differently with -ve numbers ex: -3//2 will give -2 answer instead of -1 so always use int(-3/2) for integer division in problems</p>
</blockquote>
<h1 id="resources">Resources</h1>
<p><a href="https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32">The Modulo Operation (%) With Negative Numbers in Python</a></p>
<h3 id="cheat-sheet-pdf">Cheat Sheet PDF</h3>
<p><a href="https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing"><strong>Click Here</strong></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Google Programmable Search Engine</title>
      <link>https://samirpaulb.github.io/posts/google-programmable-search-engine/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/google-programmable-search-engine/</guid>
      <description>Google Programmable Search Engine</description>
      <content:encoded><![CDATA[<p>Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they&rsquo;re looking for. Because Programmable Search Engine is based on Google&rsquo;s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:</p>
<ul>
<li>Apply your site&rsquo;s look and feel to the search box and results page</li>
<li>Use search features such as refinements, autocomplete, and promotions to enhance your users&rsquo; search experience</li>
<li>Understand your users&rsquo; behavior by linking your search engine with  <a href="https://google.com/analytics/">Google Analytics</a></li>
<li>Make money from your search engine with  <a href="https://google.com/adsense">Google AdSense</a></li>
</ul>
<h3 id="demo">Demo:</h3>
<script async src="https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae">
</script>
<div class="gcse-search"></div>
<hr>
<h3 id="how-is-programmable-search-engine-different-from-google-web-search">How is Programmable Search Engine different from Google Web Search?</h3>
<p>You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:</p>
<ul>
<li>Emphasizes your results over anything else on the web</li>
<li>Doesn&rsquo;t include some  <a href="https://support.google.com/websearch#topic=3378866">Google Web Search features</a>, such as personalized results</li>
<li>May have a subset of results from the Google index if you include more than ten sites</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
