<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Samir Paul</title>
    <link>https://samirpaulb.github.io/series/projects/</link>
    <description>Recent content in Projects on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/series/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real-Time VoiceüéôÔ∏è Translatorüîä</title>
      <link>https://samirpaulb.github.io/posts/real-time-voice-translator/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/real-time-voice-translator/</guid>
      <description>Real-Time Voice Translator</description>
      <content:encoded><![CDATA[<p><b>Repository Link: <a href="https://github.com/SamirPaulb/real-time-voice-translator">github.com/SamirPaulb/real-time-voice-translator</a></b></p>
<h2 id="abstract">Abstract</h2>
<p><em>Cross-lingual communication is a challenging task that requires accurate translation and natural and expressive speech. Existing solutions often rely on intermediate text representations, which introduce latency and lose the prosodic features of the original speech. In this paper, we present Real-Time Voice Translator, a machine learning project that aims to overcome these limitations by using deep neural networks to directly translate voice from one language to another in real-time. Our project is a desktop application that supports Windows, Linux, and Mac operating systems. It allows users to select the languages they want to translate between and start speaking. The application listens to the user&rsquo;s voice and provides instant translations in real time while preserving the tone and emotion of the speaker. The application can also translate conversations between two or more people, enabling natural and fluent cross-lingual interactions. We evaluate our project on various metrics, such as translation quality, speech quality, latency, and user satisfaction. We demonstrate that our project achieves high performance and provides a seamless and natural experience of cross-lingual communication. We also discuss the future perspectives of our project, such as using voice cloning features to mimic the speaker&rsquo;s voice in the target language and enhancing the emotional preservation of the translated speech. We believe that our project has the potential to revolutionize the field of cross-lingual communication and open new possibilities for cross-cultural exchange and collaboration.</em></p>
<p><strong>Index Terms</strong>: <code>Real-Time Voice Translation</code>, <code>Deep Learning</code>, <code>Voice Tone and Emotion Preservation</code>, <code>Desktop Application</code>.</p>
<h2 id="introduction">Introduction</h2>
<p>Imagine bridging language barriers in real time, preserving emotional nuances and fostering genuine cross-cultural understanding. Real-Time Voice Translator (RTVT) unlocks this possibility, utilizing deep learning to translate spoken words instantly, while faithfully mirroring the speaker&rsquo;s tone and intent. This open-source, desktop application empowers seamless communication across languages, fostering empathy, collaboration, and a more connected world. This research unveils the technical backbone and transformative potential of RTVT, a tool poised to redefine how we interact and collaborate beyond linguistic borders.</p>
<h2 id="studies-and-findings">Studies and Findings</h2>
<p>The allure of instantaneous, seamless speech-to-speech translation across languages is undeniable. Research in end-to-end models like Google&rsquo;s Translatotron, directly mapping speech spectrograms, offers a glimpse into this future. However, the realities of limited language compatibility and lingering technical hurdles made such an approach unsuitable for this real-time voice translator project.</p>
<p>Drawing inspiration from established technologies, we embraced a hybrid approach, meticulously dissecting the translation process into speech-to-text, text-to-text translation, and finally, text-to-speech synthesis. This multi-step journey, while potentially a tad slower than its end-to-end counterparts, unlocked several key advantages. Firstly, it provided access to a vast pool of existing text translation models, vastly expanding the supported language pairs. Secondly, it paved the way for incorporating transliteration features, a valuable tool for bridging the gap between written and spoken forms of a language.</p>
<p>This decision wasn&rsquo;t merely a practical compromise; it was a deliberate move towards a more robust and adaptable framework. While sacrificing the immediacy of spectrogram-based models, we gained a translation engine capable of tackling a wider range of languages and scenarios. As the field of speech-to-speech translation continues to evolve, this hybrid approach offers a stable platform for ongoing development, promising to bring the dream of real-time, cross-lingual communication ever closer to reality.</p>
<h2 id="speech-translation-model">Speech Translation Model</h2>
<p>The Speech Translation Model (STM) orchestrates a series of interconnected processes to achieve real-time, cross-lingual voice communication. Here&rsquo;s a breakdown of its core steps:</p>
<ol>
<li><strong>Voice Input and Automatic Speech Recognition (ASR)</strong>:</li>
</ol>
<ul>
<li>
<p>The journey begins with capturing the user&rsquo;s spoken utterance in the source language.</p>
</li>
<li>
<p>ASR technology meticulously analyzes the audio signal, mapping its acoustic features to linguistic units.</p>
</li>
<li>
<p>The intricate task of identifying phonemes, words, and their boundaries within continuous speech is performed with remarkable accuracy.</p>
</li>
</ul>
<ol start="2">
<li><strong>Input Voice to Text Conversion</strong>:</li>
</ol>
<ul>
<li>
<p>The ASR process culminates in a textual representation of the spoken input, ready for further linguistic transformations.</p>
</li>
<li>
<p>This stage ensures that the model has a structured foundation for subsequent translation and transliteration operations.</p>
</li>
</ul>
<ol start="3">
<li><strong>Transliteration for Textual Adaptation</strong>:</li>
</ol>
<ul>
<li>
<p>To bridge the gap between different writing systems and enhance translation accuracy, transliteration steps in.</p>
</li>
<li>
<p>It meticulously maps the characters of the source language text to their closest equivalents in the target language.</p>
</li>
<li>
<p>This process seamlessly adapts language-specific nuances, ensuring a smooth transition between written forms.</p>
</li>
</ul>
<ol start="4">
<li><strong>Translation of Transliterated Text</strong>:</li>
</ol>
<ul>
<li>
<p>With the text carefully adapted for the target language, the translation engine takes centre stage.</p>
</li>
<li>
<p>Leveraging sophisticated machine translation algorithms, it deciphers the meaning of the source text and artfully reconstructs it in the target language.</p>
</li>
<li>
<p>The model navigates the complexities of grammar, syntax, and semantics, striving for fluency and accuracy in the translated output.</p>
</li>
</ul>
<ol start="5">
<li><strong>Text-to-Speech Synthesis</strong>:</li>
</ol>
<ul>
<li>
<p>The translated text now embarks on a journey back into the auditory realm.</p>
</li>
<li>
<p>Text-to-Speech (TTS) technology meticulously transforms written words into a natural-sounding speech signal.</p>
</li>
<li>
<p>This stage meticulously recreates the nuances of human intonation, rhythm, and pronunciation, breathing life into the translated message.</p>
</li>
</ul>
<ol start="6">
<li><strong>Voice Output</strong>:</li>
</ol>
<ul>
<li>
<p>The final step unveils the translated utterance in the target language, spoken aloud for the listener.</p>
</li>
<li>
<p>The model gracefully renders the translated text as intelligible speech, completing the cross-lingual communication loop.</p>
</li>
<li>
<p>solid foundation for subsequent translation.</p>
</li>
<li>
<p>deep-translator: This versatile library offers a comprehensive suite of translation capabilities, ensuring linguistic accuracy and fluency across a diverse range of language pairs.</p>
</li>
<li>
<p>google-transliteration-api: This API elegantly handled the task of transliteration, adapting text between different writing systems, fostering a seamless transition between languages.</p>
</li>
<li>
<p>cx-Freeze: This tool enabled the packaging of the STM into standalone executable applications for Windows, Linux, and macOS, significantly broadening its accessibility and potential user base.</p>
</li>
</ul>
<p><strong>Program Flow:</strong>
<img loading="lazy" src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/73dd62d6-798d-4129-aff3-16d6d932a817" alt="Program Flow"  />
</p>
<ul>
<li>
<p><strong>Voice Input</strong>: The journey begins with capturing the user&rsquo;s spoken utterance in the source language, meticulously handled by pyaudio.</p>
</li>
<li>
<p><strong>Automatic Speech Recognition</strong>: SpeechRecognition diligently analyzes the audio signal, converting it into text for further processing.</p>
</li>
<li>
<p><strong>Transliteration</strong>: The google-transliteration-api gracefully adapts the text to the target language&rsquo;s writing system, ensuring optimal translation accuracy.</p>
</li>
<li>
<p><strong>Translation</strong>: deep-translator leverages sophisticated translation algorithms to decipher the meaning of the source text and reconstruct it in the target language, preserving linguistic nuances.</p>
</li>
<li>
<p><strong>Text-to-Speech Synthesis</strong>: gTTS meticulously transforms the translated text into a natural-sounding speech signal, breathing life into the translated message.</p>
</li>
<li>
<p><strong>Voice Output</strong>: playsound delivers the translated utterance in the target language, completing the cross-lingual communication loop.</p>
</li>
</ul>
<h2 id="installation-and-usage">Installation and Usage</h2>
<h3 id="dependencies">Dependencies</h3>
<pre><code>&lt;=Python3.11, gTTS, pyaudio, playsound==1.2.2, deep-translator, SpeechRecognition, google-transliteration-api, cx-Freeze
</code></pre>
<h3 id="getting-started">Getting started</h3>
<ol>
<li>
<p>Clone <a href="https://github.com/SamirPaulb/real-time-voice-translator">this project</a> and create virtualenv (recommended) and activate virtualenv.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Create virtualenv
</span></span><span class="line"><span class="cl">python -m venv env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Linux/MacOS
</span></span><span class="line"><span class="cl">source env/bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Windows
</span></span><span class="line"><span class="cl">env\Scripts\activate
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Install require dependencies.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install --upgrade wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Run code and speech (have fun).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="install-windowslinuxmac-application">Install Windows/Linux/Mac Application</h3>
<p><a href="https://github.com/SamirPaulb/real-time-voice-translator/releases/latest"><img src="https://user-images.githubusercontent.com/132539454/278971282-8d676023-a03a-463c-8e55-3f0afe6e3e58.svg" alt="DOWNLOAD"></a></p>
<p>I am using <a href="https://github.com/marcelotduarte/cx_Freeze/tree/main">cx_Freeze</a> to build executable file of this app. The build settings can be changed by modifying the <a href="https://github.com/SamirPaulb/real-time-voice-translator/blob/main/setup.py">setup.py</a> file.</p>
<h5 id="build-installer-containing-all-the-files">Build installer containing all the files:</h5>
<ul>
<li>Windows: <code>python setup.py bdist_msi</code></li>
<li>Linux: <code>python setup.py bdist_rpm</code></li>
<li>Mac: <code>python setup.py bdist_mac</code></li>
</ul>
<h3 id="gui">GUI</h3>
<p><a href="#"><img src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/f96a4115-a88f-4096-9a00-954b8527d872" alt="App GUI"></a></p>
<h2 id="conclusion">Conclusion</h2>
<p>Real-Time Voice Translator shatters language barriers with its deep learning-powered hybrid approach. Beyond accurate translations, it captures the essence of human speech, fostering genuine cross-cultural understanding. This research unveils its robust framework, adaptable design, and potential for future advancements like voice cloning and emotion preservation. Real-Time Voice Translator intuitive interface and cross-platform compatibility empower diverse users to navigate the world with ease. More than just a tool, it&rsquo;s a bridge of empathy and collaboration, one voice at a time. By embracing Real-Time Voice Translator, we step closer to a world where communication transcends borders, uniting cultures and shaping a more connected future.</p>
<h2 id="future-work">Future Work</h2>
<p>While this project currently delivers impressive real-time translations, the future holds even greater potential for capturing the full spectrum of human communication. Sentiment and emotion analysis models like EmoNet and SyntaxNet offer exciting possibilities for preserving the speaker&rsquo;s intended meaning beyond mere words. Integrating these tools could allow Real-Time Voice Translator to translate expressions of joy, anger, or sarcasm with nuanced accuracy, fostering deeper cross-cultural understanding.</p>
<p>Open-source toolkits like PaddleSpeech and espnet, known for their advanced speech-processing capabilities, could further enhance the translation process. Their deep learning frameworks offer the potential for improvements in speech recognition, natural language understanding, and text-to-speech synthesis. Additionally, incorporating SoftVC VITS Singing Voice Conversion technology could unlock fascinating avenues for translating emotional melodies and vocal inflections, adding a truly human touch to translated speech.</p>
<p>We&rsquo;re actively exploring the integration of OpenAI&rsquo;s Whisper ASR model, renowned for its speech recognition accuracy, and ElevenLabs&rsquo; natural-sounding speech APIs. These advancements promise to elevate the user experience, delivering translated speech that seamlessly captures the speaker&rsquo;s original voice quality and emotional tone. Finally, accent softening models like Tomato.ai could be implemented to reduce speaker-specific characteristics in the translated speech, ensuring clearer and more universal comprehension.</p>
<p>By embracing these cutting-edge technologies and pursuing continuous research, Real-Time Voice Translator aims to transcend the limitations of traditional translation. Our vision is to create a tool that not only bridges languages but also bridges hearts, fostering a world where emotions and intentions resonate across all barriers.</p>
<h2 id="references">References</h2>
<ol>
<li>
<p>Cambria, Erik, and Jamin Shi. &ldquo;Semantic sentiment analysis.&rdquo; IEEE Transactions on Affective Computing 7.4 (2015): 266-279.</p>
</li>
<li>
<p>Socher, Richard, et al. &ldquo;Recursive deep learning for sentiment analysis.&rdquo; Proceedings of the 28th International Conference on Machine Learning. ACM, 2013.</p>
</li>
<li>
<p><a href="https://github.com/PaddlePaddle/PaddleSpeech">PaddlePaddle Team</a>. paddlepaddle speech recognition ON PaddlePaddle paddlepaddle.org.cn.</p>
</li>
<li>
<p>ESPNet Working Group. &ldquo;ESPnet.&rdquo; GitHub Pages, github.com.</p>
</li>
<li>
<p>Hsu, Wei-Ning, et al. &ldquo;SoftVC: High-fidelity TTS with Mel-Style Transfer.&rdquo; arXiv preprint arXiv:2301.04765 (2023).</p>
</li>
<li>
<p>OpenAI <a href="https://github.com/openai/whisper">Whisper</a>: Open-Source Speech Recognition.</p>
</li>
<li>
<p>ElevenLabs. &ldquo;ElevenLabs.&rdquo; eleventlabs.io.</p>
</li>
<li>
<p>Tomato.ai. &ldquo;Tomato.ai&rdquo;.</p>
</li>
<li>
<p>Mohri, Mehryar, et al. &ldquo;Foundations of machine learning.&rdquo; MIT press, 2018.</p>
</li>
</ol>
<hr>
<p>This post is licensed under a <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>. Distribution and adaptation are permitted under the terms of the license, with appropriate attribution required. All rights not expressly granted are reserved. For further information, please visit <a href="https://www.dmca.com/r/jkzgz6y">dmca.com/r/jkzgz6y</a>.</p>
<p><a href="https://www.dmca.com/r/jkzgz6y"><img loading="lazy" src="https://www.dmca.com/Badges/dmca-badge-w250-5x1-06.png" alt="DMCA.com Protection Status"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Online PDF Compression Tool</title>
      <link>https://samirpaulb.github.io/posts/online-pdf-compression-tool/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/online-pdf-compression-tool/</guid>
      <description>Online PDF Compression Tool</description>
      <content:encoded><![CDATA[<h3 id="about-the-project">About The Project:</h3>
<p>An online PDF file compression tool to reduce the size of a .pdf file. Python Flask is used to upload the file to a temporary location on the server.
In the backend, using the <code>PDFNetPython</code> library that file gets reduced and saved to its final location. After download, the files are automatically deleted from the server after 1 hour. Technologies used in this project: <code>Python3</code>, <code>Flask</code>, <code>C</code>, <code>Shell</code>, <code>Nix</code>, <code>Replit</code>, <code>Git</code>, <code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>.</p>
<ul>
<li><a href="https://filecompressor.samirpaul.repl.co">Live Demo üöÄ </a></li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172896703-9e4998c1-40da-46ae-810e-780e47a391f9.mp4" loading="lazy" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li>Landing Page:
<img loading="lazy" src="https://spcdn.pages.dev/assets/img/filecompressor-samirpaul1-repl-co-landing-page.webp" alt="Landing Page"  />
</li>
</ul>
<h3 id="flask-file-uploading">Flask File Uploading:</h3>
<p>In HTML form, the enctype property is set to <code>&quot;multipart/form-data&quot;</code> to publish the file to the URL.The URL handler extracts the file from the <code>request.files []</code> object and saves it to the required location. The path to the upload folder is defined as <code>app.config['UPLOAD_FOLDER']</code> and maximum size (in bytes) as
<code>maximum size (in bytes)</code>.
The server-side flask script fetches the file from the request object using <code>name = request.files['file'].filename</code>.
On successfully uploading the file, it is saved to the desired location on the server.
Here‚Äôs the Python code for the Flask application.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug</span> <span class="kn">import</span> <span class="n">secure_filename</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;upload.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/uploader&#39;</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">secure_filename</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s1">&#39;file uploaded successfully&#39;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-pdf-is-compressed-in-backend">How PDF is compressed in backend:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PDFNetPython3.PDFNetPython</span> <span class="kn">import</span> <span class="n">PDFDoc</span><span class="p">,</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="p">,</span> <span class="n">PDFNet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">output_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">output_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_file</span> <span class="o">=</span> <span class="n">input_file</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PDFNet</span><span class="o">.</span><span class="n">Initialize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span> <span class="o">=</span> <span class="n">PDFDoc</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">InitSecurityHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">Optimizer</span><span class="o">.</span><span class="n">Optimize</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="o">.</span><span class="n">e_linearized</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">input_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="file-download">File Download:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fname</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;static/resource/&#34;</span> <span class="o">+</span> <span class="nx">fname</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">blob</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">blob</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	      <span class="kr">const</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">fname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	  <span class="p">})</span>
</span></span><span class="line"><span class="cl">	  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="-how-to-contribute">ü§î How to contribute</h2>
<ul>
<li><input checked="" disabled="" type="checkbox"> Fork this repository;</li>
<li><input checked="" disabled="" type="checkbox"> Create a branch with your feature: <code>git checkout -b my-feature</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Commit your changes: <code>git commit -m &quot;feat: my new feature&quot;</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Push to your branch: <code>git push origin my-feature</code>.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>PyShooter Python Game</title>
      <link>https://samirpaulb.github.io/posts/pyshooter/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/pyshooter/</guid>
      <description>PyShooter Python two-dimensional shooter game</description>
      <content:encoded><![CDATA[<p><a href="https://www.python.org"><img loading="lazy" src="https://img.shields.io/badge/language-python-blue.svg?style=flat" alt="Language"  />
</a>
<a href="https://www.pygame.org/news.html"><img loading="lazy" src="https://img.shields.io/badge/module-pygame-brightgreen.svg?style=flat" alt="Module"  />
</a></p>
<p>PyShooter is a two-dimensional shooter game in which the player runs horizontally and fires at enemies.</p>
<h5 id="repository-httpsgithubcomsamirpaulbpyshooterhttpsgithubcomsamirpaulbpyshooter">Repository: <a href="https://github.com/SamirPaulb/PyShooter">https://github.com/SamirPaulb/PyShooter</a></h5>
<h2 id="demo">Demo:</h2>
<iframe width="100%" height="420" src="https://www.youtube.com/embed/rg-49OTHZVY" loading="lazy" title="PyShooter - Samir Paul - YouTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="true"></iframe>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/214920668-ef657089-b71f-43c8-8011-a202a09f5531.mp4" loading="lazy" width="100%" height = "500" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<p>Vimeo: <a href="https://vimeo.com/809728956">https://vimeo.com/809728956</a></p>
<!---
<a href="https://www.youtube.com/watch?v=rg-49OTHZVY">
<img src="https://raw.githubusercontent.com/SamirPaul1/assets/main/pygame-youtube-video-thumbnail.jpg" alt="PyShooter Demo YouTube" width="700" height="370">
</a>
-->
<h2 id="how-to-play">How To Play</h2>
<ul>
<li>If you don&rsquo;t have <a href="https://www.python.org/downloads/">Python</a> or <a href="https://www.pygame.org/download.shtml">Pygame</a> installed, you can simply double click the .exe file to play the game.
<strong>Note:</strong> <em>The .exe file needs to stay in the same directory as the sounds, images, and font folders.</em></li>
</ul>
<p>Install Pygame <code>pip install pygame</code></p>
<ul>
<li>If you have the correct version of Python and Pygame installed, you can run the program in the command prompt / terminal.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> PyShooter
</span></span><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>Credits for assets used:</p>
<ol>
<li><a href="https://erayzesen.itch.io/pixel-platformer">https://erayzesen.itch.io/pixel-platformer</a></li>
<li><a href="https://secrethideout.itch.io/team-wars-platformer-battle">https://secrethideout.itch.io/team-wars-platformer-battle</a></li>
<li><a href="https://soundimage.org/fantasywonder">https://soundimage.org/fantasywonder</a></li>
<li><a href="https://gushh.net/blog/free-game-sprites-explosion-3">https://gushh.net/blog/free-game-sprites-explosion-3</a></li>
<li><a href="https://mtk.itch.io/grenades-16x16">https://mtk.itch.io/grenades-16x16</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Text File Compressor De-compressor Web App</title>
      <link>https://samirpaulb.github.io/posts/text-file-compressor-de-compressor-web-app/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/text-file-compressor-de-compressor-web-app/</guid>
      <description>Text File Compressor De-compressor Web App</description>
      <content:encoded><![CDATA[<ul>
<li>This webapp uses Huffman Coding for Text Compression and De-compression.</li>
<li>Made with <code>JavaScript</code>, <code>HTML5</code> and <code>CSS3</code>.</li>
<li>Live Demo: <a href="https://samirpaulb.github.io/txt-compressor/"><strong>samirpaulb.github.io/txt-compressor</strong></a></li>
<li>Repository: <a href="https://github.com/SamirPaulb/txt-compressor">github.com/SamirPaulb/txt-compressor</a></li>
</ul>
<h2 id="about-this-application">About this application:</h2>
<ul>
<li>An online text(.txt) file compressor, decompressor which uses Huffman Algorithm to encode/compress files by 35% and decode them back to the original size.</li>
<li>This tool assigns a variable-length code to the characters of the uploaded file based on the frequency of occurrence. Then converts characters to that special code which takes less size than the original ASCII codes. Huffman code forms a binary tree assigning the most frequent characters with the smallest codes and longer codes for the least frequent characters.</li>
<li>A Huffman code is a tree, built bottom up, starting with the list of different characters appearing in a text and their frequency.</li>
<li>With this lossless data compression method, this tool can compress the file size by 35 to 40%.</li>
<li>As file size gets reduced and original characters get changed to special characters so this encoding also improves security by encrypting the file during file sharing.</li>
<li>With the decoding feature, the user can decode the encoded file and get back the original file of the previous size.</li>
<li>I have used JavaScript to implement the algorithms so that browser can compile the code and HTML, CSS to make the website responsive.</li>
<li>Additional instructions and warnings are provided if steps are not followed correctly.</li>
<li>An <a href="https://samirpaulb.github.io/txt-compressor/info.html">Info page</a> is added to give more information about tecnique of <strong>Lossless Data Compression</strong> with Huffman coding.</li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172716965-50560f4a-2acf-4013-ae87-8b474b2a09e3.mp4" loading="lazy" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li><input checked="" disabled="" type="checkbox"> Landing Page:</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-landing-page.png" alt="landing-page"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Upload File</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step1.png" alt="step1"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Select Action (Compress / De-compress)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step2.png" alt="step2"  />
</p>
<ul>
<li>
<p><input checked="" disabled="" type="checkbox"> Wait for File Download</p>
<ul>
<li>
<p>File gets downloaded automatically when selected process is complete.</p>
</li>
<li>
<p>Compression - Compression Ratio is also displayed</p>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-step3.png" alt="compression"  />
</p>
<ul>
<li>De-compression</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-decompression.png" alt="decompression"  />
</p>
</li>
<li>
<p>Additional Instructions and Warnings are provided if the above steps are not followed correctly</p>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-nofile.png" alt="noFile"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-verysmallfile.png" alt="smallFile"  />
</p>
<ul>
<li>About the tecnique of Lossless Data Compression with Huffman coding.</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/text-file-compressor-de-compressor-web-app-info.jpeg" alt="info1"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Curated List of Project Based Tutorials</title>
      <link>https://samirpaulb.github.io/posts/curated-list-of-project-based-tutorials/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/curated-list-of-project-based-tutorials/</guid>
      <description>Curated List of Project Based Tutorials</description>
      <content:encoded><![CDATA[<h1 id="project-based-learning">Project Based Learning</h1>
<blockquote>
<p>A list of programming tutorials in which aspiring software developers learn how to build an application from scratch. These tutorials are divided into different primary programming languages. Tutorials may involve multiple technologies and languages.</p>
</blockquote>
<h2 id="table-of-contents">Table of Contents:</h2>
<ul>
<li><a href="#c">C#</a></li>
<li><a href="#cc">C/C++</a></li>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#f">F#</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html-and-css">HTML/CSS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#kotlin">Kotlin</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#ocaml">OCaml</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#additional-resources">Additional resources</a></li>
</ul>
<h2 id="cc">C/C++:</h2>
<ul>
<li><a href="https://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 14 on is written in C)</li>
<li><a href="https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory">Memory Allocators 101 - Write a simple memory allocator</a></li>
<li><a href="https://brennan.io/2015/01/16/write-a-shell-in-c/">Write a Shell in C</a></li>
<li><a href="https://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/">Write a FUSE Filesystem</a></li>
<li><a href="https://viewsourcecode.org/snaptoken/kilo/">Build Your Own Text Editor</a></li>
<li><a href="https://www.buildyourownlisp.com/">Build Your Own Lisp</a></li>
<li><a href="https://nesdoug.com/">How to Program an NES Game in C</a></li>
<li><a href="https://github.com/tuhdo/os01">Write an OS from scratch</a></li>
<li><a href="https://github.com/cfenollosa/os-tutorial">How to create an OS from scratch </a></li>
<li><a href="https://austinmorlan.com/posts/chip8_emulator/">Building a CHIP-8 Emulator</a></li>
<li><a href="https://lazyfoo.net/tutorials/SDL/">Beginning Game Programming with C++ and SDL</a></li>
<li><a href="https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">Implementing a Key-Value Store</a></li>
<li>Tiny 3D graphics projects
<ul>
<li><a href="https://github.com/ssloy/tinyrenderer/wiki">Tiny Renderer or how OpenGL works: software rendering in 500 lines of code</a></li>
<li><a href="https://github.com/ssloy/tinyraytracer/wiki">Understandable RayTracing in 256 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinykaboom/wiki">KABOOM! in 180 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinyraycaster/wiki">486 lines of C++: old-school FPS in a weekend</a></li>
</ul>
</li>
<li>Writing a minimal x86-64 JIT compiler in C++
<ul>
<li><a href="https://solarianprogrammer.com/2018/01/10/writing-minimal-x86-64-jit-compiler-cpp/">Part 1</a></li>
<li><a href="https://solarianprogrammer.com/2018/01/12/writing-minimal-x86-64-jit-compiler-cpp-part-2/">Part 2</a></li>
</ul>
</li>
<li><a href="https://howistart.org/posts/cpp/1/index.html">Build a Live Code-reloader Library for C++</a></li>
<li><a href="https://github.com/jamesroutley/write-a-hash-table">Write a hash table in C</a></li>
<li><a href="https://cstack.github.io/db_tutorial/">Let&rsquo;s Build a Simple Database</a></li>
<li><a href="https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel">Let&rsquo;s Write a Kernel</a></li>
<li><a href="https://3zanders.co.uk/2017/10/13/writing-a-bootloader/">Write a Bootloader in C</a></li>
<li><a href="https://blog.lizzie.io/linux-containers-in-500-loc.html">Linux Container in 500 Lines of Code</a></li>
<li><a href="https://justinmeiners.github.io/lc3-vm/">Write Your Own Virtual Machine</a></li>
<li><a href="https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html">Learning KVM - Implement Your Own Linux Kernel</a></li>
<li>Write a C compiler
<ul>
<li><a href="https://norasandler.com/2017/11/29/Write-a-Compiler.html">Part 1: Integers, Lexing and Code Generation</a></li>
<li><a href="https://norasandler.com/2017/12/05/Write-a-Compiler-2.html">Part 2: Unary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/15/Write-a-Compiler-3.html">Part 3: Binary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/28/Write-a-Compiler-4.html">Part 4: Even More Binary Operators</a></li>
<li><a href="https://norasandler.com/2018/01/08/Write-a-Compiler-5.html">Part 5: Local Variables</a></li>
<li><a href="https://norasandler.com/2018/02/25/Write-a-Compiler-6.html">Part 6: Conditionals</a></li>
<li><a href="https://norasandler.com/2018/03/14/Write-a-Compiler-7.html">Part 7: Compound Statements</a></li>
<li><a href="https://norasandler.com/2018/04/10/Write-a-Compiler-8.html">Part 8: Loops</a></li>
<li><a href="https://norasandler.com/2018/06/27/Write-a-Compiler-9.html">Part 9: Functions</a></li>
<li><a href="https://norasandler.com/2019/02/18/Write-a-Compiler-10.html">Part 10: Global Variables</a></li>
</ul>
</li>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm">Implementing a Language with LLVM</a></li>
<li><a href="https://jguegant.github.io//jguegant.github.io/blogs/tech/meta-crush-saga.html">Meta Crush Saga: a C++17 compile-time game</a></li>
<li><a href="https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0">High-Performance Matrix Multiplication</a></li>
<li>Space Invaders from Scratch
<ul>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-1.html">Part 1</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-2.html">Part 2</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-3.html">Part 3</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-4.html">Part 4</a></li>
<li><a href="https://nicktasios.nl/posts/space-invaders-from-scratch-part-5.html">Part 5</a></li>
</ul>
</li>
<li><a href="https://javilop.com/gamedev/tetris-tutorial-in-c-platform-independent-focused-in-game-logic-for-beginners/">Tetris Tutorial in C++ Platform Independent</a></li>
<li>Writing a Linux Debugger
<ul>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">Part 1: Setup</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/">Part 2: Breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-registers/">Part 3: Registers and memory</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-elf-dwarf/">Part 4: Elves and dwarves</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-signal/">Part 5: Source and signals</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-dwarf-step/">Part 6: Source-level stepping</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-break/">Part 7: Source-level breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-unwinding/">Part 8: Stack unwinding</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-variables/">Part 9: Handling variables</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-advanced-topics/">Part 10: Advanced topics</a></li>
</ul>
</li>
<li>Let&rsquo;s write a compiler
<ul>
<li><a href="https://briancallahan.net/blog/20210814.html">Part 1: Introduction, selecting a language, and doing some planning</a></li>
<li><a href="https://briancallahan.net/blog/20210815.html">Part 2: A lexer</a></li>
<li><a href="https://briancallahan.net/blog/20210816.html">Part 3: A parser</a></li>
<li><a href="https://briancallahan.net/blog/20210817.html">Part 4: Testing</a></li>
<li><a href="https://briancallahan.net/blog/20210818.html">Part 5: A code generator</a></li>
<li><a href="https://briancallahan.net/blog/20210819.html">Part 6: Input and output</a></li>
<li><a href="https://briancallahan.net/blog/20210822.html">Part 7: Arrays</a></li>
<li><a href="https://briancallahan.net/blog/20210826.html">Part 8: Strings, forward references, and conclusion</a></li>
</ul>
</li>
</ul>
<h3 id="network-programming">Network programming</h3>
<ul>
<li>
<p>Let&rsquo;s Code a TCP/IP Stack</p>
<ul>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/">Part 1: Ethernet &amp; ARP</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-2-ipv4-icmpv4/">Part 2: IPv4 &amp; ICMPv4</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-3-tcp-handshake/">Part 3: TCP Basics &amp; Handshake</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-4-tcp-data-flow-socket-api/">Part 4: TCP Data Flow &amp; Socket API</a></li>
<li><a href="https://www.saminiir.com/lets-code-tcp-ip-stack-5-tcp-retransmission/">Part 5: TCP Retransmission</a></li>
</ul>
</li>
<li>
<p>Programming concurrent servers</p>
<ul>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-1-introduction/">Part 1 - Introduction</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-2-threads/">Part 2 - Threads</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-3-event-driven/">Part 3 - Event-driven</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-4-libuv/">Part 4 - libuv</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-5-redis-case-study/">Part 5 - Redis case study</a></li>
<li><a href="https://eli.thegreenplace.net/2018/concurrent-servers-part-6-callbacks-promises-and-asyncawait/">Part 6 - Callbacks, Promises and async/await</a></li>
</ul>
</li>
<li>
<p>MQTT Broker from scratch</p>
<ul>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker">Part 1 - The protocol</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p2">Part 2 - Networking</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p3">Part 3 - Server</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p4">Part 4 - Data structures</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p5">Part 5 - Topic abstraction</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p6">Part 6 - Handlers</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus">Bonus - Multithreading</a></li>
</ul>
</li>
</ul>
<h3 id="opengl">OpenGL:</h3>
<ul>
<li>Creating 2D Breakout game clone in C++ with OpenGL
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Breakout">Breakout</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Setting-up">Setting up</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Rendering-Sprites">Rendering Sprites</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Levels">Levels</a></li>
<li>Collisions
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Ball">Ball</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-detection">Collision detection</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-resolution">Collision resolution</a></li>
</ul>
</li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Particles">Particles</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Postprocessing">Postprocessing</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Powerups">Powerups</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Audio">Audio</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Render-text">Render text</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Final-thoughts">Final thoughts</a></li>
</ul>
</li>
<li><a href="https://handmadehero.org">Handmade Hero</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLMZ_9w2XRxiZq1vfw1lrpCMRDufe2MKV_">How to Make Minecraft in C++/OpenGL</a> (video)</li>
</ul>
<h2 id="c">C#:</h2>
<ul>
<li><a href="https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/">Learn C# By Building a Simple RPG Game</a></li>
<li><a href="https://roguesharp.wordpress.com/">Create a Rogue-like game in C#</a></li>
<li><a href="https://www.intertech.com/Blog/xamarin-tutorial-part-1-create-a-blank-app/">Create a Blank App with C# and Xamarin (work in progress)</a></li>
<li><a href="https://www.raywenderlich.com/134049/building-ios-apps-with-xamarin-and-visual-studio">Build iOS Photo Library App with Xamarin and Visual Studio</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLVMqA0_8O85yC78I4Xj7z48ES48IQBa7p">Building the CoreWiki</a> This is a Wiki-style content management system that has been completely written in C# with ASP.NET Core and Razor Pages. You can find the source code <a href="https://github.com/csharpfritz/CoreWiki">here</a>.</li>
</ul>
<h2 id="clojure">Clojure:</h2>
<ul>
<li><a href="https://howistart.org/posts/clojure/1/index.html">Build a Twitter Bot with Clojure</a></li>
<li><a href="https://bernhardwenzel.com/articles/clojure-spellchecker/">Building a Spell-Checker</a></li>
<li><a href="https://hackernoon.com/building-a-jira-integration-with-clojure-atlassian-connect-506ebd112807">Building a JIRA integration with Clojure &amp; Atlassian Connect</a></li>
<li><a href="https://github.com/aliaksandr-s/prototyping-with-clojure">Prototyping with Clojure</a></li>
<li><a href="https://shaunlebron.github.io/t3tr0s-slides">Tetris in ClojureScript</a></li>
</ul>
<h2 id="dart">Dart:</h2>
<h3 id="flutter">Flutter:</h3>
<ul>
<li><a href="https://youtu.be/O3nmP-lZAdg">Amazon Clone with Admin Panel</a></li>
<li><a href="https://youtu.be/7dAt-JMSCVQ">Food Delivery App</a></li>
<li><a href="https://youtu.be/0_GJ1w_iG44">Google Docs Clone</a></li>
<li><a href="https://youtu.be/mEPm9w5QlJM">Instagram Clone</a></li>
<li><a href="https://youtu.be/Aut-wfXacXg">Multiplayer TicTacToe Game</a></li>
<li><a href="https://youtu.be/4E4V9F3cbp4">TikTok Clone</a></li>
<li><a href="https://youtu.be/71AsYo2q_0Y">Ticket Booking App</a></li>
<li><a href="https://youtu.be/x4DydJKVvQk">Travel App</a></li>
<li><a href="https://youtu.be/U9YKZrDX0CQ">Twitch Clone</a></li>
<li><a href="https://youtu.be/yqwfP2vXWJQ">WhatsApp Clone</a></li>
<li><a href="https://youtu.be/_W0RN_Cqhpg">Wordle Clone</a></li>
<li><a href="https://youtu.be/sMA1dKbv33Y">Zoom Clone</a></li>
</ul>
<h2 id="elixir">Elixir</h2>
<ul>
<li><a href="https://sheharyar.me/blog/simple-chat-phoenix-elixir/">Building a Simple Chat App With Elixir and Phoenix</a></li>
<li><a href="https://medium.com/free-code-camp/how-to-write-a-super-fast-link-shortener-with-elixir-phoenix-and-mnesia-70ffa1564b3c">How to write a super fast link shortener with Elixir, Phoenix, and Mnesia</a></li>
</ul>
<h2 id="erlang">Erlang</h2>
<ul>
<li><a href="https://medium.com/@kansi/chatbus-build-your-first-multi-user-chat-room-app-with-erlang-otp-b55f72064901">ChatBus : build your first multi-user chat room app with Erlang/OTP</a></li>
<li><a href="https://marianoguerra.org/posts/making-a-chat-app-with-erlang-rebar-cowboy-and-bullet.html">Making a Chat App with Erlang, Rebar, Cowboy and Bullet</a></li>
</ul>
<h2 id="f">F#:</h2>
<ul>
<li><a href="https://tomasp.net/blog/2018/write-your-own-excel">Write your own Excel in 100 lines of F#</a></li>
</ul>
<h2 id="java">Java:</h2>
<ul>
<li><a href="https://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 4-13 is written in Java)</li>
<li><a href="https://javarevisited.blogspot.com/2015/06/how-to-create-http-server-in-java-serversocket-example.html">Build a Simple HTTP Server with Java</a></li>
<li><a href="https://www.youtube.com/watch?v=dhWL4DC7Krs">Build an Android Flashlight App</a> (video)</li>
<li><a href="https://spring.io/guides/gs/securing-web/">Build a Spring Boot App with User Authentication</a></li>
</ul>
<h2 id="javascript">JavaScript:</h2>
<ul>
<li><a href="https://javascript30.com">Build 30 things in 30 days with 30 tutorials</a></li>
<li><a href="https://medium.com/codingthesmartway-com-blog/pure-javascript-building-a-real-world-application-from-scratch-5213591cfcd6">Build an App in Pure JS</a></li>
<li><a href="https://link.medium.com/wWUO7TN8SS">Build a Jupyter Notebook Extension</a></li>
<li><a href="https://medium.com/javascript-in-plain-english/build-tic-tac-toe-game-using-javascript-3afba3c8fdcc">Build a TicTacToe Game with JavaScript</a></li>
<li><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893">Build a Simple Weather App With Vanilla JavaScript</a></li>
<li><a href="https://github.com/dwyl/javascript-todo-list-tutorial">Build a Todo List App in JavaScript</a></li>
</ul>
<h2 id="html-and-css">HTML and CSS:</h2>
<ul>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-delightful-loading-screen-in-5-minutes-847991da509f">Build A Loading Screen</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-an-html-calculator-app-from-scratch-using-javascript-4454b8714b98">Build an HTML Calculator with JS</a></li>
<li><a href="https://www.freecodecamp.org/news/think-like-a-programmer-how-to-build-snake-using-only-javascript-html-and-css-7b1479c3339e/">Build Snake using only JavaScript, HTML &amp; CSS</a></li>
</ul>
<h3 id="mobile-application">Mobile Application:</h3>
<ul>
<li><a href="https://egghead.io/courses/build-a-react-native-todo-application">Build a React Native Todo Application</a></li>
<li><a href="https://medium.com/@alialhaddad/how-to-use-redux-thunk-in-react-and-react-native-4743a1321bd0">Build a React Native Application with Redux Thunk</a></li>
</ul>
<h3 id="web-applications">Web Applications:</h3>
<h4 id="react">React:</h4>
<ul>
<li><a href="https://serverless-stack.com/">Create Serverless React.js Apps</a></li>
<li><a href="https://codeloveandboards.com/blog/2016/01/04/trello-tribute-with-phoenix-and-react-pt-1/">Create a Trello Clone</a></li>
<li><a href="https://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio">Create a Character Voting App with React, Node, MongoDB and SocketIO</a></li>
<li><a href="https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/">React Tutorial: Cloning Yelp</a></li>
<li><a href="https://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html">Build a Full Stack Movie Voting App with Test-First Development using Mocha, React, Redux and Immutable</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">Build a Twitter Stream with React and Node</a></li>
<li><a href="https://medium.com/@kris101/clone-medium-on-node-js-and-react-js-731cdfbb6878">Build A Simple Medium Clone using React.js and Node.js</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-integrate-mailchimp-in-a-javascript-web-app-2a889fb43f6f">Integrate MailChimp in JS</a></li>
<li><a href="https://medium.freecodecamp.org/building-chrome-extensions-in-react-parcel-79d0240dd58f">Build A Chrome Extension with React + Parcel</a></li>
<li><a href="https://blog.hasura.io/tutorial-fullstack-react-native-with-graphql-and-authentication-18183d13373a">Build A ToDo App With React Native</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-chat-application-using-react-redux-redux-saga-and-web-sockets-47423e4bc21a">Make a Chat Application</a></li>
<li><a href="https://medium.freecodecamp.org/create-a-news-app-using-react-native-ced249263627">Create a News App with React Native</a></li>
<li><a href="https://medium.freecodecamp.org/learn-webpack-for-react-a36d4cac5060">Learn Webpack For React</a></li>
<li><a href="https://blog.bitsrc.io/testing-your-react-app-with-puppeteer-and-jest-c72b3dfcde59">Testing React App With Puppeteer and Jest</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-your-own-react-boilerplate-2f8cbbeb9b3f">Build Your Own React Boilerplate</a></li>
<li><a href="https://medium.freecodecamp.org/create-gameoflife-with-react-in-one-hour-8e686a410174">Code The Game Of Life With React</a></li>
<li><a href="https://hackernoon.com/a-basic-react-redux-introductory-tutorial-adcc681eeb5e">A Basic React+Redux Introductory Tutorial</a></li>
<li><a href="https://hackernoon.com/build-an-appointment-scheduler-using-react-twilio-and-cosmic-js-95377f6d1040">Build an Appointment Scheduler</a></li>
<li><a href="https://codeburst.io/build-a-chat-app-with-sentiment-analysis-using-next-js-c43ebf3ea643">Build A Chat App with Sentiment Analysis</a></li>
<li><a href="https://hackernoon.com/full-stack-web-application-using-react-node-js-express-and-webpack-97dbd5b9d708">Build A Full Stack Web Application Setup</a></li>
<li><a href="https://www.youtube.com/watch?v=hT3j87FMR6M">Create Todoist clone with React and Firebase</a></li>
<li>Build A Random Quote Machine
<ul>
<li><a href="https://www.youtube.com/watch?v=3QngsWA9IEE">Part 1</a></li>
<li><a href="https://www.youtube.com/watch?v=XnoTmO06OYo">Part 2</a></li>
<li><a href="https://www.youtube.com/watch?v=us51Jne67_I">Part 3</a></li>
<li><a href="https://www.youtube.com/watch?v=iZx7hqHb5MU">Part 4</a></li>
<li><a href="https://www.youtube.com/watch?v=lpba9vBqXl0">Part 5</a></li>
<li><a href="https://www.youtube.com/watch?v=Jvp8j6zrFHE">Part 6</a></li>
<li><a href="https://www.youtube.com/watch?v=M_hFfrN8_PQ">Part 7</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=-edmQKcOW8s">React Phone E-Commerce Project(video)</a></li>
</ul>
<h4 id="angular">Angular:</h4>
<ul>
<li>
<p><a href="https://hackhands.com/building-instagram-clone-angularjs-satellizer-nodejs-mongodb/">Build an Instagram Clone with Angular 1.x</a></p>
</li>
<li>
<p>Build an offline-capable Hacker News client with Angular 2+</p>
<ul>
<li><a href="https://houssein.me/angular2-hacker-news">Part 1</a></li>
<li><a href="https://houssein.me/progressive-angular-applications">Part 2</a></li>
</ul>
</li>
<li>
<p><a href="https://thinkster.io/django-angularjs-tutorial">Build a Google+ clone with Django and AngularJS (Angular 1.x)</a></p>
</li>
<li>
<p>Build A Beautiful Real World App with Angular 8 :</p>
<ul>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e">Part I</a></li>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-8-the-ultimate-guide-2019-part-ii-fe70852b2d6d">Part II</a></li>
</ul>
</li>
<li>
<p><a href="https://medium.com/@tomastrajan/how-to-build-responsive-layouts-with-bootstrap-4-and-angular-6-cfbb108d797b">Build Responsive layout with BootStrap 4 and Angular 6</a></p>
</li>
<li>
<p>ToDo App with Angular 5</p>
<ul>
<li><a href="https://www.discoversdk.com/blog/intro-to-angular-and-the-evolution-of-the-web">Introduction to Angular</a></li>
<li><a href="https://www.discoversdk.com/blog/angular-5-to-do-list-app-part-1">Part 1</a></li>
</ul>
</li>
</ul>
<h4 id="node">Node:</h4>
<ul>
<li><a href="https://scotch.io/tutorials/building-a-real-time-markdown-viewer">Build a real-time Markdown Editor with NodeJS</a></li>
<li><a href="https://mherman.org/blog/2016/04/28/test-driven-development-with-node/">Test-Driven Development with Node, Postgres and Knex</a></li>
<li>Write a Twitter Bot in Node.js
<ul>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-in-just-38-lines-of-code-ed92db9eb078">Part 1</a></li>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-part-2-do-more-2ef1e039715d">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-simple-search-bot-in-30-minutes-eb56fcedcdb1">Build A Simple Search Bot in 30 minutes</a></li>
<li><a href="https://medium.freecodecamp.org/how-i-built-a-job-scraping-web-app-using-node-js-and-indreed-7fbba124bbdc">Build A Job Scraping Web App</a></li>
<li><a href="https://blog.scottlogic.com/2017/05/22/gifbot-github-integration.html">Building a GitHub App</a></li>
<li>How to build your own Uber-for-X App using JavaScript, Node.JS, MongoDB and Web Sockets
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app-part-2/">Part 2</a></li>
</ul>
</li>
</ul>
<h4 id="vue">Vue</h4>
<ul>
<li><a href="https://medium.com/@anas.mammeri/vue-2-firebase-how-to-build-a-vue-app-with-firebase-authentication-system-in-15-minutes-fdce6f289c3c">Vue 2 + Firebase: How to build a Vue app with Firebase authentication system in 15 minutes</a></li>
<li><a href="https://matthiashager.com/complete-vuejs-application-tutorial/">Vue.js Application Tutorial ‚Äì Creating a Simple Budgeting App with Vue</a></li>
<li><a href="https://scotch.io/tutorials/build-a-blog-with-vue-graphql-and-apollo-client">Build a Blog with Vue, GraphQL and Apollo</a></li>
<li>Build a full stack web application using MEVN (MongoDB, Express, Vue, Node) stack
<ul>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0">Part 1</a></li>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-2-2-9ebcf8a22753">Part 2</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=78tNYZUS-ps">Vue.js To-Do List Tutorial (video)</a></li>
<li><a href="https://www.ably.io/tutorials/peer-to-peer-vue">Vue 2 + Pub/Sub: Build a peer to peer multi-user platform for games</a></li>
</ul>
<h4 id="others-hapi-express">Others (Hapi, Express&hellip;):</h4>
<ul>
<li>Build a Progressive Web Application (PWA)
<ul>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-1-offline-first-with-service-worker/">Part 1</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-2-instant-loading-with-indexeddb/">Part 2</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-3-push-notifications/">Part 3</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/build-native-desktop-apps-with-javascript-a49ede90d8e9">Build A Native Desktop App with JS</a></li>
<li>Build a Powerful API with NodeJs,GraphQL and Hapi
<ul>
<li><a href="https://medium.com/@wesharehoodies/how-to-setup-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-e251ac189649">Part I</a></li>
</ul>
</li>
</ul>
<h4 id="d3js">D3.js</h4>
<ul>
<li><a href="https://www.sitepoint.com/d3-js-data-visualizations/">Learn D3 using examples</a></li>
<li><a href="https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b">Learn To Make A Line Chart</a></li>
</ul>
<h3 id="game-development">Game Development:</h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser">Make 2D Breakout Game using Phaser</a></li>
<li>Make Flappy Bird in HTML5 and JavaScript with Phaser
<ul>
<li><a href="https://www.lessmilk.com/tutorial/flappy-bird-phaser-1">Part 1</a></li>
<li><a href="https://www.lessmilk.com/tutorial/flappy-bird-phaser-2">Part 2</a></li>
</ul>
</li>
</ul>
<h3 id="desktop-application">Desktop Application:</h3>
<ul>
<li><a href="https://medium.freecodecamp.org/build-a-desktop-chat-app-with-react-electron-and-chatkit-744d168e6f2f">Build A Desktop Chat App with React and Electron</a></li>
</ul>
<h3 id="miscellaneous">Miscellaneous:</h3>
<ul>
<li><a href="https://www.pubnub.com/blog/build-yourself-a-web-framework-in-less-than-20-lines-of-code/">How to Build a Web Framework in Less Than 20 Lines of Code</a></li>
<li><a href="https://zapier.com/engineering/how-to-build-redux/">Build Yourself a Redux</a></li>
<li><a href="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060">How to write your own Virtual DOM</a></li>
<li><a href="https://andrewgriffithsonline.com/blog/serverless-websockets-on-aws/">Build A Realtime Serverless GraphQL API with WebSockets on AWS</a></li>
</ul>
<h2 id="kotlin">Kotlin:</h2>
<ul>
<li><a href="https://medium.com/@juanchosaravia/learn-kotlin-while-developing-an-android-app-introduction-567e21ff9664">Keddit - Learn Kotlin While Developing an Android Application</a></li>
</ul>
<h2 id="lua">Lua:</h2>
<h3 id="l√∂ve">L√ñVE:</h3>
<ul>
<li>BYTEPATH: Creation of a Complete Game with Lua and L√ñVE
<ul>
<li><a href="https://github.com/SSYGEN/blog/issues/30">Part 0: Introduction</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/15">Part 1: Game Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/16">Part 2: Libraries</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/17">Part 3: Rooms and Areas</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/18">Part 4: Exercises</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/19">Part 5: Game Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/20">Part 6: Player Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/21">Part 7: Player Stats and Attacks</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/22">Part 8: Enemies</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/23">Part 9: Director and Gameplay Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/24">Part 10: Coding Practices</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/25">Part 11: Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/26">Part 12: More Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/27">Part 13: Skill Tree</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/28">Part 14: Console</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/29">Part 15: Final</a></li>
</ul>
</li>
</ul>
<h2 id="python">Python:</h2>
<h3 id="web-scraping">Web Scraping:</h3>
<ul>
<li><a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/">Mining Twitter Data with Python</a></li>
<li><a href="https://realpython.com/blog/python/web-scraping-with-scrapy-and-mongodb/">Scrape a Website with Scrapy and MongoDB</a></li>
<li><a href="https://www.byperth.com/2018/04/25/guide-web-scraping-101-what-you-need-to-know-and-how-to-scrape-with-python-selenium-webdriver/">How To Scrape With Python and Selenium WebDriver</a></li>
<li><a href="https://medium.com/@nishantsahoo.in/which-movie-should-i-watch-5c83a3c0f5b1">Which Movie Should I Watch using BeautifulSoup</a></li>
</ul>
<h3 id="web-applications-1">Web Applications:</h3>
<ul>
<li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">Build a Microblog with Flask</a></li>
<li><a href="https://tutorial.djangogirls.org/en/">Create a Blog Web App In Django</a></li>
<li><a href="https://www.twilio.com/blog/2015/03/choose-your-own-adventures-presentations-wizard-mode-part-1-of-3.html">Choose Your Own Adventure Presentations</a></li>
<li><a href="https://realpython.com/blog/python/rethink-flask-a-simple-todo-list-powered-by-flask-and-rethinkdb/">Build a Todo List with Flask and RethinkDB</a></li>
<li><a href="https://www.obeythetestinggoat.com/">Build a Todo List with Django and Test-Driven Development</a></li>
<li><a href="https://www.skybert.net/python/developing-a-restful-micro-service-in-python/">Build a RESTful Microservice in Python</a></li>
<li><a href="https://testdriven.io/">Microservices with Docker, Flask, and React</a></li>
<li><a href="https://pythonspot.com/flask-web-app-with-python/">Build A Simple Web App With Flask</a></li>
<li><a href="https://codeburst.io/create-a-django-api-in-under-20-minutes-2a082a60f6f3">Create A Django API in under 20 minutes</a></li>
<li>Build a Community-driven delivery application with Django, Postgres and JavaScript
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead-part-2/">Part 2</a></li>
</ul>
</li>
<li>Realtime Chat application with Vue, django-notifs, RabbitMQ and uWSGI
<ul>
<li><a href="https://danidee10.github.io/2018/01/01/realtime-django-1.html">Part 1</a></li>
<li><a href="https://danidee10.github.io/2018/01/03/realtime-django-2.html">Part 2</a></li>
<li><a href="https://danidee10.github.io/2018/01/07/realtime-django-3.html">Part 3</a></li>
<li><a href="https://danidee10.github.io/2018/01/10/realtime-django-4.html">Part 4</a></li>
<li><a href="https://danidee10.github.io/2018/01/13/realtime-django-5.html">Part 5</a></li>
<li><a href="https://danidee10.github.io/2018/03/12/realtime-django-6.html">Part 6</a></li>
</ul>
</li>
</ul>
<h3 id="bots">Bots:</h3>
<ul>
<li><a href="https://pythonforengineers.com/build-a-reddit-bot-part-1/">Build a Reddit Bot</a></li>
<li><a href="https://www.youtube.com/watch?v=krTUf7BpTc0">How to Make a Reddit Bot - YouTube</a> (video)</li>
<li><a href="https://blog.hartleybrody.com/fb-messenger-bot/">Build a Facebook Messenger Bot</a></li>
<li><a href="https://pythontips.com/2017/04/13/making-a-reddit-facebook-messenger-bot/">Making a Reddit + Facebook Messenger Bot</a></li>
<li>How To Create a Telegram Bot Using Python
<ul>
<li><a href="https://khashtamov.com/en/how-to-create-a-telegram-bot-using-python/">Part 1</a></li>
<li><a href="https://khashtamov.com/en/how-to-deploy-telegram-bot-django/">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/creating-a-twitter-bot-in-python-with-tweepy-ac524157a607">Create a Twitter Bot In Python</a></li>
</ul>
<h3 id="data-science">Data Science:</h3>
<ul>
<li>Learn Python For Data Science by Doing Several Projects (video):
<ul>
<li><a href="https://www.youtube.com/watch?v=T5pRlIbr6gg">Part 1: Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=o_OZdbCzHUA">Part 2: Twitter Sentiment Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=9gBC9R-msAk&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=3">Part 3: Recommendation Systems</a></li>
<li><a href="https://www.youtube.com/watch?v=SSu00IRRraY&amp;index=4&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 4: Predicting Stock Prices</a></li>
<li><a href="https://www.youtube.com/watch?v=MrBzgvUNr4w&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=5">Part 5: Deep Dream in TensorFlow</a></li>
<li><a href="https://www.youtube.com/watch?v=dSofAXnnFrY&amp;index=6&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 6: Genetic Algorithms</a></li>
</ul>
</li>
</ul>
<h3 id="machine-learning">Machine Learning:</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=uwwWVAgJBcM">Write Linear Regression From Scratch in Python</a> (video)</li>
<li><a href="https://machinelearningmastery.com/machine-learning-in-python-step-by-step/">Step-By-Step Machine Learning In Python</a></li>
<li><a href="https://medium.freecodecamp.org/using-machine-learning-to-predict-the-quality-of-wines-9e2e13d7480d">Predict Quality Of Wine</a></li>
<li><a href="https://towardsdatascience.com/solving-a-simple-classification-problem-with-python-fruits-lovers-edition-d20ab6b071d2">Solving A Fruits Classification Problem</a></li>
<li><a href="https://scikit-learn.org/stable/unsupervised_learning.html">Learn Unsupervised Learning with Python</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6">Build Your Own Neural Net from Scratch in Python</a></li>
<li><a href="https://medium.com/we-are-orb/linear-regression-in-python-without-scikit-learn-50aef4b8d122">Linear Regression in Python without sklearn</a></li>
<li><a href="https://medium.com/we-are-orb/multivariate-linear-regression-in-python-without-scikit-learn-7091b1d45905">Multivariate Linear Regression without sklearn</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-a-simple-song-recommender-296fcbc8c85">Music Recommender using KNN</a></li>
<li>Find Similar Quora Questions-
<ul>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-bow-tfidf-and-random-forest-c54ad88d1370">Using BOW, TFIDF and Xgboost</a></li>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-word2vec-and-xgboost-1a19ad272c0d">Using Word2Vec and Xgboost</a></li>
</ul>
</li>
<li><a href="https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/">Detecting Fake News with Python and Machine Learning</a></li>
</ul>
<h3 id="opencv">OpenCV:</h3>
<ul>
<li><a href="https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/">Build A Document Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/">Build A Face Detector using OpenCV and Deep Learning</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLKHYJbyeQ1a0oGzgRXy-QwAN1tSV4XZxg">Build fastest custom object Detection system yusing YOLOv3(video playlist)</a></li>
<li><a href="https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/">Build a Face Recognition System using OpenCV, Python and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/16/opencv-saliency-detection/">Detect The Salient Features in an Image</a></li>
<li><a href="https://www.pyimagesearch.com/2018/05/21/an-opencv-barcode-and-qr-code-scanner-with-zbar/">Build A Barcode Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/">Learn Face Clustering with Python</a></li>
<li><a href="https://www.pyimagesearch.com/wp-content/uploads/2014/11/opencv_crash_course_camshift.pdf">Object Tracking with Camshift</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/03/semantic-segmentation-with-opencv-and-deep-learning/">Semantic Segmentation with OpenCV and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/20/opencv-text-detection-east-text-detector/">Text Detection in Images and Videos</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/">People Counter using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/06/tracking-multiple-objects-with-opencv/">Tracking Multiple Objects with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/27/neural-style-transfer-with-opencv/">Neural Style Transfer with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/">OpenCV OCR and Text Recognition</a></li>
<li><a href="https://www.pyimagesearch.com/2017/02/20/text-skew-correction-opencv-python/">Text Skew Correction Tutorial</a></li>
<li><a href="https://www.pyimagesearch.com/2017/04/03/facial-landmarks-dlib-opencv-python/">Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/deep-learning-based-object-detection-and-instance-segmentation-using-mask-r-cnn-in-opencv-python-c/">Object Detection using Mask-R-CNN</a></li>
<li><a href="https://www.pyimagesearch.com/2015/05/04/target-acquired-finding-targets-in-drone-and-quadcopter-video-streams-using-python-and-opencv/">Automatic Target Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/eigenface-using-opencv-c-python/">EigenFaces using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/04/02/faster-facial-landmark-detector-with-dlib/">Faster(5-point) Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/hand-keypoint-detection-using-deep-learning-and-opencv/">Hand Keypoint Detection</a></li>
<li>Dlib Correlation Object Tracking -
<ul>
<li><a href="https://www.pyimagesearch.com/2018/10/22/object-tracking-with-dlib/">Single Object Tracker</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/29/multi-object-tracking-with-dlib/">Mutiple Object Tracker</a></li>
</ul>
</li>
<li><a href="https://www.pyimagesearch.com/2018/12/17/image-stitching-with-opencv-and-python/">Image Stitching with OpenCV and Python</a></li>
<li><a href="https://www.pyimagesearch.com/2018/11/26/instance-segmentation-with-opencv/">Instance Segmentation with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2020/05/04/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning/">Face mask detector</a></li>
</ul>
<h3 id="deep-learning">Deep Learning:</h3>
<ul>
<li><a href="https://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/">Using Convolutional Neural Nets to Detect Facial Keypoints</a></li>
<li><a href="https://www.learnopencv.com/average-face-opencv-c-python-tutorial/">Generate an Average Face using Python and OpenCV</a></li>
<li><a href="https://medium.com/@ageitgey/how-to-break-a-captcha-system-in-15-minutes-with-machine-learning-dbebb035a710">Break A Captcha System using CNNs</a></li>
<li><a href="https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058">Use pre-trained Inception model to provide image predictions</a></li>
<li><a href="https://hackernoon.com/deep-learning-cnns-in-tensorflow-with-gpus-cba6efe0acc2">Create your first CNN</a></li>
<li><a href="https://hackernoon.com/building-a-facial-recognition-pipeline-with-deep-learning-in-tensorflow-66e7645015b8">Build A Facial Recognition Pipeline</a></li>
<li><a href="https://medium.freecodecamp.org/building-an-image-caption-generator-with-deep-learning-in-tensorflow-a142722e9b1f">Build An Image Caption Generator</a></li>
<li><a href="https://medium.freecodecamp.org/making-your-own-face-recognition-system-29a8e728107c">Make your Own Face Recognition System</a></li>
<li><a href="https://towardsdatascience.com/how-i-trained-a-language-detection-ai-in-20-minutes-with-a-97-accuracy-fdeca0fb7724">Train a Language Detection AI in 20 minutes</a></li>
<li><a href="https://towardsdatascience.com/object-detection-with-neural-networks-a4e2c46b4491">Object Detection With Neural Networks</a></li>
<li>Learn Twitter Sentiment Analysis -
<ul>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-bb5b01ebad90">Part I - Data Cleaning</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-2-333514854913">Part II - EDA, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-3-zipfs-law-data-visualisation-fc9eadda71e7">Part III - Zipf&rsquo;s Law, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-4-count-vectorizer-b3f4944e51b5">Part IV - Feature Extraction(count vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-5-50b4e87d9bdd">Part V - Feature Extraction(Tfidf vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-6-doc2vec-603f11832504">Part VI - Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-7-phrase-modeling-doc2vec-592a8a996867">Part VII - Phrase Modeling + Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-8-dimensionality-reduction-chi2-pca-c6d06fb3fcf3">Part VIII - Dimensionality Reduction</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-9-neural-networks-with-tfidf-vectors-using-d0b4af6be6d7">Part IX - Neural Nets with Tfdif vectors</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-10-neural-network-with-a6441269aa3c">Part X - Neural Nets with word2vec/doc2vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-11-cnn-word2vec-41f5e28eda74">Part XI - CNN with Word2Vec</a></li>
</ul>
</li>
<li><a href="https://becominghuman.ai/transfer-learning-retraining-inception-v3-for-custom-image-classification-2820f653c557">Use Transfer Learning for custom image classification</a></li>
<li><a href="https://iamtrask.github.io/2015/07/12/basic-python-network/">Learn to Code a simple Neural Network in 11 lines of Python</a></li>
<li><a href="https://iamtrask.github.io/2015/07/27/python-network-part2/">Build a Neural Network using Gradient Descent Approach</a></li>
<li><a href="https://heartbeat.fritz.ai/how-to-train-a-keras-model-to-generate-colors-3bc79e54971b">Train a Keras Model To Generate Colors</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/">Get Started with Keras on a Custom Dataset</a></li>
<li><a href="https://nicholastsmith.wordpress.com/2016/02/18/eigenfaces-versus-fisherfaces-on-the-faces94-database-with-scikit-learn/">Use EigenFaces and FisherFaces on Faces94 dataset</a></li>
<li><a href="https://medium.com/@lvarruda/how-to-get-top-2-position-on-kaggles-mnist-digit-recognizer-48185d80a2d4">Kaggle MNIST Digit Recognizer Tutorial</a></li>
<li><a href="https://medium.com/tensorflow/hello-deep-learning-fashion-mnist-with-keras-50fcff8cd74a">Fashion MNIST tutorial with tf.keras</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/15/deep-learning-hydroponics-and-medical-marijuana/">CNN using Keras to automatically classify root health</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/08/keras-vs-tensorflow-which-one-is-better-and-which-one-should-i-learn/">Keras vs Tensorflow</a></li>
<li><a href="https://www.pyimagesearch.com/2018/12/03/deep-learning-and-medical-image-analysis-with-keras/">Deep Learning and Medical Image Analysis for Malaria Detection</a></li>
<li><a href="https://towardsdatascience.com/transfer-learning-for-image-classification-using-keras-c47ccf09c8c8">Transfer Learning for Image Classification using Keras</a></li>
<li><a href="https://github.com/kylemcdonald/SmileCNN">Code a Smile Classifier using CNNS in Python</a></li>
<li><a href="https://towardsdatascience.com/natural-language-processing-count-vectorization-with-scikit-learn-e7804269bb5e">Natural Language Processing using scikit-learn</a></li>
<li><a href="https://towardsdatascience.com/ai-generates-taylor-swifts-song-lyrics-6fd92a03ef7e">Code a Taylor Swift Lyrics Generator</a></li>
<li><a href="https://towardsdatascience.com/how-i-built-a-face-mask-detector-for-covid-19-using-pytorch-lightning-67eb3752fd61">Mask detection using PyTorch Lightning</a></li>
</ul>
<h3 id="miscellaneous-1">Miscellaneous:</h3>
<ul>
<li><a href="https://ruslanspivak.com/lsbasi-part1/">Build a Simple Interpreter</a></li>
<li><a href="https://hackernoon.com/learn-blockchains-by-building-one-117428612f46">Build a Simple Blockchain in Python</a></li>
<li><a href="https://jeffknupp.com/blog/2014/09/01/what-is-a-nosql-database-learn-by-writing-one-in-python/">Write a NoSQL Database in Python</a></li>
<li><a href="https://hackernoon.com/building-a-gas-pump-scanner-with-opencv-python-ios-116fe6c9ae8b">Building a Gas Pump Scanner with OpenCV/Python/iOS</a></li>
<li><a href="https://codequs.com/p/S14jQ5UyG/build-a-distributed-streaming-system-with-apache-kafka-and-python">Build a Distributed Streaming System with Python and Kafka</a></li>
<li><a href="https://csl.name/post/python-jit/">Writing a basic x86-64 JIT compiler from scratch in stock Python</a></li>
<li>Making a low level (Linux) debugger
<ul>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger">Part 1</a></li>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger_part_2">Part 2: C</a></li>
</ul>
</li>
<li>Implementing a Search Engine
<ul>
<li><a href="https://www.ardendertat.com/2011/05/30/how-to-implement-a-search-engine-part-1-create-index/">Part 1</a></li>
<li><a href="https://www.ardendertat.com/2011/05/31/how-to-implement-a-search-engine-part-2-query-index/">Part 2</a></li>
<li><a href="https://www.ardendertat.com/2011/07/17/how-to-implement-a-search-engine-part-3-ranking-tf-idf/">Part 3</a></li>
</ul>
</li>
<li><a href="https://robertheaton.com/2018/07/20/project-2-game-of-life/">Build the Game of Life</a></li>
<li><a href="https://robertheaton.com/2018/06/12/programming-projects-for-advanced-beginners-ascii-art/">Create terminal ASCII art</a></li>
<li><a href="https://robertheaton.com/2018/10/09/programming-projects-for-advanced-beginners-3-a/">Write a Tic-Tac-Toe AI</a></li>
<li><a href="https://robertheaton.com/2018/11/03/programming-project-4-photomosaics/">Create photomosaic art</a></li>
<li><a href="https://robertheaton.com/2018/12/02/programming-project-5-snake/">Build the game &ldquo;Snake&rdquo; in the terminal</a></li>
<li><a href="https://wyag.thb.lt/">Write yourself a Git</a></li>
<li><a href="https://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html">A Python implementation of a Python bytecode runner</a></li>
<li><a href="https://www.geeksforgeeks.org/voice-assistant-using-python/">Create a Voice assistant using Python</a></li>
</ul>
<h2 id="go">Go:</h2>
<ul>
<li><a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/">Create a Real Time Chat App with Golang, Angular 2, and WebSocket</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin">Building Go Web Applications and Microservices Using Gin</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">How to Use Godog for Behavior-driven Development in Go</a></li>
<li>Building Blockchain in Go
<ul>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-1/">Part 1: Basic Prototype</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-2/">Part 2: Proof of Work</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-3/">Part 3: Persistence and CLI</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-4/">Part 4: Transactions 1</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-5/">Part 5: Address</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-6/">Part 6: Transactions 2</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-7/">Part 7: Network</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=8fi7uSYlOdc">Building a container from scratch in Go - Liz Rice (Microscaling Systems)(video)</a></li>
<li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/">Build Web Application with GoLang</a></li>
<li>Building a Chat Application in Go with ReactJS
<ul>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-1-initial-setup/">Part 1: Initial Setup</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-2-simple-communication/">Part 2: Simple Communication</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/">Part 3: Designing our Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/">Part 4: Handling Multiple Clients</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-5-improved-frontend/">Part 5: Improving the Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/">Part 6: Dockerizing your Backend</a></li>
</ul>
</li>
<li><a href="https://tutorialedge.net/golang/go-webassembly-tutorial/">Go WebAssembly Tutorial - Building a Calculator Tutorial</a></li>
<li>REST Servers in Go
<ul>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/">Part 1 - standard library</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/">Part 2 - using a router package</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-3-using-a-web-framework/">Part 3 - using a web framework</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-4-using-openapi-and-swagger/">Part 4 - using OpenAPI and Swagger</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-5-middleware/">Part 5 - middleware</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-6-authentication/">Part 6 - authentication</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-7-graphql/">Part 7 - GraphQL</a></li>
</ul>
</li>
<li>Let&rsquo;s build a URL shortener in Go - with Gin &amp; Redis
<ul>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go/">Part 1 - Project setup</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-with-redis-part-2-storage-layer/">Part 2 - Storage Layer</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-3-short-link-generation/">Part 3 - Short Link Generator</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-iv-forwarding/">Part 4 - Forwarding</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=Sphme0BqJiY">Building a TCP Chat in Go(video)</a></li>
<li><a href="https://blog.jse.li/posts/torrent/">Building a BitTorrent client from the ground up in Go</a></li>
<li><a href="https://www.youtube.com/watch?v=rx6CPDK_5mU&amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">REST API masterclass with Go, PostgreSQL and Docker(video playlist)<code>in progress</code></a></li>
</ul>
<h2 id="php">PHP:</h2>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLwAKR305CRO-Q90J---jXVzbOd4CDRbVx">How To Build A Blog With Laravel</a> (video)</li>
<li><a href="https://ilovephp.jondh.me.uk/en/tutorial/make-your-own-blog">Make Your Own Blog (in Pure PHP)</a></li>
<li><a href="https://www.silverstripe.org/learn/lessons/">Build A Real Estate Website Example with SilverStripe</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLXsbBbd36_uVjOFH_P25__XAyGsohXWlv">Building Realtime Chat App with Laravel 5.4 and VueJS</a> (video)</li>
<li><a href="https://www.youtube.com/playlist?list=PLfdtiltiRHWGGxaR6uFtwZnnbcXqyq8JD">Build A Social Network: Laravel 5 - Youtube</a> (video)</li>
<li>Build a full-featured multi-tenant app with Laravel
<ul>
<li><a href="https://medium.com/@ashokgelal/writing-a-full-featured-multi-tenant-laravel-app-from-scratch-a0e1a7350d9d">Part 0: Introduction</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-1-4049a3cc229d">Part 1: Setup</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-roles-and-permissions-d9a5bfe5d525">Part 2: Roles and Permissinos</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-3-invitation-c982dca55eb9">Part 3: Invitation</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-4-tenancy-aware-authentication-e0ee37270bc8">Part 4: Authentication</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-unit-tests-96d6dfbf0617">Part 5: Testing</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-5-user-profile-5c3d0c655f3a">Part 6: User Profile</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-7-deployment-40bb3c895627">Part 7: Deployment</a></li>
</ul>
</li>
<li><a href="https://www.codewall.co.uk/laravel-crud-demo-with-resource-controller-tutorial/">Build a Laravel CRUD Application From Scratch</a></li>
</ul>
<h2 id="ocaml">OCaml:</h2>
<ul>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm-in-objective-caml">Implement a Language with LLVM in OCaml</a></li>
</ul>
<h2 id="ruby">Ruby:</h2>
<ul>
<li><a href="https://medium.com/geckoboard-under-the-hood/how-to-build-a-network-stack-in-ruby-f73aeb1b661b">Build a Network Stack with Ruby</a></li>
<li>Build your own Redis
<ul>
<li><a href="https://rohitpaulk.com/articles/redis-0">Part 0: Introduction</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-1">Part 1: Barebones TCP Server</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-2">Part 2: PING &lt;-&gt; PONG</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-3">Part 3: Concurrent Clients</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-4">Part 4: ECHO</a></li>
</ul>
</li>
<li><a href="https://thoughtbot.com/blog/rebuilding-git-in-ruby">Rebuilding Git in Ruby</a></li>
</ul>
<h3 id="ruby-on-rails">Ruby on Rails:</h3>
<ul>
<li><a href="https://www.railstutorial.org/book">The Ruby on Rails Tutorial</a></li>
<li><a href="https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=0">Build Instagram From Scratch with Ruby on Rails</a></li>
<li><a href="https://medium.com/rails-ember-beyond/how-to-build-a-social-network-using-rails-eb31da569233">Build a Social Network using Rails</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-ruby-on-rails-application">How To Build a Ruby on Rails Application</a></li>
</ul>
<h2 id="haskell">Haskell:</h2>
<ul>
<li><a href="https://dev.stephendiehl.com/fun/">Write You a Haskell - Build a modern functional compiler</a></li>
<li><a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a></li>
<li><a href="https://github.com/write-you-a-scheme-v2/scheme">Write You A Scheme, Version 2</a></li>
<li><a href="https://wiki.haskell.org/Roll_your_own_IRC_bot">Roll Your Own IRC Bot</a></li>
<li><a href="https://lettier.github.io/posts/2016-08-15-making-movie-monad.html">Making Movie Monad</a></li>
<li><a href="https://adit.io/posts/2013-04-15-making-a-website-with-haskell.html">Making a Website with Haskell <strong>(outdated)</strong></a></li>
</ul>
<h2 id="r">R:</h2>
<ul>
<li><a href="https://shiny.rstudio.com/tutorial/">Build Web Apps with Shiny</a></li>
<li><a href="https://towardsdatascience.com/build-a-cryptocurrency-trading-bot-with-r-1445c429e1b1">Build A Cryptocurrency Bot</a></li>
<li><a href="https://towardsdatascience.com/association-rule-mining-in-r-ddf2d044ae50">Learn Associate Rule Mining in R</a></li>
</ul>
<h2 id="rust">Rust:</h2>
<ul>
<li>A Simple Web App in Rust
<ul>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-1/">Part 1</a></li>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2a/">Part 2a</a></li>
<li><a href="https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2b/">Part 2b</a></li>
</ul>
</li>
<li><a href="https://os.phil-opp.com/">Write an OS in pure Rust</a></li>
<li><a href="https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html">Build a browser engine in Rust</a></li>
<li><a href="https://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/">Write a Microservice in Rust</a></li>
<li><a href="https://cglab.ca/~abeinges/blah/too-many-lists/book/README.html">Learning Rust with Too Many Linked Lists</a></li>
<li>Rust in Detail: Writing Scalable Chat Service from Scratch
<ul>
<li><a href="https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html">Part 1: Implementing WebSocket. Introduction.</a></li>
<li><a href="https://nbaksalyar.github.io/2015/11/09/rust-in-detail-2.html">Part 2: Sending and Receiving Messages</a></li>
</ul>
</li>
<li><a href="https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/">Writing a Rust Roguelike for the Desktop and the Web</a></li>
<li><a href="https://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/">Single Page Applications using Rust</a></li>
<li><a href="https://bugzmanov.github.io/nes_ebook/">Writing NES Emulator in Rust</a></li>
<li>Create a simulation of evolution using neural network and genetic algorithm, and compile the application to WebAssembly
<ul>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt1/">Part 1</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt2/">Part 2</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt3/">Part 3</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt4/">Part 4</a></li>
</ul>
</li>
</ul>
<h2 id="scala">Scala:</h2>
<ul>
<li><a href="https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/">Simple actor-based blockchain</a></li>
<li><a href="https://rcoh.svbtle.com/no-magic-regular-expressions">No Magic: Regular Expressions</a></li>
</ul>
<h2 id="swift">Swift:</h2>
<ul>
<li><a href="https://www.hackingwithswift.com/read">Hacking with Swift - Learn Swift by doing 39 projects</a></li>
<li><a href="https://github.com/nicklockwood/RetroRampage">Retro first-person shooter from scratch</a></li>
</ul>
<h2 id="additional-resources">Additional Resources</h2>
<ul>
<li><a href="https://github.com/markerikson/react-redux-links">React Redux Links</a></li>
<li><a href="https://www.udemy.com/">Udemy.com</a></li>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://nodeschool.io/">Node School</a></li>
<li><a href="https://scotch.io/">ScotchIO</a></li>
<li><a href="https://www.exercism.io/">Exercism</a></li>
<li><a href="https://www.egghead.io/">Egghead.io</a></li>
<li><a href="https://mherman.org/">Michael Herman&rsquo;s Blog</a></li>
<li><a href="https://thinkster.io">Thinkster.io</a></li>
<li><a href="https://enlight.nyc/">Enlight</a></li>
<li><a href="https://hackclub.com/workshops/">Hack Club Workshops</a></li>
<li><a href="https://codecrafters.io/">CodeCrafters</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
