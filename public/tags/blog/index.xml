<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Samir Paul</title>
    <link>https://samirpaulb.github.io/tags/blog/</link>
    <description>Recent content in blog on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 May 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open External Links in a New Window Using JavaScript</title>
      <link>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/open-external-links-in-a-new-window-using-javascript/</guid>
      <description>Open External Links in a New Window Using JavaScript</description>
      <content:encoded><![CDATA[<p>This is a quick post showing how to use JavaScript to make links to external websites open in a new window (or tab) instead of in the current window. This is useful for <code>Jekyll</code> blogs because the Markdown converters don’t do this for you. I included two versions: one that uses straight JavaScript, and one that requires <code>jQuery</code> but is shorter.</p>
<p>Both versions work basically the same way: grab all anchor tags <code>&lt;a href=&quot;#&quot;&gt;</code> that are linking to somewhere other than your development environment or a page on your site and then attribute <code>target=&quot;_blank&quot;</code> to those tags. Because this is JavaScript, users with JavaScript disabled will still experience the old behavior, but otherwise won’t be adversely affected.</p>
<h3 id="straight-javascript">Straight JavaScript</h3>
<p>This version does not require any jQuery (or any other libraries):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">ready</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">document</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onreadystatechange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="s1">&#39;loading&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fn</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorEls</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">anchorElsLength</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">anchorElsLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">anchorEl</span> <span class="o">=</span> <span class="nx">anchorEls</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">anchorEl</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="jquery">jQuery</h3>
<p>This version requires jQuery in order to work, but if you’re using jQuery on your site anyway, it avoids reinventing the wheel:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">website</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">internalLinkRegex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;^((((http:\\/\\/|https:\\/\\/)(www\\.)?)?&#39;</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="nx">website</span>
</span></span><span class="line"><span class="cl">                                     <span class="o">+</span> <span class="s1">&#39;)|(localhost:\\d{4})|(\\/.*))(\\/.*)?$&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">!</span><span class="nx">internalLinkRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">href</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="my-implementation-for-jekyll-blog">My Implementation for Jekyll Blog</h3>
<p>I have created a file called <a href="https://raw.githubusercontent.com/SamirPaul1/assets/main/external-links-new-window.html">external-links-new-window.html</a> inside <code>_includes</code> directory and referred it from <code>_layouts/default.html</code> as <a href="#"><img src="https://spcdn.pages.dev/img/include-external-links-new-window.html-code.png" alt="external-links-new-window"  width="370px" height="22px"></a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python Cheat Sheet for Leetcode</title>
      <link>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</guid>
      <description>Python Cheat Sheet for Leetcode</description>
      <content:encoded><![CDATA[<h1 id="basics">Basics</h1>
<ul>
<li>
<p>Data Types</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg" alt="Untitled"  />
</p>
</li>
<li>
<p>Operators and it’s precendence</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<h1 id="data-structures">Data Structures</h1>
<p><em>Important data structures for Leetcode</em></p>
<h2 id="lists">Lists</h2>
<blockquote>
<p>Lists are used to store multiple items in a single variable</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nums = [1,2,3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums.index(1) # returns index
</span></span><span class="line"><span class="cl">nums.append(1) # appends 1
</span></span><span class="line"><span class="cl">nums.insert(0,10) # inserts 10 at 0th index
</span></span><span class="line"><span class="cl">nums.remove(3) # removes all instances of 3
</span></span><span class="line"><span class="cl">nums.copy(1) # returns copy of the list
</span></span><span class="line"><span class="cl">nums.count(1) # returns no.of times &#39;1&#39; is present in the list
</span></span><span class="line"><span class="cl">nums.extend(someOtherList) # ...
</span></span><span class="line"><span class="cl">nums.pop() # pops last element [which element to pop can also be given as optional argument]
</span></span><span class="line"><span class="cl">nums.reverse() # reverses original list (nums in this case)
</span></span><span class="line"><span class="cl">nums.sort() # sorts list [does NOT return sorted list]
</span></span><span class="line"><span class="cl">#Python&#39;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">It&#39;s pretty simple really:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop]  # items start through stop-1
</span></span><span class="line"><span class="cl">a[start:]      # items start through the rest of the array
</span></span><span class="line"><span class="cl">a[:stop]       # items from the beginning through stop-1
</span></span><span class="line"><span class="cl">a[:]           # a copy of the whole array
</span></span><span class="line"><span class="cl">There is also the step value, which can be used with any of the above:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step] # start through not past stop, by step
</span></span><span class="line"><span class="cl">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[-1]    # last item in the array
</span></span><span class="line"><span class="cl">a[-2:]   # last two items in the array
</span></span><span class="line"><span class="cl">a[:-2]   # everything except the last two items
</span></span><span class="line"><span class="cl">Similarly, step may be a negative number:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[::-1]    # all items in the array, reversed
</span></span><span class="line"><span class="cl">a[1::-1]   # the first two items, reversed
</span></span><span class="line"><span class="cl">a[:-3:-1]  # the last two items, reversed
</span></span><span class="line"><span class="cl">a[-3::-1]  # everything except the last two items, reversed
</span></span><span class="line"><span class="cl">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relation to slice() object
</span></span><span class="line"><span class="cl">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step]
</span></span><span class="line"><span class="cl">is equivalent to:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[slice(start, stop, step)]
</span></span><span class="line"><span class="cl">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="dictionary">Dictionary</h2>
<blockquote>
<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dict = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dict.keys() # returns list of keys of dictionary
</span></span><span class="line"><span class="cl">dict.values() # returns list of values of dictionary
</span></span><span class="line"><span class="cl">dict.get(&#39;a&#39;) # returns value for any corresponding key
</span></span><span class="line"><span class="cl">dict.items() # returns [(&#39;a&#39;,1),(&#39;b&#39;,2),(&#39;c&#39;,3)]
</span></span><span class="line"><span class="cl">dict.copy() # returns copy of the dictionary
</span></span><span class="line"><span class="cl"># NOTE : items() Returns view object that will be updated with any future changes to dict
</span></span><span class="line"><span class="cl">dict.pop(KEY) # pops key-value pair with that key
</span></span><span class="line"><span class="cl">dict.popitem() # removes most recent pair added
</span></span><span class="line"><span class="cl">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned
</span></span><span class="line"><span class="cl"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.
</span></span><span class="line"><span class="cl"># If the key does not exist, DEFAULT_VALUE becomes the key&#39;s value. 2nd argument&#39;s default is None.
</span></span><span class="line"><span class="cl">dict.update({KEY:VALUE}) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)
</span></span><span class="line"><span class="cl"># defaultdict ensures that if any element is accessed that is not present in the dictionary
</span></span><span class="line"><span class="cl"># it will be created and error will not be thrown (which happens in normal dictionary)
</span></span><span class="line"><span class="cl"># Also, the new element created will be of argument type, for example in the below line
</span></span><span class="line"><span class="cl"># an element of type &#39;list&#39; will be made for a Key that does not exist
</span></span><span class="line"><span class="cl">myDictionary = defaultdict(list) 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="counter">Counter</h2>
<blockquote>
<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>
</blockquote>
<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import Counter #(capital &#39;C&#39;)
</span></span><span class="line"><span class="cl"># can also be used as &#39;collections.Counter()&#39; in code
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">list1 = [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;y&#39;, &#39;z&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Initialization
</span></span><span class="line"><span class="cl">Counter(list1) # =&gt; Counter({&#39;x&#39;: 4, &#39;y&#39;: 2, &#39;z&#39;: 2})
</span></span><span class="line"><span class="cl">Counter(&#34;Welcome to Guru99 Tutorials!&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39; &#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2.....})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Updating
</span></span><span class="line"><span class="cl">counterObject = collections.Counter(list1)
</span></span><span class="line"><span class="cl">counterObject.keys() = [ &#39;x&#39; , &#39;y&#39; , &#39;z&#39; ]
</span></span><span class="line"><span class="cl">most_common_element = counterObject.most_common(1) # [(&#39;x&#39;, 4)]
</span></span><span class="line"><span class="cl">counterObject.update(&#34;some string&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2, &#39;s&#39;: 2})
</span></span><span class="line"><span class="cl">counterObject[&#39;s&#39;] += 1 # Increase/Decrease frequency
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Accessing
</span></span><span class="line"><span class="cl">frequency_of_s = counterObject[&#39;s&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Deleting
</span></span><span class="line"><span class="cl">del couterObject[&#39;s&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="deque">Deque</h2>
<blockquote>
<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import deque
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue = deque([&#39;name&#39;,&#39;age&#39;,&#39;DOB&#39;])
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.append(&#34;append_from_right&#34;) # Append from right
</span></span><span class="line"><span class="cl">queue.pop() # Pop from right
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.appendleft(&#34;fromLeft&#34;) # Append from left
</span></span><span class="line"><span class="cl">queue.popleft() # Pop from left
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.
</span></span><span class="line"><span class="cl">queue.insert(index,element)
</span></span><span class="line"><span class="cl">queue.remove() # removes first occurrance
</span></span><span class="line"><span class="cl">queue.count() # obvious
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.reverse() # reverses order of queue elements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="heapq">Heapq</h2>
<blockquote>
<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library/module.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import heapq # (minHeap by Default)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums = [5, 7, 9, 1, 3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).
</span></span><span class="line"><span class="cl">heapq.heappush(nums,element) # Push an element into the heap
</span></span><span class="line"><span class="cl">heapq.heappop(nums) # Pop an element from the heap
</span></span><span class="line"><span class="cl">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Other Methods Available in the Library
</span></span><span class="line"><span class="cl"># Used to return the k largest elements from the iterable specified 
</span></span><span class="line"><span class="cl"># The key is a function with that accepts single element from iterable,
</span></span><span class="line"><span class="cl"># and the returned value from that function is then used to rank that element in the heap
</span></span><span class="line"><span class="cl">heapq.nlargest(k, iterable, key = fun)
</span></span><span class="line"><span class="cl">heapq.nsmallest(k, iterable, key = fun)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sets">Sets</h2>
<blockquote>
<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set = {1,2,3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.add(item)
</span></span><span class="line"><span class="cl">set.remove(item)
</span></span><span class="line"><span class="cl">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not
</span></span><span class="line"><span class="cl">set.pop() # removes random item (since unordered)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.isdisjoint(anotherSet) # returns true if no common elements
</span></span><span class="line"><span class="cl">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
</span></span><span class="line"><span class="cl">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.difference(anotherSet) # returns set containing items ONLY in first set
</span></span><span class="line"><span class="cl">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
</span></span><span class="line"><span class="cl">set.intersection(anotherSet) # returns new set with common elements
</span></span><span class="line"><span class="cl">set.intersection_update(anotherSet) # modifies first set keeping only common elements
</span></span><span class="line"><span class="cl">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
</span></span><span class="line"><span class="cl">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.union(anotherSet) # ...
</span></span><span class="line"><span class="cl">set.update(anotherSet) # adds anotherSet without duplicate
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="tuples">Tuples</h2>
<blockquote>
<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p>Similar to list</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tuple = (1,2,3,1)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tuple.count(1) # returns occurence of an item
</span></span><span class="line"><span class="cl">tuple.index(1) # returns index of 1 in array
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="strings">Strings</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ** split Function **
</span></span><span class="line"><span class="cl">#The split() method breaks up a string at the specified separator and returns a list of strings.
</span></span><span class="line"><span class="cl">text = &#39;Python is a fun programming language&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># split the text from space
</span></span><span class="line"><span class="cl">print(text.split(&#39; &#39;))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#convert string to list
</span></span><span class="line"><span class="cl">s=&#34;abcd&#34;
</span></span><span class="line"><span class="cl">s=list(s)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Output: [&#39;Python&#39;, &#39;is&#39;, &#39;a&#39;, &#39;fun&#39;, &#39;programming&#39;, &#39;language&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ** count Function **
</span></span><span class="line"><span class="cl">#The count() method returns the number of occurrences of a substring in the given string.
</span></span><span class="line"><span class="cl">#Example
</span></span><span class="line"><span class="cl">message = &#39;python is popular programming language&#39;
</span></span><span class="line"><span class="cl"># number of occurrence of &#39;p&#39;
</span></span><span class="line"><span class="cl">print(&#39;Number of occurrence of p:&#39;, message.count(&#39;p&#39;)) # Output: Number of occurrence of p: 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
</span></span><span class="line"><span class="cl">s = &#39;1242323&#39;
</span></span><span class="line"><span class="cl">print(s.isnumeric()) #Output: True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
</span></span><span class="line"><span class="cl"># check the index of &#39;fun&#39;
</span></span><span class="line"><span class="cl">print(message.find(&#39;fun&#39;)) # Output: 12
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">name = &#34;M3onica Gell22er &#34;
</span></span><span class="line"><span class="cl">print(name.isalnum()) # Output : False
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
</span></span><span class="line"><span class="cl">name = &#34;Monica&#34;
</span></span><span class="line"><span class="cl">print(name.isalpha()) #output true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#other imp functions
</span></span><span class="line"><span class="cl">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
</span></span><span class="line"><span class="cl">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.
</span></span><span class="line"><span class="cl">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
</span></span><span class="line"><span class="cl">string.islower()
</span></span><span class="line"><span class="cl">string.isdigit()
</span></span><span class="line"><span class="cl">string.isupper()
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="built-in-or-library-functions">Built-in or Library functions</h1>
<ul>
<li>
<p>Functions to iterate over list / other iterable (tuple, dictionaries)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span><span class="lnt" id="hl-9-18"><a class="lnlinks" href="#hl-9-18">18</a>
</span><span class="lnt" id="hl-9-19"><a class="lnlinks" href="#hl-9-19">19</a>
</span><span class="lnt" id="hl-9-20"><a class="lnlinks" href="#hl-9-20">20</a>
</span><span class="lnt" id="hl-9-21"><a class="lnlinks" href="#hl-9-21">21</a>
</span><span class="lnt" id="hl-9-22"><a class="lnlinks" href="#hl-9-22">22</a>
</span><span class="lnt" id="hl-9-23"><a class="lnlinks" href="#hl-9-23">23</a>
</span><span class="lnt" id="hl-9-24"><a class="lnlinks" href="#hl-9-24">24</a>
</span><span class="lnt" id="hl-9-25"><a class="lnlinks" href="#hl-9-25">25</a>
</span><span class="lnt" id="hl-9-26"><a class="lnlinks" href="#hl-9-26">26</a>
</span><span class="lnt" id="hl-9-27"><a class="lnlinks" href="#hl-9-27">27</a>
</span><span class="lnt" id="hl-9-28"><a class="lnlinks" href="#hl-9-28">28</a>
</span><span class="lnt" id="hl-9-29"><a class="lnlinks" href="#hl-9-29">29</a>
</span><span class="lnt" id="hl-9-30"><a class="lnlinks" href="#hl-9-30">30</a>
</span><span class="lnt" id="hl-9-31"><a class="lnlinks" href="#hl-9-31">31</a>
</span><span class="lnt" id="hl-9-32"><a class="lnlinks" href="#hl-9-32">32</a>
</span><span class="lnt" id="hl-9-33"><a class="lnlinks" href="#hl-9-33">33</a>
</span><span class="lnt" id="hl-9-34"><a class="lnlinks" href="#hl-9-34">34</a>
</span><span class="lnt" id="hl-9-35"><a class="lnlinks" href="#hl-9-35">35</a>
</span><span class="lnt" id="hl-9-36"><a class="lnlinks" href="#hl-9-36">36</a>
</span><span class="lnt" id="hl-9-37"><a class="lnlinks" href="#hl-9-37">37</a>
</span><span class="lnt" id="hl-9-38"><a class="lnlinks" href="#hl-9-38">38</a>
</span><span class="lnt" id="hl-9-39"><a class="lnlinks" href="#hl-9-39">39</a>
</span><span class="lnt" id="hl-9-40"><a class="lnlinks" href="#hl-9-40">40</a>
</span><span class="lnt" id="hl-9-41"><a class="lnlinks" href="#hl-9-41">41</a>
</span><span class="lnt" id="hl-9-42"><a class="lnlinks" href="#hl-9-42">42</a>
</span><span class="lnt" id="hl-9-43"><a class="lnlinks" href="#hl-9-43">43</a>
</span><span class="lnt" id="hl-9-44"><a class="lnlinks" href="#hl-9-44">44</a>
</span><span class="lnt" id="hl-9-45"><a class="lnlinks" href="#hl-9-45">45</a>
</span><span class="lnt" id="hl-9-46"><a class="lnlinks" href="#hl-9-46">46</a>
</span><span class="lnt" id="hl-9-47"><a class="lnlinks" href="#hl-9-47">47</a>
</span><span class="lnt" id="hl-9-48"><a class="lnlinks" href="#hl-9-48">48</a>
</span><span class="lnt" id="hl-9-49"><a class="lnlinks" href="#hl-9-49">49</a>
</span><span class="lnt" id="hl-9-50"><a class="lnlinks" href="#hl-9-50">50</a>
</span><span class="lnt" id="hl-9-51"><a class="lnlinks" href="#hl-9-51">51</a>
</span><span class="lnt" id="hl-9-52"><a class="lnlinks" href="#hl-9-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">,</span> <span class="n">iter</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="c1">#fun : It is a function to which map passes each element of given iterable.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#iter : It is a iterable which is to be mapped.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">zip</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">elem1</span><span class="p">,</span><span class="n">elem2</span> <span class="ow">in</span> <span class="n">zip</span><span class="p">(</span><span class="n">firstList</span><span class="p">,</span><span class="n">secondList</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># will merge both lists and produce tuples with both elements</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Tuples will stop at shortest list (in case of both lists having different len)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">a = (&#34;John&#34;, &#34;Charles&#34;, &#34;Mike&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">b = (&#34;Jenny&#34;, &#34;Christy&#34;, &#34;Monica&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">x = zip(a, b)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">#use the tuple() function to display a readable version of the result:
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">print(tuple(x))
</span></span></span><span class="line"><span class="cl"><span class="s1">o/p: ((&#39;John&#39;, &#39;Jenny&#39;), (&#39;Charles&#39;, &#39;Christy&#39;), (&#39;Mike&#39;, &#39;Monica&#39;))
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">any</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span> <span class="p">[</span> <span class="n">OPPOSITE</span> <span class="n">IS</span> <span class="o">=&gt;</span> <span class="o">**</span> <span class="n">all</span><span class="p">()</span> <span class="o">**</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">any</span><span class="p">(</span><span class="n">someList</span><span class="p">)</span> <span class="c1"># returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">list</span><span class="o">|</span><span class="n">tuple</span><span class="p">)</span> <span class="o">**</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># [when you need to attach indexes to lists or tuples ]</span>
</span></span><span class="line"><span class="cl"><span class="n">enumerate</span><span class="p">(</span><span class="n">anyList</span><span class="p">)</span> <span class="c1"># [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] =&gt; [(0, &#39;a&#39;), (1, &#39;b&#39;), (2, &#39;c&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">filter</span><span class="p">(</span><span class="n">function</span><span class="o">|</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="n">filter</span><span class="p">(</span><span class="n">myFunction</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="c1"># returns list with elements that returned true when passed in function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">*****************</span> <span class="n">import</span> <span class="n">bisect</span> <span class="o">***********************</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">number</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">)</span> <span class="o">**</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [ returns the index where the element should be inserted </span>
</span></span><span class="line"><span class="cl"><span class="c1">#		such that sorting order is maintained ]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># [1,2,4] =&gt; 2 coz &#39;3&#39; should be inserted in 2nd index to maintain sorting order</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># they have same arguments. Suppose the element we want to insert is already present</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the sorting list, the bisect_left() will return index left of the existing number</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and the bisect_right() or bisect() will return index right to the existing number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_right(list,number,begin,end) ** </span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_left(list,number,begin,end)  ** </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">The</span> <span class="n">above</span> <span class="mi">3</span> <span class="n">functions</span> <span class="n">are</span> <span class="n">exact</span> <span class="n">same</span> <span class="n">of</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(),</span> <span class="n">the</span> <span class="n">only</span> <span class="n">difference</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span> <span class="n">that</span> <span class="n">they</span> <span class="k">return</span> <span class="n">the</span> <span class="n">sorted</span> <span class="n">list</span> <span class="n">after</span> <span class="n">inserting</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">index</span><span class="o">.</span> <span class="n">The</span>
</span></span><span class="line"><span class="cl"><span class="n">left</span><span class="p">()</span> <span class="n">right</span><span class="p">()</span> <span class="n">logic</span> <span class="n">is</span> <span class="n">also</span> <span class="n">same</span> <span class="n">as</span> <span class="n">above</span><span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Getting ASCII value of a character</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">** ord(str) **
</span></span><span class="line"><span class="cl"># returns ascii value of the character , Example ord(&#34;a&#34;) = 97
</span></span><span class="line"><span class="cl">** chr(int) ** 
</span></span><span class="line"><span class="cl">#return character of given ascii value , Example chr(97) = &#34;a&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="clean-code-tips">Clean Code Tips</h1>
<ul>
<li>
<p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic 😎</p>
<p>A docstring is short for documentation string.</p>
<p>Python docstrings (documentation strings) are the <a href="https://www.programiz.com/python-programming/string">string</a> literals that appear right after the definition of a function, method, class, or module.</p>
<p>Triple quotes are used while writing docstrings. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span></code></pre></td></tr></table>
</div>
</div><p>Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>
<p>The docstrings are associated with the object as their <code>__doc__</code> attribute.</p>
<p>So, we can access the docstrings of the above function with the following lines of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2">2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3">3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span><span class="line"><span class="cl">print(double.__doc__)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Output</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Function to double the value
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>
<h3 id="definition-and-usage">Definition and Usage</h3>
<p>The <code>assert</code> keyword is used when debugging code.</p>
<p>The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>
<p>You can write a message to be written if the code returns False, check the example below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span><span class="lnt" id="hl-14-3"><a class="lnlinks" href="#hl-14-3">3</a>
</span><span class="lnt" id="hl-14-4"><a class="lnlinks" href="#hl-14-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">x = &#34;hello&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#if condition returns False, AssertionError is raised:
</span></span><span class="line"><span class="cl">assert x == &#34;goodbye&#34;, &#34;x should be &#39;hello&#39;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>
<ul>
<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>
</ul>
</li>
</ul>
<h1 id="miscellaneous">Miscellaneous</h1>
<ul>
<li>
<p>How to take multiple line input in python?</p>
<ul>
<li>Using split() method</li>
<li>Using List comprehension</li>
</ul>
<p><strong>Syntax :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">input().split(separator, maxsplit)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="example">Example</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span><span class="lnt" id="hl-16-14"><a class="lnlinks" href="#hl-16-14">14</a>
</span><span class="lnt" id="hl-16-15"><a class="lnlinks" href="#hl-16-15">15</a>
</span><span class="lnt" id="hl-16-16"><a class="lnlinks" href="#hl-16-16">16</a>
</span><span class="lnt" id="hl-16-17"><a class="lnlinks" href="#hl-16-17">17</a>
</span><span class="lnt" id="hl-16-18"><a class="lnlinks" href="#hl-16-18">18</a>
</span><span class="lnt" id="hl-16-19"><a class="lnlinks" href="#hl-16-19">19</a>
</span><span class="lnt" id="hl-16-20"><a class="lnlinks" href="#hl-16-20">20</a>
</span><span class="lnt" id="hl-16-21"><a class="lnlinks" href="#hl-16-21">21</a>
</span><span class="lnt" id="hl-16-22"><a class="lnlinks" href="#hl-16-22">22</a>
</span><span class="lnt" id="hl-16-23"><a class="lnlinks" href="#hl-16-23">23</a>
</span><span class="lnt" id="hl-16-24"><a class="lnlinks" href="#hl-16-24">24</a>
</span><span class="lnt" id="hl-16-25"><a class="lnlinks" href="#hl-16-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing how to
</span></span><span class="line"><span class="cl"># multiple input using split
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Number of boys: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three inputs at a time
</span></span><span class="line"><span class="cl">x, y, z = input(&#34;Enter a three value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Total number of students: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of boys is : &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls is : &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">a, b = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(a, b))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl"># and type casting using list() function
</span></span><span class="line"><span class="cl">x = list(map(int, input(&#34;Enter a multiple value: &#34;).split()))
</span></span><span class="line"><span class="cl">print(&#34;List of students: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1"> 1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2"> 2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3"> 3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4"> 4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5"> 5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6"> 6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7"> 7</a>
</span><span class="lnt" id="hl-17-8"><a class="lnlinks" href="#hl-17-8"> 8</a>
</span><span class="lnt" id="hl-17-9"><a class="lnlinks" href="#hl-17-9"> 9</a>
</span><span class="lnt" id="hl-17-10"><a class="lnlinks" href="#hl-17-10">10</a>
</span><span class="lnt" id="hl-17-11"><a class="lnlinks" href="#hl-17-11">11</a>
</span><span class="lnt" id="hl-17-12"><a class="lnlinks" href="#hl-17-12">12</a>
</span><span class="lnt" id="hl-17-13"><a class="lnlinks" href="#hl-17-13">13</a>
</span><span class="lnt" id="hl-17-14"><a class="lnlinks" href="#hl-17-14">14</a>
</span><span class="lnt" id="hl-17-15"><a class="lnlinks" href="#hl-17-15">15</a>
</span><span class="lnt" id="hl-17-16"><a class="lnlinks" href="#hl-17-16">16</a>
</span><span class="lnt" id="hl-17-17"><a class="lnlinks" href="#hl-17-17">17</a>
</span><span class="lnt" id="hl-17-18"><a class="lnlinks" href="#hl-17-18">18</a>
</span><span class="lnt" id="hl-17-19"><a class="lnlinks" href="#hl-17-19">19</a>
</span><span class="lnt" id="hl-17-20"><a class="lnlinks" href="#hl-17-20">20</a>
</span><span class="lnt" id="hl-17-21"><a class="lnlinks" href="#hl-17-21">21</a>
</span><span class="lnt" id="hl-17-22"><a class="lnlinks" href="#hl-17-22">22</a>
</span><span class="lnt" id="hl-17-23"><a class="lnlinks" href="#hl-17-23">23</a>
</span><span class="lnt" id="hl-17-24"><a class="lnlinks" href="#hl-17-24">24</a>
</span><span class="lnt" id="hl-17-25"><a class="lnlinks" href="#hl-17-25">25</a>
</span><span class="lnt" id="hl-17-26"><a class="lnlinks" href="#hl-17-26">26</a>
</span><span class="lnt" id="hl-17-27"><a class="lnlinks" href="#hl-17-27">27</a>
</span><span class="lnt" id="hl-17-28"><a class="lnlinks" href="#hl-17-28">28</a>
</span><span class="lnt" id="hl-17-29"><a class="lnlinks" href="#hl-17-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing
</span></span><span class="line"><span class="cl"># how to take multiple input
</span></span><span class="line"><span class="cl"># using List comprehension
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two input at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three input at a time
</span></span><span class="line"><span class="cl">x, y, z = [int(x) for x in input(&#34;Enter three value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Third Number is: &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(x, y))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time separated by comma
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split(&#34;,&#34;)]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4">4</a>
</span><span class="lnt" id="hl-18-5"><a class="lnlinks" href="#hl-18-5">5</a>
</span><span class="lnt" id="hl-18-6"><a class="lnlinks" href="#hl-18-6">6</a>
</span><span class="lnt" id="hl-18-7"><a class="lnlinks" href="#hl-18-7">7</a>
</span><span class="lnt" id="hl-18-8"><a class="lnlinks" href="#hl-18-8">8</a>
</span><span class="lnt" id="hl-18-9"><a class="lnlinks" href="#hl-18-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Syntax :
</span></span><span class="line"><span class="cl">math.log(a,Base)
</span></span><span class="line"><span class="cl">Parameters :a : The numeric value
</span></span><span class="line"><span class="cl">Base :  Base to which the logarithm has to be computed.
</span></span><span class="line"><span class="cl">Return Value :
</span></span><span class="line"><span class="cl">Returns natural log if 1 argument is passed and log with
</span></span><span class="line"><span class="cl">specified base if 2 arguments are passed.
</span></span><span class="line"><span class="cl">Exceptions :
</span></span><span class="line"><span class="cl">Raises ValueError is a negative no. is passed as argument.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2">2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3">3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4">4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5">5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6">6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7">7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8">8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base e of 14
</span></span><span class="line"><span class="cl">print (&#34;Natural logarithm of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base 5 of 14
</span></span><span class="line"><span class="cl">print (&#34;Logarithm base 5 of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14,5))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Finding the ceiling and the floor value
<ul>
<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1"> 1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2"> 2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3"> 3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4"> 4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5"> 5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6"> 6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7"> 7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8"> 8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9"> 9</a>
</span><span class="lnt" id="hl-20-10"><a class="lnlinks" href="#hl-20-10">10</a>
</span><span class="lnt" id="hl-20-11"><a class="lnlinks" href="#hl-20-11">11</a>
</span><span class="lnt" id="hl-20-12"><a class="lnlinks" href="#hl-20-12">12</a>
</span><span class="lnt" id="hl-20-13"><a class="lnlinks" href="#hl-20-13">13</a>
</span><span class="lnt" id="hl-20-14"><a class="lnlinks" href="#hl-20-14">14</a>
</span><span class="lnt" id="hl-20-15"><a class="lnlinks" href="#hl-20-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python code to demonstrate the working of
</span></span><span class="line"><span class="cl"># ceil() and floor()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># importing &#34;math&#34; for mathematical operations
</span></span><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a = 2.3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the ceil of 2.3 (i.e 3)
</span></span><span class="line"><span class="cl">print (&#34;The ceil of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.ceil(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the floor of 2.3 (i.e 2)
</span></span><span class="line"><span class="cl">print (&#34;The floor of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.floor(a))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Other Important functions</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span><span class="lnt" id="hl-21-19"><a class="lnlinks" href="#hl-21-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#Constants
</span></span><span class="line"><span class="cl"># Print the value of Euler e (2.718281828459045)
</span></span><span class="line"><span class="cl">print (math.e)
</span></span><span class="line"><span class="cl"># Print the value of pi (3.141592653589793)
</span></span><span class="line"><span class="cl">print (math.pi)
</span></span><span class="line"><span class="cl">print (math.gcd(b, a))
</span></span><span class="line"><span class="cl">print (pow(3,4))
</span></span><span class="line"><span class="cl"># print the square root of 4
</span></span><span class="line"><span class="cl">print(math.sqrt(4))
</span></span><span class="line"><span class="cl">a = math.pi/6
</span></span><span class="line"><span class="cl">b = 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from radians to degrees
</span></span><span class="line"><span class="cl">print (&#34;The converted value from radians to degrees is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.degrees(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from degrees to radians
</span></span><span class="line"><span class="cl">print (&#34;The converted value from degrees to radians is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.radians(b))
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** bin(int) **
</span></span><span class="line"><span class="cl">bin(anyNumber) # Returns binary version of number
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** divmod(int,int) **
</span></span><span class="line"><span class="cl">divmod(dividend,divisor) # returns tuple like (quotient, remainder)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-the-custom-comparator-works">How the custom comparator works</h2>
<p>When providing a custom comparator, it should generally return an integer/float value that follows the following pattern (as with most other programming languages and frameworks):</p>
<ul>
<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted <em>before</em> the right item</li>
<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted <em>after</em> the right item</li>
<li>return <code>0</code> when both the left and the right item have the same weight and should be ordered &ldquo;equally&rdquo; without precedence</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1"> 1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2"> 2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3"> 3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4"> 4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5"> 5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6"> 6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7"> 7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8"> 8</a>
</span><span class="lnt" id="hl-23-9"><a class="lnlinks" href="#hl-23-9"> 9</a>
</span><span class="lnt" id="hl-23-10"><a class="lnlinks" href="#hl-23-10">10</a>
</span><span class="lnt" id="hl-23-11"><a class="lnlinks" href="#hl-23-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">from</span> <span class="n">functools</span> <span class="n">import</span> <span class="n">cmp_to_key</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted</span><span class="p">(</span><span class="n">mylist</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="n">compare</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>Python integer division behaves differently with -ve numbers ex: -3//2 will give -2 answer instead of -1 so always use int(-3/2) for integer division in problems</p>
</blockquote>
<h1 id="resources">Resources</h1>
<p><a href="https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32">The Modulo Operation (%) With Negative Numbers in Python</a></p>
<h3 id="cheat-sheet-pdf">Cheat Sheet PDF</h3>
<p><a href="https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing"><strong>Click Here</strong></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>System design interview for IT companies</title>
      <link>https://samirpaulb.github.io/posts/system-design-interview-for-it-companies/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/system-design-interview-for-it-companies/</guid>
      <description>System design interview for IT companies</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/systemcycle.png" alt="system development life cycle"  />
</p>
<blockquote>
<p>How to prepare system design questions for an IT company</p>
</blockquote>
<p>Original source and Credit: <a href="https://github.com/checkcheckzz/system-design-interview">github.com/checkcheckzz/system-design-interview</a></p>
<hr>
<p>System design is a very broad topic. Even a software engineer with many years of working experience at a top IT company may not be an expert on system design. If you want to become an expert, you need to read many books, articles, and solve real large scale system design problems.</p>
<p>This repository only teaches you how to handle the system design interview with a systematic approach in a short time. You can dive into each topic if you have time. Of course, welcome to add your thoughts!</p>
<h3 id="system-design-interview-tips">System Design Interview Tips:</h3>
<p><strong>Clarify the constraints and identify the user cases</strong></p>
<p>Spend a few minutes questioning the interviewer and agreeing on the scope of the system.
Remember to make sure you know all the requirements the interviewer didn&rsquo;t tell you about in the beginning.</p>
<p>User cases indicate the main functions of the system, and constraints list the scale of the system such as requests
per second, requests types, data written per second, data read per second.</p>
<p><strong>High-level architecture design</strong></p>
<p>Sketch the important components and the connections between them, but don&rsquo;t go into some details.
Usually, a scalable system includes webserver (load balancer), service (service partition), database (primary/secondary database cluster plug cache).</p>
<p><strong>Component design</strong></p>
<p>For each component, you need to write the specific APIs for each component. You may need to finish
the detailed OOD design for a particular function. You may also need to design the database schema for the database.</p>
<h3 id="basic-knowledge-about-system-design">Basic Knowledge about System Design:</h3>
<p>Here are some articles about system design related topics.</p>
<ul>
<li><a href="https://blog.pramp.com/system-design-interview-process-e91aae2dbe83">The Anatomy Of A System Design Interview</a></li>
<li><a href="https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26">How to Succeed in a System Design Interview</a></li>
<li><a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">How to Rock a Systems Design Interview</a></li>
<li><a href="https://www.hiredintech.com/app#system-design">System Interview</a></li>
<li><a href="https://www.lecloud.net/tagged/scalability">Scalability for Dummies</a></li>
<li><a href="https://www.aosabook.org/en/distsys.html">Scalable Web Architecture and Distributed Systems</a></li>
<li><a href="https://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/">Numbers Everyone Should Know</a></li>
<li><a href="https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf">Fallacies of distributed systems</a></li>
<li><a href="https://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">Scalable System Design Patterns</a></li>
<li><a href="https://lethain.com/introduction-to-architecting-systems-for-scale/">Introduction to Architecting Systems for Scale</a></li>
<li><a href="https://snarfed.org/transactions_across_datacenters_io.html">Transactions Across Datacenters</a></li>
<li><a href="https://ksat.me/a-plain-english-introduction-to-cap-theorem">A Plain English Introduction to CAP Theorem</a></li>
<li><a href="https://github.com/henryr/cap-faq">The CAP FAQ</a></li>
<li><a href="https://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">Paxos Made Simple</a></li>
<li><a href="https://www.tom-e-white.com/2007/11/consistent-hashing.html">Consistent Hashing</a></li>
<li><a href="https://horicky.blogspot.com/2009/11/nosql-patterns.html">NOSQL Patterns</a></li>
<li><a href="https://www.slideshare.net/jboner/scalability-availability-stability-patterns">Scalability, Availability &amp; Stability Patterns</a></li>
</ul>
<p>Of course, if you want to dive into system related topics, here is a good collection of reading list about <a href="https://github.com/mmcgrana/services-engineering">services-engineering</a>, and
a good collection of material about <a href="https://dancres.github.io/Pages/">distributed systems</a>.</p>
<h3 id="company-engineering-blogs">Company Engineering Blogs:</h3>
<p>If you are going to have an onsite with a company, you should read their engineering blog.</p>
<ul>
<li><a href="https://highscalability.com/">High Scalability</a></li>
<li><a href="https://github.com/blog/category/engineering">The GitHub Blog</a></li>
<li><a href="https://engineering.quora.com/">Engineering at Quora</a></li>
<li><a href="https://engineeringblog.yelp.com/">Yelp Engineering Blog</a></li>
<li><a href="https://engineering.twitter.com/">Twitter Engineering</a></li>
<li><a href="https://www.facebook.com/Engineering">Facebook Engineering</a></li>
<li><a href="https://eng.yammer.com/blog/">Yammer Engineering</a></li>
<li><a href="https://codeascraft.com/">Etsy Code as Craft</a></li>
<li><a href="https://engineering.foursquare.com/">Foursquare Engineering Blog</a></li>
<li><a href="https://medium.com/airbnb-engineering">Airbnb Engineering</a></li>
<li><a href="https://engineering.webengage.com/">WebEngage Engineering Blog</a></li>
<li><a href="https://engineering.linkedin.com/blog">LinkedIn Engineering</a></li>
<li><a href="https://techblog.netflix.com/">The Netflix Tech Blog</a></li>
<li><a href="https://www.simple.com/engineering/">BankSimple Simple Blog</a></li>
<li><a href="https://corner.squareup.com/">Square The Corner</a></li>
<li><a href="https://developers.soundcloud.com/blog/">SoundCloud Backstage Blog</a></li>
<li><a href="https://code.flickr.net/">Flickr Code</a></li>
<li><a href="https://instagram-engineering.tumblr.com/">Instagram Engineering</a></li>
<li><a href="https://tech.dropbox.com/">Dropbox Tech Blog</a></li>
<li><a href="https://blog.cloudera.com/">Cloudera Developer Blog</a></li>
<li><a href="https://bandcamptech.wordpress.com/">Bandcamp Tech</a></li>
<li><a href="https://tech.oyster.com/">Oyster Tech Blog</a></li>
<li><a href="https://www.redditblog.com/">THE REDDIT BLOG</a></li>
<li><a href="https://engineering.groupon.com/">Groupon Engineering Blog</a></li>
<li><a href="https://devblog.songkick.com/">Songkick Technology Blog</a></li>
<li><a href="https://ai.googleblog.com/">Google AI Blog</a></li>
<li><a href="https://developers.googleblog.com/">Google Developers Blog</a></li>
<li><a href="https://engineering.pinterest.com/">Pinterest Engineering Blog</a></li>
<li><a href="https://www.twilio.com/engineering">Twilio Engineering Blog</a></li>
<li><a href="https://word.bitly.com/">Bitly Engineering Blog</a></li>
<li><a href="https://eng.uber.com/">Uber Engineering Blog </a></li>
<li><a href="https://engineering.godaddy.com/">Godaddy Engineering</a></li>
<li><a href="https://blogs.splunk.com/">Splunk Blog</a></li>
<li><a href="https://building.coursera.org/">Coursera Engineering Blog</a></li>
<li><a href="https://www.paypal-engineering.com/">PayPal Engineering Blog</a></li>
<li><a href="https://engblog.nextdoor.com/">Nextdoor Engineering Blog</a></li>
<li><a href="https://blog.booking.com/">Booking.com Development Blog</a></li>
<li><a href="https://engineering.microsoft.com/">Microsoft Engineering Blog</a></li>
<li><a href="https://blog.scalyr.com/">Scalyr Engineering Blog</a></li>
<li><a href="https://medium.com/myntra-engineering">Myntra Engineering Blog</a></li>
<li><a href="https://www.fastly.com/blog/">Fastly Blog</a></li>
<li><a href="https://aws.amazon.com/blogs/architecture/">AWS Architecture Blog</a></li>
<li><a href="https://eng.lyft.com/">Lyft Engineering Blog</a></li>
<li><a href="https://medium.com/wish-engineering">Wish Engineering</a></li>
<li><a href="https://doordash.engineering/">Doordash Engineering</a></li>
<li><a href="https://community.snowflake.com/s/blog">SnowFlake Blog</a></li>
<li><a href="https://medium.com/palantir/tech/home">Palantir Blog</a></li>
</ul>
<h3 id="products-and-systems">Products and Systems:</h3>
<p>The following papers/articles/slides can help you to understand the general design idea of different real products and systems.</p>
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf">MapReduce: Simplified Data Processing on Large Clusters</a></li>
<li><a href="https://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf">Bigtable: A Distributed Storage System for Structured Data</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf">The Google File System</a></li>
<li><a href="https://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf">The Chubby lock service for loosely-coupled distributed systems</a></li>
<li><a href="https://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf">Dynamo: Amazon&rsquo;s Highly Available Key-value Store</a></li>
<li><a href="https://www.slideshare.net/oemebamo/introduction-to-memcached">Introduction to Memcached</a></li>
<li><a href="https://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666">Cassandra Introduction Features</a></li>
<li><a href="https://www.slideshare.net/alexbaranau/intro-to-hbase">Introduction to HBase</a></li>
<li><a href="https://www.slideshare.net/mdirolf/introduction-to-mongodb">Introduction to MongoDB</a></li>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Introduction to Redis</a></li>
<li><a href="https://www.slideshare.net/previa/storm-16094009">Storm</a></li>
<li><a href="https://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper">Introduction to Zookeeper</a></li>
<li><a href="https://www.slideshare.net/mumrah/kafka-talk-tri-hug">Kafka</a></li>
<li><a href="https://highscalability.com/youtube-architecture">YouTube Architecture</a></li>
<li><a href="https://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html">Scaling Pinterest</a></li>
<li><a href="https://highscalability.com/google-architecture">Google Architecture</a></li>
<li><a href="https://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster">Scaling Twitter</a></li>
<li><a href="https://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">The WhatsApp Architecture</a></li>
<li><a href="https://highscalability.com/flickr-architecture">Flickr Architecture</a></li>
<li><a href="https://highscalability.com/amazon-architecture">Amazon Architecture</a></li>
<li><a href="https://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html">Stack Overflow Architecture</a></li>
<li><a href="https://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html">Pinterest Architecture</a></li>
<li><a href="https://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html">Tumblr Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Instagram Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html">TripAdvisor Architecture</a></li>
<li><a href="https://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html">Scaling Mailbox</a></li>
<li><a href="https://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">Salesforce Architecture </a></li>
<li><a href="https://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">ESPN Architecture</a></li>
<li><a href="https://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html">Uber Architecture</a></li>
<li><a href="https://www.youtube.com/watch?v=PE4gwstWhmc">DropBox Design</a></li>
<li><a href="https://www.splunk.com/view/SP-CAAABF9">Splunk Architecture</a></li>
</ul>
<h3 id="hot-questions-and-reference">Hot Questions and Reference:</h3>
<p>There are some good references for each question. The references here are slides and articles.</p>
<p><strong>Design a CDN network</strong><br>
Reference:</p>
<ul>
<li><a href="https://kilthub.cmu.edu/articles/journal_contribution/Globally_distributed_content_delivery/6605972">Globally Distributed Content Delivery</a></li>
</ul>
<p><strong>Design a Google document system</strong><br>
Reference:</p>
<ul>
<li><a href="https://code.google.com/p/google-mobwrite/">google-mobwrite</a></li>
<li><a href="https://neil.fraser.name/writing/sync/">Differential Synchronization</a></li>
</ul>
<p><strong>Design a random ID generation system</strong><br>
Reference:</p>
<ul>
<li><a href="https://blog.twitter.com/2010/announcing-snowflake">Announcing Snowflake</a></li>
<li><a href="https://github.com/twitter/snowflake/">snowflake</a></li>
</ul>
<p><strong>Design a key-value database</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Introduction to Redis</a></li>
</ul>
<p><strong>Design the Facebook news feed function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed">What are best practices for building something like a News Feed?</a></li>
<li><a href="https://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed">What are the scaling issues to keep in mind while developing a social network feed?</a></li>
<li><a href="https://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture">Activity Feeds Architecture</a></li>
</ul>
<p><strong>Design the Facebook timeline function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.facebook.com/note.php?note_id=10150468255628920">Building Timeline</a></li>
<li><a href="https://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html">Facebook Timeline</a></li>
</ul>
<p><strong>Design a function to return the top k requests during past time interval</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf">Efficient Computation of Frequent and Top-k Elements in Data Streams</a></li>
<li><a href="https://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf">An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows</a></li>
</ul>
<p><strong>Design an online multiplayer card game</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html">How to Create an Asynchronous Multiplayer Game</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part2.html">How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part3.html">How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database</a></li>
<li><a href="https://www.indieflashblog.com/how-to-create-async-part4-html.html#comment-4447">How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking</a></li>
<li><a href="https://buildnewgames.com/real-time-multiplayer/">Real Time Multiplayer in HTML5</a></li>
</ul>
<p><strong>Design a graph search function</strong><br>
Reference:</p>
<ul>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920">Building out the infrastructure for Graph Search</a></li>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920">Indexing and ranking in Graph Search</a></li>
<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920">The natural language interface of Graph Search</a> and <a href="https://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf">Erlang at Facebook</a></li>
</ul>
<p><strong>Design a picture sharing system</strong><br>
Reference:</p>
<ul>
<li><a href="https://highscalability.com/flickr-architecture">Flickr Architecture</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Instagram Architecture</a></li>
</ul>
<p><strong>Design a search engine</strong><br>
Reference:</p>
<ul>
<li><a href="https://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search">How would you implement Google Search?</a></li>
<li><a href="https://www.ardendertat.com/2012/01/11/implementing-search-engines/">Implementing Search Engines</a></li>
</ul>
<p><strong>Design a recommendation system</strong><br>
Reference:</p>
<ul>
<li><a href="https://tech.hulu.com/blog/2011/09/19/recommendation-system.html">Hulu’s Recommendation System</a></li>
<li><a href="https://ijcai13.org/files/tutorial_slides/td3.pdf">Recommender Systems</a></li>
</ul>
<p><strong>Design a tinyurl system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://n00tc0d3r.blogspot.com/">System Design for Big Data-tinyurl</a></li>
<li><a href="https://developers.google.com/url-shortener/?csw=1">URL Shortener API</a></li>
</ul>
<p><strong>Design a garbage collection system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/">Baby&rsquo;s First Garbage Collector</a></li>
</ul>
<p><strong>Design a scalable web crawling system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch">How can I build a web crawler from scratch?</a></li>
</ul>
<p><strong>Design the Facebook chat function</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf">Erlang at Facebook</a></li>
<li><a href="https://www.facebook.com/note.php?note_id=14218138919&amp;id=9445547199&amp;index=0">Facebook Chat</a></li>
</ul>
<p><strong>Design a trending topic system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/">Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm</a></li>
<li><a href="https://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/">Early detection of Twitter trends explained</a></li>
</ul>
<p><strong>Design a cache system</strong> <br>
Reference:</p>
<ul>
<li><a href="https://www.slideshare.net/oemebamo/introduction-to-memcached">Introduction to Memcached</a></li>
</ul>
<h3 id="good-books">Good Books:</h3>
<ul>
<li><a href="https://www.amazon.com/Big-Data-Principles-practices-scalable/dp/1617290343">Big Data: Principles and best practices of scalable realtime data systems</a></li>
<li><a href="https://www.amazon.com/Real-Time-Analytics-Techniques-Visualize-Streaming/dp/1118837916">Real-Time Analytics: Techniques to Analyze and Visualize Streaming Data</a></li>
<li><a href="https://www.amazon.com/Building-Microservices-Sam-Newman/dp/1491950358">Building Microservices: Designing Fine-Grained Systems</a></li>
<li><a href="https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li>
</ul>
<h3 id="object-oriented-design">Object Oriented Design:</h3>
<h4 id="tips-for-ood-interview">Tips for OOD Interview</h4>
<p><strong>Clarify the scenario, write out user cases</strong></p>
<p>Use case is a description of sequences of events that, taken together, lead to a system doing something useful. Who is going to use it and how they are going to use it. The system may be very simple or very complicated.</p>
<p>Special system requirements such as multi-threading, read or write oriented.</p>
<p><strong>Define objects</strong></p>
<p>Map identity to class: one scenario for one class, each core object in this scenario for one class.</p>
<p>Consider the relationships among classes: certain class must have unique instance, one object has many other objects (composition), one object is another object (inheritance).</p>
<p>Identify attributes for each class: change noun to variable and action to methods.</p>
<p>Use design patterns such that it can be reused in multiple applications.</p>
<h4 id="useful-websites">Useful Websites</h4>
<ul>
<li><a href="https://sourcemaking.com/design-patterns-and-tips">101 Design Patterns &amp; Tips for Developers</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>URL Shortening Service</title>
      <link>https://samirpaulb.github.io/posts/url-shortening-service/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/url-shortening-service/</guid>
      <description>URL Shortening Service</description>
      <content:encoded><![CDATA[<h1 id="designing-a-url-shortening-service-like-tinyurl">Designing a URL Shortening service like TinyURL</h1>
<hr>
<p>Let&rsquo;s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs.</p>
<p>Similar services: bit.ly, goo.gl, qlink.me, etc.<br>
Difficulty Level: Easy</p>
<p>We&rsquo;ll cover the following:</p>
<ul>
<li><a href="#1-why-do-we-need-url-shortening">1. Why do we need URL shortening?</a></li>
<li><a href="#2-requirements-and-goals-of-the-system">2. Requirements and Goals of the System</a></li>
<li><a href="#3-capacity-estimation-and-constraints">3. Capacity Estimation and Constraints</a></li>
<li><a href="#4-system-apis">4. System APIs</a></li>
<li><a href="#5-database-design">5. Database Design</a>
<ul>
<li><a href="#database-schema">Database Schema:</a></li>
</ul>
</li>
<li><a href="#6-basic-system-design-and-algorithm">6. Basic System Design and Algorithm</a>
<ul>
<li><a href="#a-encoding-an-actual-url">a. Encoding an actual URL</a></li>
<li><a href="#b-generating-keys-offline">b. Generating keys offline</a></li>
</ul>
</li>
<li><a href="#7-data-partitioning-and-replication">7. Data Partitioning and Replication</a></li>
<li><a href="#8-cache">8. Cache</a></li>
<li><a href="#9-load-balancer-lb">9. Load Balancer (LB)</a></li>
<li><a href="#10-purging-or-db-cleanup">10. Purging or DB cleanup</a></li>
<li><a href="#11-telemetry">11. Telemetry</a></li>
<li><a href="#12-security-and-permissions">12. Security and Permissions</a></li>
</ul>
<h2 id="1-why-do-we-need-url-shortening">1. Why do we need URL shortening?</h2>
<p>URL shortening is used to create shorter aliases for long URLs.
We call these shortened aliases &ldquo;short links.&rdquo; Users are redirected
to the original URL when they hit these short links.
Short links save a lot of space when displayed, printed, messaged, or tweeted.
Additionally, users are less likely to mistype shorter URLs.</p>
<p>For example, if we shorten this page through TinyURL:</p>
<blockquote>
<p><a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/">https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/</a></p>
</blockquote>
<p>We would get:</p>
<blockquote>
<p><a href="https://tinyurl.com/jlg8zpc">https://tinyurl.com/jlg8zpc</a></p>
</blockquote>
<p>The shortened URL is nearly one-third the size of the actual URL.</p>
<p>URL shortening is used for optimizing links across devices, tracking individual links to analyze audience and campaign performance, and hiding affiliated original URLs.</p>
<p>If you haven&rsquo;t used <a href="https://tinyurl.com/">tinyurl.com</a> before,
please try creating a new shortened URL and spend some time going through
the various options their service offers. This will help you a lot in
understanding this chapter.</p>
<h2 id="2-requirements-and-goals-of-the-system">2. Requirements and Goals of the System</h2>
<blockquote>
<p>&#x1f4a1; You should always clarify requirements at the beginning of the interview.</p>
<pre><code>   Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.
</code></pre>
</blockquote>
<p>Our URL shortening system should meet the following requirements:</p>
<p><strong>Functional Requirements:</strong></p>
<ol>
<li>Given a URL, our service should generate a shorter and unique alias of it.
This is called a short link. This link should be short enough to be easily copied and pasted into applications.</li>
<li>When users access a short link, our service should redirect them to the original link.</li>
<li>Users should optionally be able to pick a custom short link for their URL.</li>
<li>Links will expire after a standard default timespan. Users should be able to specify the expiration time.</li>
</ol>
<p><strong>Non-Functional Requirements:</strong></p>
<ol>
<li>The system should be highly available. This is required because, if our service is down,
all the URL redirections will start failing.</li>
<li>URL redirection should happen in real-time with minimal latency.</li>
<li>Shortened links should not be guessable (not predictable).</li>
</ol>
<p><strong>Extended Requirements:</strong></p>
<ol>
<li>Analytics; e.g., how many times a redirection happened?</li>
<li>Our service should also be accessible through REST APIs by other services.</li>
</ol>
<h2 id="3-capacity-estimation-and-constraints">3. Capacity Estimation and Constraints</h2>
<p>Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings.
Let&rsquo;s assume a 100:1 ratio between read and write.</p>
<p><strong>Traffic estimates:</strong> Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio,
we can expect 50B redirections during the same period:</p>
<blockquote>
<pre><code>                                  **100 * 500M =&gt; 50B**
</code></pre>
</blockquote>
<p>What would be Queries Per Second (QPS) for our system? New URLs shortenings per second:</p>
<blockquote>
<pre><code>                **500 million / (30 days * 24 hours * 3600 seconds) = ~200 URLs/s**
</code></pre>
</blockquote>
<p>Considering 100:1 read/write ratio, URLs redirections per second will be:</p>
<blockquote>
<pre><code>                                     **100 * 200 URLs/s = 20K/s**
</code></pre>
</blockquote>
<p><strong>Storage estimates:</strong> Let&rsquo;s assume we store every URL shortening request (and associated shortened link) for 5 years.
Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion:</p>
<blockquote>
<pre><code>                   **500 million * 5 years * 12 months = 30 billion**
</code></pre>
</blockquote>
<p>Let&rsquo;s assume that each stored object will be approximately 500 bytes (just a ballpark estimate&ndash;we will dig
into it later). We will need 15TB of total storage:</p>
<blockquote>
<pre><code>                                          **30 billion * 500 bytes = 15 TB**
</code></pre>
</blockquote>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-capacity-estimation-and-constraints.png" alt="url-shortening-capacity-estimation-and-constraints"  />
</p>
<p><strong>Bandwidth estimates:</strong> For write requests, since we expect 200 new URLs every second, total incoming data for
our service will be 100KB per second:</p>
<blockquote>
<pre><code>                               **200 * 500 bytes = 100 KB/s**
</code></pre>
</blockquote>
<p>For read requests, since every second we expect ~20K URLs redirections, total outgoing data for our service
would be 10MB per second:</p>
<blockquote>
<pre><code>                                   **20K * 500 bytes = ~10 MB/s**
</code></pre>
</blockquote>
<p><strong>Memory estimates:</strong> If we want to cache some of the hot URLs that are frequently accessed,
how much memory will we need to store them? If we follow the 80-20 rule, meaning 20% of URLs generate 80% of traffic,
we would like to cache these 20% hot URLs.</p>
<p>Since we have 20K requests per second, we will be getting 1.7 billion requests per day:</p>
<blockquote>
<pre><code>                          **20K * 3600 seconds * 24 hours = ~1.7 billion**
</code></pre>
</blockquote>
<p>To cache 20% of these requests, we will need 170GB of memory.</p>
<blockquote>
<pre><code>                              **0.2 * 1.7 billion * 500 bytes = ~170GB**
</code></pre>
</blockquote>
<p>One thing to note here is that since there will be a lot of duplicate requests (of the same URL), therefore,
our actual memory usage will be less than 170GB.</p>
<p><strong>High level estimates:</strong> Assuming 500 million new URLs per month and 100:1 read:write ratio,
following is the summary of the high level estimates for our service:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-bandwidth-estimates.png" alt="url-shortening-bandwidth-estimates"  />
</p>
<h2 id="4-system-apis">4. System APIs</h2>
<blockquote>
<p>&#x1f4a1; Once we&rsquo;ve finalized the requirements, it&rsquo;s always a good idea to define the system APIs.</p>
<pre><code>   This should explicitly state what is expected from the system.
</code></pre>
</blockquote>
<p>We can have SOAP or REST APIs to expose the functionality of our service.
Following could be the definitions of the APIs for creating and deleting URLs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">createURL(api_dev_key,original_url,custom_alias=None,user_name=None,expire_date=None)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">api_dev_key (string)    : The API developer key of a registered account. 
</span></span><span class="line"><span class="cl">                          This will be used to, among other things, throttle users based on their allocated quota
</span></span><span class="line"><span class="cl">original_url (string)   : Original URL to be shortened.
</span></span><span class="line"><span class="cl">custom_alias (string)   : Optional custom key for the URL.
</span></span><span class="line"><span class="cl">user_name (string)      : Optional user name to be used in the encoding.
</span></span><span class="line"><span class="cl">expire_date (string)    : Optional expiration date for the shortened URL.
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Returns:</strong>(string)
A successful insertion returns the shortened URL; otherwise, it returns an error code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">deleteURL(api_dev_key,url_kexy)
</span></span></code></pre></td></tr></table>
</div>
</div><p>Where &ldquo;url_key&rdquo; is a string representing the shortened URL to be retrieved. A successful deletion returns &lsquo;URL Removed&rsquo;.</p>
<p><strong>How do we detect and prevent abuse?</strong> A malicious user can put us out of business by consuming all URL keys
in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited
to a certain number of URL creations and redirections per some time period (which may be set to a different duration
per developer key).</p>
<h2 id="5-database-design">5. Database Design</h2>
<blockquote>
<p>&#x1f4a1; Defining the DB schema in the early stages of the interview would help to understand the data</p>
<pre><code>   flow among various components and later would guide towards data partitioning.
</code></pre>
</blockquote>
<p>A few observations about the nature of the data we will store:</p>
<ol>
<li>We need to store billions of records.</li>
<li>Each object we store is small (less than 1K).</li>
<li>There are no relationships between records&mdash;other than storing which user created a URL.</li>
<li>Our service is read-heavy.</li>
</ol>
<h4 id="database-schema">Database Schema:</h4>
<p>We would need two tables: one for storing information about the URL mappings, and one for the user&rsquo;s data
who created the short link.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/url-shortening-database-design.png" alt="url-shortening-database-design"  />
</p>
<p>What kind of database should we use?Since we anticipate storing billions of rows, and
we don&rsquo;t need to use relationships between objects &ndash; a NoSQL store like
<a href="https://en.wikipedia.org/wiki/Amazon_DynamoDB">DynamoDB</a>,
<a href="https://en.wikipedia.org/wiki/Apache_Cassandra">Cassandra</a>, or,
<a href="https://en.wikipedia.org/wiki/Riak">Riak</a> is a better choice.
A NoSQL choice would also be easier to scale.
Please see <a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5728116278296576/">SQL vs NoSQL</a>
for more details.</p>
<h2 id="6-basic-system-design-and-algorithm">6. Basic System Design and Algorithm</h2>
<p>The problem we are solving here is, how to generate a short and unique key for a given URL.</p>
<p>In the TinyURL example in Section 1, the shortened URL is
<a href="https://tinyurl.com/jlg8zpc%E2%80%9D">&ldquo;https://tinyurl.com/jlg8zpc&rdquo;</a>.
The last seven characters of this URL is the short key we want to generate. We&rsquo;ll explore two solutions here:</p>
<h4 id="a-encoding-an-actual-url">a. Encoding an actual URL</h4>
<p>We can compute a unique hash (e.g., <a href="https://en.wikipedia.org/wiki/MD5">MD5</a> or
<a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a>, etc.) of the given URL.
The hash can then be encoded for displaying. This encoding could be base36 ([a-z ,0-9]) or
base62 ([A-Z, a-z, 0-9]) and if we add &lsquo;+&rsquo; and &lsquo;/&rsquo; we can use
<a href="https://en.wikipedia.org/wiki/Base64#Base64_table">Base64</a> encoding.
A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?</p>
<p>Using base64 encoding, a 6 letters long key would result in 64^6 = ~68.7 billion possible strings.
Using base64 encoding, an 8 letters long key would result in 64^8 = ~281 trillion possible strings.</p>
<p>With 68.7B unique strings, let&rsquo;s assume six letter keys would suffice for our system.</p>
<p>If we use the MD5 algorithm as our hash function, it&rsquo;ll produce a 128-bit hash value. After base64 encoding,
we&rsquo;ll get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value).
Now we only have space for 8 characters per short key, how will we choose our key then?
We can take the first 6 (or 8) letters for the key. This could result in key duplication, to resolve that,
we can choose some other characters out of the encoding string or swap some characters.</p>
<p><strong>What are the different issues with our solution?</strong>
We have the following couple of problems with our encoding scheme:</p>
<ol>
<li>If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable.</li>
<li>What if parts of the URL are URL-encoded? e.g., <a href="https://www.educative.io/distributed.php?id=design">https://www.educative.io/distributed.php?id=design</a>, and
<a href="https://www.educative.io/distributed.php%3Fid%3Ddesign">https://www.educative.io/distributed.php%3Fid%3Ddesign</a> are identical except for the URL encoding.</li>
</ol>
<p><strong>Workaround for the issues:</strong> We can append an increasing sequence number to each input URL to make it unique,
and then generate a hash of it. We don&rsquo;t need to store this sequence number in the databases, though.
Possible problems with this approach could be an ever-increasing sequence number. Can it overflow?
Appending an increasing sequence number will also impact the performance of the service.</p>
<p>Another solution could be to append user id (which should be unique) to the input URL.
However, if the user has not signed in, we would have to ask the user to choose a uniqueness key.
Even after this, if we have a conflict, we have to keep generating a key until we get a unique one.</p>
<p>Request flow for shortening of a URL</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-1.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-2.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-3.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-4.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-5.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-6.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-7.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-8.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-url-shortening-service-9.png" alt="request-flow-for-accessing-a-shortened"  />
</p>
<h4 id="b-generating-keys-offline">b. Generating keys offline</h4>
<p>We can have a standalone <strong>Key Generation Service (KGS)</strong> that generates random six-letter strings beforehand
and stores them in a database (let&rsquo;s call it key-DB). Whenever we want to shorten a URL, we will just take one
of the already-generated keys and use it. This approach will make things quite simple and fast. Not only
are we not encoding the URL, but we won&rsquo;t have to worry about duplications or collisions. KGS will make sure
all the keys inserted into key-DB are unique</p>
<p><strong>Can concurrency cause problems?</strong> As soon as a key is used, it should be marked in the database to ensure
it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario
where two or more servers try to read the same key from the database. How can we solve this concurrency problem?</p>
<p>Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that
are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to
the used keys table. KGS can always keep some keys in memory so that it can quickly provide them whenever
a server needs them.</p>
<p>For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table.
This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server,
we will be wasting those keys&ndash;which could be acceptable, given the huge number of keys we have.</p>
<p>KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a
lock on) the data structure holding the keys before removing keys from it and giving them to a server.</p>
<p><strong>What would be the key-DB size?</strong> With base64 encoding, we can generate 68.7B unique six letters keys.
If we need one byte to store one alpha-numeric character, we can store all these keys in:</p>
<blockquote>
<pre><code>                             **6 (characters per key) * 68.7B (unique keys) = 412 GB.**
</code></pre>
</blockquote>
<p><strong>Isn&rsquo;t KGS a single point of failure?</strong> Yes, it is. To solve this, we can have a standby replica of KGS.
Whenever the primary server dies, the standby server can take over to generate and provide keys.</p>
<p><strong>Can each app server cache some keys from key-DB?</strong> Yes, this can surely speed things up. Although in this case,
if the application server dies before consuming all the keys, we will end up losing those keys.
This can be acceptable since we have 68B unique six-letter keys.</p>
<p><strong>How would we perform a key lookup?</strong> We can look up the key in our database to get the full URL.
If it&rsquo;s present in the DB, issue an &ldquo;HTTP 302 Redirect&rdquo; status back to the browser, passing the stored URL in the
&ldquo;Location&rdquo; field of the request. If that key is not present in our system, issue an &ldquo;HTTP 404 Not Found&rdquo; status
or redirect the user back to the homepage.</p>
<p><strong>Should we impose size limits on custom aliases?</strong> Our service supports custom aliases. Users can pick any
&lsquo;key&rsquo; they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable)
to impose a size limit on a custom alias to ensure we have a consistent URL database. Let&rsquo;s assume users can
specify a maximum of 16 characters per customer key (as reflected in the above database schema).</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/high-level-system-design-for-url-shortening.png" alt="high-level-system-design-for-url-shortening"  />
</p>
<h1 id="7-data-partitioning-and-replication">7. Data Partitioning and Replication</h1>
<p>To scale out our DB, we need to partition it so that it can store information about billions of URLs.
We need to come up with a partitioning scheme that would divide and store our data into different DB servers.</p>
<p>a. Range Based Partitioning:We can store URLs in separate partitions based on the first letter of the hash key.
Hence, we save all the URLs starting with letter &lsquo;A&rsquo; (and &lsquo;a&rsquo;) in one partition, save those that start with
letter &lsquo;B&rsquo; in another partition and so on. This approach is called range-based partitioning. We can even
combine certain less frequently occurring letters into one database partition. We should come up with a static
partitioning scheme so that we can always store/find a URL in a predictable manner.</p>
<p>The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to
put all URLs starting with letter &lsquo;E&rsquo; into a DB partition, but later we realize that we have too many URLs
that start with the letter &lsquo;E&rsquo;.</p>
<p><strong>b. Hash-Based Partitioning:</strong> In this scheme, we take a hash of the object we are storing. We then calculate
which partition to use based upon the hash. In our case, we can take the hash of the &lsquo;key&rsquo; or the short link to
determine the partition in which we store the data object.</p>
<p>Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can
always map any &lsquo;key&rsquo; to a number between [1&hellip;256]), and this number would represent the partition in which we
store our object.</p>
<p>This approach can still lead to overloaded partitions, which can be solved by using
<a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5709068098338816/">Consistent Hashing</a>.</p>
<h2 id="8-cache">8. Cache</h2>
<p>We can cache URLs that are frequently accessed. We can use some off-the-shelf solution like
<a href="https://en.wikipedia.org/wiki/Memcached">Memcached</a>, which can store full URLs with their respective hashes.
The application servers, before hitting backend storage, can quickly check if the cache has the desired URL.</p>
<p><strong>How much cache memory should we have?</strong> We can start with 20% of daily traffic and, based on clients&rsquo; usage pattern,
we can adjust how many cache servers we need. As estimated above, we need 170GB memory to cache 20% of daily traffic.
Since a modern-day server can have 256GB memory, we can easily fit all the cache into one machine.
Alternatively, we can use a couple of smaller servers to store all these hot URLs.</p>
<p><strong>Which cache eviction policy would best fit our needs?</strong> When the cache is full, and we want to replace a
link with a newer/hotter URL, how would we choose? <strong>Least Recently Used (LRU)</strong> can be a reasonable policy for
our system. Under this policy, we discard the least recently used URL first.
We can use a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashMap.html">Linked Hash Map</a> or a
similar data structure to store our URLs and Hashes, which will also keep track of the URLs
that have been accessed recently.</p>
<p>To further increase the efficiency, we can replicate our caching servers to distribute the load between them.</p>
<p><strong>How can each cache replica be updated?</strong> Whenever there is a cache miss, our servers would be hitting a
backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas.
Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it.</p>
<p>Request flow for accessing a shortened URL</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-1.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-2.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-3.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-4.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-5.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-6.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-7.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-8.png" alt="request-flow-for-accessing-a-shortened"  />

<img loading="lazy" src="https://spcdn.pages.dev/img/request-flow-for-accessing-a-shortened-url-9.png" alt="request-flow-for-accessing-a-shortened"  />
</p>
<h2 id="9-load-balancer-lb">9. Load Balancer (LB)</h2>
<p>We can add a Load balancing layer at three places in our system:</p>
<ol>
<li>Between Clients and Application servers</li>
<li>Between Application Servers and database servers</li>
<li>Between Application Servers and Cache servers</li>
</ol>
<p>Initially, we could use a simple <strong>Round Robin</strong> approach that distributes incoming requests equally
among backend servers. This LB is simple to implement and does not introduce any overhead. Another
benefit of this approach is that if a server is dead, LB will take it out of the rotation and will
stop sending any traffic to it.</p>
<p>A problem with <strong>Round Robin LB</strong> is that we don&rsquo;t take the server load into consideration. If a server is overloaded
or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution
can be placed that periodically queries the backend server about its load and adjusts traffic based on that.</p>
<h2 id="10-purging-or-db-cleanup">10. Purging or DB cleanup</h2>
<p>Should entries stick around forever or should they be purged? If a user-specified expiration time is reached,
what should happen to the link?</p>
<p>If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database.
Instead, we can slowly remove expired links and do a lazy cleanup. Our service will make sure that only
expired links will be deleted, although some expired links can live longer but will never be returned to users.</p>
<ul>
<li>Whenever a user tries to access an expired link, we can delete the link and return an error to the user.</li>
<li>A separate Cleanup service can run periodically to remove expired links from our storage and cache.
This service should be very lightweight and can be scheduled to run only when the user traffic is expected to be low.</li>
<li>We can have a default expiration time for each link (e.g., two years).</li>
<li>After removing an expired link, we can put the key back in the key-DB to be reused.</li>
<li>Should we remove links that haven&rsquo;t been visited in some length of time, say six months? This could be tricky.
Since storage is getting cheap, we can decide to keep links forever.</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/img/detailed-component-design-for-url-shortening.png" alt="detailed-component-design-for-url-shortening"  />
</p>
<h2 id="11-telemetry">11. Telemetry</h2>
<p>How many times a short URL has been used, what were user locations, etc.? How would we store these statistics?
If it is part of a DB row that gets updated on each view, what will happen when a popular URL is slammed with a
large number of concurrent requests?</p>
<p>Some statistics worth tracking: country of the visitor, date and time of access, web page that refers the click,
browser, or platform from where the page was accessed.</p>
<h2 id="12-security-and-permissions">12. Security and Permissions</h2>
<p>Can users create private URLs or allow a particular set of users to access a URL?</p>
<p>We can store the permission level (public/private) with each URL in the database.
We can also create a separate table to store UserIDs that have permission to see a specific URL.
If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back.
Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table
storing permissions would be the &lsquo;Hash&rsquo; (or the KGS generated &lsquo;key&rsquo;). The columns will store the UserIDs
of those users that have the permission to see the URL.</p>
]]></content:encoded>
    </item>
    <item>
      <title>High-level design</title>
      <link>https://samirpaulb.github.io/posts/high-level-design/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/high-level-design/</guid>
      <description>High-level design</description>
      <content:encoded><![CDATA[<h1 id="high-level-design-hld">High-level design (HLD)</h1>
<hr>
<h1 id="ticketmaster">Ticketmaster</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/ticketmaster-overview.png" alt="ticketmaster-overview"  />
</p>
<hr>
<h1 id="pastebin">Pastebin</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/pastebin-overview.png" alt="pastebin-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/pastebin-detail.png" alt="pastebin-detail"  />
</p>
<hr>
<h1 id="instagram">Instagram</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/instagram-overview.png" alt="instagram-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/instagram-detail.png" alt="instagram-detail"  />
</p>
<hr>
<h1 id="dropbox">Dropbox</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/dropbox-overview.png" alt="dropbox-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/dropbox-detail.png" alt="dropbox-detail"  />
</p>
<hr>
<h1 id="twitter">Twitter</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-overview.png" alt="twitter-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-detail.png" alt="twitter-detail"  />
</p>
<hr>
<h1 id="twitter-search">Twitter Search</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-search-overview.png" alt="twitter-search-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/twitter-search-detail.png" alt="twitter-search-detail"  />
</p>
<hr>
<h1 id="youtube">Youtube</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/youtube-overview.png" alt="youtube-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/youtube-detail.png" alt="youtube-detail"  />
</p>
<hr>
<h1 id="web-crawler">Web Crawler</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/web-crawler-overview.png" alt="web-crawler-overview"  />

<img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/web-crawler-detail.png" alt="web-crawler-detail"  />
</p>
<hr>
<h1 id="facebook-newsfeed">Facebook Newsfeed</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/facebook-newsfeed-overview.png" alt="facebook-newsfeed-overview"  />
</p>
<hr>
<h1 id="yelp">Yelp</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/yelp-overview.png" alt="yelp-overview"  />
</p>
<hr>
<h1 id="uber-backend">Uber Backend</h1>
<p><img loading="lazy" src="https://spcdn.pages.dev/assets/img/system-design/uber-backend-overview.png" alt="uber-backend-overview"  />
</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Embed MusicApp</title>
      <link>https://samirpaulb.github.io/posts/embed-music/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/embed-music/</guid>
      <description>Embed MusicApp</description>
      <content:encoded><![CDATA[<p>Embed <a href="https://samirpaulb.github.io/music/embed"><b>samirpaul.in/music/embed</b></a> music player(Lofi Study Music) to any website:</p>
<h3 id="demo">Demo:</h3>
<iframe src="https://samirpaulb.github.io/music/embed/index.html"
  title="Embed MusicApp"
	frameborder="0"
	loading="lazy"
	marginheight="0"
	marginwidth="0"
	width="100%"
	height="223"
	scrolling="no">
</iframe>
<h3 id="code">Code:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">iframe</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://samirpaulb.github.io/music/embed&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">title</span><span class="o">=</span><span class="s">&#34;Embed MusicApp&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">frameborder</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">loading</span><span class="o">=</span><span class="s">&#34;lazy&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">marginheight</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">marginwidth</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">width</span><span class="o">=</span><span class="s">&#34;100%&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">height</span><span class="o">=</span><span class="s">&#34;223&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="na">scrolling</span><span class="o">=</span><span class="s">&#34;no&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">iframe</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Google Programmable Search Engine</title>
      <link>https://samirpaulb.github.io/posts/google-programmable-search-engine/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/google-programmable-search-engine/</guid>
      <description>Google Programmable Search Engine</description>
      <content:encoded><![CDATA[<p>Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they&rsquo;re looking for. Because Programmable Search Engine is based on Google&rsquo;s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:</p>
<ul>
<li>Apply your site&rsquo;s look and feel to the search box and results page</li>
<li>Use search features such as refinements, autocomplete, and promotions to enhance your users&rsquo; search experience</li>
<li>Understand your users&rsquo; behavior by linking your search engine with  <a href="https://google.com/analytics/">Google Analytics</a></li>
<li>Make money from your search engine with  <a href="https://google.com/adsense">Google AdSense</a></li>
</ul>
<h3 id="demo">Demo:</h3>
<script async src="https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae">
</script>
<div class="gcse-search"></div>
<hr>
<h3 id="how-is-programmable-search-engine-different-from-google-web-search">How is Programmable Search Engine different from Google Web Search?</h3>
<p>You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:</p>
<ul>
<li>Emphasizes your results over anything else on the web</li>
<li>Doesn&rsquo;t include some  <a href="https://support.google.com/websearch#topic=3378866">Google Web Search features</a>, such as personalized results</li>
<li>May have a subset of results from the Google index if you include more than ten sites</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
