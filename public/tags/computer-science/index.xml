<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer-science on Samir Paul</title>
    <link>https://samirpaulb.github.io/tags/computer-science/</link>
    <description>Recent content in computer-science on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Joins - Inner, Left, Right and Full Joins</title>
      <link>https://samirpaulb.github.io/posts/sql-joins-inner-left-right-and-full-joins/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/sql-joins-inner-left-right-and-full-joins/</guid>
      <description>SQL Joins - Inner, Left, Right and Full Joins</description>
      <content:encoded><![CDATA[<p><strong>SQL Join</strong> statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: </p>
<ul>
<li>INNER JOIN</li>
<li>LEFT JOIN</li>
<li>RIGHT JOIN</li>
<li>FULL JOIN</li>
</ul>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png" alt="SQL Joins"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Operating System Notes For Placement</title>
      <link>https://samirpaulb.github.io/posts/operating-system-notes-for-placement/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/operating-system-notes-for-placement/</guid>
      <description>Operating System Notes For Tech Placements</description>
      <content:encoded><![CDATA[<h1 id="operating-systems-overview">Operating Systems Overview</h1>
<hr>
<h3><a href="https://github.com/github/docs/files/12329707/OS-All-Notes.pdf" target="_blank">Download PDF Notes➥</a></h3>
<iframe loading="lazy" src="https://scdn.web.app/books-pdfs/1-Placements-Notes/OS-All-Notes.pdf" width="100%" height="600"></iframe>
<p><strong>Operating Systems</strong> :</p>
<ul>
<li>Direct operational resources [CPU, memory, devices]</li>
<li>Enforces working policies [Resource usage, access]</li>
<li>Mitigates difficulty of complex tasks [abstract hardware details (using system calls)]</li>
</ul>
<h2 id="what-is-an-operating-system">What is an Operating System?</h2>
<ul>
<li>Intermediate between Hardware and Software applications</li>
<li>Hides hardware complexity (Read/write file storage, send/receive socket network)</li>
<li>Handles resource management (CPU scheduling, Memory management)</li>
<li>Provide isolation and protection (allocate different parts of memory to different applications so that applications don&rsquo;t overwrite other memory locations)</li>
</ul>
<h2 id="operating-system-definition">Operating System definition:</h2>
<p>An <strong>Operating System</strong> is a layer of systems software that:</p>
<ul>
<li>directly has privileged access to the underlying hardware;</li>
<li>hides the hardware complexity;</li>
<li>manages hardware on behalf of one or more application according to some predifined policies.</li>
<li>In addition, it ensures that applications are isolated and protected from one another.</li>
</ul>
<h2 id="operating-system-examples">Operating System examples:</h2>
<table>
<thead>
<tr>
<th>Desktop</th>
<th>Embedded devices</th>
</tr>
</thead>
<tbody>
<tr>
<td>Microsoft Windows</td>
<td>Android OS</td>
</tr>
<tr>
<td>MAC OS X (BSD)</td>
<td>iOS</td>
</tr>
<tr>
<td>LINUX</td>
<td>Symbian</td>
</tr>
<tr>
<td>&hellip;</td>
<td>&hellip;</td>
</tr>
</tbody>
</table>
<h2 id="os-elements">OS Elements</h2>
<ul>
<li><strong>Abstractions</strong> (corresponds to applications that OS executes)
<ul>
<li>process, thread, file, socket,  memory page</li>
</ul>
</li>
<li><strong>Mechanisms</strong>  (on top of Abstractions)
<ul>
<li>create, schedule, open, write, allocate</li>
</ul>
</li>
<li><strong>Policies</strong> (how mechanisms are used to manage underlying hardware)
<ul>
<li>Least Recently Used (LRU) , Earliest Deadline First (EDF), etc.</li>
</ul>
</li>
</ul>
<h4 id="example-">Example :</h4>
<p><em>Memory Management:</em></p>
<ul>
<li><strong>Abstractions</strong>: Memory page</li>
<li><strong>Mechanisms</strong>: Allocate, map to a process</li>
<li><strong>Policies</strong>: LRU</li>
</ul>
<h2 id="os-design-principles">OS Design Principles</h2>
<ul>
<li>Seperation of mechanism and policy
<ul>
<li>implement flexible mechanisms to support many policies</li>
<li>e.g. LRU, LFU, random</li>
</ul>
</li>
<li>Optimize for common case
<ul>
<li>Where will the OS be used?</li>
<li>What will the user want to execute on that machine?</li>
<li>What are the workload requirements?</li>
</ul>
</li>
</ul>
<h2 id="user-kernel-protection-boundary">User/ Kernel Protection Boundary</h2>
<ul>
<li>user-level =&gt; applications [underprivileged mode]</li>
<li>kernel-level =&gt; OS Kernel [privileged access, hardware access]</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/userkernelprotectionboundary.png" alt="userkernelprotectionboundary"  />
</p>
<ul>
<li>User-Kernel switch is supported by hardware.
<ul>
<li>using trap instructions</li>
<li>system calls like:
<ul>
<li>open (file)</li>
<li>send (socket)</li>
<li>malloc (memory)</li>
</ul>
</li>
<li>signals</li>
</ul>
</li>
</ul>
<h2 id="system-call-flowcart">System call Flowcart</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/systemcallflowchart.png" alt="systemcallflowchart"  />
</p>
<ul>
<li>To make a system call, an application must:
<ul>
<li>write arguments</li>
<li>save relevant data ast well defined location</li>
<li>make system calls using system call number</li>
</ul>
</li>
<li>In synchronous mode : wait until system call completes.</li>
</ul>
<h2 id="basic-os-services">Basic OS services</h2>
<ul>
<li>process management</li>
<li>file management</li>
<li>device management</li>
<li>memory management</li>
<li>storage management</li>
<li>security</li>
</ul>
<h2 id="linux-system-calls">Linux System Calls</h2>
<table>
<thead>
<tr>
<th>Task</th>
<th>Commands</th>
</tr>
</thead>
<tbody>
<tr>
<td>Process Control</td>
<td>fork (); exit(); wait();</td>
</tr>
<tr>
<td>File Manipulation</td>
<td>open(); read(); write();</td>
</tr>
<tr>
<td>Device Manipulation</td>
<td>ioctl(); read(); write();</td>
</tr>
<tr>
<td>Information Maintenance</td>
<td>getpid(); alarm(); sleep();</td>
</tr>
<tr>
<td>Communication</td>
<td>pipe(); shmget(); mmap();</td>
</tr>
<tr>
<td>Protection</td>
<td>chmod(); umask(); chown();</td>
</tr>
</tbody>
</table>
<h2 id="linux-architecture">Linux Architecture</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/linuxarch.png" alt="linuxarchitecture"  />
</p>
<hr>
<h1 id="process-and-process-management">Process and Process Management</h1>
<p><strong>Process</strong>: Instance of an executing program.</p>
<ul>
<li>State of execution
<ul>
<li>program counter, stack pointer</li>
</ul>
</li>
<li>Parts and temporary holding area
<ul>
<li>data, register state, occupies state in memory</li>
</ul>
</li>
<li>May require special hardware
<ul>
<li>I/O devices</li>
</ul>
</li>
</ul>
<p>Process is a state of a program when executing and loaded in memory (active state) as opposed to application (static state).</p>
<h2 id="what-does-a-process-look-like">What does a process look like?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/process.png" alt="Process"  />
</p>
<h3 id="type-of-state">Type of state</h3>
<ul>
<li>Text and Data
<ul>
<li>static state when process loads first</li>
</ul>
</li>
<li>Heap
<ul>
<li>dynamically created during execution</li>
</ul>
</li>
<li>Stack
<ul>
<li>grows and shrinks</li>
<li>LIFO queue (used to store task checkpoints to resume the original process after switching from another.)</li>
</ul>
</li>
</ul>
<h2 id="how-does-the-os-know-what-a-process-is-doing">How does the OS know what a process is doing?</h2>
<p>Using:</p>
<ul>
<li>Program counter</li>
<li>CPU registers</li>
<li>Stack pointer</li>
</ul>
<h2 id="process-control-block-pcb">Process Control Block (PCB)</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pcb.png" alt="PCB"  />
</p>
<ul>
<li>PCB created when process is created</li>
<li>Certain fields are updated when process state change e.g. memory mapping</li>
<li>or other fields that change very frequently e.g. Program Counter</li>
</ul>
<h2 id="how-is-pcb-used-">How is PCB used ?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/howpcbisused.png" alt="howpcbisused"  />
</p>
<h2 id="context-switch">Context Switch</h2>
<ul>
<li>Mechanism used to switch from the context of one process to another in the CPU.</li>
</ul>
<ul>
<li>They are expensive!
<ul>
<li>direct costs: no of cycles for load and store instructions.</li>
<li>indirect costs: <strong>COLD</strong> cache (read more <a href="https://stackoverflow.com/questions/22756092/what-does-it-mean-by-cold-cache-and-warm-cache-concept">here</a>)
<ul>
<li>Therefore limit frequency how context switching is done.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>When a cache is <strong>HOT</strong>, most process data is in the cache so the process performance will be at its best.</p>
<p>Sometimes there are situations where we have to Context Switch (higher priority process, timesharing, etc.)</p>
<h2 id="process-lifecycle">Process Lifecycle</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/processlifecycle.png" alt="processlifecycle"  />
</p>
<p>CPU is able to execute a process when the process is in Running or Ready state.</p>
<h2 id="process-creation">Process Creation</h2>
<h4 id="mechanisms">Mechanisms:</h4>
<ul>
<li>
<p>fork :</p>
<ul>
<li>copies the parent PCB into new child PCB</li>
<li>child contains execution at instruction after fork</li>
</ul>
</li>
<li>
<p>exec :</p>
<ul>
<li>replace child image</li>
<li>load new program and start from first instruction</li>
</ul>
</li>
</ul>
<h2 id="what-is-the-role-of-cpu-scheduler">What is the role of CPU scheduler?</h2>
<p>CPU scheduler determines which one of the currently ready processes will be dispatched to the CPU to start running, and how long it should run for.</p>
<p>OS must :</p>
<ul>
<li>preempt =&gt; interrupt and save current context</li>
<li>schedule =&gt; run scheduler to choose next process</li>
<li>dispatch =&gt; dispatch process 2 switch into its context</li>
</ul>
<h2 id="scheduling-design-decisions">Scheduling design decisions</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/timeslice.png" alt="timeslice"  />
</p>
<ul>
<li>What are the appropriate timeslice values?</li>
<li>Metrics to choose next process to run?</li>
</ul>
<h2 id="io">I/O</h2>
<p>A process can make way in the ready queue in a number of ways.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/io.png" alt="io"  />
</p>
<h2 id="can-process-interact">Can process interact?</h2>
<h4 id="inter-process-communication">Inter Process communication:</h4>
<p>IPC mechanisms:</p>
<ul>
<li>transfer data/info between address space</li>
<li>maintain protection and isolation</li>
<li>provide flexibility and performance</li>
</ul>
<p>Two types of IPC models:</p>
<h4 id="1-message-passing-ipc">1. <strong>Message Passing IPC</strong></h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/messagepassing.png" alt="messagepassing"  />
</p>
<ul>
<li>OS provides communication channel line shared buffer</li>
<li>Processes can write(send), read(receive) msg to/from channel</li>
</ul>
<p><strong>Advantages</strong>: OS manages the channel<br>
<strong>Disadvantages</strong>: Overheads</p>
<h4 id="2-shared-memory-ipc">2. <strong>Shared Memory IPC</strong></h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmemory.png" alt="sharedmemory"  />
</p>
<ul>
<li>OS establishes a shared channel and maps it into each processes&rsquo; address space</li>
<li>Processes directly write(send), read(receive) msg to/from this memory</li>
</ul>
<p><strong>Advantages</strong>: OS is out of the way after establishing the shared channel<br>
<strong>Disadvantages</strong>: Re-implementing a lot of code that could have been done by the OS</p>
<p>Overall, <strong>shared memory</strong> based communication is better if mapping memory between two processes is ammortized over a large number of messages.</p>
<hr>
<h1 id="threads-and-concurrency">Threads and Concurrency</h1>
<p><strong>Thread</strong>:</p>
<ul>
<li>is an active
<ul>
<li>entity executing unit of a process</li>
</ul>
</li>
<li>works simultaneously with others
<ul>
<li>many threads execute together</li>
</ul>
</li>
<li>requires coordination
<ul>
<li>sharing of I/O devices, CPUs, memory</li>
</ul>
</li>
</ul>
<h2 id="process-vs-thread">Process vs Thread</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/processvthread.png" alt="processvthread"  />
</p>
<h2 id="why-are-threads-useful">Why are threads useful?</h2>
<ul>
<li>Parallelization =&gt; Speedup</li>
<li>Specialization =&gt; Hot cache</li>
<li>Efficiency =&gt; lower memory requirement &amp; cheaper IPC</li>
<li>Time for context switch in threads is less, since memory is shared, hence mapping is not required between virtual and physical memory.
<ul>
<li>Therefore multithreading can be used to hide latency.</li>
</ul>
</li>
<li>Benefits to both applicatioons and OS code
<ul>
<li>Multithreaded OS kernel
<ul>
<li>threads working on behalf of applications</li>
<li>OS level services like daemons and drivers</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="what-do-we-need-to-support-threads">What do we need to support threads?</h2>
<ul>
<li>Threads data structure
<ul>
<li>Identify threads, keep track of resource usage..</li>
</ul>
</li>
<li>Mechanisms to create and manage threads</li>
<li>Mechanisms to safely coordinate among threads running concurrently in the same address space</li>
</ul>
<h2 id="concurrency-control-and-coordination">Concurrency control and Coordination</h2>
<ul>
<li>Mutual exclusion
<ul>
<li>Exclusive access to only one thread at a time</li>
<li><strong>mutex</strong></li>
</ul>
</li>
<li>Waiting on other threads
<ul>
<li>Specific condition before proceeding</li>
<li><strong>condition variable</strong></li>
</ul>
</li>
<li>Waking up other threads from wait state</li>
</ul>
<h2 id="threads-and-threads-creation">Threads and Threads creation</h2>
<ul>
<li>
<p>Thread data structure:</p>
<ul>
<li>Thread type, Thread ID, PC, SP, registers, stack, attributes.</li>
</ul>
</li>
<li>
<p><strong>Fork</strong>(proc, args)</p>
<ul>
<li>create a thread</li>
<li>not UNIX fork</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">t1 = fork(proc, args)   
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>Join</strong>(thread)
<ul>
<li>terminate a thread</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">child_result = join(t1)   
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="example">Example:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Thread  t1;
</span></span><span class="line"><span class="cl">Shared_List list;
</span></span><span class="line"><span class="cl">t1 = fork(safe_insert, 4);
</span></span><span class="line"><span class="cl">safe_insert(6);
</span></span><span class="line"><span class="cl">join(t1); //Optional
</span></span></code></pre></td></tr></table>
</div>
</div><p>The list can be accessed by reading shared variable.</p>
<h2 id="mutual-exclusion">Mutual Exclusion</h2>
<ul>
<li>Mutex data structure:
<ul>
<li>locked?, owner, blocked_threads</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3">3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4">4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lock(mutex){
</span></span><span class="line"><span class="cl">	//Critical Section
</span></span><span class="line"><span class="cl">    //Only one thread can access at a time
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">unlock(mutex)
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/mutex.png" alt="mutex"  />
</p>
<h2 id="producer-consumer-problem">Producer Consumer problem</h2>
<p>What if the processing you wish to perform with mutual exclusion needs to occur under certai conditions?</p>
<p>For e.g. The producer appends items to a list until the list is full, and the consumer has to print out all the items of the list once the list if full and then empty the list. Thus we have to execute the Consumer thread only under a certain condition (here- when the list becomes empty, print items).</p>
<p>Solution: Use <strong>Condition Variables</strong></p>
<ul>
<li>
<p>Wait(mutex, condition)</p>
<ul>
<li>mutex is automatically released and reaquired on wait</li>
<li>The consumer applies <em>Wait</em> until the list is full</li>
</ul>
</li>
<li>
<p>Signal(condition)</p>
<ul>
<li>Notify only one thread waiting on condition</li>
<li>The Producer applies <em>Signal</em> to the Consumer thread when the list is full</li>
</ul>
</li>
<li>
<p>Broadcast(condition)</p>
<ul>
<li>Notify all waiting threads</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/producerconsumer.png" alt="producerconsumer"  />
</p>
<h2 id="readers--writer-problem">Readers / Writer problem</h2>
<ul>
<li>0 or more readers can access a resource</li>
<li>0 or 1 writer can write the resource concurrently at the same time</li>
</ul>
<ul>
<li>
<p>One solution:</p>
<ul>
<li>lock on resource
<ul>
<li>good for writer</li>
<li>too restrictive for readers</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Better solution:</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3">3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4">4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5">5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">if ((read_count == 0) &amp; (read_count == 0))
</span></span><span class="line"><span class="cl">	R okay, W okay
</span></span><span class="line"><span class="cl">if (read_count &gt; 0)
</span></span><span class="line"><span class="cl">	R okay    
</span></span><span class="line"><span class="cl">if (read_count == 1)
</span></span><span class="line"><span class="cl">	R not-okay, W not-okay    
</span></span></code></pre></td></tr></table>
</div>
</div><p>State of shared resource:</p>
<ul>
<li>free : resource_counter = 0</li>
<li>reading : resource_counter &gt; 0</li>
<li>writing : resource_counter = -1</li>
</ul>
<p>Thus essentially we can apply mutex on the new proxy &lsquo;resource_counter&rsquo; variable that represents the state of the shared resource.</p>
<h2 id="avoiding-common-mistakes">Avoiding common mistakes</h2>
<ul>
<li>keep track of mutex/lock variable used with a resource
<ul>
<li>e.g. mutex_type m1; // mutex for file1</li>
</ul>
</li>
<li>check that you are always and correctly using lock and unlock 	- Compilers can be used as they generate errors/warnings to correct this type of mistake</li>
<li>Use a single mutex to access a single resource</li>
<li>check that you are signalling correct condition</li>
<li>check that you are not using signal when broadcast is needed
<ul>
<li>signal : only 1 thread is will proceed, remaining threads will wait</li>
</ul>
</li>
<li>check thread execution order to be controlled by signals to condition variables</li>
</ul>
<h2 id="spuriousunnecessary-wake-ups">Spurious(Unnecessary) Wake ups</h2>
<p>When we wake up threads knowing they may not be able to proceed.</p>
<h2 id="deadlocks">Deadlocks</h2>
<p>Two or more competing threads are said to be in a deadlock if they are waiting on each other to complete, but none of them ever do.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/deadlock.png" alt="deadlock"  />
</p>
<p>Here T1 and T2 are in deadlock.</p>
<h3 id="how-to-avoid-this">How to avoid this?</h3>
<ol>
<li>Unlock T1 before locking T2
<ul>
<li>Fine-grained locking but T1 nad T2 may both be required</li>
</ul>
</li>
<li>Use one mega lock, get all locks upfront, then release at end
<ul>
<li>For some applications this may be ok. But generally its too restrictive and limits parallelism</li>
</ul>
</li>
<li>Maintain lock order
<ul>
<li>first m_T1</li>
<li>then m_T2
<ul>
<li>this will prevent cycles in wait graph</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>A cycle in wait graph is necessary and sufficient for deadlock to occur.<br>
(thread-waiting-on-resource &mdash;edge&mdash;&gt; thread-owning-resource)</p>
<ul>
<li>
<p>Deadlock prevention =&gt; Expensive<br>
Pre-check for cycles and then delay process or change code</p>
</li>
<li>
<p>Deadlock Detection and Recovery =&gt; Rollback</p>
</li>
</ul>
<h2 id="kernel-vs-user-level-threads">Kernel vs User level Threads</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/kernelvuserthread.png" alt="kernelvuserthread"  />
</p>
<p>Three types of models:</p>
<h4 id="1-one-to-one-model">1. <strong>One to One model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/onetoone.png" alt="onetoone"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>OS sees threads</li>
<li>Synchronization</li>
<li>Blocking</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Must go to OS for all operations</li>
<li>OS may have limits on policies, threads</li>
<li>Portability</li>
</ul>
<h4 id="2-many-to-one-model">2. <strong>Many to One model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/manytoone.png" alt="manytoone"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Totally Portable</li>
<li>Doesn&rsquo;t depend on OS limits and policies</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>OS may block entire process if one user-level thread blocks on I/O</li>
</ul>
<h4 id="3-many-to-many-model">3. <strong>Many to Many model</strong>:</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/manytomany.png" alt="manytomany"  />
</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Best of both worlds</li>
<li>Can have bound or unbound threads</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Requires coordination between user and kernel level thread managers</li>
</ul>
<h2 id="multithreading-patterns">Multithreading patterns</h2>
<p><strong>1. Boss-Workers pattern</strong></p>
<ul>
<li>Boss- assigns work</li>
<li>Workers- perform entire task</li>
</ul>
<p>Throughput of system is limited by boss thread. Hence boss thread must be kept efficient.</p>
<p>Throughput = 1/boss-time-orders</p>
<p>Boss assigns works by:</p>
<ol>
<li>Directly signalling specific works
<ul>
<li><strong>+</strong> workers don&rsquo;t need to sync</li>
<li><strong>-</strong> boss must keep track of everyone</li>
</ul>
</li>
<li>Placing work in queue
<ul>
<li><strong>+</strong> boss doesn&rsquo;t neeed to know details about workers</li>
<li><strong>-</strong> queue synchronization</li>
</ul>
</li>
</ol>
<p>How many workers?</p>
<ul>
<li>on demand</li>
<li>pool of workers</li>
<li>static vs dynamic (i.e dynamically increasing size according to work)</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Simplicity</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Thread pool management</li>
<li>Locality</li>
</ul>
<p><strong>1B. Boss-Workers pattern variant</strong></p>
<ul>
<li>Here workers are specialized for certain tasks opposite to the previous equally created workers</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Better locality</li>
<li>Quality of Service management</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Load balancing</li>
</ul>
<p><strong>2. Pipeline pattern</strong></p>
<ul>
<li>Threads assigned one subtask in the system</li>
<li>Entire task = Pipeline of threads</li>
<li>Multiple tasks concurrently run in the system, in different pipeline stages</li>
<li>Throughput depends on weakest link</li>
<li>Shared buffer based communication between stages</li>
</ul>
<p><strong>3. Layered pattern</strong></p>
<ul>
<li>Layers of threads are assigned group of related subtasks</li>
<li>End to end task must pass up and down through all layers</li>
</ul>
<p><strong>Advantages</strong>:</p>
<ul>
<li>Specialization</li>
<li>Less fine-grained than pipeline</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li>Not suitable for all applications</li>
<li>Synchronization</li>
</ul>
<h3 id="example-1">Example:</h3>
<p><strong>Q)</strong> For 6 step toy order application we have 2 solutions:</p>
<ol>
<li>Boss-workers solution</li>
<li>Pipeline solution</li>
</ol>
<p>Both have 6 threads. In the boss-workers solution, a worker produces a toy order in 120 ms. In the pipeline solution, each of 6 stages take 20 ms.</p>
<p>How long will it take for these solutions to complete 10 toy orders and 11 toy orders?</p>
<p><strong>A)</strong> 6 threads means for Boss-workers, 1 thread is for boss, 5 for workers. In pipeline 6 threads are equally used.</p>
<p>For 10 toy orders:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Boss-workers(10) = 120 + 120 = 240 ms
</span></span><span class="line"><span class="cl">Pipeline(10) = 120 + (9*20) = 300 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here Boss-workers is better than Pipeline.</p>
<p>For 11 toy orders:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Boss-workers(11) = 120 + 120 + 120 = 360 ms
</span></span><span class="line"><span class="cl">Pipeline(11) = 120 + (10*20) = 320 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here Pipeline is better than Boss-workers.</p>
<p>This proves that choosing a better pattern depends on the number of threads and the work required to be done.</p>
<h2 id="pthreads">PThreads</h2>
<p>PThreads == POSIX Threads</p>
<p>POSIX = Portable OS interface</p>
<h3 id="compiling-pthreads">Compiling PThreads</h3>
<ol>
<li>#include&lt;pthread.h&gt; in main file</li>
<li>Compile source with -lpthread or -pthread</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc -o main main.c -lpthread
</span></span><span class="line"><span class="cl">gcc -o main main.c -pthread
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>Check return values of common examples</li>
</ol>
<h3 id="pthread-mutexes">PThread mutexes</h3>
<ul>
<li>to solve mutual exclusion problems among concurrent threads</li>
</ul>
<h3 id="safety-tips">Safety tips</h3>
<ul>
<li>Shared data should always be accessed through single mutex</li>
<li>Mutex scope must be visible to all</li>
<li>Globally order locks
<ul>
<li>for all threads, lock mutexes in order</li>
</ul>
</li>
<li>Always unlock a mutex (correctly)</li>
</ul>
<h2 id="thread-design-considerations">Thread Design Considerations</h2>
<h3 id="kernel-vs-user-level-threads-1">Kernel vs User Level Threads</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/userlevelvkernellevel.png" alt="userlevelvkernellevel"  />
</p>
<h3 id="thread-related-data-structures">Thread related data structures</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/threadds.png" alt="threadds"  />
</p>
<h3 id="hard-vs-light-process-states">Hard vs Light Process states</h3>
<p>PCB is divided into multiple data structures classified as follows:</p>
<ul>
<li>Light Process states
<ul>
<li>Signal mask</li>
<li>System call args</li>
</ul>
</li>
<li>Heavy Process states
<ul>
<li>virtual address mapping</li>
</ul>
</li>
</ul>
<h4 id="rationale-for-multiple-data-structures">Rationale for Multiple Data Structures:</h4>
<table>
<thead>
<tr>
<th>Single PCB</th>
<th>Multiple DS</th>
</tr>
</thead>
<tbody>
<tr>
<td>Large continuos DS</td>
<td>Smaller DS</td>
</tr>
<tr>
<td>Private for each entity</td>
<td>Easier to share</td>
</tr>
<tr>
<td>Saved and restored on each context switch</td>
<td>Save and Restore only what needs to change on context switch</td>
</tr>
<tr>
<td>Update for any changes</td>
<td>User lever library need to only update portion of the state</td>
</tr>
</tbody>
</table>
<ul>
<li>Thus the following disadvantages for single PCB become advantages for Multiple DS :
<ul>
<li>Scalability</li>
<li>Overheads</li>
<li>Performance</li>
<li>Flexibility</li>
</ul>
</li>
</ul>
<h2 id="comparison-of-interrupts-and-signals">Comparison of Interrupts and Signals</h2>
<ul>
<li>Handled in specific ways
- interrupt and signal handlers
<ul>
<li>Can be ignored
<ul>
<li>interrupt and signal mask</li>
</ul>
</li>
<li>Expected or unexpected
<ul>
<li>appear synchronously or asynchronously</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Difference:</li>
</ul>
<table>
<thead>
<tr>
<th>Interrupts</th>
<th>Signals</th>
</tr>
</thead>
<tbody>
<tr>
<td>Events generated externally by components other than CPU (I/O devices, timers, other CPUs)</td>
<td>Events triggered by CPU and software running on it</td>
</tr>
<tr>
<td>Determined based on physical platform</td>
<td>Determined based on OS</td>
</tr>
<tr>
<td>Appear asynchronously</td>
<td>Appear synchronously or asynchronously</td>
</tr>
</tbody>
</table>
<ul>
<li>Similarities:
<ul>
<li>Have a unique ID depending on h/w or OS</li>
<li>Can be masked and disabled/suspended via corresponding mask
<ul>
<li>per-CPU interrupt mask, preprocess signal mask</li>
</ul>
</li>
<li>if enabled, trigger corresponding to handler
<ul>
<li>interrupt handler set for entire system by OS</li>
<li>signal handler set on per process basis by process</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>An interrupt is like a snowstorm alarm<br>
A signal is like a low battery warning</p>
</blockquote>
<h3 id="interrupts">Interrupts</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/interrupts.png" alt="interrupts"  />
</p>
<h3 id="signals">Signals</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/signals.png" alt="signals"  />
</p>
<h4 id="handlers--actions">Handlers / Actions</h4>
<ul>
<li>Default actions
<ul>
<li>Terminate, ignore</li>
<li>Terminate and core dump</li>
<li>Stop or continue</li>
</ul>
</li>
<li>Process Installs Handler
<ul>
<li>signal(), sigaction()</li>
<li>for most signals, some cannot be &ldquo;caught&rdquo;</li>
</ul>
</li>
<li><strong>Synchronous</strong>
<ul>
<li>SIGSEGV (access to protected memory)</li>
<li>SIGFPE (divided by zero)</li>
<li>SIGKILL (kill, id)
<ul>
<li>can be directed to a specific thread</li>
</ul>
</li>
</ul>
</li>
<li><strong>Asynchronous</strong>*
<ul>
<li>SIGKILL (kill)</li>
<li>SIGALARM</li>
</ul>
</li>
</ul>
<h3 id="why-disable-interrupts-or-signals">Why disable Interrupts or Signals</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/disableis.png" alt="disableis"  />
</p>
<p>Here PC: First instruction in handler<br>
SP : thread stack</p>
<p>To prevent deadlock,</p>
<ol>
<li>Keep handler code simple
<ul>
<li>avoid mutex</li>
<li><strong>-</strong> too restrictive</li>
</ul>
</li>
<li>Control interruptions by handler code
<ul>
<li>Use interrupt/signal masks</li>
<li>0011100110.. (0: disabled, 1: enabled)</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">clear_field_in_mask(mask)
</span></span><span class="line"><span class="cl">lock(mutex)
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#disabled =&gt; remaining pending
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">unlock(mutex)
</span></span><span class="line"><span class="cl">reset_field_in_mask(mask)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#enabled =&gt; execute handler code
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Interrupt masks are per CPU</p>
<ul>
<li>if mask disables interrupt, hardware interrupt rounting mechanism will not deliver interrupt</li>
</ul>
</li>
<li>
<p>Signal are per execution context (User-level thread on top of Kernel-level thread)</p>
<ul>
<li>if mask disables signal, kernel sees mask and will not interrupt corresponding thread</li>
</ul>
</li>
</ul>
<h3 id="types-of-signals">Types of Signals</h3>
<ol>
<li>One-shot Signals
<ul>
<li>&ldquo;n signals pending == 1 signal pending&rdquo; : atleast once</li>
<li>must be explicitly re-enabled</li>
</ul>
</li>
<li>Realtime Signals
<ul>
<li>&ldquo;if n signals raised, then handler is called n times&rdquo;</li>
</ul>
</li>
</ol>
<h3 id="handling-interrupts-as-threads">Handling interrupts as threads</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/interruptsasthreads.png" alt="interruptsasthreads"  />
</p>
<p>but dynamic thread creation is expensive!</p>
<ul>
<li>Dynamic decision
<ul>
<li>if handler doesn&rsquo;t lock
<ul>
<li>execute on interrupted threads stack</li>
</ul>
</li>
<li>if handler can block
<ul>
<li>turn into real thread</li>
</ul>
</li>
</ul>
</li>
<li>Optimization
<ul>
<li>pre-create and pre-initialize thread structure for interrupt routines</li>
</ul>
</li>
</ul>
<h3 id="threads-and-signal-handling">Threads and Signal Handling</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/tshandling.png" alt="tshandling"  />
</p>
<p><strong>Case 1 :</strong></p>
<ul>
<li>User-Level-Thread mask = 1</li>
<li>Kernel-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case1.png" alt="case1"  />
</p>
<p><strong>Case 2 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>another User-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case2.png" alt="case2"  />
</p>
<p><strong>Case 3 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>another User-Level-Thread mask = 1</li>
<li>another Kernel-Level-Thread mask = 1</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case3.png" alt="case3"  />
</p>
<p><strong>Case 4 :</strong></p>
<ul>
<li>User-Level-Thread mask = 0</li>
<li>Kernel-Level-Thread mask = 1</li>
<li>all User-Level-Thread mask = 0</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/case4.png" alt="case4"  />
</p>
<p><strong>Optimize common case</strong></p>
<ul>
<li>signals less frequennt than signal mask updates</li>
<li>system calls avoided
<ul>
<li>cheaper to update user-level mask</li>
</ul>
</li>
<li>signal handling more expensive</li>
</ul>
<h2 id="multi-processing-vs-multi-threading">Multi-processing vs Multi-threading</h2>
<p>How to best provide concurrency?</p>
<h3 id="multi-processing-mp">Multi-Processing (MP)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Simple programming</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>High memory usage</li>
<li>Costs context switch</li>
<li>costly to maintain shared state (tricky port setup)</li>
</ul>
<h3 id="multi-threading-mp">Multi-Threading (MP)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Shared address space</li>
<li>Shared state (no sys calls to other threads)</li>
<li>Cheap context switch</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Complex implementation</li>
<li>Requires synchronization</li>
<li>Requires underlying support for threads</li>
</ul>
<h2 id="event-driven-model">Event Driven model</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/eventdrivenmodel.png" alt="eventdrivenmodel"  />
</p>
<p>Features:</p>
<ul>
<li>Single address space</li>
<li>Single process</li>
<li>Single thread of control</li>
</ul>
<p>Dispatcher : acts as a state machine and accepts any external events</p>
<p>When call handler =&gt; jump to code</p>
<p>The handler:</p>
<ul>
<li>Runs to completion</li>
<li>if they need to block
<ul>
<li>initiate blocking operation and pass control to dispatch loop</li>
</ul>
</li>
</ul>
<h3 id="concurrent-execution-in-event-driven-models">Concurrent execution in Event-driven models</h3>
<ul>
<li>MP &amp; MT :  1 request per execution context (process/thread)</li>
<li>Event Driven : Many requests interleaved in an execution context</li>
<li>Single thread switches among processing of different requests</li>
<li>Process requests until wait is necessary
<ul>
<li>then switch to another request</li>
</ul>
</li>
</ul>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Single address space</li>
<li>Single flow of control</li>
<li>Smaller memory requirement
<ul>
<li>Event Driven model requires less memory than Boss-workers/Pipeline model, where the extra memory is required for helper thread for concurrent blocking I/O not for all concurrent requests.</li>
</ul>
</li>
<li>No context switches</li>
<li>No synchronization</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>A blocking request/handler will block entire process</li>
</ul>
<h3 id="asynchronous-io-operations">Asynchronous I/O operations</h3>
<p>Asynchronous I/O operations fit well with Event-driven models</p>
<p>Since asynchronous calls are not easily avalible, helpers can be used to implement the async call functionality:</p>
<ul>
<li>designated for blocking I/O operations only</li>
<li>pipe/socket based communication with event dispatcher
<ul>
<li>select()/ poll() still okay</li>
</ul>
</li>
<li>helper blocks, but main event loop (&amp; process) will not</li>
</ul>
<h3 id="asymmetric-multi-process-event-driven-model-amped--amted">Asymmetric Multi-Process Event Driven model (AMPED &amp; AMTED)</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Resolve portability limitations of basic event driven model</li>
<li>Smaller footprint than regular worker thread</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Applicability to certain classes of applications</li>
<li>Event routing on multi CPU systems</li>
</ul>
<p>Eg <a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server">Apache Web Server</a></p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/apachewebserver.png" alt="apachewebserver.png"  />
</p>
<ul>
<li>Core : basic server skeleton</li>
<li>Modules : per functionality</li>
<li>Flow of Control : Similar to Event Driven model</li>
<li>But its an combination of MP + MT,
<ul>
<li>each process = boss/worker with dynamic thread pool</li>
<li>number of processes can also be dynamically adjusted</li>
</ul>
</li>
</ul>
<hr>    
<h1 id="scheduling">Scheduling</h1>
<p>Operating System perform scheduling in the following simple ways:</p>
<ul>
<li>Dispatch orders immediately
<ul>
<li>scheduling is simple FIFO (First-Come-First-Serve)</li>
</ul>
</li>
<li>Dispatch simple orders first
<ul>
<li>maximize number of orders processed over time</li>
<li>maximize throughput (SJF)</li>
</ul>
</li>
<li>Dispatch complex orders first
<ul>
<li>maximize utilization of CPU, devices, memory</li>
</ul>
</li>
</ul>
<h2 id="cpu-scheduler">CPU Scheduler</h2>
<ul>
<li>Decides how and when process (and their threads) access shared CPUs</li>
<li>Schedules tasks running at user level processes/threads as well as kernel level threads</li>
<li>Chooses one of the ready tasks to run on CPU</li>
<li>Runs when
<ul>
<li>CPU becomes idle</li>
<li>new task becomes ready</li>
<li>timeslice expired timeout</li>
</ul>
</li>
</ul>
<p>Context switch, enter user mode, set PC and go! &lt;= Thread is dispatched on CPU.</p>
<ul>
<li>Which task should be selected?
<ul>
<li>Scheduling policy/algorithm</li>
</ul>
</li>
<li>How is this done?
<ul>
<li>Depends on runqueue data structure</li>
</ul>
</li>
</ul>
<h3 id="run-to-completion-scheduling">&ldquo;Run-to-completion&rdquo; Scheduling</h3>
<ul>
<li>Initial assumptions
<ul>
<li>group of tasks/jobs</li>
<li>known execution time</li>
<li>no preemption</li>
<li>single CPU</li>
</ul>
</li>
<li>Metrics
<ul>
<li>throughput</li>
<li>average job completion time</li>
<li>average job wait time</li>
<li>CPU utilization</li>
</ul>
</li>
</ul>
<h2 id="scheduling-algorithms">Scheduling algorithms:</h2>
<h3 id="1-first-come-first-serve-fcfs">1. First Come First Serve (FCFS)</h3>
<ul>
<li>Schedules tasks in order of arrival</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = queue(FIFO)
</span></span></code></pre></td></tr></table>
</div>
</div><p>If T1, T2, T3 arrive in the given order and T1 has execution time 1s, T2 10s and T3 1s then :</p>
<ul>
<li>Throughput = 3/(1+10+1) = 3/12 = 0.25s</li>
<li>Average completion time = (1 + 11 + 12)/3 = 8s</li>
<li>Average wait time = (1+1+11)/3 = 4s</li>
<li>Starvation NOT possible</li>
</ul>
<h3 id="2-shortest-job-first-sjf">2. Shortest Job First (SJF)</h3>
<ul>
<li>Schedules tasks in order of execution time</li>
<li>Therefore for the above example, T1(1s) &gt; T3(1s) &gt; T2(10s)</li>
<li>Starvation possible</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = ordered(queue)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//or
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">runqueue = tree()
</span></span></code></pre></td></tr></table>
</div>
</div><p>For SJF,</p>
<ul>
<li>Throughput = 3/(1+10+1) = 3/12 = 0.25s</li>
<li>Average completion time = (1 + 2 + 12)/3 = 5s</li>
<li>Average wait time = (0+1+2)/3 = 1s</li>
</ul>
<h3 id="preemptive-scheduling">Preemptive Scheduling</h3>
<ul>
<li>SJF + Preemption</li>
<li>Starvation is possible</li>
</ul>
<p>T2 arrives first.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/preemptive.png" alt="preemptive"  />
</p>
<h3 id="priority-scheduling">Priority Scheduling</h3>
<ul>
<li>Tasks have different priority levels</li>
<li>Run highest priority task next (preemption)</li>
<li>Starvation is possible</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/priority.png" alt="priority"  />
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4">4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runqueue = per priority_queue()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//or 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">runqueue = tree() ordered on priority
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>low priority task stuck in runqueue =&gt; starvation</li>
<li>&ldquo;priority aging&rdquo;
<ul>
<li>priority = f(actual priority, time spent in runqueue)</li>
<li>eventually tasks will run</li>
<li>prevents starvation</li>
</ul>
</li>
</ul>
<h3 id="3-round-robin-scheduling">3. Round-Robin Scheduling</h3>
<ul>
<li>Pick up the first task from queue (like FCFS)</li>
<li>Task may yield to wait on I/O (unlike FCFCS)</li>
<li>Starvation is NOT possible</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr1.png" alt="rr1"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr2.png" alt="rr2"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr3.png" alt="rr3"  />
</p>
<h3 id="4-shortest-remaining-time-first-srtf">4. Shortest Remaining Time First (SRTF)</h3>
<ul>
<li>Chooses the process with the shortest CPU burst remaining and executes that one. If processes come in during execution that have less remaining time, the current one is preempted and the new one executed. Therefore, it can lead to starvation.</li>
</ul>
<h4 id="timeslicing">Timeslicing</h4>
<ul>
<li>Timeslice = max amount of uninterrupted time given to a task</li>
<li>task may run less than timeslice
<ul>
<li>has to wait on I/O sync
<ul>
<li>will be placed on queue</li>
</ul>
</li>
<li>higher priority task becomes runnable</li>
</ul>
</li>
<li>using timeslice tasks are interleaved
<ul>
<li>timesharing the CPU</li>
<li>CPU bound tasks =&gt; preemption after timeslice</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rr4.png" alt="rr4"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Short tasks finish sooner</li>
<li>More responsive</li>
<li>Lengthy I/O operations initiated sooner
<ul>
<li>best to keep timeslice &gt; context-switch-time</li>
</ul>
</li>
</ul>
<p><strong>Disdvantages</strong><br></p>
<ul>
<li>Overheads</li>
</ul>
<h4 id="how-long-should-a-timeslice-be-be">How long should a timeslice be be?</h4>
<ul>
<li>should balance benefits and overheads</li>
</ul>
<h3 id="for-cpu-bound-tasks">For CPU bound tasks:</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cputs.png" alt="cputs"  />
</p>
<ul>
<li>Hence, for CPU bound tasks, larger timeslice values are better</li>
</ul>
<h3 id="for-io-bound-tasks">For I/O bound tasks:</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/iots.png" alt="iots"  />
</p>
<ul>
<li>Hence, for I/O bound tasks, smaller timeslice values are better
<ul>
<li>Keeps CPU and I/P devices busy, I/O bound tasks run quickly, makes I/O requests responds to a user.</li>
</ul>
</li>
</ul>
<h3 id="summary">Summary</h3>
<ul>
<li>
<p>CPU bound tasks prefer longer timeslices</p>
<ul>
<li>limits context switching overheads</li>
<li>keeps CPU utilization and throughput</li>
</ul>
</li>
<li>
<p>I/O bound tasks prefer smaller timeslices</p>
<ul>
<li>However, if all the tasks in contention are I/O bound, it may not make such a difference</li>
<li>If a portion of them are I/O smaller timeslices keeps CPU and device utilization high</li>
<li>Provides better user-perceived performance</li>
</ul>
</li>
</ul>
<hr>
<h1 id="memory-management">Memory Management</h1>
<p>Operating systems:</p>
<ul>
<li>uses intelligently size containers
<ul>
<li>memory pages of segments</li>
</ul>
</li>
<li>Not all parts are needed at once
<ul>
<li>tasks operate on subset of memory</li>
</ul>
</li>
<li>Optimized for performance
<ul>
<li>reduce time to access state in memory
<ul>
<li>leads to better performance!</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="memory-management-goals">Memory Management Goals</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/mmgoals.png" alt="mmgoals.png"  />
</p>
<h4 id="virtual-vs-physical-memory">Virtual vs Physical memory</h4>
<ul>
<li>Allocate
<ul>
<li>allocation, replacement</li>
</ul>
</li>
<li>Arbitrate
<ul>
<li>address translation and validation</li>
</ul>
</li>
</ul>
<h4 id="page-based-memory-management">Page-based Memory Management</h4>
<ul>
<li>Allocate =&gt; pages =&gt; page frames</li>
<li>Arbitrate =&gt; page tables</li>
</ul>
<h4 id="segment-based-memory-management">Segment-based Memory Management</h4>
<ul>
<li>Allocate =&gt; segments</li>
<li>Arbitrate =&gt; segment registers</li>
</ul>
<h2 id="hardware-support">Hardware Support</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hardwaresupport.png" alt="hardwaresupport.png"  />
</p>
<h3 id="memory-management-unit-mmu">Memory Management Unit (MMU)</h3>
<ul>
<li>translate virtual to physical address</li>
<li>reports faults (illegal access, permission, not present in memory)</li>
</ul>
<h3 id="registers">Registers</h3>
<ul>
<li>pointers to page tables</li>
<li>base and limit size, number of segments</li>
</ul>
<h3 id="cache">Cache</h3>
<ul>
<li>Translation lookaside buffer</li>
<li>Valid VA-PA translations using TLB</li>
</ul>
<h3 id="translation">Translation</h3>
<ul>
<li>Actual PA generation done in hardware</li>
</ul>
<h2 id="page-tables">Page Tables</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pagetables.png" alt="pagetables.png"  />
</p>
<ul>
<li>OS creates page table per process</li>
<li>On context switch, switch to valid page table</li>
<li>Updates register that points to correct page table.
E.g CR3 on x86 architecture</li>
</ul>
<h2 id="page-table-entry-pte">Page Table Entry (PTE)</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pfn.png" alt="pfn.png"  />
</p>
<h4 id="flags">Flags</h4>
<ul>
<li>Present (valid/invalid)</li>
<li>Dirty (written to)</li>
<li>Accessed (for read or write)</li>
<li>Protection bits =&gt; RWX</li>
</ul>
<h2 id="page-table-entry-on-x86">Page Table Entry on x86</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pfnx86.png" alt="pfnx86.png"  />
</p>
<h4 id="flags-1">Flags</h4>
<ul>
<li>Present</li>
<li>Dirty</li>
<li>Accessed</li>
<li>R/W permission bit 0: R only, 1: R/W</li>
<li>U/S permission bit 0: usermode, 1: superviser mode only</li>
<li>others: caching related info (write through, caching disabled)</li>
<li>unused: for future use</li>
</ul>
<h2 id="page-faults">Page faults</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pagefaults.png" alt="pagefaults.png"  />
</p>
<h2 id="page-table-size">Page Table Size</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pts.png" alt="pts.png"  />
</p>
<ul>
<li>32 bit architecture
<ul>
<li>Page Table Entry (PTE) = 4 Bytes, including PFN + flags</li>
<li>Virtual Page Number (VPN) = 2^32/page_size</li>
<li>Page size = 4KB (&hellip;8KB, 2MB, 4MB, 1GB)</li>
</ul>
</li>
</ul>
<p>Therefore Page Table Size = (2^32 * 2^12)*4B = 4MB (per process)</p>
<ul>
<li>for 64 bit architecture
<ul>
<li>Page Table Entry (PTE) = 8 Bytes</li>
<li>Page size = 4KB</li>
</ul>
</li>
</ul>
<p>Page Table Size = (2^64 * 2^12)*8B = 32PB (per process!)</p>
<ul>
<li>processes don&rsquo;t use entire address space</li>
<li>even on 32 bit architecture, it will not always use all 4GB</li>
</ul>
<p>But Page Table assumes an entry per VPN regardless, of whether corresponding virtual memory is needed or not.</p>
<h2 id="hierarchical-page-tables">Hierarchical Page Tables</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hierarchicalpt.png" alt="hierarchicalpt.png"  />
</p>
<p>On malloc, a new internal page table may be allocated.</p>
<h4 id="address-split">Address split:</h4>
<table>
  <tr>
    <th colspan="2">Page Number</th>
    <th>offset</th>
  </tr>
  <tr>
    <td>P1</td>
    <td>P2</td>
    <td>d</td>
  </tr>
  <tr>
    <td>12</td>
    <td>10</td>
    <td>10</td>
  </tr>
</table>
<ul>
<li>inner table addresses =&gt; 2^10 * page_size = 2^10*2^10 = 1MB</li>
<li>don&rsquo;t need an inner table for each 1MB virtual memory gap</li>
</ul>
<p>Additional Layers</p>
<ul>
<li>page table directory pointer (3rd level)</li>
<li>page table directory map (4th level)</li>
</ul>
<ul>
<li>Important on 64 bit architectures</li>
<li>larger and more sparse =&gt; larger gaps would save more internal page table components</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hierarchicalpt2.png" alt="hierarchicalpt2.png"  />
</p>
<h3 id="tradeoffs-of-multilevel-page-tables">Tradeoffs of Multilevel Page Tables</h3>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Smaller internal page tables/directories</li>
<li>Granularity of coverage
<ul>
<li>Potentially reduced page table size</li>
</ul>
</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>More memory accesses required for translation</li>
<li>increased translation latency</li>
</ul>
<h2 id="overheads-of-address-translation">Overheads of Address Translation</h2>
<p>For each memory reference :</p>
<table>
<thead>
<tr>
<th>Single level page table</th>
<th>Four level page table</th>
</tr>
</thead>
<tbody>
<tr>
<td>x1 access to PTE</td>
<td>x4 accesses to PTE</td>
</tr>
<tr>
<td>x1 access to mem</td>
<td>x1 access to mem</td>
</tr>
</tbody>
</table>
<p>which results in slowdown.</p>
<h2 id="page-table-cache">Page Table Cache</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/ptcache.png" alt="ptcache.png"  />
</p>
<h4 id="translation-lookaside-buffer">Translation Lookaside Buffer</h4>
<ul>
<li>MMU level address translation cache</li>
<li>On TLB miss =&gt; page table access from memory</li>
<li>has protection/validity bits</li>
<li>small number of cached address =&gt; high TLB hit rate
<ul>
<li>temporal and spatial locality</li>
</ul>
</li>
</ul>
<ul>
<li>Example
<ul>
<li>x86 Core i7
<ul>
<li>per core : 64-entry data TLB <br> 128-entry instruction TLB</li>
<li>512-entry shared second-level TLB</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="inverted-page-tables">Inverted Page Tables</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/invertedpt.png" alt="invertedpt.png"  />
</p>
<h3 id="hashing-page-tables">Hashing Page Tables</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hashingpt.png" alt="hashingpt.png"  />
</p>
<h2 id="segmentation">Segmentation</h2>
<p>Segmentation is the process of mapping virtual to physical memory using segments.</p>
<ul>
<li>Segments: arbitrary granularity (size)
<ul>
<li>e.g. code, heap, data, stack..</li>
<li>address = segment - selector + offset</li>
</ul>
</li>
<li>Segment
<ul>
<li>contiguous physical memory</li>
<li>segment size = segment base + limit registers</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/segmentation.png" alt="segmentation.png"  />
</p>
<h4 id="segmentation--paging">Segmentation + Paging</h4>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/segmentationpaging.png" alt="segmentationpaging.png"  />
</p>
<h2 id="page-size">Page Size</h2>
<ul>
<li>10 bit offset =&gt; 1 KB page size [2^10]</li>
<li>12 bit offset =&gt; 4 KB page size [2^12]</li>
</ul>
<p>In real world examples,</p>
<ul>
<li>Linux/x86 : 4 KB, 2MB, 1GB</li>
<li>Solaris/Sparse: 8kB, 4MB, 2GB</li>
</ul>
<p>||Large|Huge|
|&mdash;-|&mdash;&ndash;|
|page size|2 MB|1 GB|
|offset bits|21 bits|30 bits|
|reduction factor on page table size|x512|x1024|</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>larger pages
<ul>
<li>fewer page table entries, smaller page tables, more TLB hits</li>
</ul>
</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>internal fragmentation =&gt; wastes memory</li>
</ul>
<h2 id="memory-allocation">Memory Allocation</h2>
<ul>
<li>
<p>Memory allocator</p>
<ul>
<li>determines VA to PA mapping</li>
<li>address translation, page tables
=&gt; simply determine PA from VA and check validity/permsissions</li>
</ul>
</li>
<li>
<p>Kernel Level Allocators</p>
<ul>
<li>kernel state, static process state</li>
</ul>
</li>
<li>
<p>User Level Allocators</p>
<ul>
<li>dynamic process state (heap), malloc/free</li>
<li>e.g. d/malloc, jemalloc, Hoard, tcmalloc</li>
</ul>
</li>
</ul>
<h2 id="demand-paging">Demand Paging</h2>
<ul>
<li>Virtual Memory &raquo; Physical Memory
<ul>
<li>virtual memory page is not always in physical memory</li>
<li>physical page frame saved and restored to/from secondary storage</li>
</ul>
</li>
</ul>
<h3 id="demand-paging-1">Demand paging:</h3>
<ul>
<li>pages swapped in/out of memory &amp; a swap partition (e.g. on a disk)</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/demandpaging.png" alt="demandpaging.png"  />
</p>
<ul>
<li>Original PA != PA after swapping
<ul>
<li>if page is &ldquo;pinned&rdquo;, swapping is disabled</li>
</ul>
</li>
</ul>
<h4 id="when-pages-should-be-swapped">When pages should be swapped?</h4>
<ul>
<li>page(out) daemon</li>
<li>when memory usage is above threshold</li>
<li>when CPU usage is below threshold</li>
</ul>
<h4 id="which-page-should-be-swapped-out">Which page should be swapped out?</h4>
<ul>
<li>pages that won&rsquo;t be used</li>
<li>history based prediction
<ul>
<li>Least Recently Used (LRU policy). Access bit tracks if page is referenced.</li>
</ul>
</li>
<li>page that don&rsquo;t need to be written out
<ul>
<li>Dirty bit to track if modified</li>
</ul>
</li>
<li>avoid non-swappable pages</li>
</ul>
<h2 id="checkpointing">Checkpointing</h2>
<ul>
<li>Failure and Recovery management technique
<ul>
<li>periodically save process state</li>
<li>failure may be unavoidable but can restart from checkpoint, so recovery would be faster</li>
</ul>
</li>
</ul>
<h4 id="simple-approach">Simple Approach</h4>
<ul>
<li>pause and save</li>
</ul>
<h4 id="better-approach">Better Approach</h4>
<ul>
<li>write-protect and copy everything at once</li>
<li>copy diffs of dirties pages for incremental checkpoints
<ul>
<li>rebuild from multiple diffs, or in background</li>
</ul>
</li>
</ul>
<p>Checkpointing can also be used in other services:</p>
<ul>
<li>
<p>Debugging</p>
<ul>
<li>Rewind-Replay</li>
<li>rewind = restart from checkpoint</li>
<li>gradually go back to earlier checkpoints until error is found</li>
</ul>
</li>
<li>
<p>Migration</p>
<ul>
<li>continue on another machine</li>
<li>disaster recovery</li>
<li>consolidation</li>
<li>repeated checkpoints in a fast loop until pause and copy becomes acceptable (or unavoidable)</li>
</ul>
</li>
</ul>
<hr>
<h1 id="inter-process-communication-1">Inter Process Communication</h1>
<ul>
<li>Processes share memory
<ul>
<li>data in shared messages</li>
</ul>
</li>
<li>Processes exchange messages
<ul>
<li>message passing via sockets</li>
</ul>
</li>
<li>Requires synchronization
<ul>
<li>mutex, waiting</li>
</ul>
</li>
</ul>
<p><strong>Inter Process Communication</strong>(IPC) is an OS supported mechanism for interaction among processes (coordination and communication)</p>
<ul>
<li>Message Passing
<ul>
<li>e.g. sockets, pips, msgs, queues</li>
</ul>
</li>
<li>Memory based IPC
<ul>
<li>shared memory, memory mapped files</li>
</ul>
</li>
<li>Higher level semantics
<ul>
<li>files, <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a></li>
</ul>
</li>
<li>Synchronization primitives</li>
</ul>
<h2 id="message-passing">Message Passing</h2>
<ul>
<li>Send/Receive messages</li>
<li>OS creates and maintains a channel
<ul>
<li>buffer, FIFO queue</li>
</ul>
</li>
<li>OS provides interfaces to processes
<ul>
<li>a port</li>
<li>processes send/write messages to this port</li>
<li>processes receive/read messages from this port</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/messagepassingipc.png" alt="messagepassingipc.png"  />
</p>
<ul>
<li>Kernel required to
<ul>
<li>establish communication</li>
<li>perform each IPC operation</li>
<li>send: system call + data copy</li>
<li>receive: system call + data copy</li>
</ul>
</li>
<li>Request-response:
4x user/ kernel crossings + <br>
4x data copies</li>
</ul>
<p><strong>Advantages</strong><br></p>
<ul>
<li>simplicity : kernel does channel management and synchronization</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Overheads</li>
</ul>
<h3 id="forms-of-message-passing-ipc">Forms of Message Passing IPC</h3>
<h4 id="1-pipes">1. Pipes</h4>
<ul>
<li>Carry byte stream between 2 process</li>
<li>e.g connect output from 1 process to input of another</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/pipes.png" alt="pipes.png"  />
</p>
<h4 id="2-message-queues">2. Message queues</h4>
<ul>
<li>Carry &ldquo;messages&rdquo; among processes</li>
<li>OS management includes priorities, scheduling of message delivery</li>
<li>APIs : Sys-V and POSIX</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/msgq.png" alt="msgq.png"  />
</p>
<h4 id="3-sockets">3. Sockets</h4>
<ul>
<li>send() and recv() : pass message buffers</li>
<li>socket() : create kernel level socket buffer</li>
<li>associated neccessary kernel processing (TCP-IP,..)</li>
<li>If different machines, channel between processes and network devices</li>
<li>If same machine, bypass full protocol stack</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sockets.png" alt="sockets.png"  />
</p>
<h2 id="shared-memory-ipc">Shared Memory IPC</h2>
<ul>
<li>read and write to shared memory region</li>
<li>OS establishes shared channel between the processes
<ol>
<li>physical pages mapped into virtual address space</li>
<li>VA(P1) and VA(P2) map to same physical address</li>
<li>VA(P1) != VA(P2)</li>
<li>physical mempry doesn&rsquo;t need to be contiguous</li>
</ol>
</li>
<li>APIs : SysV, POSIX, memory mapped files, Android ashmem</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmemoryipc.png" alt="sharedmemoryipc.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>System calls only for setup data copies potentially reduced (but not eliminated)</li>
</ul>
<p><strong>Disdvantages</strong><br></p>
<ul>
<li>explicit synchronization</li>
<li>communication protocol, shared buffer management
<ul>
<li>programmer&rsquo;s responsibility</li>
</ul>
</li>
</ul>
<h2 id="which-is-better">Which is better?</h2>
<p><strong>Overheads for</strong></p>
<ol>
<li>Message Passing : must perform multiple copies</li>
<li>Shared Memory : must establish all mappings among processes&rsquo; address space and shared memory pages</li>
</ol>
<p>Thus, it depends.</p>
<h2 id="copy-vs-map">Copy vs Map</h2>
<p>Goal for both is to transfer data from one into target saddress space</p>
<table>
<thead>
<tr>
<th>Copy (Message Passing)</th>
<th>Map (Shared Memory)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU cycles to copy data to/from port</td>
<td>CPU cycles to map memory into address space</td>
</tr>
<tr>
<td>CPU to copy data to channel</td>
<td></td>
</tr>
<tr>
<td>If channel setup once, use many times (good payoff)</td>
<td></td>
</tr>
<tr>
<td>Can perform well for 1 time use</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>Large Data: t(Copy) &raquo; t(Map)
<ul>
<li>e.g. tradeoff exercised in Window &ldquo;Local&rdquo; Procedure Calls (LPC)</li>
</ul>
</li>
</ul>
<h2 id="shared-memory-and-synchronization">Shared Memory and Synchronization</h2>
<p>Use threads accessing shared state in a single addressing space, but for process</p>
<p>Synchronization method:</p>
<ol>
<li>mechanism supported by processing threading library (pthreads)</li>
<li>OS supported IPC for sync</li>
</ol>
<p>Either method must coordinate</p>
<ul>
<li>no of concurrent access to shared segment</li>
<li>when data is available and ready for consumption</li>
</ul>
<h3 id="ipc-synchronization">IPC Synchronization</h3>
<table>
<thead>
<tr>
<th>Message Queues</th>
<th>Semaphores</th>
</tr>
</thead>
<tbody>
<tr>
<td>Implement &ldquo;mutual exclusion&rdquo; via send/receive</td>
<td>OS supported synchronization construct</td>
</tr>
<tr>
<td>binary construct (either allow process or not)</td>
<td></td>
</tr>
<tr>
<td>Like mutex, if value = 0, stop; if value = 1, decrement(lock) and proceed</td>
<td></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="synchronization">Synchronization</h1>
<p>Waiting for other processes, so that they can continue working together</p>
<ul>
<li>may repeatedly check to continue
<ul>
<li>sync using spinlocks</li>
</ul>
</li>
<li>may wait for a signal to continue
<ul>
<li>sync using mutexes and condition vatiables</li>
</ul>
</li>
<li>waiting hurts performance
<ul>
<li>CPUs wste cycles for checking; cache effects</li>
</ul>
</li>
</ul>
<h2 id="limitation-of-mutextes-and-condition-variables">Limitation of mutextes and condition variables</h2>
<ul>
<li>Error prone/correctness/ease of use
<ul>
<li>unlock wrong mutex, signal wrong condition variable</li>
</ul>
</li>
<li>Lack of expressive power
<ul>
<li>helper variables for access or priority control</li>
</ul>
</li>
</ul>
<p>Low-level support: hardware atmoic instructions</p>
<h2 id="synchronization-constructs">Synchronization constructs</h2>
<ol>
<li>Spinlocks (basic sync construct)
<ul>
<li>Spinlock is like a mutex
<ul>
<li>mutual exclusion</li>
<li>lock and unlock(free)
- but, lock == busy =&gt; spinning</li>
</ul>
</li>
</ul>
</li>
<li>Semaphores
<ul>
<li>common sync construct in OS kernels</li>
<li>like a traffic light: Stop and Go</li>
<li>like mutex, but more general</li>
</ul>
</li>
</ol>
<p>Semaphore == integer value</p>
<ul>
<li>on init
<ul>
<li>assigned a max value (positive int) =&gt; max count</li>
</ul>
</li>
<li>on try(wait)
<ul>
<li>if non-zero, decrement and proceed =&gt; counting semaphore</li>
</ul>
</li>
<li>if initialized with 1
<ul>
<li>semaphore == mutex(binary semaphore)</li>
</ul>
</li>
<li>on exit(post)
<ul>
<li>increment</li>
</ul>
</li>
</ul>
<h2 id="syncing-different-types-of-accesses">Syncing different types of accesses</h2>
<h3 id="readerwriter-locks">Reader/Writer locks</h3>
<table>
<tr>
<td>read (don't modify)</td>
<td>write (always modify)</td>
</tr>
<tr>
<td>shared access</td>
<td>exclusive access</td>
</tr>
</table>
<ul>
<li>RW locks
<ul>
<li>specify type of access, then lock behaves accordingly</li>
</ul>
</li>
</ul>
<h3 id="monitors-highlevel-construct">Monitors (highlevel construct)</h3>
<ul>
<li>shared resource</li>
<li>entry resource</li>
<li>possible condition variables</li>
</ul>
<ul>
<li>On entry:
<ul>
<li>lock, check</li>
</ul>
</li>
<li>On exit:
<ul>
<li>unlock, check, signal</li>
</ul>
</li>
</ul>
<h3 id="more-synchroniaztion-constructs">More synchroniaztion constructs</h3>
<ul>
<li>serializers</li>
<li>path expressions</li>
<li>barriers</li>
<li>rendezvous points</li>
<li>optimistic wait-free sync (RCU) [Read Copy Update]</li>
</ul>
<p>All need hardware support.</p>
<h2 id="need-for-hardware-support">Need for hardware support</h2>
<ul>
<li>Problem
<ul>
<li>concurrent check/update on different CPUs can overlap</li>
</ul>
</li>
</ul>
<h3 id="atomic-instructions">Atomic instructions</h3>
<p>Critical section with hardware supported synchronization</p>
<h4 id="hardware-specific">Hardware specific</h4>
<ul>
<li>
<p>test-and-set</p>
<ul>
<li>returns(tests) original values and sets new-value!= 1 (busy) automatically</li>
<li>first thread: test-and-set(lock) =&gt; 0 : free</li>
<li>next ones: test-and-set(lock) =&gt; 1 busy
<ul>
<li>reset lock to 1, but that&rsquo;s okay</li>
</ul>
</li>
<li><strong>+</strong> : Latency</li>
<li><strong>+</strong> : minimal (Atomic)</li>
<li><strong>+</strong> : Delay potentially min</li>
<li><strong>-</strong> : Contention processors go to memory on each spin
- To reduce contention, introduce delay
- Static(based on a fixed value) or Dynamic(backoff based, random delay)</li>
</ul>
</li>
<li>
<p>read-and-increment</p>
</li>
<li>
<p>compare-and-swap</p>
</li>
</ul>
<h4 id="guarantees">Guarantees</h4>
<ul>
<li>atomicity</li>
<li>mutual exclusion</li>
<li>queue all concurrent instructions but one</li>
</ul>
<h3 id="shared-memory-multiprocessors">Shared Memory Multiprocessors</h3>
<p>Also called symmetric multiprocessors (SMP)</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/sharedmmmp.png" alt="sharedmmmp"  />
</p>
<ul>
<li>Caches
<ul>
<li>hide memory latency, &ldquo;memory&rdquo; further away due to contention</li>
<li>no-write, write-through, write-back</li>
</ul>
</li>
</ul>
<h3 id="cache-coherence">Cache Coherence</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachecoherence.png" alt="cachecoherence"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachecoherence2.png" alt="cachecoherence2"  />
</p>
<hr>
<pre><code># I/O Management
</code></pre>
<p>Operating system</p>
<ul>
<li>Has protocols
<ul>
<li>Interfaces for device I/O</li>
</ul>
</li>
<li>Has dedicated handlers
<ul>
<li>Device drivers, interrupt handlers</li>
</ul>
</li>
<li>Decouple I/O details from core processing
<ul>
<li>abstract I/O device detail from applications</li>
</ul>
</li>
</ul>
<h2 id="io-device-features">I/O Device Features</h2>
<ul>
<li>Control registers (accessed by CPU)
<ul>
<li>Command</li>
<li>Data Transfers</li>
<li>Status</li>
</ul>
</li>
<li>Microcontroller : device&rsquo;s CPU</li>
<li>On device memory</li>
<li>Other logic
<ul>
<li>e.g. analog to digital</li>
</ul>
</li>
</ul>
<h2 id="device-drivers">Device drivers</h2>
<ul>
<li>per each device type</li>
<li>responsible for device access management and control</li>
<li>provided by device manufacturers per OS /version</li>
<li>each OS standardizes interfaces
<ul>
<li>device independence</li>
<li>device diversity</li>
</ul>
</li>
</ul>
<h2 id="types-of-devices">Types of devices</h2>
<ul>
<li>Block
<ul>
<li>e.g. disk</li>
<li>read/write blocks of data</li>
<li>direct access to arbitrary block</li>
</ul>
</li>
<li>Character
<ul>
<li>e.g. keyboard</li>
<li>get/put character</li>
</ul>
</li>
<li>Network devices</li>
</ul>
<p>OS representation of a device : special device file</p>
<p>UNIX like systems:</p>
<ul>
<li>/dev</li>
<li>tmpfs</li>
<li>devfs</li>
</ul>
<p>Linux supports a number of pseudo &ldquo;virtual&rdquo; devices that provide special functionality to a system.</p>
<h2 id="cpu-device-interactions">CPU device interactions</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/iointeractions.png" alt="iointeractions.png"  />
</p>
<p>access device registers : memory load/store</p>
<ol>
<li>Memory mapped I/0
<ul>
<li>part of &lsquo;host&rsquo; physical memory dedicated for device interactions</li>
<li>Base Address Registers (BAR)</li>
</ul>
</li>
<li>I/O Port
<ul>
<li>dedicated in low instructions for device access</li>
<li>target device (I/0 port) and value in register</li>
</ul>
</li>
</ol>
<h2 id="path-from-device-to-cpu">Path from Device to CPU</h2>
<ol>
<li>Interrupt
<ul>
<li>Overhead: Interrupt handling steps</li>
<li>+: Can be generated as soon as possible</li>
</ul>
</li>
<li>Polling
<ul>
<li>Overhead: Delay or CPU overhead</li>
<li>when convenient for OS</li>
</ul>
</li>
</ol>
<h2 id="device-access--programmed-io-pio">Device access : Programmed I/O (PIO)</h2>
<ul>
<li>No additional hardware support</li>
<li>CPU &ldquo;programs&rdquo; the device
<ul>
<li>via command registers</li>
<li>data movement</li>
</ul>
</li>
<li>E.g. NIC(Network Interface Card)
<ul>
<li>data = network packet</li>
</ul>
</li>
<li>Write command to request packet information</li>
<li>Copy packet to data registers</li>
<li>Repeat until packet sent</li>
</ul>
<p>E.g. 1500B packet; 8 byte registers or bus =&gt; 1(for bus command) + 188(for data) = 189 CPU store instructions</p>
<h2 id="direct-memory-access-dma">Direct Memory Access (DMA)</h2>
<ul>
<li>Relies on DMA controller</li>
<li>CPU &ldquo;programs&rdquo; the device
<ul>
<li>via command registers</li>
<li>via DMA controls</li>
</ul>
</li>
<li>E.g. NIC (data = network packet)</li>
<li>Write command to request packet information</li>
<li>Configure DMA controller with in memory address and size of packet buffer</li>
</ul>
<p>E.g. 1500B packet; 8 byte registers or bus =&gt; 1(for bus command) + 1(for DMA configuration) = total 2 CPU store instructions. Less steps, but DMA configuration is more complex.</p>
<p>For DMAs</p>
<ul>
<li>data buffer must be in physical memory until transfer completes</li>
<li>pinning regions (non-swappable)</li>
</ul>
<h2 id="typical-device-access">Typical Device Access</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/typicaldeviceaccess.png" alt="typicaldeviceaccess.png"  />
</p>
<ul>
<li>System call</li>
<li>In-kernel stack</li>
<li>Driver Invocation</li>
<li>Device request configuration</li>
<li>Device performs request</li>
</ul>
<h3 id="os-bypass">OS bypass</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/osbypass.png" alt="osbypass.png"  />
</p>
<ul>
<li>device registers/data
<ul>
<li>directly available</li>
</ul>
</li>
<li>OS configures
<ul>
<li>then gets out of the way</li>
</ul>
</li>
<li>&ldquo;user level driver&rdquo;
<ul>
<li>in library</li>
</ul>
</li>
<li>OS retains coarse-grain control</li>
<li>relies on device features
<ul>
<li>sufficient registers</li>
<li>demux capability</li>
</ul>
</li>
</ul>
<h2 id="what-happens-to-a-calling-thread">What happens to a calling thread?</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/access.png" alt="access.png"  />
</p>
<ul>
<li>Synchronous I/O operations
<ul>
<li>process blocks</li>
</ul>
</li>
<li>Asynchronous I/O operations
<ul>
<li>process continues</li>
<li>Later, process checks and retrieves result</li>
<li>OR</li>
<li>process is notified that operation is completed and results are ready</li>
</ul>
</li>
</ul>
<h2 id="block-device-stack">Block Device Stack</h2>
<p>Block device typical storage for files:</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/blockdevicestack.png" alt="blockdevicestack.png"  />
</p>
<ul>
<li>processes use files =&gt; logical storage unit</li>
<li>kernel file system (KFS)
<ul>
<li>where how to find and access file</li>
<li>OS specifies interface</li>
</ul>
</li>
<li>generic block layer
<ul>
<li>OS standardized block interface</li>
</ul>
</li>
<li>Device driver</li>
</ul>
<h2 id="virtual-file-system">Virtual File System</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/vfs.png" alt="vfs.png"  />
</p>
<h3 id="virtual-file-system-abstractions">Virtual File System Abstractions</h3>
<ul>
<li>File : Elements on which the VFS operates</li>
<li>File Descriptor : OS representation of file
<ul>
<li>open, read, write, send file , lock, close</li>
</ul>
</li>
<li>inode : Persistent representation of file &ldquo;index&rdquo;
<ul>
<li>list of all data blocks</li>
<li>device, permissions, size</li>
</ul>
</li>
<li>dentry : Directory entry, corresponding to the single path component,
<ul>
<li>dentry cache</li>
</ul>
</li>
<li>super block : file system specific information regarding the File System layout</li>
</ul>
<h3 id="vfs-on-disk">VFS on disk</h3>
<ul>
<li>File : data blocks on disk</li>
<li>inode : track file blocks
<ul>
<li>also resides on disk in some block</li>
</ul>
</li>
<li>super block : overall map of disk blocks
<ul>
<li>inode blocks</li>
<li>data blocks</li>
<li>free blocks</li>
</ul>
</li>
</ul>
<h3 id="inodes">Inodes</h3>
<p>Index of all disk blocks corresponding to a file</p>
<ul>
<li>File : identified by inode</li>
<li>inode : list of all blocks + other metadata</li>
</ul>
<p><strong>+</strong>: Easy to perform sequential or random access<br>
<strong>-</strong>: Limit on file size</p>
<h3 id="inodes-with-indirect-pointers">Inodes with indirect pointers</h3>
<ul>
<li>Index of all disk blocks corresponding to a file</li>
<li>Index contain:
<ul>
<li>metadata</li>
<li>pointers to blocks</li>
</ul>
</li>
<li>Direct pointer : Points to data block
<ul>
<li>1 KB per entry</li>
</ul>
</li>
<li>Indirect pointer : Points to block of pointers
<ul>
<li>256 KB per entry</li>
</ul>
</li>
<li>Double Indirect pointer : Points to block of block of pointers
<ul>
<li>64 MB per entry</li>
</ul>
</li>
</ul>
<p><strong>+</strong>: Small inode =&gt; large file size<br>
<strong>-</strong>: File access slowdown</p>
<h2 id="disk-access-optimizations">Disk access optimizations</h2>
<p>Reducing file access overheads</p>
<ol>
<li>Caching/buffering : reducenumber of disk accesses
<ul>
<li>buffer cache in main menu</li>
<li>read/write from cache</li>
<li>periodically flush to disk - fsync()</li>
</ul>
</li>
<li>I/O scheduling : reduce disk head movement
<ul>
<li>maximize sequential vs random access</li>
</ul>
</li>
<li>Prefetching : increases cache hits
<ul>
<li>leverages locality</li>
</ul>
</li>
<li>Journaling/logging: reduce random access (ext3, ext4)
<ul>
<li>&ldquo;describe&rdquo; write in log : block, offset, value..</li>
<li>periodically apply updates to proper disk locations</li>
</ul>
</li>
</ol>
<hr>    
<pre><code># Virtualization
</code></pre>
<p>Virtualization allows concurrent execution of multiple OSs and their applications on the same physical machine.</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/virtualization.png" alt="virtualization.png"  />
</p>
<ul>
<li>Virtual resources : each OS thinks that ot &ldquo;owns&rdquo; hardware resources</li>
<li>Virtual machine (VM) : OS + applications + virtual resources (guest domain)</li>
<li>Virtualization layer : management of physical hardware (virtual machine monitor, hypervisor)</li>
</ul>
<h2 id="defining-virtual-machine">Defining Virtual Machine</h2>
<p>A Virtual Machine is an efficient, isolated duplicate of the real machine.</p>
<ul>
<li>Supported by a Virtual Machine Monitor (VMM):
<ol>
<li>provides environment essentially identical with the original machine</li>
<li>programs show only minor decrease in speed at worst</li>
<li>VMM is in complete control of the system resources</li>
</ol>
</li>
</ul>
<h2 id="vmm-goals">VMM goals</h2>
<ul>
<li>Fidelity</li>
<li>Performance</li>
<li>Safety and Isolation</li>
</ul>
<h2 id="virtualization-advantages">Virtualization advantages</h2>
<ul>
<li>consolidation
<ul>
<li>decrease cost, improve manageability</li>
</ul>
</li>
<li>migration
<ul>
<li>availibility, reliability</li>
</ul>
</li>
<li>security, debugging, support for legacy OS</li>
</ul>
<h2 id="two-main-virtualization-models">Two main Virtualization Models:</h2>
<h3 id="1-bare-metal-or-hypervisor-based-type-1">1. Bare-metal or Hypervisor based (Type 1)</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hypervisor.png" alt="hypervisor.png"  />
</p>
<ul>
<li>VMM (hypervisor) manages all hardware resources abd supports execution of VMs</li>
<li>privileged, secure VM to deal with devices (and other configuration and management tasks)</li>
<li>Adopted by Xen(Opensource or Citriol Xen Server) and ESX (VMware)</li>
</ul>
<h3 id="1-hosted-type-2">1. Hosted (Type 2)</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hosted.png" alt="hosted.png"  />
</p>
<ul>
<li>Host owns all hardware</li>
<li>Special VMM modle provides hardware interfaces to VMs and deals with VM context switching</li>
</ul>
<h2 id="virtualization-requirements">Virtualization requirements</h2>
<ul>
<li>Present virtual platform interface to VMs
<ul>
<li>virtualize CPU, memory, devices</li>
</ul>
</li>
<li>Provide isolation across VMs
<ul>
<li>preemption, MMU for address translation and validation</li>
</ul>
</li>
<li>Protect guest OS from applications
<ul>
<li>can&rsquo;t run guest OS and applications at same protection level</li>
</ul>
</li>
<li>Protect VMs from guest OS
<ul>
<li>can&rsquo;t run guest OS and VMMs at same protection level</li>
</ul>
</li>
</ul>
<h2 id="hardware-protection-levels">Hardware protection levels</h2>
<p>Commodity hardware has more than two protection levels</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hwprotectionlevels.png" alt="hwprotectionlevels"  />
</p>
<ul>
<li>x86 has 4 protection levels (rings)
<ul>
<li>ring 3 : lowest privilege (applications)</li>
<li>ring 1 : OS</li>
<li>ring 0 : highest privilege (hypervisor)</li>
</ul>
</li>
<li>and 2 protection modes
<ul>
<li>non root : VMs
<ul>
<li>ring 3 : apps</li>
<li>ring 0 : OS</li>
</ul>
</li>
<li>root :
<ul>
<li>ring 0 : hypervisor</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="process-virtualization-trap-and-emulate">Process Virtualization (Trap-and-Emulate)</h2>
<ul>
<li>Guest instruments
<ul>
<li>executed directly by hardware</li>
<li>for non-privileged operations : hardware speeds =&gt; efficiency</li>
<li>for privileged operations : trap to hypervisor</li>
</ul>
</li>
<li>Hypervisor determines what needs to be done:
<ul>
<li>if illegal operation : terminate VM</li>
<li>if legal operation : emulate the behaviour the guest OS was expecting from the hardware</li>
</ul>
</li>
</ul>
<h2 id="problems-with-trap-and-emulate">Problems with Trap-and-Emulate</h2>
<ul>
<li>17 privileged information do not trao but fail silently</li>
<li>Hypervisor doesn&rsquo;t know, so it doesn&rsquo;t try to change settings</li>
<li>OS doesn&rsquo;t know, so assumes change was successful</li>
</ul>
<h2 id="binary-translation">Binary Translation</h2>
<p><strong>Goal</strong> : Full Virtualization i.e. guest OS is not modified</p>
<p><strong>Approach</strong> : Dynamic Binary Translation</p>
<ol>
<li>Inspect code blocks to be executed</li>
<li>If needed, translate to alternate instruction sequence
<ul>
<li>e.g. to emulate desired behaviour, possibly avoid traps</li>
</ul>
</li>
<li>Otherwise run at hardware speeds
<ul>
<li>cache translated blocks to ammortize translation costs</li>
</ul>
</li>
</ol>
<h2 id="paravirtualization">Paravirtualization</h2>
<p><strong>Goal</strong> : Performance; give up on modified guest OSs</p>
<p><strong>Approach</strong> : Paravirtualization : modify guest OSs so that</p>
<ul>
<li>it knows it is running virtualized</li>
<li>it makes explicit calls to hyperisor (hypercalls)</li>
<li>hypercalls (~ system calls)
<ul>
<li>package context information</li>
<li>specify desired hypercall</li>
<li>trap to VMM</li>
</ul>
</li>
<li>Xen : opensource hypervisor</li>
</ul>
<h2 id="memory-virtualization">Memory virtualization</h2>
<ul>
<li>Full virtualization
<ul>
<li>all guests expect contiguous physical memory starting at 0</li>
<li>virtual vs physical vs machine addresses and page frame numbers</li>
<li>still leverages hardware (MMU, TLB..)</li>
</ul>
</li>
<li>Option 1
<ul>
<li>guest page table : VA =&gt; PA</li>
<li>hypervisor : PA =&gt; MA</li>
<li>too expensive!</li>
</ul>
</li>
<li>Option 2
<ul>
<li>guest page tables : VA =&gt; PA</li>
<li>hypervisor shadow PT : VA =&gt; MA</li>
<li>hypervisor maintains consistence
<ul>
<li>e.g. invalidate on context switch, write protect guest PT to track new mappings</li>
</ul>
</li>
</ul>
</li>
<li>Paravirtualized
<ul>
<li>guest aware of virtualization</li>
<li>no longer strict requirement on contiguous physical memory starting at 0</li>
<li>explicitly registers page tables with hypervisor</li>
<li>can &ldquo;batch&rdquo; page tables updates to reduce VM exits</li>
<li>other optimazations</li>
</ul>
</li>
</ul>
<p>Overheads eliminated or reduced on newer platforms</p>
<h2 id="device-virtualization">Device Virtualization</h2>
<ul>
<li>For CPUs and Memory
<ul>
<li>less diversity, Intruction-Set-Architecture(ISA) level</li>
<li>Standardization of interface</li>
</ul>
</li>
<li>For Devices
<ul>
<li>high diversity</li>
<li>lack of standard specification of device interface and behaviour</li>
</ul>
</li>
</ul>
<h4 id="3-key-models-for-device-virtualization">3 key models for Device Virtualization:</h4>
<h3 id="1-pass-through-model">1. Pass through model</h3>
<p>Approach: VMM-level-driver configures device access permissions</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/passthrough.png" alt="passthrough.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>VM provided with exclusive and direct (VMM bypass) access to the device</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Device sharing difficult</li>
<li>VMM must have exact type of device as what VM expects</li>
<li>VM migration tricky</li>
</ul>
<h3 id="2-hypervisor---direct-model">2. Hypervisor - Direct model</h3>
<p>Approach:</p>
<ul>
<li>VMM interrupts all device accesses</li>
<li>Emulate device operations
<ul>
<li>translate to generic I/O operations</li>
<li>traverse VMM-resident I/O stack</li>
<li>invoke VMM-resident driver</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/hypervisordirect.png" alt="hypervisordirect.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>VM decoupled from physical device</li>
<li>Sharing, migration, dealing with device specifics</li>
</ul>
<p><strong>Disadvantages</strong><br></p>
<ul>
<li>Latency of device operations</li>
<li>Device driver ecosystem complexities in Hypervisor</li>
</ul>
<h3 id="3-split-device-driver-model">3. Split Device-Driver model</h3>
<p>Approach:</p>
<ul>
<li>Device access control split between</li>
<li>Emulate device operations
<ul>
<li>front-end driver in guest VM (device API)</li>
<li>back-end driver in service VM (or Host)</li>
<li>modified guest drivers
<ul>
<li>i.e. limited to paravirtualized guests</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/splitdevicedriver.png" alt="splitdevicedriver.png"  />
</p>
<p><strong>Advantages</strong><br></p>
<ul>
<li>Eliminate emulation overhead</li>
<li>Allow for better management of shared devices</li>
</ul>
<hr>
<h1 id="remote-procedure-calls">Remote Procedure Calls</h1>
<p>Example : GetFile App</p>
<ul>
<li>Client Server</li>
<li>Create and init sockets</li>
<li>Allocate and populate buffers</li>
<li>Include &lsquo;protocol&rsquo; info
<ul>
<li>GetFile, size</li>
</ul>
</li>
<li>Copy data into buffers
<ul>
<li>filename, file</li>
</ul>
</li>
</ul>
<ul>
<li>common steps related to remote IPC</li>
</ul>
<h4 id="remote-procedure-calls-rpc">Remote Procedure Calls (RPC)</h4>
<ul>
<li>Intended to simplify the development of cross address space and cross machine interactions</li>
</ul>
<p><strong>+</strong> Higher-level interface for data movement and communication<br>
<strong>+</strong> Error handling<br>
<strong>+</strong> Hiding complexities of cross machine interactions</p>
<h2 id="rpc-requirements">RPC requirements</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rpcrequirements.png" alt="rpcrequirements"  />
</p>
<ol>
<li>Client/Server interactions</li>
<li>Procedure Call Interface =&gt; RPC
<ul>
<li>sync call semantics</li>
</ul>
</li>
<li>Type checking
<ul>
<li>error handling</li>
<li>packet bytes interpretation</li>
</ul>
</li>
<li>Cross machine conversion
<ul>
<li>e.g. big/little endian</li>
</ul>
</li>
<li>Higher level protocol
<ul>
<li>access control, fault tolerance, different transport protocols</li>
</ul>
</li>
</ol>
<h2 id="structure-of-rpc">Structure of RPC</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/rpcstructure.png" alt="rpcstructure"  />
</p>
<h2 id="rpc-steps">RPC Steps:</h2>
<p>(-1.) register : server registers procedure, arg types, location<br>
(0.) bind : client finds and binds to desired server</p>
<ol>
<li>call : client make RPC call; control passed to stub, client code blocks</li>
<li>marshal : client stub &ldquo;marshals&rdquo; args (serialize args into buffer)</li>
<li>send : client sends message to server</li>
<li>receive : server receives message; passes message to server stub; access control</li>
<li>unmarshal : server stub &ldquo;unmarshals&rdquo; args (extract args from buffer)</li>
<li>actual call : server stub calls local procedure implementation</li>
<li>result : server performs operation and computes result of RPC operation</li>
</ol>
<p>(same on return &lt;=)</p>
<h2 id="interface-definition-language-idl">Interface definition Language (IDL)</h2>
<ul>
<li>Used to describe the interface the server expects
<ul>
<li>procedure name, args, 2 result types</li>
<li>version number</li>
</ul>
</li>
</ul>
<p>RPC can use IDL that is</p>
<ol>
<li>Language agnostic
<ul>
<li>XDR in SunRPC</li>
</ul>
</li>
<li>Language specific
<ul>
<li>Java in JavaRMI</li>
</ul>
</li>
</ol>
<h2 id="marshalling">Marshalling</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/marshalling.png" alt="Marshalling"  />
</p>
<h2 id="unmarshalling">Unmarshalling</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/unmarshalling.png" alt="Unmarshalling"  />
</p>
<p>Marshalling/Unmarshalling routines are provided by RPC system compiler.</p>
<h2 id="binding-and-registry">Binding and Registry</h2>
<ul>
<li>Client determines
<ul>
<li><strong>which</strong> server to connect to?
<ul>
<li>service name. version number</li>
</ul>
</li>
<li><strong>how</strong> to connect to that server?
<ul>
<li>IP address, network protocol</li>
</ul>
</li>
</ul>
</li>
<li>Registry : database of available services
<ul>
<li>search for service name to find server(which) and contact details(how)</li>
<li>distributed
<ul>
<li>any RPC service can register</li>
</ul>
</li>
<li>machine-specific
<ul>
<li>for services running on same machine</li>
<li>clients must know machine addresses</li>
<li>registry provides port number needed for connection</li>
</ul>
</li>
</ul>
</li>
<li>Who can provide a service?
<ul>
<li>lookup registry for image processing</li>
</ul>
</li>
<li>What services do they provide?
<ul>
<li>compress/filter.. version number =&gt; IDL</li>
</ul>
</li>
<li>How will they ship package?
<ul>
<li>TCP / UDP -&gt; registry</li>
</ul>
</li>
</ul>
<h2 id="pointers">Pointers</h2>
<ul>
<li>Procedure interface : foo(int,int)</li>
<li>in Local Calls : foo(x,y) =&gt; okay</li>
<li>in Remote Calls : foo(x,y) =&gt; ?</li>
</ul>
<p>here, y points to location in caller address space</p>
<ul>
<li>Solutions:
<ul>
<li>No pointers</li>
<li>Serialize pointers; copy referenced (&ldquo;points to&rdquo;) data structure to send buffer</li>
</ul>
</li>
</ul>
<h2 id="handling-partial-failures">Handling Partial Failures</h2>
<ul>
<li>Special RPC error notification (signal, exception..)
<ul>
<li>Catch all possible ways in which RPC can (partially) fail</li>
</ul>
</li>
</ul>
<h2 id="rpc-design-choice">RPC Design choice</h2>
<ul>
<li>Binding =&gt; How to find the server</li>
<li>IDL =&gt; How to talk to server; how to package data</li>
<li>Pointers as args =&gt; Disallow or serialize pointer data</li>
<li>Partial failures =&gt; Special error notifications</li>
</ul>
<hr>
<h1 id="distributed-file-systems">Distributed File Systems</h1>
<ul>
<li>Accessed via well defined interface
<ul>
<li>access via Virtual File Systems</li>
</ul>
</li>
<li>Focus on consistent state
<ul>
<li>tracking state, file update, cache coherence</li>
</ul>
</li>
<li>Mixed distribution models possible
<ul>
<li>replicates vs partitioned, peer-like systems</li>
</ul>
</li>
</ul>
<h2 id="dfs-models">DFS models</h2>
<ul>
<li>Client Server on different machines</li>
<li>File server distributed on multiple machines
<ul>
<li>replicated (each server : all files)</li>
<li>partitioned (each server : parts of files)</li>
<li>both (files partitioned, each partition replicates)</li>
</ul>
</li>
<li>Files stored on and served from all machines (peers)
<ul>
<li>blurred distinction between clients and servers</li>
</ul>
</li>
</ul>
<h2 id="remote-file-service--extremes">Remote File Service : Extremes</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/extremes.png" alt="extremes"  />
</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/extremes2.png" alt="extremes2"  />
</p>
<ol>
<li>Extreme1 : Upload/Download
<ul>
<li>like FTP, SVN</li>
<li><strong>+</strong> local read/writes at client</li>
<li><strong>-</strong> entire file download/upload evn for small accesses</li>
<li><strong>-</strong> server gives up contro;</li>
</ul>
</li>
<li>Extreme2 : True Remote File Access
<ul>
<li>Every access to remote file, nothing done locally</li>
<li><strong>+</strong> file access centralized, easy to reason about consistency</li>
<li><strong>-</strong> every file operation pays network cost, limits server scalablity</li>
</ul>
</li>
</ol>
<h2 id="remote-file-service--a-compromise">Remote File Service : A compromise</h2>
<p>A more practical Remote File access (with Caching)</p>
<ol>
<li>Allow clients to store parts of files locally (blocks)
<ul>
<li><strong>+</strong> low latency on file operations</li>
<li><strong>+</strong> server load reduces =&gt; more scalable</li>
</ul>
</li>
<li>Force clients to interact with server (frequently)
<ul>
<li><strong>+</strong> server has insights into what clients are doing</li>
<li><strong>+</strong> server has control into which accesses can be permitted =&gt; easier to maintain consistency</li>
<li><strong>-</strong> server more complex, requires different file sharing semantics</li>
</ul>
</li>
</ol>
<h2 id="stateless-vs-stateful-file-server">Stateless vs Stateful File server</h2>
<table>
<thead>
<tr>
<th>Stateless</th>
<th>Stateful</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keeps no state; Okay with extreme models, but can&rsquo;t support &lsquo;practical&rsquo; model</td>
<td>Keeps client state needed for &lsquo;practical&rsquo; model to track what is cached/accessed</td>
</tr>
<tr>
<td><strong>-</strong> Can&rsquo;t support caching and consistency management</td>
<td><strong>+</strong> Can support locking, caching, incremental operations</td>
</tr>
<tr>
<td><strong>-</strong> Every request self-contained. =&gt; more bits transferred</td>
<td><strong>-</strong> Overheads to maintain state and consistency. Depends on caching mechanism and consistency protocol.</td>
</tr>
<tr>
<td><strong>+</strong> No resources are used on server side (CPU, MM). On failure just restart</td>
<td><strong>-</strong> On failure, need checkpoining and recovery mechanisms</td>
</tr>
</tbody>
</table>
<h2 id="caching-state-in-a-dfs">Caching state in a DFS</h2>
<ul>
<li>Locally clients maintain portion of state (e.g. file blocks)</li>
<li>Locally clients perform operations on cached state (e.g. open/read/write)</li>
<li>requires coherent mechanisms</li>
</ul>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/cachingstate.png" alt="cachingstate.png"  />
</p>
<table>
<thead>
<tr>
<th>System</th>
<th>How</th>
<th>When</th>
</tr>
</thead>
<tbody>
<tr>
<td>SMP</td>
<td>Write-update/Write-invalidate</td>
<td>On write</td>
</tr>
<tr>
<td>DFS</td>
<td>Client/Server-driven</td>
<td>On demand, periodically, on open..</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>Files or File blocks can be (with 1 server and multiple clients) cached in:</p>
<ul>
<li>in client memory</li>
<li>on client  storage device (HDD/SDD)</li>
<li>in buffer cache in memory on server
<ul>
<li>(usefulness will depend on client load, request interleaving)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>File Sharing Semantics in DFS</p>
</li>
<li>
<p>Session semantics (between open-close =&gt; Session)</p>
<ul>
<li>write-back on close(), update on open()</li>
<li>easy to reason, but may be insufficient</li>
</ul>
</li>
<li>
<p>Periodic updates</p>
<ul>
<li>client writes-back periodically
<ul>
<li>clients have a &ldquo;lease&rdquo; on cached data (not exclusively necessary)</li>
</ul>
</li>
<li>servers invalidates periodically =&gt; provides biunds on &ldquo;inconsistency&rdquo;</li>
<li>augment with flush()/sync() API</li>
</ul>
</li>
<li>
<p>Immutable files =&gt; never modify, new files created</p>
</li>
<li>
<p>Transactions =&gt; all changes atomic</p>
</li>
</ul>
<h1 id="replication-vs-partitioning">Replication vs Partitioning</h1>
<table>
<tr>
<th></th>
<th>Replication</th>
<th>Partitioning</th>
</tr>
<tr>
<td></td>
<td>Each machine holds all files</td>
<td>Each machine has subset of files</td>
</tr>
<tr>
<td>Advantages</td>
<td>Load balancing, availibility, fault tolerance </td>
<td>Availibility vs single server DFS;<br>Scalability with file system size;<br>single file writes simpler</td>
</tr>
<tr>
<td>Disadvantages</td>
<td>Write becomes more complex<br>- Synchronous to all<br>- or, write to one, then propagate to others<br>replicas must be reconciled e.g. Voting</td>
<td>On failure, lose portion of data<br>load balancing harder, if not balanced, then hot-spots possible</td>
</tr>
</table>
<ul>
<li>Can combine both techniques
<ul>
<li>Replicate each partition!</li>
</ul>
</li>
</ul>
<hr>
<h1 id="distributed-shared-memory">Distributed Shared Memory</h1>
<ul>
<li>Must decide placement
<ul>
<li>place memory (pages) close to relevant processes</li>
</ul>
</li>
<li>Must decide migration
<ul>
<li>when to copy memory (pages) from remote to local</li>
</ul>
</li>
<li>Must decide sharing rules
<ul>
<li>ensure memory generations are properly ordered</li>
</ul>
</li>
</ul>
<h2 id="peer-distribution-applications">&ldquo;Peer&rdquo; Distribution Applications</h2>
<ul>
<li>Each node
<ul>
<li>&ldquo;owns&rdquo; state</li>
<li>provide service</li>
</ul>
</li>
</ul>
<ul>
<li>all nodes are &ldquo;peers&rdquo;.</li>
</ul>
<p>Examples: Big-data analytics, web searches, context sharing or distributed shared memory (DSM)</p>
<h2 id="distributed-shared-memory-dsm">Distributed Shared Memory (DSM)</h2>
<p>DSM is a service that manages memory accross multiple nodes so that applications that are running on top will have an illusion that they are running on a shared memory.</p>
<ul>
<li>Each node
<ul>
<li>&ldquo;owns&rdquo; state =&gt; memory</li>
<li>provide service
<ul>
<li>memory read/writes from any nodes</li>
<li>consistency protocols</li>
</ul>
</li>
<li>permits scaling beyond single machine memory limits
<ul>
<li>more &ldquo;shared&rdquo; memory at lower cost</li>
<li>slower overall memory access</li>
<li>commodity interconnect technologies support this RDMA(Remote Direct Memory Access)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="hardware-vs-software-dsm">Hardware vs Software DSM</h2>
<ul>
<li>Hardware-supported (expensive!)
<ul>
<li>relies on interconnect</li>
<li>OS manages larger physical memory</li>
<li>NIC(Network Interface Cards) translate remote memory accesses to messages</li>
<li>NICs involved in all aspects of memory management; support atomics..</li>
</ul>
</li>
<li>Software supported
<ul>
<li>everything done by software</li>
<li>OS,or language runtime</li>
</ul>
</li>
<li>Hybrid (Software tasks in Hardware) DSM implementations
<ul>
<li>prefetch pages</li>
<li>address translation (easier done in hardware)</li>
<li>triggering invalidations (easier done in hardware)</li>
</ul>
</li>
</ul>
<h2 id="dsm-design--sharing-granularity">DSM Design : Sharing Granularity</h2>
<ul>
<li>cache line granularity?
<ul>
<li>overheads too high for DSM</li>
</ul>
</li>
</ul>
<ul>
<li>variable granularity [N]</li>
<li>page granularity [Y] (OS level)</li>
<li>object granularity [Y] (Language runtime)
<ul>
<li>beware of false sharing E.g. x and y shared on same page</li>
</ul>
</li>
</ul>
<h2 id="what-types-of-applications-use-dsm">What types of applications use DSM?</h2>
<p>Application access algorithm</p>
<ul>
<li>Single reader/ single writer (SRSW)</li>
<li>Multiple readers/ single writer (MRSW)</li>
<li>Multiple reader/ Multiple writers (MRMW)</li>
</ul>
<h2 id="performance-considerations">Performance considerations</h2>
<ul>
<li>DSM performance metric == access latency</li>
<li>Achieving low latency through
<ul>
<li>Migration
<ul>
<li>makes sense for SRSW</li>
<li>requires data movement</li>
</ul>
</li>
<li>Replication (caching)
<ul>
<li>more general</li>
<li>requires consistency management</li>
</ul>
</li>
</ul>
</li>
<li>Hence, migration is okay for SRSW but not for all.</li>
<li>Caching and Replication
<ul>
<li>Copies of data to incerease data access</li>
<li>for many concurrent writes, overheads too high but stil generally better than Migration</li>
</ul>
</li>
</ul>
<h2 id="consistency-management">Consistency Management</h2>
<ul>
<li>In SMP
<ul>
<li>write invalidate</li>
<li>write update</li>
</ul>
</li>
<li>coherence operations triggered in each write
<ul>
<li>overhead too high</li>
</ul>
</li>
<li>Push invalidations when data is written to
<ol>
<li>Proactive</li>
<li>Eager</li>
<li>Pessimistic</li>
</ol>
</li>
<li>Pull modifications information periodically
<ol>
<li>on demand (reactive)</li>
<li>lazy</li>
<li>optimistic</li>
</ol>
</li>
<li>when these methods get triggered depends on the consistency model for the shared state</li>
</ul>
<h2 id="dsm-architecture-page-based-os-supported">DSM architecture (page-based, OS-supported)</h2>
<ul>
<li>Page-based DSM architecture
<ul>
<li>distributed nodes, each with own local memory contribution</li>
<li>pool of pages from all nodes</li>
<li>each page has IO (&ldquo;home&rdquo; node), page frame number</li>
</ul>
</li>
<li>if MRMW
<ul>
<li>need local caches for performances (latency)</li>
<li>&ldquo;home&rdquo; or &ldquo;manager&rdquo; node drives coherence operations</li>
<li>all nodes responsible for part if distributed memory (state) management</li>
</ul>
</li>
<li>Home node
<ul>
<li>keeps state: page accessed, modifications, caching enabled/disabled, locked..</li>
</ul>
</li>
<li>Current owner
<ul>
<li>owner may not be equal to home node</li>
</ul>
</li>
<li>Explicit replicas
<ul>
<li>for load balancing, performance, or reliability
home, manager node controls memory</li>
</ul>
</li>
</ul>
<h2 id="dsm-metadata">DSM metadata</h2>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/metadata.png" alt="metadata.png"  />
</p>
<h2 id="implementing-dsms">Implementing DSMs</h2>
<ul>
<li>Problem : DSM must intercept access to DSM state
<ul>
<li>to send remote messages requesting access</li>
<li>to trigger coherence messages</li>
</ul>
</li>
</ul>
<ul>
<li>overheads should be avoided for local non-shared state (pages)</li>
<li>dynamically engage and disengage DSM when necessary</li>
</ul>
<ul>
<li>Solution : Use hardware MMU support!
<ul>
<li>trap in OS if mapping invalid or access denied</li>
<li>remote address mapping -&gt; trap and pass to DSM to send message</li>
<li>cached content -&gt; trap and pass to DSM to perform memory coherence operations</li>
<li>other MMU information useful (e.g. Dirty page)</li>
</ul>
</li>
</ul>
<h2 id="consistency-model">Consistency model</h2>
<ul>
<li>Agreement between memory (state) and upper software layers</li>
<li>Memory behaves correctly if and only if software follows specific rules</li>
<li>Memory (state) guarantees to behave correctly
<ul>
<li>access ordering</li>
<li>propagation/ visibility of updates</li>
</ul>
</li>
</ul>
<h3 id="our-notation">Our notation</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/notation.png" alt="notation.png"  />
</p>
<ul>
<li>R_m1(X) =&gt; X was read from memory location m1</li>
<li>W_m1(Y) =&gt; Y was written to memory location m1</li>
</ul>
<h3 id="strict-consistency">Strict Consistency</h3>
<p>Strict Consistency =&gt; updates visible everywhere immediately</p>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/strict.png" alt="strict.png"  />
</p>
<ul>
<li>In practice
<ul>
<li>Even on single SMP no guarantees on order without extra locking and synchronization</li>
<li>in DS, latency and message reorder make this even harder</li>
<li>Hence almost impossible to guarantee strict consistency</li>
</ul>
</li>
</ul>
<h3 id="sequential-consistency">Sequential Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/seq.png" alt="seq.png"  />
</p>
<p>Sequential consistency =&gt;</p>
<ul>
<li>memory updates from different  processors may be arbitrarily interleaved</li>
<li>All processes will see the same interleaving</li>
<li>Operations from the same process always appearin order they were issued</li>
</ul>
<h3 id="causal-consistency">Causal Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/causal.png" alt="causal.png"  />
</p>
<ul>
<li>For writes not causally related, &ldquo;concurrent&rdquo; writes doesnt gurantee.</li>
<li>Don&rsquo;t permit arbitrary ordering from same process writer</li>
</ul>
<h3 id="weak-consistency">Weak Consistency</h3>
<p><img loading="lazy" src="https://spcdn.pages.dev/blog/os/weak.png" alt="weak.png"  />
</p>
<ul>
<li>Use of synchronization
<ul>
<li>Synchronization point =&gt; operations that are available (R,W,Sync)</li>
<li>all updates prior to a sync point will be visible</li>
<li>no guarantee what happens in between</li>
</ul>
</li>
</ul>
<p><strong>+</strong> limit data movement of coherence operations</p>
<p><strong>-</strong> maintain extra state for additional operations</p>
<ul>
<li>Variations:
<ul>
<li>Single sync operation (sync)</li>
<li>Seperate sync per surface of state (page)</li>
<li>Seperate &ldquo;entry/acquire&rdquo; vs &ldquo;exit/release&rdquo; operations</li>
</ul>
</li>
</ul>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Binary Search Template</title>
      <link>https://samirpaulb.github.io/posts/binary-search-template/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/binary-search-template/</guid>
      <description>Binary Search Template</description>
      <content:encoded><![CDATA[<p>Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). <strong>But when it comes to implementation, it&rsquo;s rather difficult to write a bug-free code in just a few minutes</strong>. Some of the most common problems include:</p>
<ul>
<li>When to exit the loop? Should we use <code>left &lt; right</code> or <code>left &lt;= right</code> as the while loop condition?</li>
<li>How to initialize the boundary variable <code>left</code> and <code>right</code>?</li>
<li>How to update the boundary? How to choose the appropriate combination from <code>left = mid</code>, <code>left = mid + 1</code> and <code>right = mid</code>, <code>right = mid - 1</code>?</li>
</ul>
<p>A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like &ldquo;Given a sorted array, find a specific value in it&rdquo;. As a matter of fact, it can be applied to much more complicated situations.</p>
<p>After a lot of practice in LeetCode, I&rsquo;ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I&rsquo;ll share the template with you guys in this post. <strong>I don&rsquo;t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems</strong>. Hopefully, after reading this post, people wouldn&rsquo;t be pissed off any more when LeetCoding, &ldquo;This problem could be solved with binary search! Why didn&rsquo;t I think of that before!&rdquo;</p>
<hr>
<h1 id="-most-generalized-binary-search">&gt;&gt; Most Generalized Binary Search</h1>
<p>Suppose we have a <strong>search space</strong>. It could be an array, a range, etc. Usually it&rsquo;s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:</p>
<p><strong>Minimize k , s.t. condition(k) is True</strong></p>
<p>The following code is the most generalized binary search template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def binary_search(array) -&gt; int:
</span></span><span class="line"><span class="cl">    def condition(value) -&gt; bool:
</span></span><span class="line"><span class="cl">        pass
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if condition(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><p>What&rsquo;s really nice of this template is that, for most of the binary search problems, <strong>we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more</strong>:</p>
<ul>
<li>Correctly initialize the boundary variables <code>left</code> and <code>right</code> to specify search space. Only one rule: set up the boundary to <strong>include all possible elements</strong>;</li>
<li>Decide return value. Is it <code>return left</code> or <code>return left - 1</code>? Remember this: <strong>after exiting the while loop, <code>left</code> is the minimal k​ satisfying the <code>condition</code> function</strong>;</li>
<li>Design the <code>condition</code> function. This is the most difficult and most beautiful part. Needs lots of practice.</li>
</ul>
<p>Below I&rsquo;ll show you guys how to apply this powerful template to many LeetCode problems.</p>
<hr>
<h1 id="-basic-application">&gt;&gt; Basic Application</h1>
<h2 id="278-first-bad-version-easyhttpsleetcodecomproblemsfirst-bad-version"><a href="https://leetcode.com/problems/first-bad-version/">278. First Bad Version [Easy]</a></h2>
<p>You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Given n = 5, and version = 4 is the first bad version.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">call isBadVersion(3) -&gt; false
</span></span><span class="line"><span class="cl">call isBadVersion(5) -&gt; true
</span></span><span class="line"><span class="cl">call isBadVersion(4) -&gt; true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Then 4 is the first bad version. 
</span></span></code></pre></td></tr></table>
</div>
</div><p>First, we initialize <code>left = 1</code> and <code>right = n</code> to include all possible values. Then we notice that we don&rsquo;t even need to design the <code>condition</code> function. It&rsquo;s already given by the <code>isBadVersion</code> API. Finding the first bad version is equivalent to finding the minimal k satisfying <code>isBadVersion(k) is True</code>. Our template can fit in very nicely:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution:
</span></span><span class="line"><span class="cl">    def firstBadVersion(self, n) -&gt; int:
</span></span><span class="line"><span class="cl">        left, right = 1, n
</span></span><span class="line"><span class="cl">        while left &lt; right:
</span></span><span class="line"><span class="cl">            mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">            if isBadVersion(mid):
</span></span><span class="line"><span class="cl">                right = mid
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                left = mid + 1
</span></span><span class="line"><span class="cl">        return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="69-sqrtx-easyhttpsleetcodecomproblemssqrtx"><a href="https://leetcode.com/problems/sqrtx/">69. Sqrt(x) [Easy]</a></h2>
<p>Implement <code>int sqrt(int x)</code>. Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: 4
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: 8
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Easy one. First we need to search for minimal k satisfying condition <code>k^2 &gt; x</code>, then <code>k - 1</code> is the answer to the question. We can easily come up with the solution. Notice that I set <code>right = x + 1</code> instead of <code>right = x</code> to deal with special input cases like <code>x = 0</code> and <code>x = 1</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4">4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5">5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6">6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7">7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8">8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">def</span><span class="w"> </span><span class="nf">mySqrt</span><span class="p">(</span><span class="n">x</span><span class="p">:</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">int</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">left</span><span class="p">,</span><span class="w"> </span><span class="k">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">right</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="k">right</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">left</span><span class="p">)</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">right</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">left</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mid</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="w">  </span><span class="c1"># `left` is the minimum k value, `k - 1` is the answer
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="35-search-insert-position-easyhttpsleetcodecomproblemssearch-insert-position"><a href="https://leetcode.com/problems/search-insert-position/">35. Search Insert Position [Easy]</a></h2>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: [1,3,5,6], 5
</span></span><span class="line"><span class="cl">Output: 2
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: [1,3,5,6], 2
</span></span><span class="line"><span class="cl">Output: 1
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very classic application of binary search. We are looking for the minimal k value satisfying <code>nums[k] &gt;= target</code>, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array <code>nums</code> has duplicates. Also notice that the input <code>target</code> might be larger than all elements in <code>nums</code> and therefore needs to placed at the end of the array. That&rsquo;s why we should initialize <code>right = len(nums)</code> instead of <code>right = len(nums) - 1</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution:
</span></span><span class="line"><span class="cl">    def searchInsert(self, nums: List[int], target: int) -&gt; int:
</span></span><span class="line"><span class="cl">        left, right = 0, len(nums)
</span></span><span class="line"><span class="cl">        while left &lt; right:
</span></span><span class="line"><span class="cl">            mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">            if nums[mid] &gt;= target:
</span></span><span class="line"><span class="cl">                right = mid
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                left = mid + 1
</span></span><span class="line"><span class="cl">        return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h1 id="-advanced-application">&gt;&gt; Advanced Application</h1>
<p>The above problems are quite easy to solve, because they already give us the array to be searched. We&rsquo;d know that we should use binary search to solve them at first glance. However, <strong>more often are the situations where the search space and search target are not so readily available</strong>. Sometimes we won&rsquo;t even realize that the problem should be solved with binary search &ndash; we might just turn to dynamic programming or DFS and get stuck for a very long time.</p>
<p>As for the question &ldquo;When can we use binary search?&rdquo;, my answer is that, <strong>If we can discover some kind of monotonicity, for example, if <code>condition(k) is True</code> then <code>condition(k + 1) is True</code>, then we can consider binary search</strong>.</p>
<h2 id="1011-capacity-to-ship-packages-within-d-days-mediumhttpsleetcodecomproblemscapacity-to-ship-packages-within-d-days"><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">1011. Capacity To Ship Packages Within D Days [Medium]</a></h2>
<p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days. The <code>i</code>-th package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>
<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
</span></span><span class="line"><span class="cl">Output: 15
</span></span><span class="line"><span class="cl">Explanation: 
</span></span><span class="line"><span class="cl">A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
</span></span><span class="line"><span class="cl">1st day: 1, 2, 3, 4, 5
</span></span><span class="line"><span class="cl">2nd day: 6, 7
</span></span><span class="line"><span class="cl">3rd day: 8
</span></span><span class="line"><span class="cl">4th day: 9
</span></span><span class="line"><span class="cl">5th day: 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Binary search probably would not come to our mind when we first meet this problem. We might automatically treat <code>weights</code> as search space and then realize we&rsquo;ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within <code>D</code> days with capacity <code>m</code>, then we can definitely ship them all with any capacity larger than <code>m</code>. Now we can design a <code>condition</code> function, let&rsquo;s call it <code>feasible</code>, given an input <code>capacity</code>, it returns whether it&rsquo;s possible to ship all packages within <code>D</code> days. This can run in a greedy way: if there&rsquo;s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds <code>D</code>, we return <code>False</code>, otherwise we return <code>True</code>.</p>
<p>Next, we need to initialize our boundary correctly. Obviously <code>capacity</code> should be at least <code>max(weights)</code>, otherwise the conveyor belt couldn&rsquo;t ship the heaviest package. On the other hand, <code>capacity</code> need not be more than<code>sum(weights)</code>, because then we can ship all packages in just one day.</p>
<p>Now we&rsquo;ve got all we need to apply our binary search template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def shipWithinDays(weights: List[int], D: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(capacity) -&gt; bool:
</span></span><span class="line"><span class="cl">        days = 1
</span></span><span class="line"><span class="cl">        total = 0
</span></span><span class="line"><span class="cl">        for weight in weights:
</span></span><span class="line"><span class="cl">            total += weight
</span></span><span class="line"><span class="cl">            if total &gt; capacity:  # too heavy, wait for the next day
</span></span><span class="line"><span class="cl">                total = weight
</span></span><span class="line"><span class="cl">                days += 1
</span></span><span class="line"><span class="cl">                if days &gt; D:  # cannot ship within D days
</span></span><span class="line"><span class="cl">                    return False
</span></span><span class="line"><span class="cl">        return True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = max(weights), sum(weights)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="410-split-array-largest-sum-hardhttpsleetcodecomproblemssplit-array-largest-sum"><a href="https://leetcode.com/problems/split-array-largest-sum/">410. Split Array Largest Sum [Hard]</a></h2>
<p>Given an array which consists of non-negative integers and an integer <em>m</em>, you can split the array into <em>m</em> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <em>m</em> subarrays.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4">4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5">5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6">6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7">7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8">8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">nums = [7,2,5,10,8]
</span></span><span class="line"><span class="cl">m = 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output:
</span></span><span class="line"><span class="cl">18
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a <code>feasible</code> function: given an input <code>threshold</code>, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to <code>threshold</code>. In this way, we discover the monotonicity of the problem: if <code>feasible(m)</code> is <code>True</code>, then all inputs larger than <code>m</code> can satisfy <code>feasible</code> function. You can see that the solution code is exactly the same as LC 1011.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1"> 1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2"> 2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3"> 3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4"> 4</a>
</span><span class="lnt" id="hl-12-5"><a class="lnlinks" href="#hl-12-5"> 5</a>
</span><span class="lnt" id="hl-12-6"><a class="lnlinks" href="#hl-12-6"> 6</a>
</span><span class="lnt" id="hl-12-7"><a class="lnlinks" href="#hl-12-7"> 7</a>
</span><span class="lnt" id="hl-12-8"><a class="lnlinks" href="#hl-12-8"> 8</a>
</span><span class="lnt" id="hl-12-9"><a class="lnlinks" href="#hl-12-9"> 9</a>
</span><span class="lnt" id="hl-12-10"><a class="lnlinks" href="#hl-12-10">10</a>
</span><span class="lnt" id="hl-12-11"><a class="lnlinks" href="#hl-12-11">11</a>
</span><span class="lnt" id="hl-12-12"><a class="lnlinks" href="#hl-12-12">12</a>
</span><span class="lnt" id="hl-12-13"><a class="lnlinks" href="#hl-12-13">13</a>
</span><span class="lnt" id="hl-12-14"><a class="lnlinks" href="#hl-12-14">14</a>
</span><span class="lnt" id="hl-12-15"><a class="lnlinks" href="#hl-12-15">15</a>
</span><span class="lnt" id="hl-12-16"><a class="lnlinks" href="#hl-12-16">16</a>
</span><span class="lnt" id="hl-12-17"><a class="lnlinks" href="#hl-12-17">17</a>
</span><span class="lnt" id="hl-12-18"><a class="lnlinks" href="#hl-12-18">18</a>
</span><span class="lnt" id="hl-12-19"><a class="lnlinks" href="#hl-12-19">19</a>
</span><span class="lnt" id="hl-12-20"><a class="lnlinks" href="#hl-12-20">20</a>
</span><span class="lnt" id="hl-12-21"><a class="lnlinks" href="#hl-12-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def splitArray(nums: List[int], m: int) -&gt; int:        
</span></span><span class="line"><span class="cl">    def feasible(threshold) -&gt; bool:
</span></span><span class="line"><span class="cl">        count = 1
</span></span><span class="line"><span class="cl">        total = 0
</span></span><span class="line"><span class="cl">        for num in nums:
</span></span><span class="line"><span class="cl">            total += num
</span></span><span class="line"><span class="cl">            if total &gt; threshold:
</span></span><span class="line"><span class="cl">                total = num
</span></span><span class="line"><span class="cl">                count += 1
</span></span><span class="line"><span class="cl">                if count &gt; m:
</span></span><span class="line"><span class="cl">                    return False
</span></span><span class="line"><span class="cl">        return True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = max(nums), sum(nums)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid     
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><p>But we probably would have doubts: It&rsquo;s true that <code>left</code> returned by our solution is the minimal value satisfying <code>feasible</code>, but how can we know that we can split the original array to <strong>actually get this subarray-sum</strong>? For example, let&rsquo;s say <code>nums = [7,2,5,10,8]</code> and <code>m = 2</code>. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: <code>25:[[7], [2,5,10,8]]</code>, <code>23:[[7,2], [5,10,8]]</code>, <code>18:[[7,2,5], [10,8]]</code>, <code>24:[[7,2,5,10], [8]]</code>. Only 4 values. But our search space <code>[max(nums), sum(nums)] = [10, 32]</code> has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.</p>
<p>Let&rsquo;s say <code>k</code> is the minimal value satisfying <code>feasible</code> function. We can prove the correctness of our solution with <strong>proof by contradiction</strong>. Assume that no subarray&rsquo;s sum is equal to <code>k</code>, that is, every subarray sum is less than <code>k</code>. The variable <code>total</code> inside <code>feasible</code> function keeps track of the total weights of current load. If our assumption is correct, then <code>total</code> would always be less than <code>k</code>. As a result, <code>feasible(k - 1)</code> must be <code>True</code>, because <code>total</code> would at most be equal to <code>k - 1</code> and would never trigger the if-clause <code>if total &gt; threshold</code>, <strong>therefore <code>feasible(k - 1)</code> must have the same output as <code>feasible(k)</code>, which is <code>True</code></strong>. But we already know that <code>k</code> is the minimal value satisfying <code>feasible</code> function, <strong>so <code>feasible(k - 1)</code> has to be <code>False</code>, which is a contradiction</strong>. So our assumption is incorrect. Now we&rsquo;ve proved that our algorithm is correct.</p>
<hr>
<h2 id="875-koko-eating-bananas-mediumhttpsleetcodecomproblemskoko-eating-bananas"><a href="https://leetcode.com/problems/koko-eating-bananas/">875. Koko Eating Bananas [Medium]</a></h2>
<p>Koko loves to eat bananas. There are <code>N</code> piles of bananas, the <code>i</code>-th pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>H</code> hours. Koko can decide her bananas-per-hour eating speed of <code>K</code>. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than <code>K</code> bananas, she eats all of them instead, and won&rsquo;t eat any more bananas during this hour.</p>
<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. <strong>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours</strong>.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span><span class="lnt" id="hl-13-2"><a class="lnlinks" href="#hl-13-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [3,6,7,11], H = 8
</span></span><span class="line"><span class="cl">Output: 4
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [30,11,23,4,20], H = 5
</span></span><span class="line"><span class="cl">Output: 30
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span><span class="lnt" id="hl-15-2"><a class="lnlinks" href="#hl-15-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: piles = [30,11,23,4,20], H = 6
</span></span><span class="line"><span class="cl">Output: 23
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very similar to LC 1011 and LC 410 mentioned above. Let&rsquo;s design a <code>feasible</code> function, given an input <code>speed</code>, determine whether Koko can finish all bananas within <code>H</code> hours with hourly eating speed <code>speed</code>. Obviously, the lower bound of the search space is 1, and upper bound is <code>max(piles)</code>, because Koko can only choose one pile of bananas to eat every hour.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def minEatingSpeed(piles: List[int], H: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(speed) -&gt; bool:
</span></span><span class="line"><span class="cl">        # return sum(math.ceil(pile / speed) for pile in piles) &lt;= H  # slower        
</span></span><span class="line"><span class="cl">        return sum((pile - 1) // speed + 1 for pile in piles) &lt;= H  # faster
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, max(piles)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left  + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1482-minimum-number-of-days-to-make-m-bouquets-mediumhttpsleetcodecomproblemsminimum-number-of-days-to-make-m-bouquets"><a href="https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/">1482. Minimum Number of Days to Make m Bouquets [Medium]</a></h2>
<p>Given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>. We need to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden. The garden consists of <code>n</code> flowers, the <code>ith</code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet. Return <em>the minimum number of days</em> you need to wait to be able to make <code>m</code> bouquets from the garden. If it is impossible to make <code>m</code> bouquets return <strong>-1</strong>.</p>
<p><strong>Examples:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1">1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2">2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3">3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4">4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5">5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6">6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7">7</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
</span></span><span class="line"><span class="cl">Output: 3
</span></span><span class="line"><span class="cl">Explanation: Let&#39;s see what happened in the first three days. x means flower bloomed and _ means flower didn&#39;t bloom in the garden.
</span></span><span class="line"><span class="cl">We need 3 bouquets each should contain 1 flower.
</span></span><span class="line"><span class="cl">After day 1: [x, _, _, _, _]   // we can only make one bouquet.
</span></span><span class="line"><span class="cl">After day 2: [x, _, _, _, x]   // we can only make two bouquets.
</span></span><span class="line"><span class="cl">After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
</span></span><span class="line"><span class="cl">Output: -1
</span></span><span class="line"><span class="cl">Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now that we&rsquo;ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make <code>m</code> bouquets after waiting for <code>d</code> days, then we can definitely finish that as well if we wait for more than <code>d</code> days.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1"> 1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2"> 2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3"> 3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4"> 4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5"> 5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6"> 6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7"> 7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8"> 8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9"> 9</a>
</span><span class="lnt" id="hl-19-10"><a class="lnlinks" href="#hl-19-10">10</a>
</span><span class="lnt" id="hl-19-11"><a class="lnlinks" href="#hl-19-11">11</a>
</span><span class="lnt" id="hl-19-12"><a class="lnlinks" href="#hl-19-12">12</a>
</span><span class="lnt" id="hl-19-13"><a class="lnlinks" href="#hl-19-13">13</a>
</span><span class="lnt" id="hl-19-14"><a class="lnlinks" href="#hl-19-14">14</a>
</span><span class="lnt" id="hl-19-15"><a class="lnlinks" href="#hl-19-15">15</a>
</span><span class="lnt" id="hl-19-16"><a class="lnlinks" href="#hl-19-16">16</a>
</span><span class="lnt" id="hl-19-17"><a class="lnlinks" href="#hl-19-17">17</a>
</span><span class="lnt" id="hl-19-18"><a class="lnlinks" href="#hl-19-18">18</a>
</span><span class="lnt" id="hl-19-19"><a class="lnlinks" href="#hl-19-19">19</a>
</span><span class="lnt" id="hl-19-20"><a class="lnlinks" href="#hl-19-20">20</a>
</span><span class="lnt" id="hl-19-21"><a class="lnlinks" href="#hl-19-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def minDays(bloomDay: List[int], m: int, k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def feasible(days) -&gt; bool:
</span></span><span class="line"><span class="cl">        bonquets, flowers = 0, 0
</span></span><span class="line"><span class="cl">        for bloom in bloomDay:
</span></span><span class="line"><span class="cl">            if bloom &gt; days:
</span></span><span class="line"><span class="cl">                flowers = 0
</span></span><span class="line"><span class="cl">            else:
</span></span><span class="line"><span class="cl">                bonquets += (flowers + 1) // k
</span></span><span class="line"><span class="cl">                flowers = (flowers + 1) % k
</span></span><span class="line"><span class="cl">        return bonquets &gt;= m
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    if len(bloomDay) &lt; m * k:
</span></span><span class="line"><span class="cl">        return -1
</span></span><span class="line"><span class="cl">    left, right = 1, max(bloomDay)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if feasible(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="668-kth-smallest-number-in-multiplication-table-hardhttpsleetcodecomproblemskth-smallest-number-in-multiplication-tabledescription"><a href="https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/">668. Kth Smallest Number in Multiplication Table [Hard]</a></h2>
<p>Nearly every one have used the <a href="https://en.wikipedia.org/wiki/Multiplication_table">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table? Given the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1">1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2">2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3">3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4">4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5">5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6">6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7">7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8">8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: m = 3, n = 3, k = 5
</span></span><span class="line"><span class="cl">Output: 3
</span></span><span class="line"><span class="cl">Explanation: 
</span></span><span class="line"><span class="cl">The Multiplication Table:
</span></span><span class="line"><span class="cl">1	2	3
</span></span><span class="line"><span class="cl">2	4	6
</span></span><span class="line"><span class="cl">3	6	9
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The 5-th smallest number is 3 (1, 2, 2, 3, 3).
</span></span></code></pre></td></tr></table>
</div>
</div><p>For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn&rsquo;t work out in this problem. We don&rsquo;t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these <code>m * n</code> values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing <code>condition</code> function is the most difficult part? In order to find the k-th smallest value in the table, we can design an <code>enough</code> function, given an input <code>num</code>, determine whether there&rsquo;re at least k values less than or equal to <code>num</code>. <strong>The minimal <code>num</code> satisfying <code>enough</code> function is the answer we&rsquo;re looking for</strong>. Recall that the key to binary search is discovering monotonicity. In this problem, if <code>num</code> satisfies <code>enough</code>, then of course any value larger than <code>num</code> can satisfy. This monotonicity is the fundament of our binary search algorithm.</p>
<p>Let&rsquo;s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is <code>m * n</code>, then we have search space <code>[1, m * n]</code>. The overwhelming advantage of binary search solution to heap solution is that it doesn&rsquo;t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply <code>enough</code> function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.</p>
<p>Next let&rsquo;s consider how to implement <code>enough</code> function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row <code>[3,6,9,12,15...]</code> are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input <code>num</code>. Following is the complete solution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def findKthNumber(m: int, n: int, k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def enough(num) -&gt; bool:
</span></span><span class="line"><span class="cl">        count = 0
</span></span><span class="line"><span class="cl">        for val in range(1, m + 1):  # count row by row
</span></span><span class="line"><span class="cl">            add = min(num // val, n)
</span></span><span class="line"><span class="cl">            if add == 0:  # early exit
</span></span><span class="line"><span class="cl">                break
</span></span><span class="line"><span class="cl">            count += add
</span></span><span class="line"><span class="cl">        return count &gt;= k                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, n * m
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left 
</span></span></code></pre></td></tr></table>
</div>
</div><p>In LC 410 above, we have doubt &ldquo;Is the result from binary search actually a subarray sum?&rdquo;. Here we have a similar doubt: &ldquo;<strong>Is the result from binary search actually in the Multiplication Table?</strong>&rdquo;. The answer is yes, and we also can apply proof by contradiction. Denote <code>num</code> as the minimal input that satisfies <code>enough</code> function. Let&rsquo;s assume that <code>num</code> is not in the table, which means that <code>num</code> is not divisible by any <code>val</code> in <code>[1, m]</code>, that is, <code>num % val &gt; 0</code>. Therefore, changing the input from <code>num</code> to <code>num - 1</code> doesn&rsquo;t have any effect on the expression <code>add = min(num // val, n)</code>. So <code>enough(num - 1)</code> would also return <code>True</code>, same as <code>enough(num)</code>. But we already know <code>num</code> is the minimal input satisfying <code>enough</code> function, so <code>enough(num - 1)</code> has to be <code>False</code>. Contradiction! The opposite of our original assumption is true: <code>num</code> is actually in the table.</p>
<hr>
<h2 id="719-find-k-th-smallest-pair-distance-hardhttpsleetcodecomproblemsfind-k-th-smallest-pair-distance"><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/">719. Find K-th Smallest Pair Distance [Hard]</a></h2>
<p>Given an integer array, return the k-th smallest <strong>distance</strong> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span><span class="lnt" id="hl-22-7"><a class="lnlinks" href="#hl-22-7">7</a>
</span><span class="lnt" id="hl-22-8"><a class="lnlinks" href="#hl-22-8">8</a>
</span><span class="lnt" id="hl-22-9"><a class="lnlinks" href="#hl-22-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">nums = [1,3,1]
</span></span><span class="line"><span class="cl">k = 1
</span></span><span class="line"><span class="cl">Output: 0 
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.
</span></span><span class="line"><span class="cl">(1,3) -&gt; 2
</span></span><span class="line"><span class="cl">(1,1) -&gt; 0
</span></span><span class="line"><span class="cl">(3,1) -&gt; 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an <code>enough</code> function, given an input <code>distance</code>, determine whether there&rsquo;re at least k pairs whose distances are less than or equal to <code>distance</code>. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to <code>distance</code>, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1">1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2">2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3">3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4">4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5">5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6">6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7">7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def enough(distance) -&gt; bool:  # two pointers
</span></span><span class="line"><span class="cl">    count, i, j = 0, 0, 0
</span></span><span class="line"><span class="cl">    while i &lt; n or j &lt; n:
</span></span><span class="line"><span class="cl">        while j &lt; n and nums[j] - nums[i] &lt;= distance:  # move fast pointer
</span></span><span class="line"><span class="cl">            j += 1
</span></span><span class="line"><span class="cl">        count += j - i - 1  # count pairs
</span></span><span class="line"><span class="cl">        i += 1  # move slow pointer
</span></span><span class="line"><span class="cl">    return count &gt;= k
</span></span></code></pre></td></tr></table>
</div>
</div><p>Obviously, our search space should be <code>[0, max(nums) - min(nums)]</code>. Now we are ready to copy-paste our template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-24-1"><a class="lnlinks" href="#hl-24-1"> 1</a>
</span><span class="lnt" id="hl-24-2"><a class="lnlinks" href="#hl-24-2"> 2</a>
</span><span class="lnt" id="hl-24-3"><a class="lnlinks" href="#hl-24-3"> 3</a>
</span><span class="lnt" id="hl-24-4"><a class="lnlinks" href="#hl-24-4"> 4</a>
</span><span class="lnt" id="hl-24-5"><a class="lnlinks" href="#hl-24-5"> 5</a>
</span><span class="lnt" id="hl-24-6"><a class="lnlinks" href="#hl-24-6"> 6</a>
</span><span class="lnt" id="hl-24-7"><a class="lnlinks" href="#hl-24-7"> 7</a>
</span><span class="lnt" id="hl-24-8"><a class="lnlinks" href="#hl-24-8"> 8</a>
</span><span class="lnt" id="hl-24-9"><a class="lnlinks" href="#hl-24-9"> 9</a>
</span><span class="lnt" id="hl-24-10"><a class="lnlinks" href="#hl-24-10">10</a>
</span><span class="lnt" id="hl-24-11"><a class="lnlinks" href="#hl-24-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def smallestDistancePair(nums: List[int], k: int) -&gt; int:
</span></span><span class="line"><span class="cl">    nums.sort()
</span></span><span class="line"><span class="cl">    n = len(nums)
</span></span><span class="line"><span class="cl">    left, right = 0, nums[-1] - nums[0]
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1201-ugly-number-iii-mediumhttpsleetcodecomproblemsugly-number-iii"><a href="https://leetcode.com/problems/ugly-number-iii/">1201. Ugly Number III [Medium]</a></h2>
<p>Write a program to find the <code>n</code>-th ugly number. Ugly numbers are <strong>positive integers</strong> which are divisible by <code>a</code> <strong>or</strong> <code>b</code> <strong>or</strong> <code>c</code>.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-25-1"><a class="lnlinks" href="#hl-25-1">1</a>
</span><span class="lnt" id="hl-25-2"><a class="lnlinks" href="#hl-25-2">2</a>
</span><span class="lnt" id="hl-25-3"><a class="lnlinks" href="#hl-25-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: n = 3, a = 2, b = 3, c = 5
</span></span><span class="line"><span class="cl">Output: 4
</span></span><span class="line"><span class="cl">Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-26-1"><a class="lnlinks" href="#hl-26-1">1</a>
</span><span class="lnt" id="hl-26-2"><a class="lnlinks" href="#hl-26-2">2</a>
</span><span class="lnt" id="hl-26-3"><a class="lnlinks" href="#hl-26-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: n = 4, a = 2, b = 3, c = 4
</span></span><span class="line"><span class="cl">Output: 6
</span></span><span class="line"><span class="cl">Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Nothing special. Still finding the Kth-Smallest. We need to design an <code>enough</code> function, given an input <code>num</code>, determine whether there are at least n ugly numbers less than or equal to <code>num</code>. Since <code>a</code> might be a multiple of <code>b</code> or <code>c</code>, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-27-1"><a class="lnlinks" href="#hl-27-1"> 1</a>
</span><span class="lnt" id="hl-27-2"><a class="lnlinks" href="#hl-27-2"> 2</a>
</span><span class="lnt" id="hl-27-3"><a class="lnlinks" href="#hl-27-3"> 3</a>
</span><span class="lnt" id="hl-27-4"><a class="lnlinks" href="#hl-27-4"> 4</a>
</span><span class="lnt" id="hl-27-5"><a class="lnlinks" href="#hl-27-5"> 5</a>
</span><span class="lnt" id="hl-27-6"><a class="lnlinks" href="#hl-27-6"> 6</a>
</span><span class="lnt" id="hl-27-7"><a class="lnlinks" href="#hl-27-7"> 7</a>
</span><span class="lnt" id="hl-27-8"><a class="lnlinks" href="#hl-27-8"> 8</a>
</span><span class="lnt" id="hl-27-9"><a class="lnlinks" href="#hl-27-9"> 9</a>
</span><span class="lnt" id="hl-27-10"><a class="lnlinks" href="#hl-27-10">10</a>
</span><span class="lnt" id="hl-27-11"><a class="lnlinks" href="#hl-27-11">11</a>
</span><span class="lnt" id="hl-27-12"><a class="lnlinks" href="#hl-27-12">12</a>
</span><span class="lnt" id="hl-27-13"><a class="lnlinks" href="#hl-27-13">13</a>
</span><span class="lnt" id="hl-27-14"><a class="lnlinks" href="#hl-27-14">14</a>
</span><span class="lnt" id="hl-27-15"><a class="lnlinks" href="#hl-27-15">15</a>
</span><span class="lnt" id="hl-27-16"><a class="lnlinks" href="#hl-27-16">16</a>
</span><span class="lnt" id="hl-27-17"><a class="lnlinks" href="#hl-27-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def nthUglyNumber(n: int, a: int, b: int, c: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def enough(num) -&gt; bool:
</span></span><span class="line"><span class="cl">        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc
</span></span><span class="line"><span class="cl">        return total &gt;= n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ab = a * b // math.gcd(a, b)
</span></span><span class="line"><span class="cl">    ac = a * c // math.gcd(a, c)
</span></span><span class="line"><span class="cl">    bc = b * c // math.gcd(b, c)
</span></span><span class="line"><span class="cl">    abc = a * bc // math.gcd(a, bc)
</span></span><span class="line"><span class="cl">    left, right = 1, 10 ** 10
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if enough(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="1283-find-the-smallest-divisor-given-a-threshold-mediumhttpsleetcodecomproblemsfind-the-smallest-divisor-given-a-threshold"><a href="https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/">1283. Find the Smallest Divisor Given a Threshold [Medium]</a></h2>
<p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the <strong>smallest</strong> divisor such that the result mentioned above is less than or equal to <code>threshold</code>.</p>
<p>Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5). It is guaranteed that there will be an answer.</p>
<p><strong>Example :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-28-1"><a class="lnlinks" href="#hl-28-1">1</a>
</span><span class="lnt" id="hl-28-2"><a class="lnlinks" href="#hl-28-2">2</a>
</span><span class="lnt" id="hl-28-3"><a class="lnlinks" href="#hl-28-3">3</a>
</span><span class="lnt" id="hl-28-4"><a class="lnlinks" href="#hl-28-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input: nums = [1,2,5,9], threshold = 6
</span></span><span class="line"><span class="cl">Output: 5
</span></span><span class="line"><span class="cl">Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
</span></span><span class="line"><span class="cl">If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
</span></span></code></pre></td></tr></table>
</div>
</div><p>After so many problems introduced above, this one should be a piece of cake. We don&rsquo;t even need to bother to design a <code>condition</code> function, because the problem has already told us explicitly what condition we need to satisfy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-29-1"><a class="lnlinks" href="#hl-29-1"> 1</a>
</span><span class="lnt" id="hl-29-2"><a class="lnlinks" href="#hl-29-2"> 2</a>
</span><span class="lnt" id="hl-29-3"><a class="lnlinks" href="#hl-29-3"> 3</a>
</span><span class="lnt" id="hl-29-4"><a class="lnlinks" href="#hl-29-4"> 4</a>
</span><span class="lnt" id="hl-29-5"><a class="lnlinks" href="#hl-29-5"> 5</a>
</span><span class="lnt" id="hl-29-6"><a class="lnlinks" href="#hl-29-6"> 6</a>
</span><span class="lnt" id="hl-29-7"><a class="lnlinks" href="#hl-29-7"> 7</a>
</span><span class="lnt" id="hl-29-8"><a class="lnlinks" href="#hl-29-8"> 8</a>
</span><span class="lnt" id="hl-29-9"><a class="lnlinks" href="#hl-29-9"> 9</a>
</span><span class="lnt" id="hl-29-10"><a class="lnlinks" href="#hl-29-10">10</a>
</span><span class="lnt" id="hl-29-11"><a class="lnlinks" href="#hl-29-11">11</a>
</span><span class="lnt" id="hl-29-12"><a class="lnlinks" href="#hl-29-12">12</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def smallestDivisor(nums: List[int], threshold: int) -&gt; int:
</span></span><span class="line"><span class="cl">    def condition(divisor) -&gt; bool:
</span></span><span class="line"><span class="cl">        return sum((num - 1) // divisor + 1 for num in nums) &lt;= threshold
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    left, right = 1, max(nums)
</span></span><span class="line"><span class="cl">    while left &lt; right:
</span></span><span class="line"><span class="cl">        mid = left + (right - left) // 2
</span></span><span class="line"><span class="cl">        if condition(mid):
</span></span><span class="line"><span class="cl">            right = mid
</span></span><span class="line"><span class="cl">        else:
</span></span><span class="line"><span class="cl">            left = mid + 1
</span></span><span class="line"><span class="cl">    return left
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h1 id="end">End</h1>
<p>Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That&rsquo;s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template&rsquo;s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful <code>condition</code> function.</p>
<p>Hope this helps.</p>
<p><strong>Reference</strong></p>
<ul>
<li><a href="https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search">[C++ / Fast / Very clear explanation / Clean Code] Solution with Greedy Algorithm and Binary Search</a></li>
<li><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm">Approach the problem using the &ldquo;trial and error&rdquo; algorithm</a></li>
<li><a href="https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook">Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode</a></li>
<li><a href="https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template">ugly-number-iii Binary Search with picture &amp; Binary Search Template - LeetCode</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Complete Computer Science Study Plan to Become a Software Engineer</title>
      <link>https://samirpaulb.github.io/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</guid>
      <description>Complete Computer Science Study Plan to Become a Software Engineer</description>
      <content:encoded><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<h3 id="the-study-plan">The Study Plan</h3>
<ul>
<li><a href="#">What is it?</a></li>
<li><a href="#why-use-it">Why use it?</a></li>
<li><a href="#how-to-use-it">How to use it</a></li>
<li><a href="#dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</a></li>
<li><a href="#a-note-about-video-resources">A Note About Video Resources</a></li>
<li><a href="#choose-a-programming-language">Choose a Programming Language</a></li>
<li><a href="#books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</a></li>
<li><a href="#interview-prep-books">Interview Prep Books</a></li>
<li><a href="#dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</a></li>
<li><a href="#what-you-wont-see-covered">What you Won&rsquo;t See Covered</a></li>
<li><a href="#the-daily-plan">The Daily Plan</a></li>
<li><a href="#coding-question-practice">Coding Question Practice</a></li>
<li><a href="#coding-problems">Coding Problems</a></li>
</ul>
<h3 id="topics-of-study">Topics of Study</h3>
<ul>
<li><a href="#algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</a></li>
<li><a href="#data-structures">Data Structures</a>
<ul>
<li><a href="#arrays">Arrays</a></li>
<li><a href="#linked-lists">Linked Lists</a></li>
<li><a href="#stack">Stack</a></li>
<li><a href="#queue">Queue</a></li>
<li><a href="#hash-table">Hash table</a></li>
</ul>
</li>
<li><a href="#more-knowledge">More Knowledge</a>
<ul>
<li><a href="#binary-search">Binary search</a></li>
<li><a href="#bitwise-operations">Bitwise operations</a></li>
</ul>
</li>
<li><a href="#trees">Trees</a>
<ul>
<li><a href="#trees---intro">Trees - Intro</a></li>
<li><a href="#binary-search-trees-bsts">Binary search trees: BSTs</a></li>
<li><a href="#heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</a></li>
<li>balanced search trees (general concept, not details)</li>
<li>traversals: preorder, inorder, postorder, BFS, DFS</li>
</ul>
</li>
<li><a href="#sorting">Sorting</a>
<ul>
<li>selection</li>
<li>insertion</li>
<li>heapsort</li>
<li>quicksort</li>
<li>merge sort</li>
</ul>
</li>
<li><a href="#graphs">Graphs</a>
<ul>
<li>directed</li>
<li>undirected</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>traversals: BFS, DFS</li>
</ul>
</li>
<li><a href="#even-more-knowledge">Even More Knowledge</a>
<ul>
<li><a href="#recursion">Recursion</a></li>
<li><a href="#dynamic-programming">Dynamic Programming</a></li>
<li><a href="#design-patterns">Design Patterns</a></li>
<li><a href="#combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</a></li>
<li><a href="#np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</a></li>
<li><a href="#how-computers-process-a-program">How computers process a program</a></li>
<li><a href="#caches">Caches</a></li>
<li><a href="#processes-and-threads">Processes and Threads</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#string-searching--manipulations">String searching &amp; manipulations</a></li>
<li><a href="#tries">Tries</a></li>
<li><a href="#floating-point-numbers">Floating Point Numbers</a></li>
<li><a href="#unicode">Unicode</a></li>
<li><a href="#endianness">Endianness</a></li>
<li><a href="#networking">Networking</a></li>
</ul>
</li>
<li><a href="#final-review">Final Review</a></li>
</ul>
<h3 id="getting-the-job">Getting the Job</h3>
<ul>
<li><a href="#update-your-resume">Update Your Resume</a></li>
<li><a href="#find-a-job">Find a Job</a></li>
<li><a href="#interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</a></li>
<li><a href="#be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</a></li>
<li><a href="#have-questions-for-the-interviewer">Have questions for the interviewer</a></li>
<li><a href="#once-youve-got-the-job">Once You&rsquo;ve Got The Job</a></li>
</ul>
<p><strong>&mdash;&mdash;&mdash;&mdash;&mdash;- Everything below this point is optional &mdash;&mdash;&mdash;&mdash;&mdash;-</strong></p>
<h3 id="optional-extra-topics--resources">Optional Extra Topics &amp; Resources</h3>
<ul>
<li><a href="#additional-books">Additional Books</a></li>
<li><a href="#system-design-scalability-data-handling">System Design, Scalability, Data Handling</a> (if you have 4+ years experience)</li>
<li><a href="#additional-learning">Additional Learning</a>
<ul>
<li><a href="#compilers">Compilers</a></li>
<li><a href="#emacs-and-vim">Emacs and vi(m)</a></li>
<li><a href="#unix-command-line-tools">Unix command line tools</a></li>
<li><a href="#information-theory-videos">Information theory</a></li>
<li><a href="#parity--hamming-code-videos">Parity &amp; Hamming Code</a></li>
<li><a href="#entropy">Entropy</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#compression">Compression</a></li>
<li><a href="#computer-security">Computer Security</a></li>
<li><a href="#garbage-collection">Garbage collection</a></li>
<li><a href="#parallel-programming">Parallel Programming</a></li>
<li><a href="#messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</a></li>
<li><a href="#a">A*</a></li>
<li><a href="#fast-fourier-transform">Fast Fourier Transform</a></li>
<li><a href="#bloom-filter">Bloom Filter</a></li>
<li><a href="#hyperloglog">HyperLogLog</a></li>
<li><a href="#locality-sensitive-hashing">Locality-Sensitive Hashing</a></li>
<li><a href="#van-emde-boas-trees">van Emde Boas Trees</a></li>
<li><a href="#augmented-data-structures">Augmented Data Structures</a></li>
<li><a href="#balanced-search-trees">Balanced search trees</a>
<ul>
<li>AVL trees</li>
<li>Splay trees</li>
<li>Red/black trees</li>
<li>2-3 search trees</li>
<li>2-3-4 Trees (aka 2-4 trees)</li>
<li>N-ary (K-ary, M-ary) trees</li>
<li>B-Trees</li>
</ul>
</li>
<li><a href="#k-d-trees">k-D Trees</a></li>
<li><a href="#skip-lists">Skip lists</a></li>
<li><a href="#network-flows">Network Flows</a></li>
<li><a href="#disjoint-sets--union-find">Disjoint Sets &amp; Union Find</a></li>
<li><a href="#math-for-fast-processing">Math for Fast Processing</a></li>
<li><a href="#treap">Treap</a></li>
<li><a href="#linear-programming-videos">Linear Programming</a></li>
<li><a href="#geometry-convex-hull-videos">Geometry, Convex hull</a></li>
<li><a href="#discrete-math">Discrete math</a></li>
</ul>
</li>
<li><a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></li>
<li><a href="#video-series">Video Series</a></li>
<li><a href="#computer-science-courses">Computer Science Courses</a></li>
<li><a href="#papers">Papers</a></li>
</ul>
<hr>
<h2 id="why-use-it">Why use it?</h2>
<p>If you want to work as a software engineer for a large company, these are the things you have to know.</p>
<p>If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.</p>
<p>When I started this project, I didn&rsquo;t know a stack from a heap, didn&rsquo;t know Big-O anything, or anything about trees, or how to
traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.
Every data structure I had ever used was built into the language, and I didn&rsquo;t know how they worked
under the hood at all. I never had to manage memory unless a process I was running would give an &ldquo;out of
memory&rdquo; error, and then I&rsquo;d have to find a workaround. I used a few multidimensional arrays in my life and
thousands of associative arrays, but I never created data structures from scratch.</p>
<p>It&rsquo;s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.</p>
<h2 id="how-to-use-it">How to use it</h2>
<p>Everything below is an outline, and you should tackle the items in order from top to bottom.</p>
<p>I&rsquo;m using GitHub&rsquo;s special markdown flavor, including tasks lists to track progress.</p>
<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown">More about GitHub-flavored markdown</a></li>
</ul>
<h3 id="if-you-dont-want-to-use-git">If you don&rsquo;t want to use git</h3>
<p>On this page, click the Code button near the top, then click &ldquo;Download ZIP&rdquo;. Unzip the file and you can work with the text files.</p>
<p>If you&rsquo;re open in a code editor that understands markdown, you&rsquo;ll see everything formatted nicely.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png" alt="How to download the repo as a zip file"  />
</p>
<h3 id="if-youre-comfortable-with-git">If you&rsquo;re comfortable with git</h3>
<p>Create a new branch so you can check items like this, just put an x in the brackets: [x]</p>
<ol>
<li>
<p><em><strong>Fork the GitHub repo:</strong></em> <code>https://github.com/jwasham/coding-interview-university</code> by clicking on the Fork button.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png" alt="Fork the GitHub repo"  />
</p>
</li>
<li>
<p>Clone to your local repo:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git clone git@github.com:&lt;your_github_username&gt;/coding-interview-university.git
</span></span><span class="line"><span class="cl">cd coding-interview-university
</span></span><span class="line"><span class="cl">git checkout -b progress
</span></span><span class="line"><span class="cl">git remote add jwasham https://github.com/jwasham/coding-interview-university
</span></span><span class="line"><span class="cl">git fetch --all
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Mark all boxes with X after you completed your changes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m &#34;Marked x&#34;
</span></span><span class="line"><span class="cl">git rebase jwasham/main
</span></span><span class="line"><span class="cl">git push --set-upstream origin progress
</span></span><span class="line"><span class="cl">git push --force
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</h2>
<ul>
<li>Successful software engineers are smart, but many have an insecurity that they aren&rsquo;t smart enough.</li>
<li>Following videos may help you overcome this insecurity:
<ul>
<li><a href="https://www.youtube.com/watch?v=0SARbwvhupQ">The myth of the Genius Programmer</a></li>
<li><a href="https://www.youtube.com/watch?v=1i8ylq4j_EY">It&rsquo;s Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a></li>
</ul>
</li>
</ul>
<h2 id="a-note-about-video-resources">A Note About Video Resources</h2>
<p>Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.
Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.</p>
<p>It would be great to replace the online course resources with free and always-available public sources,
such as YouTube videos (preferably university lectures), so that you people can study these anytime,
not just when a specific online course is in session.</p>
<h2 id="choose-a-programming-language">Choose a Programming Language</h2>
<p>You&rsquo;ll need to choose a programming language for the coding interviews you do,
but you&rsquo;ll also need to find a language that you can use to study computer science concepts.</p>
<p>Preferably the language would be the same, so that you only need to be proficient in one.</p>
<h3 id="for-this-study-plan">For this Study Plan</h3>
<p>When I did the study plan, I used 2 languages for most of it: C and Python</p>
<ul>
<li>C: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures
and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that&rsquo;s terrific,
but when you&rsquo;re learning how these low-level data structures are built, it&rsquo;s great to feel close to the metal.
<ul>
<li>C is everywhere. You&rsquo;ll see examples in books, lectures, videos, <em>everywhere</em> while you&rsquo;re studying.</li>
<li><a href="https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628">The C Programming Language, Vol 2</a>
<ul>
<li>This is a short book, but it will give you a great handle on the C language and if you practice it a little
you&rsquo;ll quickly get proficient. Understanding C helps you understand how programs and memory work.</li>
<li>You don&rsquo;t need to go super deep in the book (or even finish it). Just get to where you&rsquo;re comfortable reading and writing in C.</li>
<li><a href="https://github.com/lekkas/c-algorithms">Answers to questions in the book</a></li>
</ul>
</li>
</ul>
</li>
<li>Python: Modern and very expressive, I learned it because it&rsquo;s just super useful and also allows me to write less code in an interview.</li>
</ul>
<p>This is my preference. You do what you like, of course.</p>
<p>You may not need it, but here are some sites for learning a new language:</p>
<ul>
<li><a href="https://exercism.org/tracks">Exercism</a></li>
<li><a href="https://www.codewars.com">Codewars</a></li>
<li><a href="https://www.hackerearth.com/for-developers/">HackerEarth</a></li>
<li><a href="https://www.scaler.com/topics/">Scaler Topics (Java, C++)</a></li>
</ul>
<h3 id="for-your-coding-interview">For your Coding Interview</h3>
<p>You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:</p>
<ul>
<li>C++</li>
<li>Java</li>
<li>Python</li>
</ul>
<p>You could also use these, but read around first. There may be caveats:</p>
<ul>
<li>JavaScript</li>
<li>Ruby</li>
</ul>
<p>Here is an article I wrote about choosing a language for the interview:
<a href="https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/">Pick One Language for the Coding Interview</a>.
This is the original article my post was based on: <a href="https://web.archive.org/web/20210516054124/https://blog.codingforinterviews.com/best-programming-language-jobs/">Choosing a Programming Language for Interviews</a></p>
<p>You need to be very comfortable in the language and be knowledgeable.</p>
<p>Read more about choices:</p>
<ul>
<li><a href="https://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/">Choose the Right Language for Your Coding Interview</a></li>
</ul>
<h2 id="books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</h2>
<p>This book will form your foundation for computer science.</p>
<p>Just choose one, in a language that you will be comfortable with. You&rsquo;ll be doing a lot of reading and coding.</p>
<h3 id="c">C</h3>
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080">Algorithms in C, Parts 1-5 (Bundle), 3rd Edition</a>
<ul>
<li>Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms</li>
</ul>
</li>
</ul>
<h3 id="python">Python</h3>
<ul>
<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/">Data Structures and Algorithms in Python</a>
<ul>
<li>by Goodrich, Tamassia, Goldwasser</li>
<li>I loved this book. It covered everything and more.</li>
<li>Pythonic code</li>
<li>my glowing book report: <a href="https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/">https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/</a></li>
</ul>
</li>
</ul>
<h3 id="java">Java</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, Goldwasser
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/">Data Structures and Algorithms in Java</a></li>
</ul>
</li>
<li>Sedgewick and Wayne:
<ul>
<li><a href="https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/">Algorithms</a></li>
<li>Free Coursera course that covers the book (taught by the authors!):
<ul>
<li><a href="https://www.coursera.org/learn/algorithms-part1">Algorithms I</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part2">Algorithms II</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="c-1">C++</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, and Mount
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275">Data Structures and Algorithms in C++, 2nd Edition</a></li>
</ul>
</li>
<li>Sedgewick and Wayne
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/">Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching</a></li>
<li><a href="https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/">Algorithms in C++ Part 5: Graph Algorithms</a></li>
</ul>
</li>
</ul>
<h2 id="interview-prep-books">Interview Prep Books</h2>
<p>You don&rsquo;t need to buy a bunch of these. Honestly &ldquo;Cracking the Coding Interview&rdquo; is probably enough,
but I bought more to give myself more practice. But I always do too much.</p>
<p>I bought both of these. They gave me plenty of practice.</p>
<ul>
<li><a href="https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/">Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition</a>
<ul>
<li>Answers in C++ and Java</li>
<li>This is a good warm-up for Cracking the Coding Interview</li>
<li>Not too difficult. Most problems may be easier than what you&rsquo;ll see in an interview (from what I&rsquo;ve read)</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/">Cracking the Coding Interview, 6th Edition</a>
<ul>
<li>answers in Java</li>
</ul>
</li>
</ul>
<h3 id="if-you-have-tons-of-extra-time">If you have tons of extra time:</h3>
<p>Choose one:</p>
<ul>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836">Elements of Programming Interviews (C++ version)</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/">Elements of Programming Interviews in Python</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/">Elements of Programming Interviews (Java version)</a>
- <a href="https://github.com/gardncl/elements-of-programming-interviews">Companion Project - Method Stub and Test Cases for Every Problem in the Book</a></li>
</ul>
<h2 id="dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</h2>
<p>This list grew over many months, and yes, it got out of hand.</p>
<p>Here are some mistakes I made so you&rsquo;ll have a better experience. And you&rsquo;ll save months of time.</p>
<h3 id="1-you-wont-remember-it-all">1. You Won&rsquo;t Remember it All</h3>
<p>I watched hours of videos and took copious notes, and months later there was much I didn&rsquo;t remember. I spent 3 days going
through my notes and making flashcards, so I could review. I didn&rsquo;t need all of that knowledge.</p>
<p>Please, read so you won&rsquo;t make my mistakes:</p>
<p><a href="https://startupnextdoor.com/retaining-computer-science-knowledge/">Retaining Computer Science Knowledge</a>.</p>
<h3 id="2-use-flashcards">2. Use Flashcards</h3>
<p>To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.
Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.</p>
<p>Make your own for free:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards">Flashcards site repo</a></li>
</ul>
<p><strong>I DON&rsquo;T RECOMMEND using my flashcards.</strong> There are too many and most of them are trivia that you don&rsquo;t need.</p>
<p>But if you don&rsquo;t want to listen to me, here you go:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db">My flash cards database (1200 cards)</a>:</li>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db">My flash cards database (extreme - 1800 cards)</a>:</li>
</ul>
<p>Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.
It&rsquo;s way too much for what&rsquo;s required.</p>
<p><strong>Note on flashcards:</strong> The first time you recognize you know the answer, don&rsquo;t mark it as known. You have to see the
same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in
your brain.</p>
<p>An alternative to using my flashcard site is <a href="https://ankisrs.net/">Anki</a>, which has been recommended to me numerous times.
It uses a repetition system to help you remember. It&rsquo;s user-friendly, available on all platforms and has a cloud sync system.
It costs $25 on iOS but is free on other platforms.</p>
<p>My flashcard database in Anki format: <a href="https://ankiweb.net/shared/info/25173560">https://ankiweb.net/shared/info/25173560</a> (thanks <a href="https://github.com/xiewenya">@xiewenya</a>).</p>
<p>Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the &ldquo;styling&rdquo; radio button, add the member &ldquo;white-space: pre;&rdquo; to the card class.</p>
<h3 id="3-do-coding-interview-questions-while-youre-learning">3. Do Coding Interview Questions While You&rsquo;re Learning</h3>
<p>THIS IS VERY IMPORTANT.</p>
<p>Start doing coding interview questions while you&rsquo;re learning data structures and algorithms.</p>
<p>You need to apply what you&rsquo;re learning to solving problems, or you&rsquo;ll forget. I made this mistake.</p>
<p>Once you&rsquo;ve learned a topic, and feel somewhat comfortable with it, for example, <strong>linked lists</strong>:</p>
<ol>
<li>Open one of the <a href="#interview-prep-books">coding interview books</a> (or coding problem websites, listed below)</li>
<li>Do 2 or 3 questions regarding linked lists.</li>
<li>Move on to the next learning topic.</li>
<li>Later, go back and do another 2 or 3 linked list problems.</li>
<li>Do this with each new topic you learn.</li>
</ol>
<p><strong>Keep doing problems while you&rsquo;re learning all this stuff, not after.</strong></p>
<p>You&rsquo;re not being hired for knowledge, but how you apply the knowledge.</p>
<p>There are many resources for this, listed below. Keep going.</p>
<h3 id="4-focus">4. Focus</h3>
<p>There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music
without lyrics and you&rsquo;ll be able to focus pretty well.</p>
<h2 id="what-you-wont-see-covered">What you won&rsquo;t see covered</h2>
<p>These are prevalent technologies but not part of this study plan:</p>
<ul>
<li>SQL</li>
<li>Javascript</li>
<li>HTML, CSS, and other front-end technologies</li>
</ul>
<h2 id="the-daily-plan">The Daily Plan</h2>
<p>This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.</p>
<p>Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation
of that data structure or algorithm in the language you chose for this course.</p>
<p>You can see my code here:</p>
<ul>
<li><a href="https://github.com/jwasham/practice-c">C</a></li>
<li><a href="https://github.com/jwasham/practice-cpp">C++</a></li>
<li><a href="https://github.com/jwasham/practice-python">Python</a></li>
</ul>
<p>You don&rsquo;t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.</p>
<h2 id="coding-question-practice">Coding Question Practice</h2>
<p>🤔 Why is this here? I&rsquo;m not ready to interview.</p>
<p><a href="#3-do-coding-interview-questions-while-youre-learning">Then go back and read this.</a></p>
<p>Why you need to practice doing programming problems:</p>
<ul>
<li>Problem recognition, and where the right data structures and algorithms fit in</li>
<li>Gathering requirements for the problem</li>
<li>Talking your way through the problem like you will in the interview</li>
<li>Coding on a whiteboard or paper, not a computer</li>
<li>Coming up with time and space complexity for your solutions (see Big-O below)</li>
<li>Testing your solutions</li>
</ul>
<p>There is a great intro for methodical, communicative problem solving in an interview. You&rsquo;ll get this from the programming
interview books, too, but I found this outstanding:
<a href="https://www.hiredintech.com/algorithm-design/">Algorithm design canvas</a></p>
<p>Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.</p>
<p>If you don&rsquo;t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.
This is my &ldquo;sofa whiteboard&rdquo;. I added the pen in the photo just for scale. If you use a pen, you&rsquo;ll wish you could erase.
Gets messy quick. <strong>I use a pencil and eraser.</strong></p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg" alt="my sofa whiteboard"  />
</p>
<p><strong>Coding question practice is not about memorizing answers to programming problems.</strong></p>
<h2 id="coding-problems">Coding Problems</h2>
<p>Don&rsquo;t forget your key coding interview books <a href="#interview-prep-books">here</a>.</p>
<p>Solving Problems:</p>
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution">How to Find a Solution</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content">How to Dissect a Topcoder Problem Statement</a></li>
</ul>
<p>Coding Interview Question Videos:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI">IDeserve (88 videos)</a></li>
<li><a href="https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&amp;view=50&amp;sort=dd">Tushar Roy (5 playlists)</a>
<ul>
<li>Super for walkthroughs of problem solutions</li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-">Nick White - LeetCode Solutions (187 Videos)</a>
<ul>
<li>Good explanations of solution and the code</li>
<li>You can watch several in a short time</li>
</ul>
</li>
<li><a href="https://youtube.com/FisherCoder">FisherCoder - LeetCode Solutions</a></li>
</ul>
<p>Challenge/Practice sites:</p>
<ul>
<li><a href="https://leetcode.com/">LeetCode</a>
<ul>
<li>My favorite coding problem site. It&rsquo;s worth the subscription money for the 1-2 months you&rsquo;ll likely be preparing.</li>
<li>See Nick White and FisherCoder Videos above for code walk-throughs.</li>
</ul>
</li>
<li><a href="https://www.hackerrank.com/">HackerRank</a></li>
<li><a href="https://www.topcoder.com/">TopCoder</a></li>
<li><a href="https://codeforces.com/">Codeforces</a></li>
<li><a href="https://codility.com/programmers/">Codility</a></li>
<li><a href="https://practice.geeksforgeeks.org/explore/?page=1">Geeks for Geeks</a></li>
<li><a href="https://www.interviewbit.com/">InterviewBit</a></li>
<li><a href="https://www.algoexpert.io/product">AlgoExpert</a>
<ul>
<li>Created by Google engineers, this is also an excellent resource to hone your skills.</li>
</ul>
</li>
<li><a href="https://projecteuler.net/">Project Euler</a>
<ul>
<li>very math focused, and not really suited for coding interviews</li>
</ul>
</li>
</ul>
<h2 id="lets-get-started">Let&rsquo;s Get Started</h2>
<p>Alright, enough talk, let&rsquo;s learn!</p>
<p>But don&rsquo;t forget to do coding problems from above while you learn!</p>
<h2 id="algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</h2>
<ul>
<li>Nothing to implement here, you&rsquo;re just watching videos and taking notes! Yay!</li>
<li>There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.</li>
<li>Don&rsquo;t worry if you don&rsquo;t understand all the math behind it.</li>
<li>You just need to understand how to express the complexity of an algorithm in terms of Big-O.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iOq5kSKqeR4">Harvard CS50 - Asymptotic Notation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=V6mKVRU1evU">Big O Notations (general quick tutorial) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ei-A_wy5Yxw&amp;index=2&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Big O Notation (and Omega and Theta) - best mathematical explanation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z1mkCe3kVUA">Skiena (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98">UC Berkeley Big O (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B3SpQZaAZP4&amp;index=10&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Amortized Analysis (video)</a></li>
<li><input disabled="" type="checkbox"> TopCoder (includes recurrence relations and master theorem):
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one">Computational Complexity: Section 1</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two">Computational Complexity: Section 2</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://bigocheatsheet.com/">Cheat sheet</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/__vX2sjlpXU">[Review] Big-O notation in 5 minutes (video)</a></li>
</ul>
<p>Well, that&rsquo;s about enough of that.</p>
<p>When you go through &ldquo;Cracking the Coding Interview&rdquo;, there is a chapter on this, and at the end there is a quiz to see
if you can identify the runtime complexity of different algorithms. It&rsquo;s a super review and test.</p>
<h2 id="data-structures">Data Structures</h2>
<ul>
<li>
<h3 id="arrays">Arrays</h3>
<ul>
<li><input disabled="" type="checkbox"> About Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/arrays-OsBSF">Arrays (video)</a></li>
<li><a href="https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE">UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)</a> (Start watching from 15m 32s)</li>
<li><a href="https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV">Dynamic Arrays (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=1jtrQqYpt7g">Jagged Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement a vector (mutable array with automatic resizing):
<ul>
<li><input disabled="" type="checkbox"> Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.</li>
<li><input disabled="" type="checkbox"> New raw data array with allocated memory
<ul>
<li>can allocate int array under the hood, just not use its features</li>
<li>start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> size() - number of items</li>
<li><input disabled="" type="checkbox"> capacity() - number of items it can hold</li>
<li><input disabled="" type="checkbox"> is_empty()</li>
<li><input disabled="" type="checkbox"> at(index) - returns item at given index, blows up if index out of bounds</li>
<li><input disabled="" type="checkbox"> push(item)</li>
<li><input disabled="" type="checkbox"> insert(index, item) - inserts item at index, shifts that index&rsquo;s value and trailing elements to the right</li>
<li><input disabled="" type="checkbox"> prepend(item) - can use insert above at index 0</li>
<li><input disabled="" type="checkbox"> pop() - remove from end, return value</li>
<li><input disabled="" type="checkbox"> delete(index) - delete item at index, shifting all trailing elements left</li>
<li><input disabled="" type="checkbox"> remove(item) - looks for value and removes index holding it (even if in multiple places)</li>
<li><input disabled="" type="checkbox"> find(item) - looks for value and returns first index with that value, -1 if not found</li>
<li><input disabled="" type="checkbox"> resize(new_capacity) // private function
<ul>
<li>when you reach capacity, resize to double the size</li>
<li>when popping an item, if size is 1/4 of capacity, resize to half</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Time
<ul>
<li>O(1) to add/remove at end (amortized for allocations for more space), index, or update</li>
<li>O(n) to insert/remove elsewhere</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Space
<ul>
<li>contiguous in memory, so proximity helps performance</li>
<li>space needed = (array capacity, which is &gt;= n) * size of item, but even if 2n, still O(n)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="linked-lists">Linked Lists</h3>
<ul>
<li><input disabled="" type="checkbox"> Description:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK">Singly Linked Lists (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0">CS 61B - Linked Lists 1 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w">CS 61B - Linked Lists 2 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/F8AbOfQwl1c">[Review] Linked lists in 4 minutes (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=QN6FPiD0Gzo">C Code (video)</a>
- not the whole video, just portions about Node struct and memory allocation</li>
<li><input disabled="" type="checkbox"> Linked List vs Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9">Core Linked Lists Vs Arrays (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd">In The Real World Linked Lists Vs Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YQs6IC-vgmo">Why you should avoid linked lists (video)</a></li>
<li><input disabled="" type="checkbox"> Gotcha: you need pointer to pointer knowledge:
(for when you pass a pointer to a function that may change the address where that pointer points)
This page is just to get a grasp on ptr to ptr. I don&rsquo;t recommend this list traversal style. Readability and maintainability suffer due to cleverness.
<ul>
<li><a href="https://www.eskimo.com/~scs/cclass/int/sx8.html">Pointers to Pointers</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement (I did with tail pointer &amp; without):
<ul>
<li><input disabled="" type="checkbox"> size() - returns number of data elements in list</li>
<li><input disabled="" type="checkbox"> empty() - bool returns true if empty</li>
<li><input disabled="" type="checkbox"> value_at(index) - returns the value of the nth item (starting at 0 for first)</li>
<li><input disabled="" type="checkbox"> push_front(value) - adds an item to the front of the list</li>
<li><input disabled="" type="checkbox"> pop_front() - remove front item and return its value</li>
<li><input disabled="" type="checkbox"> push_back(value) - adds an item at the end</li>
<li><input disabled="" type="checkbox"> pop_back() - removes end item and returns its value</li>
<li><input disabled="" type="checkbox"> front() - get value of front item</li>
<li><input disabled="" type="checkbox"> back() - get value of end item</li>
<li><input disabled="" type="checkbox"> insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index</li>
<li><input disabled="" type="checkbox"> erase(index) - removes node at given index</li>
<li><input disabled="" type="checkbox"> value_n_from_end(n) - returns the value of the node at nth position from the end of the list</li>
<li><input disabled="" type="checkbox"> reverse() - reverses the list</li>
<li><input disabled="" type="checkbox"> remove_value(value) - removes the first item in the list with this value</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Doubly-linked List
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD">Description (video)</a></li>
<li>No need to implement</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="stack">Stack</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/stacks-UdKzQ">Stacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/KcT3aVgrrpU">[Review] Stacks in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Will not implement. Implementing with array is trivial</li>
</ul>
</li>
<li>
<h3 id="queue">Queue</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/queues-EShpq">Queue (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Circular_buffer">Circular buffer/FIFO</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/D6gu-_tmEpQ">[Review] Queues in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement using linked-list, with tail pointer:
<ul>
<li>enqueue(value) - adds value at position at tail</li>
<li>dequeue() - returns value and removes least recently added element (front)</li>
<li>empty()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement using fixed-sized array:
<ul>
<li>enqueue(value) - adds item at end of available storage</li>
<li>dequeue() - returns value and removes least recently added element</li>
<li>empty()</li>
<li>full()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cost:
<ul>
<li>a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)
because you&rsquo;d need the next to last element, causing a full traversal each dequeue</li>
<li>enqueue: O(1) (amortized, linked list and array [probing])</li>
<li>dequeue: O(1) (linked list and array)</li>
<li>empty: O(1) (linked list and array)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="hash-table">Hash table</h3>
<ul>
<li>
<p><input disabled="" type="checkbox"> Videos:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0M_kIqhwbFo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=8">Hashing with Chaining (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;index=9&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Table Doubling, Karp-Rabin (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rvdJDijO2Ro&amp;index=10&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Open Addressing, Cryptographic Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=C4Kc8xzcA68">PyCon 2010: The Mighty Dictionary (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=66P5FMkWoVU">PyCon 2017: The Dictionary Even Mightier (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z0lJ2k0sl1g&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=11">(Advanced) Randomization: Universal &amp; Perfect Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N0COwN14gt0&amp;list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&amp;index=4">(Advanced) Perfect hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/knV86FlSXJ8">[Review] Hash tables in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Online Courses:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP">Core Hash Tables (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/home/week/4">Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP">Phone Book Problem (video)</a></li>
<li><input disabled="" type="checkbox"> distributed hash tables:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb">Instant Uploads And Storage Optimization In Dropbox (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H">Distributed Hash Tables (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement with array using linear probing</p>
<ul>
<li>hash(k, m) - m is size of hash table</li>
<li>add(key, value) - if key already exists, update value</li>
<li>exists(key)</li>
<li>get(key)</li>
<li>remove(key)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="more-knowledge">More Knowledge</h2>
<ul>
<li>
<h3 id="binary-search">Binary search</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=D5SrAga1pno">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Binary%20Search">detail</a></li>
<li><input disabled="" type="checkbox"> <a href="https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems">blueprint</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fDKIpRe8GW4">[Review] Binary search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li>binary search (on sorted array of integers)</li>
<li>binary search using recursion</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="bitwise-operations">Bitwise operations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf">Bits cheat sheet</a> - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)</li>
<li><input disabled="" type="checkbox"> Get a really good understanding of manipulating bits with: &amp;, |, ^, ~, &raquo;, &laquo;
<ul>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Word_(computer_architecture)">words</a></li>
<li><input disabled="" type="checkbox"> Good intro:
<a href="https://www.youtube.com/watch?v=7jkIUgLC29I">Bit Manipulation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=d0AwjSpNXR0">C Programming Tutorial 2-10: Bitwise Operators (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bit_manipulation">Bit Manipulation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise Operation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://graphics.stanford.edu/~seander/bithacks.html">Bithacks</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/">The Bit Twiddler</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/interactive.html">The Bit Twiddler Interactive</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZusiKXcz_ac">Bit Hacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/">Practice Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 2s and 1s complement
<ul>
<li><a href="https://www.youtube.com/watch?v=lKTsv6iVxV4">Binary: Plusses &amp; Minuses (Why We Use Two&rsquo;s Complement) (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ones%27_complement">1s Complement</a></li>
<li><a href="https://en.wikipedia.org/wiki/Two%27s_complement">2s Complement</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Count set bits
<ul>
<li><a href="https://youtu.be/Hzuzo9NJrlc">4 ways to count bits in a byte (video)</a></li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan">Count Bits</a></li>
<li><a href="https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer">How To Count The Number Of Set Bits In a 32 Bit Integer</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Swap values:
<ul>
<li><a href="https://bits.stephan-brumme.com/swap.html">Swap</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Absolute value:
<ul>
<li><a href="https://bits.stephan-brumme.com/absInteger.html">Absolute Integer</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="trees">Trees</h2>
<ul>
<li>
<h3 id="trees---intro">Trees - Intro</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/trees-95qda">Intro to Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b">Tree Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uWL6FJhq5fM">BFS(breadth-first search) and DFS(depth-first search) (video)</a>
<ul>
<li>BFS notes:
<ul>
<li>level order (BFS, using queue)</li>
<li>time complexity: O(n)</li>
<li>space complexity: best: O(1), worst: O(n/2)=O(n)</li>
</ul>
</li>
<li>DFS notes:
<ul>
<li>time complexity: O(n)</li>
<li>space complexity:
best: O(log n) - avg. height of tree
worst: O(n)</li>
<li>inorder (DFS: left, self, right)</li>
<li>postorder (DFS: left, right, self)</li>
<li>preorder (DFS: self, left, right)</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/HZ5YTanv5QE">[Review] Breadth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Urx87-NMm6c">[Review] Depth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b">[Review] Tree Traversal (playlist) in 11 minutes (video)</a></li>
</ul>
</li>
<li>
<h3 id="binary-search-trees-bsts">Binary search trees: BSTs</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=x6At0nzX92o&amp;index=1&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary Search Tree Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=76dhtgZt38A&amp;ab_channel=MITOpenCourseWare">MIT (video)</a></li>
<li>C/C++:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=COZK7NATh4k&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=28">Binary search tree - Implementation in C/C++ (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=hWokyBoo0aI&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=29">BST implementation - memory allocation in stack and heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Ut90klNN264&amp;index=30&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Find min and max element in a binary search tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_pnqMz5nrRs&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=31">Find height of a binary tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9RHO6jU--GU&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=32">Binary tree traversal - breadth-first and depth-first strategies (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=86g8jAQug04&amp;index=33&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree: Level Order Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gm8DUJJhmY4&amp;index=34&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree traversal: Preorder, Inorder, Postorder (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=yEwSGhSsT0U&amp;index=35&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Check if a binary tree is binary search tree or not (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gcULXE7ViZw&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=36">Delete a node from Binary Search Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=5cPbNCrdotA&amp;index=37&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Inorder Successor in a binary search tree (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li><input disabled="" type="checkbox"> insert    // insert value into tree</li>
<li><input disabled="" type="checkbox"> get_node_count // get count of values stored</li>
<li><input disabled="" type="checkbox"> print_values // prints the values in the tree, from min to max</li>
<li><input disabled="" type="checkbox"> delete_tree</li>
<li><input disabled="" type="checkbox"> is_in_tree // returns true if given value exists in the tree</li>
<li><input disabled="" type="checkbox"> get_height // returns the height in nodes (single node&rsquo;s height is 1)</li>
<li><input disabled="" type="checkbox"> get_min   // returns the minimum value stored in the tree</li>
<li><input disabled="" type="checkbox"> get_max   // returns the maximum value stored in the tree</li>
<li><input disabled="" type="checkbox"> is_binary_search_tree</li>
<li><input disabled="" type="checkbox"> delete_value</li>
<li><input disabled="" type="checkbox"> get_successor // returns next-highest value in tree after given value, -1 if none</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</h3>
<ul>
<li>visualized as a tree, but is usually linear in storage (array, linked list)</li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/introduction-2OpTs">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees">Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark">Tree Height Remark (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations">Basic Operations (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees">Complete Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode">Pseudocode (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3291">Heap Sort - jumps to start (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO">Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS">Building a heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM&amp;index=4&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">MIT: Heaps and Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE">CS 61B Lecture 24: Priority Queues (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MiyLo8adrWw">Linear Time BuildHeap (max-heap)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6">[Review] Heap (playlist) in 13 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement a max-heap:
<ul>
<li><input disabled="" type="checkbox"> insert</li>
<li><input disabled="" type="checkbox"> sift_up - needed for insert</li>
<li><input disabled="" type="checkbox"> get_max - returns the max item, without removing it</li>
<li><input disabled="" type="checkbox"> get_size() - return number of elements stored</li>
<li><input disabled="" type="checkbox"> is_empty() - returns true if heap contains no elements</li>
<li><input disabled="" type="checkbox"> extract_max - returns the max item, removing it</li>
<li><input disabled="" type="checkbox"> sift_down - needed for extract_max</li>
<li><input disabled="" type="checkbox"> remove(x) - removes item at index x</li>
<li><input disabled="" type="checkbox"> heapify - create a heap from an array of elements, needed for heap_sort</li>
<li><input disabled="" type="checkbox"> heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="sorting">Sorting</h2>
<ul>
<li>
<p><input disabled="" type="checkbox"> Notes:</p>
<ul>
<li>Implement sorts &amp; know best case/worst case, average complexity of each:
<ul>
<li>no bubble sort - it&rsquo;s terrible - O(n^2), except when n &lt;= 16</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Stability in sorting algorithms (&ldquo;Is Quicksort stable?&rdquo;)
<ul>
<li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">Sorting Algorithm Stability</a></li>
<li><a href="https://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms">Stability In Sorting Algorithms</a></li>
<li><a href="https://www.geeksforgeeks.org/stability-in-sorting-algorithms/">Stability In Sorting Algorithms</a></li>
<li><a href="https://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf">Sorting Algorithms - Stability</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Which algorithms can be used on linked lists? Which on arrays? Which on both?
<ul>
<li>I wouldn&rsquo;t recommend sorting a linked list, but merge sort is doable.</li>
<li><a href="https://www.geeksforgeeks.org/merge-sort-for-linked-list/">Merge Sort For Linked List</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>For heapsort, see Heap data structure above. Heap sort is great, but not stable</p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Mergesort (5 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq">1. Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort">2. Bottom up Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF">3. Sorting Complexity</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS">4. Comparators</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability">5. Stability</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Quicksort (4 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC">1. Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT">2. Selection</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd">3. Duplicate Keys</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7">4. System Sorts</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> UC Berkeley:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I">CS 61B Lecture 29: Sorting I (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk">CS 61B Lecture 30: Sorting II (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc">CS 61B Lecture 32: Sorting III (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4">CS 61B Lecture 33: Sorting V (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI">CS 61B 2014-04-21: Radix Sort(video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=P00xJgWzz2c&amp;index=1&amp;list=PL89B61F78B552C1AB">Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ni_zk257Nqo&amp;index=7&amp;list=PL89B61F78B552C1AB">Analyzing Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Kg4bqzAqRBM&amp;index=3&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Insertion Sort, Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=c4BRHC7kTaQ&amp;index=2&amp;list=PL89B61F78B552C1AB">Insertion Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=GCae1WNvnZM&amp;index=3&amp;list=PL89B61F78B552C1AB">Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=y_G9BkAm6B8&amp;index=4&amp;list=PL89B61F78B552C1AB">Quicksort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6nDMgr0-Yyo&amp;index=8&amp;list=PL89B61F78B552C1AB">Selection Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> Merge sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c">Using output array (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py">Using output array (Python)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc">In-place (C++)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Quick sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py">Implementation (Python)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl">[Review] Sorting (playlist) in 18 minutes</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Hoixgm4-P4M">Quick sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/2DmK_H7IdTo">Heap sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/4VqmGXwpLqc">Merge sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/xli_FI7CuzA">Bubble sort in 2 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/g-PGLbMth_g">Selection sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/JU767SDMDvA">Insertion sort in 2 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement:</p>
<ul>
<li><input disabled="" type="checkbox"> Mergesort: O(n log n) average and worst case</li>
<li><input disabled="" type="checkbox"> Quicksort O(n log n) average case</li>
<li>Selection sort and insertion sort are both O(n^2) average and worst case</li>
<li>For heapsort, see Heap data structure above</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Not required, but I recommended them:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/3">Sedgewick - Radix Sorts (6 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java">1. Strings in Java</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z">2. Key Indexed Counting</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort">3. Least Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort">4. Most Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5">5. 3 Way Radix Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">6. Suffix Arrays</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort">Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=xhr26ia4k38">Radix Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;index=7&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Radix Sort, Counting Sort (linear time given constraints) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cNB2lADK3_s&amp;index=8&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Matrix Multiply, Quicksort, Freivalds&rsquo; algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=pOKy3RZbSws&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=14">Sorting in Linear Time (video)</a></li>
</ul>
</li>
</ul>
<p>As a summary, here is a visual representation of <a href="https://www.youtube.com/watch?v=kPRA0W1kECg">15 sorting algorithms</a>.
If you need more detail on this subject, see &ldquo;Sorting&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></p>
<h2 id="graphs">Graphs</h2>
<p>Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.</p>
<ul>
<li>
<p>Notes:</p>
<ul>
<li>There are 4 basic ways to represent a graph in memory:
<ul>
<li>objects and pointers</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>adjacency map</li>
</ul>
</li>
<li>Familiarize yourself with each representation and its pros &amp; cons</li>
<li>BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code</li>
<li>When asked a question, look for a graph-based solution first, then move on if none</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> MIT(videos):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oFVYVzlvk9c&amp;t=14s&amp;ab_channel=MITOpenCourseWare">Breadth-First Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IBfWDYSffUU&amp;t=32s&amp;ab_channel=MITOpenCourseWare">Depth-First Search</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Skiena Lectures - great intro:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Sjk0xqWWPCc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=10">CSE373 2020 - Lecture 10 - Graph Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZTwjXj81NVY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=11">CSE373 2020 - Lecture 11 - Graph Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=KyordYB3BOs&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=12">CSE373 2020 - Lecture 12 - Depth First Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oolm2VnJUKw&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=13">CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RktgPx0MarY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=14">CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con&rsquo;t) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MUe5DXRhyAo&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=15">CSE373 2020 - Lecture 15 - Graph Algorithms (con&rsquo;t 2) (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Graphs (review and more):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Aa2sqUhIn-E&amp;index=15&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">6.006 Single-Source Shortest Paths Problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NSHizBK9JD8&amp;t=1731s&amp;ab_channel=MITOpenCourseWare">6.006 Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=f9cVS_URPc0&amp;ab_channel=MITOpenCourseWare">6.006 Bellman-Ford (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=CHvQ3q_gJ7E&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=18">6.006 Speeding Up Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=i_AQT_XfvD8&amp;index=6&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim&rsquo;s Algorithm -  Lecture 6 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ufj5_bppBsA&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=7">Aduni: Graph Algorithms II - DFS, BFS, Kruskal&rsquo;s Algorithm, Union Find Data Structure - Lecture 7 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=DiedsPsMKXc&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=8">Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XIAQRlNkJAw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=9">Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k">CS 61B 2014: Weighted graphs (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=tKwnms5iRBU&amp;index=16&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Greedy Algorithms: Minimum Spanning Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RpgcYiky7uw">Strongly Connected Components Kosaraju&rsquo;s Algorithm Graph Algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw">[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV">[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p>Full Coursera Course:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-on-graphs/home/welcome">Algorithms on Graphs (video)</a></li>
</ul>
</li>
<li>
<p>I&rsquo;ll implement:</p>
<ul>
<li><input disabled="" type="checkbox"> DFS with adjacency list (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency list (iterative with stack)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (iterative with stack)</li>
<li><input disabled="" type="checkbox"> BFS with adjacency list</li>
<li><input disabled="" type="checkbox"> BFS with adjacency matrix</li>
<li><input disabled="" type="checkbox"> single-source shortest path (Dijkstra)</li>
<li><input disabled="" type="checkbox"> minimum spanning tree</li>
<li>DFS-based algorithms (see Aduni videos above):
<ul>
<li><input disabled="" type="checkbox"> check for cycle (needed for topological sort, since we&rsquo;ll check for cycle before starting)</li>
<li><input disabled="" type="checkbox"> topological sort</li>
<li><input disabled="" type="checkbox"> count connected components in a graph</li>
<li><input disabled="" type="checkbox"> list strongly connected components</li>
<li><input disabled="" type="checkbox"> check for bipartite graph</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="even-more-knowledge">Even More Knowledge</h2>
<ul>
<li>
<h3 id="recursion">Recursion</h3>
<ul>
<li><input disabled="" type="checkbox"> Stanford lectures on recursion &amp; backtracking:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gl3emqCuueQ&amp;list=PLFE6E58F856038C69&amp;index=8">Lecture 8 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uFJhEPrbycQ&amp;list=PLFE6E58F856038C69&amp;index=9">Lecture 9 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NdF1QDTRkck&amp;index=10&amp;list=PLFE6E58F856038C69">Lecture 10 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p-gpaIGRCQI&amp;list=PLFE6E58F856038C69&amp;index=11">Lecture 11 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>When it is appropriate to use it?</li>
<li>How is tail recursion better than not?
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad">What Is Tail Recursion Why Is It So Bad?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1">Tail Recursion (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/ngCos392W4w">5 Simple Steps for Solving Any Recursive Problem(video)</a></li>
</ul>
<p>Backtracking Blueprint: <a href="https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)">Java</a>
<a href="https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A">Python</a></p>
</li>
<li>
<h3 id="dynamic-programming">Dynamic Programming</h3>
<ul>
<li>You probably won&rsquo;t see any dynamic programming problems in your interview, but it&rsquo;s worth being able to recognize a
problem as being a candidate for dynamic programming.</li>
<li>This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.</li>
<li>I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.</li>
<li><input disabled="" type="checkbox"> Videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wAA0AMfcJHQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=18">Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=T3A4jlHlhtA&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=19">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iPnPVcZmRbE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=20">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3558">Simonson: Dynamic Programming 0 (starts at 59:18) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0EzHjQ_SOeU&amp;index=11&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Simonson: Dynamic Programming I - Lecture 11 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=v1qiRwuJU7g&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=12">Simonson: Dynamic programming II - Lecture 12 (video)</a></li>
<li><input disabled="" type="checkbox"> List of individual DP problems (each is short):
<a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">Dynamic Programming (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Yale Lecture notes:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming">Dynamic Programming</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Coursera:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem">The RNA secondary structure problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq">A dynamic programming algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2">Illustrating the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm">Running time of the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation">DP vs. recursive implementation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6">Global pairwise sequence alignment (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment">Local pairwise sequence alignment (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="design-patterns">Design patterns</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3cmzqZzwNDM&amp;list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&amp;index=3">Quick UML review (video)</a></li>
<li><input disabled="" type="checkbox"> Learn these patterns:
<ul>
<li><input disabled="" type="checkbox"> strategy</li>
<li><input disabled="" type="checkbox"> singleton</li>
<li><input disabled="" type="checkbox"> adapter</li>
<li><input disabled="" type="checkbox"> prototype</li>
<li><input disabled="" type="checkbox"> decorator</li>
<li><input disabled="" type="checkbox"> visitor</li>
<li><input disabled="" type="checkbox"> factory, abstract factory</li>
<li><input disabled="" type="checkbox"> facade</li>
<li><input disabled="" type="checkbox"> observer</li>
<li><input disabled="" type="checkbox"> proxy</li>
<li><input disabled="" type="checkbox"> delegate</li>
<li><input disabled="" type="checkbox"> command</li>
<li><input disabled="" type="checkbox"> state</li>
<li><input disabled="" type="checkbox"> memento</li>
<li><input disabled="" type="checkbox"> iterator</li>
<li><input disabled="" type="checkbox"> composite</li>
<li><input disabled="" type="checkbox"> flyweight</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLF206E906175C7E07">Series of videos (27 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124">Book: Head First Design Patterns</a>
<ul>
<li>I know the canonical book is &ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&rdquo;, but Head First is great for beginners to OO.</li>
</ul>
</li>
<li><a href="https://sourcemaking.com/design-patterns-and-tips">Handy reference: 101 Design Patterns &amp; Tips for Developers</a></li>
</ul>
</li>
<li>
<h3 id="combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8RRo6Ti9d0U">Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=sZkAAk9Wwa4">Make School: Probability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=dNaJg-mLobQ">Make School: More Probability and Markov Chains (video)</a></li>
<li><input disabled="" type="checkbox"> Khan Academy:
<ul>
<li>Course layout:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic">Basic Theoretical Probability</a></li>
</ul>
</li>
<li>Just the videos - 41 (each are simple and each are short):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uzkc-qNVoOk&amp;list=PLC58778F28211FA19">Probability Explained (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</h3>
<ul>
<li>Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,
and be able to recognize them when an interviewer asks you them in disguise.</li>
<li>Know what NP-complete means.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=moPtwq_cVH8&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=23">Computational Complexity (video)</a></li>
<li><input disabled="" type="checkbox"> Simonson:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=2939">Greedy Algs. II &amp; Intro to NP Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e0tGC6ZQdQE&amp;index=16&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness II &amp; Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=fCX1BGT3wjE&amp;index=17&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness III (Video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NKLDp3Rch3M&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=18">NP Completeness IV (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Skiena:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ItHp5laE1VE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=23">CSE373 2020 - Lecture 23 - NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=inaFJeCzGxU&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=24">CSE373 2020 - Lecture 24 - Satisfiability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B-bhKxjZLlc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=25">CSE373 2020 - Lecture 25 - More NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_EzetTkG_Cc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=26">CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=eHZifpgyH_4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=22">Complexity: P, NP, NP-completeness, Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MEz1J9wY2iM&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=24">Complexity: Approximation Algorithms (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4q-jmGrmxKs&amp;index=25&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Complexity: Fixed-Parameter Algorithms (video)</a></li>
<li>Peter Norvig discusses near-optimal solutions to traveling salesman problem:
<ul>
<li><a href="https://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb">Jupyter Notebook</a></li>
</ul>
</li>
<li>Pages 1048 - 1140 in CLRS if you have it.</li>
</ul>
</li>
<li>
<h3 id="how-computers-process-a-program">How computers process a program</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XM4lGflQFvA">How CPU executes a program (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/1I5ZMmrOfnA">How computers calculate - ALU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fpnE6UAfbtU">Registers and RAM (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/FZGugFqdr60">The Central Processing Unit (CPU) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/zltgXvg6r3k">Instructions and Programs (video)</a></li>
</ul>
</li>
<li>
<h3 id="caches">Caches</h3>
<ul>
<li><input disabled="" type="checkbox"> LRU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=R5ON3iwx78M">The Magic of LRU Cache (100 Days of Google Dev) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=bq6N7Ym81iI">Implementing LRU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8-FZRAjR7qU">LeetCode - 146 LRU Cache (C++) (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> CPU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=vjYF_fAZI5E&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&amp;index=24">MIT 6.004 L15: The Memory Hierarchy (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ajgC3-pyGlk&amp;index=25&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-">MIT 6.004 L16: Cache Issues (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="processes-and-threads">Processes and Threads</h3>
<ul>
<li><input disabled="" type="checkbox"> Computer Science 162 - Operating Systems (25 videos):
<ul>
<li>for processes and threads see videos 1-11</li>
<li><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c">Operating Systems and System Programming (video)</a></li>
</ul>
</li>
<li><a href="https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread">What Is The Difference Between A Process And A Thread?</a></li>
<li>Covers:
<ul>
<li>Processes, Threads, Concurrency issues
<ul>
<li>Difference between processes and threads</li>
<li>Processes</li>
<li>Threads</li>
<li>Locks</li>
<li>Mutexes</li>
<li>Semaphores</li>
<li>Monitors</li>
<li>How they work?</li>
<li>Deadlock</li>
<li>Livelock</li>
</ul>
</li>
<li>CPU activity, interrupts, context switching</li>
<li>Modern concurrency constructs with multicore processors</li>
<li><a href="https://youtu.be/O4nwUqQodAg">Paging, segmentation and virtual memory (video)</a></li>
<li><a href="https://youtu.be/iKlAWIKEyuw">Interrupts (video)</a></li>
<li>Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o)</li>
<li>Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)</li>
<li>Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.</li>
<li>Context switching
<ul>
<li>How context switching is initiated by the operating system and underlying hardware?</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M">threads in C++ (series - 10 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k">CS 377 Spring &lsquo;14: Operating Systems from University of Massachusetts</a></li>
<li><input disabled="" type="checkbox"> concurrency in Python (videos):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1">Short series on threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Bs7vPNbB9JM">Python Threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Obt-vMVdM8s">Understanding the Python GIL (2010)</a>
<ul>
<li><a href="https://www.dabeaz.com/GIL">reference</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZzfHjytDceU">Keynote David Beazley - Topics of Interest (Python Asyncio)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0zaPs8OtyKY">Mutex in Python</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="testing">Testing</h3>
<ul>
<li>To cover:
<ul>
<li>how unit testing works</li>
<li>what are mock objects</li>
<li>what is integration testing</li>
<li>what is dependency injection</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=SAhJf36_u5U">Agile Software Testing with James Bach (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ILkT_HV9DVU">Open Lecture by James Bach on Software Testing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://vimeo.com/83960706">Steve Freeman - Test-Driven Development (that’s not what we meant) (video)</a>
<ul>
<li><a href="https://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf">slides</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Dependency injection:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IKD2-MAkXyQ">video</a></li>
<li><input disabled="" type="checkbox"> <a href="https://jasonpolites.github.io/tao-of-testing/ch3-1.1.html">Tao Of Testing</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://jasonpolites.github.io/tao-of-testing/ch4-1.1.html">How to write tests</a></li>
</ul>
</li>
<li>
<h3 id="string-searching--manipulations">String searching &amp; manipulations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">Sedgewick - Suffix Arrays (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Substring Search (videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG">1. Introduction to Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search">2. Brute-Force Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt">3. Knuth-Morris Pratt</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore">4. Boyer-Moore</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT">5. Rabin-Karp</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text">Search pattern in text (video)</a></li>
</ul>
<p>If you need more detail on this subject, see &ldquo;String Matching&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a>.</p>
</li>
<li>
<h3 id="tries">Tries</h3>
<ul>
<li>Note there are different kinds of tries. Some have prefixes, some don&rsquo;t, and some use string instead of bits
to track the path</li>
<li>I read through code, but will not implement</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Tries (3 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries">1. R Way Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries">2. Ternary Search Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations">3. Character Based Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries">Notes on Data Structures and Programming Techniques</a></li>
<li><input disabled="" type="checkbox"> Short course videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries">Introduction To Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries">Performance Of Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie">Implementing A Trie (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.toptal.com/java/the-trie-a-neglected-data-structure">The Trie: A Neglected Data Structure</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Using%20Tries">TopCoder - Using Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TJ8SkcUSdbU">Stanford Lecture (real world use case) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NinWEPPrkDQ&amp;index=16&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)</a></li>
</ul>
</li>
<li>
<h3 id="floating-point-numbers">Floating Point Numbers</h3>
<ul>
<li><input disabled="" type="checkbox"> simple 8-bit: <a href="https://www.youtube.com/watch?v=ji3SfClm8TU">Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)</a></li>
</ul>
</li>
<li>
<h3 id="unicode">Unicode</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a></li>
<li><input disabled="" type="checkbox"> <a href="https://kunststube.net/encoding/">What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text</a></li>
</ul>
</li>
<li>
<h3 id="endianness">Endianness</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20180107141940/https://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html">Big And Little Endian</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=JrNF0KRAlyo">Big Endian Vs Little Endian (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oBSuXP-1Tc0">Big And Little Endian Inside/Out (video)</a>
<ul>
<li>Very technical talk for kernel devs. Don&rsquo;t worry if most is over your head.</li>
<li>The first half is enough.</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="networking">Networking</h3>
<ul>
<li><strong>If you have networking experience or want to be a reliability engineer or operations engineer, expect questions</strong></li>
<li>Otherwise, this is just good to know</li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/code-org/computers-and-the-internet">Khan Academy</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Vdc8TCESIg8">UDP and TCP: Comparison of Transport Protocols (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e5DEVa9eSN0">TCP/IP and the OSI Model Explained! (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=nomyRJehhnM">Packet Transmission across the Internet. Networking &amp; TCP/IP tutorial. (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=WGJrLqtX7As">HTTP (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=S2iBR2ZlZf0">SSL and HTTPS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Rp3iZUvXWlM">SSL/TLS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=E9FxNzv1Tr8">HTTP 2.0 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j">Video Series (21 videos) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=t5xYI0jzOf4">Subnetting Demystified - Part 5 CIDR Notation (video)</a></li>
<li><input disabled="" type="checkbox"> Sockets:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6G_W54zuadg&amp;t=6s">Java - Sockets - Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=G75vN2mnJeQ">Socket Programming (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="final-review">Final Review</h2>
<ul>
<li>
<p>This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.
It&rsquo;s nice if you want a refresher often.</p>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-3 minutes short subject videos (23 videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4r1DZcx1cM&amp;list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&amp;index=22">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-5 minutes short subject videos - Michael Sambol (38 videos):</p>
<ul>
<li><a href="https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1">Sedgewick Videos - Algorithms I</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2">Sedgewick Videos - Algorithms II</a></p>
</li>
</ul>
<hr>
<h2 id="update-your-resume">Update Your Resume</h2>
<ul>
<li>See Resume prep information in the books: &ldquo;Cracking The Coding Interview&rdquo; and &ldquo;Programming Interviews Exposed&rdquo;</li>
<li>I don&rsquo;t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:
<ul>
<li><a href="https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free">How to Create or Check if your Resume is ATS Compliant</a></li>
</ul>
</li>
<li><a href="https://www.careercup.com/resume">&ldquo;This Is What A GOOD Resume Should Look Like&rdquo; by Gayle McDowell (author of Cracking the Coding Interview)</a>,
<ul>
<li>Note by the author: &ldquo;This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.&rdquo;</li>
</ul>
</li>
<li><a href="https://www.techinterviewhandbook.org/resume/guide">&ldquo;Step-by-step resume guide&rdquo; by Tech Interview Handbook</a>
<ul>
<li>Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume</li>
</ul>
</li>
</ul>
<h2 id="find-a-job">Find a Job</h2>
<ul>
<li><a href="https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs">Sites for Finding Jobs</a></li>
</ul>
<h2 id="interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1">How to Pass the Engineering Interview in 2021</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N233T0epWTs">Demystifying Tech Recruiting</a></li>
<li><input disabled="" type="checkbox"> How to Get a Job at the Big 4:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YJZCUhxNCv8">How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp; Microsoft (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6790FVXWBw8&amp;feature=youtu.be">How to Get a Job at the Big 4.1 (Follow-up video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking The Coding Interview Set 1:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rEJzOhC5ZtQ">Gayle L McDowell - Cracking The Coding Interview (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=aClxtDcdpsQ">Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking the Facebook Coding Interview:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wCl9kvQGHPI">The Approach</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4UWDyJq8jZg">Problem Walkthrough</a></li>
</ul>
</li>
<li>Prep Courses:
<ul>
<li><a href="https://www.udemy.com/software-engineer-interview-unleashed">Software Engineer Interview Unleashed (paid course)</a>:
<ul>
<li>Learn how to make yourself ready for software engineer interviews from a former Google interviewer.</li>
</ul>
</li>
<li><a href="https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/">Python for Data Structures, Algorithms, and Interviews (paid course)</a>:
<ul>
<li>A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513">Intro to Data Structures and Algorithms using Python (Udacity free course)</a>:
<ul>
<li>A free Python centric data structures and algorithms course.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256">Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)</a>:
<ul>
<li>Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.</li>
</ul>
</li>
<li><a href="https://www.educative.io/courses/grokking-the-behavioral-interview">Grokking the Behavioral Interview (Educative free course)</a>:
<ul>
<li>Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Mock Interviews:</p>
<ul>
<li><a href="https://www.gainlo.co/#!/">Gainlo.co: Mock interviewers from big companies</a> - I used this and it helped me relax for the phone screen and on-site interview</li>
<li><a href="https://www.pramp.com/">Pramp: Mock interviews from/with peers</a> - peer-to-peer model of practice interviews</li>
<li><a href="https://interviewing.io">interviewing.io: Practice mock interview with senior engineers</a> - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously</li>
</ul>
<h2 id="be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</h2>
<p>Think of about 20 interview questions you&rsquo;ll get, along with the lines of the items below. Have at least one answer for each.
Have a story, not just data, about something you accomplished.</p>
<ul>
<li>
<p>Why do you want this job?</p>
</li>
<li>
<p>What&rsquo;s a tough problem you&rsquo;ve solved?</p>
</li>
<li>
<p>Biggest challenges faced?</p>
</li>
<li>
<p>Best/worst designs seen?</p>
</li>
<li>
<p>Ideas for improving an existing product</p>
</li>
<li>
<p>How do you work best, as an individual and as part of a team?</p>
</li>
<li>
<p>Which of your skills or experiences would be assets in the role and why?</p>
</li>
<li>
<p>What did you most enjoy at [job x / project y]?</p>
</li>
<li>
<p>What was the biggest challenge you faced at [job x / project y]?</p>
</li>
<li>
<p>What was the hardest bug you faced at [job x / project y]?</p>
</li>
<li>
<p>What did you learn at [job x / project y]?</p>
</li>
<li>
<p>What would you have done better at [job x / project y]?</p>
</li>
<li>
<p>If you find it hard to come up with good answers of these types of interview questions, here are some ideas:</p>
<ul>
<li><a href="https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs">General Interview Questions and their Answers</a></li>
</ul>
</li>
</ul>
<h2 id="have-questions-for-the-interviewer">Have questions for the interviewer</h2>
<p>Some of mine (I already may know the answers, but want their opinion or team perspective):</p>
<ul>
<li>How large is your team?</li>
<li>What does your dev cycle look like? Do you do waterfall/sprints/agile?</li>
<li>Are rushes to deadlines common? Or is there flexibility?</li>
<li>How are decisions made in your team?</li>
<li>How many meetings do you have per week?</li>
<li>Do you feel your work environment helps you concentrate?</li>
<li>What are you working on?</li>
<li>What do you like about it?</li>
<li>What is the work life like?</li>
<li>How is the work/life balance?</li>
</ul>
<h2 id="once-youve-got-the-job">Once You&rsquo;ve Got The Job</h2>
<p>Congratulations!</p>
<p>Keep learning.</p>
<p>You&rsquo;re never really done.</p>
<hr>
<p>Everything below this point is optional. It is NOT needed for an entry-level interview.
However, by studying these, you&rsquo;ll get greater exposure to more CS concepts, and will be better prepared for
any software engineering job. You&rsquo;ll be a much more well-rounded software engineer.</p>
<hr>
<h2 id="additional-books">Additional Books</h2>
<p>📚 These are here so you can dive into a topic you find interesting.</p>
<ul>
<li><a href="https://www.amazon.com/dp/013937681X">The Unix Programming Environment</a>
<ul>
<li>An oldie but a goodie</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/1593273894/">The Linux Command Line: A Complete Introduction</a>
<ul>
<li>A modern option</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/TCP/IP_Illustrated">TCP/IP Illustrated Series</a></li>
<li><a href="https://www.amazon.com/gp/product/0596007124/">Head First Design Patterns</a>
<ul>
<li>A gentle introduction to design patterns</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns: Elements of Reusable Object-Oriente​d Software</a>
<ul>
<li>AKA the &ldquo;Gang Of Four&rdquo; book, or GOF</li>
<li>The canonical design patterns book</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202">Algorithm Design Manual</a> (Skiena)
<ul>
<li>As a review and problem recognition</li>
<li>The algorithm catalog portion is well beyond the scope of difficulty you&rsquo;ll get in an interview</li>
<li>This book has 2 parts:
<ul>
<li>Class textbook on data structures and algorithms
<ul>
<li>Pros:
<ul>
<li>Is a good review as any algorithms textbook would be</li>
<li>Nice stories from his experiences solving problems in industry and academia</li>
<li>Code examples in C</li>
</ul>
</li>
<li>Cons:
<ul>
<li>Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects</li>
<li>Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have</li>
<li>Don&rsquo;t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material</li>
</ul>
</li>
</ul>
</li>
<li>Algorithm catalog:
<ul>
<li>This is the real reason you buy this book.</li>
<li>This book is better as an algorithm reference, and not something you read cover to cover.</li>
</ul>
</li>
</ul>
</li>
<li>Can rent it on Kindle</li>
<li>Answers:
<ul>
<li><a href="https://web.archive.org/web/20150404194210/https://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)">Solutions</a></li>
</ul>
</li>
<li><a href="https://www3.cs.stonybrook.edu/~skiena/algorist/book/errata">Errata</a></li>
</ul>
</li>
<li><a href="https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038">Write Great Code: Volume 1: Understanding the Machine</a>
<ul>
<li>The book was published in 2004, and is somewhat outdated, but it&rsquo;s a terrific resource for understanding a computer in brief</li>
<li>The author invented <a href="https://en.wikipedia.org/wiki/High_Level_Assembly">HLA</a>, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like</li>
<li>These chapters are worth the read to give you a nice foundation:
<ul>
<li>Chapter 2 - Numeric Representation</li>
<li>Chapter 3 - Binary Arithmetic and Bit Operations</li>
<li>Chapter 4 - Floating-Point Representation</li>
<li>Chapter 5 - Character Representation</li>
<li>Chapter 6 - Memory Organization and Access</li>
<li>Chapter 7 - Composite Data Types and Memory Objects</li>
<li>Chapter 9 - CPU Architecture</li>
<li>Chapter 10 - Instruction Set Architecture</li>
<li>Chapter 11 - Memory Architecture and Organization</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X">Introduction to Algorithms</a>
<ul>
<li><strong>Important:</strong> Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won&rsquo;t teach you how to write good code. You have to be able to code a decent solution efficiently</li>
<li>AKA CLR, sometimes CLRS, because Stein was late to the game</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/0128119055">Computer Architecture, Sixth Edition: A Quantitative Approach</a>
<ul>
<li>For a richer, more up-to-date (2017), but longer treatment</li>
</ul>
</li>
</ul>
<h2 id="system-design-scalability-data-handling">System Design, Scalability, Data Handling</h2>
<p><strong>You can expect system design questions if you have 4+ years of experience.</strong></p>
<ul>
<li>Scalability and System Design are very large topics with many topics and resources, since
there is a lot to consider when designing a software/hardware system that can scale.
Expect to spend quite a bit of time on this</li>
<li>Considerations:
<ul>
<li>Scalability
<ul>
<li>Distill large data sets to single values</li>
<li>Transform one data set to another</li>
<li>Handling obscenely large amounts of data</li>
</ul>
</li>
<li>System design
<ul>
<li>features sets</li>
<li>interfaces</li>
<li>class hierarchies</li>
<li>designing a system under certain constraints</li>
<li>simplicity and robustness</li>
<li>tradeoffs</li>
<li>performance analysis and optimization</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>START HERE</strong>: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023">How Do I Prepare To Answer Design Questions In A Technical Interview?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/">8 Things You Need to Know Before a System Design Interview</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=UrYLYV7WSHM">Database Normalization - 1NF, 2NF, 3NF and 4NF (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/checkcheckzz/system-design-interview">System Design Interview</a> - There are a lot of resources in this one. Look through the articles and examples. I put some of them below</li>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20120716060051/https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">How to ace a systems design interview</a></li>
<li><input disabled="" type="checkbox"> <a href="https://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/">Numbers Everyone Should Know</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html">How long does it take to make a context switch?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=srOgpXECblk">Transactions Across Datacenters (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://ksat.me/a-plain-english-introduction-to-cap-theorem">A plain English introduction to CAP Theorem</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></li>
<li><input disabled="" type="checkbox"> Consensus Algorithms:
<ul>
<li><input disabled="" type="checkbox"> Paxos - <a href="https://www.youtube.com/watch?v=s8JqcZtvnsM">Paxos Agreement - Computerphile (video)</a></li>
<li><input disabled="" type="checkbox"> Raft - <a href="https://www.youtube.com/watch?v=P9Ydif5_qvE">An Introduction to the Raft Distributed Consensus Algorithm (video)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://raft.github.io/">Easy-to-read paper</a></li>
<li><input disabled="" type="checkbox"> <a href="https://thesecretlivesofdata.com/raft/">Infographic</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.tom-e-white.com/2007/11/consistent-hashing.html">Consistent Hashing</a></li>
<li><input disabled="" type="checkbox"> <a href="https://horicky.blogspot.com/2009/11/nosql-patterns.html">NoSQL Patterns</a></li>
<li><input disabled="" type="checkbox"> Scalability:
<ul>
<li>You don&rsquo;t need all of these. Just pick a few that interest you.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=-W9F__D3oY4">Great overview (video)</a></li>
<li><input disabled="" type="checkbox"> Short series:
<ul>
<li><a href="https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Clones</a></li>
<li><a href="https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">Database</a></li>
<li><a href="https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">Cache</a></li>
<li><a href="https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism">Asynchronism</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.aosabook.org/en/distsys.html">Scalable Web Architecture and Distributed Systems</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf">Fallacies of Distributed Computing Explained</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=modXC5IWTJI">Jeff Dean - Building Software Systems At Google and Lessons Learned (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://lethain.com/introduction-to-architecting-systems-for-scale/">Introduction to Architecting Systems for Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9nWyWwY2Onc">Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=H4vMcD7zKM0">How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms">The Importance of Algorithms</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html">Sharding</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p0jGmgIrf_M&amp;list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&amp;index=4">Engineering for the Long Game - Astrid Atkinson Keynote(video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html">7 Years Of YouTube Scalability Lessons In 30 Minutes</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=G-lGCC4KKok">video</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html">How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/">How to Remove Duplicates in Large Datasets</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3vV4YiqKm1o">A look inside Etsy&rsquo;s scale and engineering culture with Jon Cowie (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://thenewstack.io/led-amazon-microservices-architecture/">What Led Amazon to its Own Microservices Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="https://eng.uber.com/trip-data-squeeze/">To Compress Or Not To Compress, That Was Uber&rsquo;s Question</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html">When Should Approximate Query Processing Be Used?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html">Google&rsquo;s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html">The Image Optimization Technology That Serves Millions Of Requests Per Day</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html">A Patreon Architecture Short</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html">Tinder: How Does One Of The Largest Recommendation Engines Decide Who You&rsquo;ll See Next?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html">Design Of A Modern Cache</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html">Live Video Streaming At Facebook Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html">A 360 Degree View Of The Entire Netflix Stack</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it">Latency Is Everywhere And It Costs You Sales - How To Crush It</a></li>
<li><input disabled="" type="checkbox"> <a href="https://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day</a></li>
<li><input disabled="" type="checkbox"> <a href="https://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">ESPN&rsquo;s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second</a></li>
<li><input disabled="" type="checkbox"> See &ldquo;Messaging, Serialization, and Queueing Systems&rdquo; way below for info on some of the technologies that can glue services together</li>
<li><input disabled="" type="checkbox"> Twitter:
<ul>
<li><a href="https://www.youtube.com/watch?v=5cKTP36HVgI">O&rsquo;Reilly MySQL CE 2011: Jeremy Cole, &ldquo;Big and Small Data at @Twitter&rdquo; (video)</a></li>
<li><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">Timelines at Scale</a></li>
</ul>
</li>
<li>For even more, see &ldquo;Mining Massive Datasets&rdquo; video series in the <a href="#video-series">Video Series</a> section</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:
<ul>
<li>review: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><a href="https://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf">cheat sheet</a></li>
<li>flow:
<ol>
<li>Understand the problem and scope:
<ul>
<li>Define the use cases, with interviewer&rsquo;s help</li>
<li>Suggest additional features</li>
<li>Remove items that interviewer deems out of scope</li>
<li>Assume high availability is required, add as a use case</li>
</ul>
</li>
<li>Think about constraints:
<ul>
<li>Ask how many requests per month</li>
<li>Ask how many requests per second (they may volunteer it or make you do the math)</li>
<li>Estimate reads vs. writes percentage</li>
<li>Keep 80/20 rule in mind when estimating</li>
<li>How much data written per second</li>
<li>Total storage required over 5 years</li>
<li>How much data read per second</li>
</ul>
</li>
<li>Abstract design:
<ul>
<li>Layers (service, data, caching)</li>
<li>Infrastructure: load balancing, messaging</li>
<li>Rough overview of any key algorithm that drives the service</li>
<li>Consider bottlenecks and determine solutions</li>
</ul>
</li>
</ol>
</li>
<li>Exercises:
<ul>
<li><a href="https://blog.twitter.com/2010/announcing-snowflake">Design a random unique ID generation system</a></li>
<li><a href="https://www.slideshare.net/dvirsky/introduction-to-redis">Design a key-value database</a></li>
<li><a href="https://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Design a picture sharing system</a></li>
<li><a href="https://ijcai13.org/files/tutorial_slides/td3.pdf">Design a recommendation system</a></li>
<li><a href="https://www.hiredintech.com/system-design/the-system-design-process/">Design a URL-shortener system: copied from above</a></li>
<li><a href="https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/">Design a cache system</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="additional-learning">Additional Learning</h2>
<p>I added them to help you become a well-rounded software engineer, and to be aware of certain
technologies and algorithms, so you&rsquo;ll have a bigger toolbox.</p>
<ul>
<li>
<h3 id="compilers">Compilers</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=IhC7sdYe-Jg">How a Compiler Works in ~1 minute (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=CSZLNYF4Klo">Harvard CS50 - Compilers (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=twodd1KFfGk">C++ (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=FnGCDLhaxKU">Understanding Compiler Optimization (C++) (video)</a></li>
</ul>
</li>
<li>
<h3 id="emacs-and-vim">Emacs and vi(m)</h3>
<ul>
<li>Familiarize yourself with a unix-based code editor</li>
<li>vi(m):
<ul>
<li><a href="https://www.youtube.com/watch?v=5givLEMcINQ&amp;index=1&amp;list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr">Editing With vim 01 - Installation, Setup, and The Modes (video)</a></li>
<li><a href="https://vim-adventures.com/">VIM Adventures</a></li>
<li>set of 4 videos:
<ul>
<li><a href="https://www.youtube.com/watch?v=SI8TeVMX8pk">The vi/vim editor - Lesson 1</a></li>
<li><a href="https://www.youtube.com/watch?v=F3OO7ZIOaJE">The vi/vim editor - Lesson 2</a></li>
<li><a href="https://www.youtube.com/watch?v=ZYEccA_nMaI">The vi/vim editor - Lesson 3</a></li>
<li><a href="https://www.youtube.com/watch?v=1lYD5gwgZIA">The vi/vim editor - Lesson 4</a></li>
</ul>
</li>
<li><a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs">Using Vi Instead of Emacs</a></li>
</ul>
</li>
<li>emacs:
<ul>
<li><a href="https://www.youtube.com/watch?v=hbmV1bnQ-i0">Basics Emacs Tutorial (video)</a></li>
<li>set of 3 (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=ujODL7MD04Q">Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands</a></li>
<li><a href="https://www.youtube.com/watch?v=XWpsRupJ4II">Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes</a></li>
<li><a href="https://www.youtube.com/watch?v=paSgzPso-yc">Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=JWD1Fpdd4Pc">Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)</a></li>
<li><a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs">Writing C Programs With Emacs</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=48JlgiBpw_I&amp;t=0s">The Absolute Beginner&rsquo;s Guide to Emacs (video by David Wilson)</a></li>
<li><a href="https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/">The Absolute Beginner&rsquo;s Guide to Emacs (notes by David Wilson)</a></li>
</ul>
</li>
<li>
<h3 id="unix-command-line-tools">Unix command line tools</h3>
<ul>
<li>I filled in the list below from good tools.</li>
<li>bash</li>
<li>cat</li>
<li>grep</li>
<li>sed</li>
<li>awk</li>
<li>curl or wget</li>
<li>sort</li>
<li>tr</li>
<li>uniq</li>
<li><a href="https://en.wikipedia.org/wiki/Strace">strace</a></li>
<li><a href="https://danielmiessler.com/study/tcpdump/">tcpdump</a></li>
</ul>
</li>
<li>
<h3 id="information-theory-videos">Information theory (videos)</h3>
<ul>
<li><a href="https://www.khanacademy.org/computing/computer-science/informationtheory">Khan Academy</a></li>
<li>More about Markov processes:
<ul>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation">Core Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation">Core Implementing Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through">Project = Markov Text Generation Walk Through</a></li>
</ul>
</li>
<li>See more in MIT 6.050J Information and Entropy series below</li>
</ul>
</li>
<li>
<h3 id="parity--hamming-code-videos">Parity &amp; Hamming Code (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=q-3BctoUpHE">Intro</a></li>
<li><a href="https://www.youtube.com/watch?v=DdMcAUlxh1M">Parity</a></li>
<li>Hamming Code:
<ul>
<li><a href="https://www.youtube.com/watch?v=1A_NcXxdoCc">Error detection</a></li>
<li><a href="https://www.youtube.com/watch?v=JAMLuxdHH8o">Error correction</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=wbH2VxzmoZk">Error Checking</a></li>
</ul>
</li>
<li>
<h3 id="entropy">Entropy</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://youtu.be/JnJq3Py0dyM?t=176">Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp; Bits (video)</a></li>
</ul>
</li>
<li>
<h3 id="cryptography">Cryptography</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://www.khanacademy.org/computing/computer-science/cryptography">Khan Academy Series</a></li>
<li><a href="https://www.youtube.com/watch?v=KqqOXndnvic&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=30">Cryptography: Hash Functions</a></li>
<li><a href="https://www.youtube.com/watch?v=9TNI2wHmaeI&amp;index=31&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Cryptography: Encryption</a></li>
</ul>
</li>
<li>
<h3 id="compression">Compression</h3>
<ul>
<li>Make sure to watch information theory videos first</li>
<li>Computerphile (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=Lto-ajuqW3w">Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=M5c_RFKVkko">Entropy in Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=umTbivyJoiI">Upside Down Trees (Huffman Trees)</a></li>
<li><a href="https://www.youtube.com/watch?v=DV8efuB3h2g">EXTRA BITS/TRITS - Huffman Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=goOa3DGezUA">Elegant Compression in Text (The LZ 77 Method)</a></li>
<li><a href="https://www.youtube.com/watch?v=cCDCfoHTsaU">Text Compression Meets Probabilities</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H">Compressor Head videos</a></li>
<li><a href="https://www.youtube.com/watch?v=whGwm0Lky2s">(optional) Google Developers Live: GZIP is not enough!</a></li>
</ul>
</li>
<li>
<h3 id="computer-security">Computer Security</h3>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT (23 videos)</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Introduction, Threat Models</a></li>
<li><a href="https://www.youtube.com/watch?v=6bwzNg5qQ0o&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=2">Control Hijacking Attacks</a></li>
<li><a href="https://www.youtube.com/watch?v=drQyrzRoRiA&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=3">Buffer Overflow Exploits and Defenses</a></li>
<li><a href="https://www.youtube.com/watch?v=6SIJmoE9L9g&amp;index=4&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Privilege Separation</a></li>
<li><a href="https://www.youtube.com/watch?v=8VqTSY-11F4&amp;index=5&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Capabilities</a></li>
<li><a href="https://www.youtube.com/watch?v=VEV74hwASeU&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=6">Sandboxing Native Code</a></li>
<li><a href="https://www.youtube.com/watch?v=chkFBigodIw&amp;index=7&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Web Security Model</a></li>
<li><a href="https://www.youtube.com/watch?v=EBQIGy1ROLY&amp;index=8&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Securing Web Applications</a></li>
<li><a href="https://www.youtube.com/watch?v=yRVZPvHYHzw&amp;index=9&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Symbolic Execution</a></li>
<li><a href="https://www.youtube.com/watch?v=SIEVvk3NVuk&amp;index=11&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Security</a></li>
<li><a href="https://www.youtube.com/watch?v=QOtA76ga_fY&amp;index=12&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Protocols</a></li>
<li><a href="https://www.youtube.com/watch?v=PuVMkSEcPiI&amp;index=15&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Side-Channel Attacks</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="garbage-collection">Garbage collection</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=iHVs_HkjdmI">GC in Python (video)</a></li>
<li><a href="https://www.infoq.com/presentations/garbage-collection-benefits">Deep Dive Java: Garbage Collection is Good!</a></li>
<li><a href="https://www.youtube.com/watch?v=P-8Z0-MhdQs&amp;list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&amp;index=3">Deep Dive Python: Garbage Collection in CPython (video)</a></li>
</ul>
</li>
<li>
<h3 id="parallel-programming">Parallel Programming</h3>
<ul>
<li><a href="https://www.coursera.org/learn/parprog1/home/week/1">Coursera (Scala)</a></li>
<li><a href="https://www.youtube.com/watch?v=uY85GkaYzBk">Efficient Python for High Performance Parallel Computing (video)</a></li>
</ul>
</li>
<li>
<h3 id="messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</h3>
<ul>
<li><a href="https://thrift.apache.org/">Thrift</a>
<ul>
<li><a href="https://thrift-tutorial.readthedocs.io/en/latest/intro.html">Tutorial</a></li>
</ul>
</li>
<li><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/tutorials">Tutorials</a></li>
</ul>
</li>
<li><a href="https://www.grpc.io/">gRPC</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=5tmPvSe7xXQ&amp;list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&amp;index=1">gRPC 101 for Java Developers (video)</a></li>
</ul>
</li>
<li><a href="https://redis.io/">Redis</a>
<ul>
<li><a href="https://try.redis.io/">Tutorial</a></li>
</ul>
</li>
<li><a href="https://aws.amazon.com/sqs/">Amazon SQS (queue)</a></li>
<li><a href="https://aws.amazon.com/sns/">Amazon SNS (pub-sub)</a></li>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a>
<ul>
<li><a href="https://www.rabbitmq.com/getstarted.html">Get Started</a></li>
</ul>
</li>
<li><a href="https://www.celeryproject.org/">Celery</a>
<ul>
<li><a href="https://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">First Steps With Celery</a></li>
</ul>
</li>
<li><a href="https://zeromq.org/">ZeroMQ</a>
<ul>
<li><a href="https://zeromq.org/intro:read-the-manual">Intro - Read The Manual</a></li>
</ul>
</li>
<li><a href="https://activemq.apache.org/">ActiveMQ</a></li>
<li><a href="https://kafka.apache.org/documentation.html#introduction">Kafka</a></li>
<li><a href="https://msgpack.org/index.html">MessagePack</a></li>
<li><a href="https://avro.apache.org/">Avro</a></li>
</ul>
</li>
<li>
<h3 id="a">A*</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=-L-WgKMFuhE">A* Pathfinding (E01: algorithm explanation) (video)</a></li>
</ul>
</li>
<li>
<h3 id="fast-fourier-transform">Fast Fourier Transform</h3>
<ul>
<li><a href="https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/">An Interactive Guide To The Fourier Transform</a></li>
<li><a href="https://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/">What is a Fourier transform? What is it used for?</a></li>
<li><a href="https://www.youtube.com/watch?v=Xxut2PN-V8Q">What is the Fourier Transform? (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iTMn0Kt18tg&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=4">Divide &amp; Conquer: FFT (video)</a></li>
<li><a href="https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/">Understanding The FFT</a></li>
</ul>
</li>
<li>
<h3 id="bloom-filter">Bloom Filter</h3>
<ul>
<li>Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)</li>
<li><a href="https://www.youtube.com/watch?v=-SuTGoFYjZs">Bloom Filters (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=qBTdukbzc78">Bloom Filters | Mining of Massive Datasets | Stanford University (video)</a></li>
<li><a href="https://billmill.org/bloomfilter-tutorial/">Tutorial</a></li>
<li><a href="https://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/">How To Write A Bloom Filter App</a></li>
</ul>
</li>
<li>
<h3 id="hyperloglog">HyperLogLog</h3>
<ul>
<li><a href="https://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html">How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory</a></li>
</ul>
</li>
<li>
<h3 id="locality-sensitive-hashing">Locality-Sensitive Hashing</h3>
<ul>
<li>Used to determine the similarity of documents</li>
<li>The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same</li>
<li><a href="https://ferd.ca/simhashing-hopefully-made-simple.html">Simhashing (hopefully) made simple</a></li>
</ul>
</li>
<li>
<h3 id="van-emde-boas-trees">van Emde Boas Trees</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hmReJCupbNU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=6">Divide &amp; Conquer: van Emde Boas Trees (video)</a></li>
<li><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf">MIT Lecture Notes</a></li>
</ul>
</li>
<li>
<h3 id="augmented-data-structures">Augmented Data Structures</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc">CS 61B Lecture 39: Augmenting Data Structures</a></li>
</ul>
</li>
<li>
<h3 id="balanced-search-trees">Balanced search trees</h3>
<ul>
<li>
<p>Know at least one type of balanced binary tree (and know how it&rsquo;s implemented):</p>
</li>
<li>
<p>&ldquo;Among balanced search trees, AVL and 2/3 trees are now passé, and red-black trees seem to be more popular.
A particularly interesting self-organizing data structure is the splay tree, which uses rotations
to move any accessed key to the root.&rdquo; - Skiena</p>
</li>
<li>
<p>Of these, I chose to implement a splay tree. From what I&rsquo;ve read, you won&rsquo;t implement a
balanced search tree in your interview. But I wanted exposure to coding one up
and let&rsquo;s face it, splay trees are the bee&rsquo;s knees. I did read a lot of red-black tree code</p>
<ul>
<li>Splay tree: insert, search, delete functions
If you end up implementing red/black tree try just these:</li>
<li>Search and insertion functions, skipping delete</li>
</ul>
</li>
<li>
<p>I want to learn more about B-Tree since it&rsquo;s used so widely with very large data sets</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">Self-balancing binary search tree</a></p>
</li>
<li>
<p><strong>AVL trees</strong></p>
<ul>
<li>In practice:
From what I can tell, these aren&rsquo;t used much in practice, but I could see where they would be:
The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly
balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it
attractive for data structures that may be built once and loaded without reconstruction, such as language
dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)</li>
<li><a href="https://www.youtube.com/watch?v=FNeL18KsWPc&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=6">MIT AVL Trees / AVL Sort (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees">AVL Trees (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation">AVL Tree Implementation (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge">Split And Merge</a></li>
</ul>
</li>
<li>
<p><strong>Splay trees</strong></p>
<ul>
<li>In practice:
Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,
data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,
networking and file system code) etc</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY">CS 61B: Splay Trees (video)</a></li>
<li>MIT Lecture: Splay Trees:
<ul>
<li>Gets very mathy, but watch the last 10 minutes for sure.</li>
<li><a href="https://www.youtube.com/watch?v=QnPl_Y6EqMo">Video</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Red/black trees</strong></p>
<ul>
<li>These are a translation of a 2-3 tree (see below).</li>
<li>In practice:
Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.
Not only does this make them valuable in time-sensitive applications such as real-time applications,
but it makes them valuable building blocks in other data structures which provide worst-case guarantees;
for example, many data structures used in computational geometry can be based on red–black trees, and
the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java,
the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor
hashcodes, a Red-Black tree is used</li>
<li><a href="https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3871">Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hm2GHwyKF1o&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=5">Aduni - Algorithms - Lecture 5 (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-Black Tree</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees">An Introduction To Binary Search And Red Black Tree</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin">[Review] Red-Black Trees (playlist) in 30 minutes (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3 search trees</strong></p>
<ul>
<li>In practice:
2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).</li>
<li>You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.</li>
<li><a href="https://www.youtube.com/watch?v=C3SsdUqasD4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=2">23-Tree Intuition and Definition (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iYvBtGKsqSg&amp;index=3&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary View of 23-Tree</a></li>
<li><a href="https://www.youtube.com/watch?v=TOb1tuEZ2X4&amp;index=5&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">2-3 Trees (student recitation) (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3-4 Trees (aka 2-4 trees)</strong></p>
<ul>
<li>In practice:
For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion
operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an
important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce
2-4 trees just before red–black trees, even though <strong>2-4 trees are not often used in practice</strong>.</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q">CS 61B Lecture 26: Balanced Search Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=DQdMYevEyE4&amp;index=4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Bottom Up 234-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2679VQ26Fp4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=5">Top Down 234-Trees (video)</a></li>
</ul>
</li>
<li>
<p><strong>N-ary (K-ary, M-ary) trees</strong></p>
<ul>
<li>note: the N or K is the branching factor (max branches)</li>
<li>binary trees are a 2-ary tree, with branching factor = 2</li>
<li>2-3 trees are 3-ary</li>
<li><a href="https://en.wikipedia.org/wiki/K-ary_tree">K-Ary Tree</a></li>
</ul>
</li>
<li>
<p><strong>B-Trees</strong></p>
<ul>
<li>Fun fact: it&rsquo;s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).</li>
<li>In Practice:
B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to
its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary
block in a particular file. The basic problem is turning the file block i address into a disk block
(or perhaps to a cylinder-head-sector) address</li>
<li><a href="https://en.wikipedia.org/wiki/B-tree">B-Tree</a></li>
<li><a href="https://btechsmartclass.com/data_structures/b-trees.html">B-Tree Datastructure</a></li>
<li><a href="https://www.youtube.com/watch?v=I22wEC1tTGo&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=6">Introduction to B-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=s3bCdZGrgpA&amp;index=7&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Definition and Insertion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=svfnVhJOfMc&amp;index=8&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Deletion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=V3omVLzI0WE&amp;index=7&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT 6.851 - Memory Hierarchy Models (video)</a>
- covers cache-oblivious B-Trees, very interesting data structures
- the first 37 minutes are very technical, may be skipped (B is block size, cache line size)</li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz">[Review] B-Trees (playlist) in 26 minutes (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="k-d-trees">k-D Trees</h3>
<ul>
<li>Great for finding number of points in a rectangle or higher dimension object</li>
<li>A good fit for k-nearest neighbors</li>
<li><a href="https://www.youtube.com/watch?v=Y4ZgLlDfKDg">kNN K-d tree algorithm (video)</a></li>
</ul>
</li>
<li>
<h3 id="skip-lists">Skip lists</h3>
<ul>
<li>&ldquo;These are somewhat of a cult data structure&rdquo; - Skiena</li>
<li><a href="https://www.youtube.com/watch?v=2g9OSRKJuzM&amp;index=10&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Skip Lists (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Skip_list">For animations and a little more detail</a></li>
</ul>
</li>
<li>
<h3 id="network-flows">Network Flows</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=Tl90tNtKvxs">Ford-Fulkerson in 5 minutes — Step by step example (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=v1VgJmkEJW0">Ford-Fulkerson Algorithm (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2vhN4Ice5jI">Network Flows (video)</a></li>
</ul>
</li>
<li>
<h3 id="disjoint-sets--union-find">Disjoint Sets &amp; Union Find</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI">UCB 61B - Disjoint Sets; Sorting &amp; selection (video)</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part1/home/week/1">Sedgewick Algorithms - Union-Find (6 videos)</a></li>
</ul>
</li>
<li>
<h3 id="math-for-fast-processing">Math for Fast Processing</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=eCaXlAaN2uE&amp;index=11&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Integer Arithmetic, Karatsuba Multiplication (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=ru7mWZJlRQg">The Chinese Remainder Theorem (used in cryptography) (video)</a></li>
</ul>
</li>
<li>
<h3 id="treap">Treap</h3>
<ul>
<li>Combination of a binary search tree and a heap</li>
<li><a href="https://en.wikipedia.org/wiki/Treap">Treap</a></li>
<li><a href="https://www.youtube.com/watch?v=6podLUYinH8">Data Structures: Treaps explained (video)</a></li>
<li><a href="https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf">Applications in set operations</a></li>
</ul>
</li>
<li>
<h3 id="linear-programming-videos">Linear Programming (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=M4K6HYLHREQ">Linear Programming</a></li>
<li><a href="https://www.youtube.com/watch?v=2ACJ9ewUC6U">Finding minimum cost</a></li>
<li><a href="https://www.youtube.com/watch?v=8AA_81xI3ik">Finding maximum value</a></li>
<li><a href="https://www.youtube.com/watch?v=44pAWI7v5Zk">Solve Linear Equations with Python - Simplex Algorithm</a></li>
</ul>
</li>
<li>
<h3 id="geometry-convex-hull-videos">Geometry, Convex hull (videos)</h3>
<ul>
<li><a href="https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3164">Graph Alg. IV: Intro to geometric algorithms - Lecture 9</a></li>
<li><a href="https://www.youtube.com/watch?v=J5aJEcOr6Eo&amp;index=10&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Geometric Algorithms: Graham &amp; Jarvis - Lecture 10</a></li>
<li><a href="https://www.youtube.com/watch?v=EzeYI7p9MjU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=2">Divide &amp; Conquer: Convex Hull, Median Finding</a></li>
</ul>
</li>
<li>
<h3 id="discrete-math">Discrete math</h3>
<ul>
<li><a href="https://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html">Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t">Discrete Mathematics by Shai Simonson (19 videos)</a></li>
<li><a href="https://nptel.ac.in/courses/106/106/106106183/">Discrete Mathematics By IIT Ropar NPTEL</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="additional-detail-on-some-subjects">Additional Detail on Some Subjects</h2>
<ul>
<li>
<p>I added these to reinforce some ideas already presented above, but didn&rsquo;t want to include them
above because it&rsquo;s just too much. It&rsquo;s easy to overdo it on a subject.
You want to get hired in this century, right?</p>
</li>
<li>
<p><strong>SOLID</strong></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TMuno5RZNeE">Bob Martin SOLID Principles of Object Oriented and Agile Design (video)</a></li>
<li><input disabled="" type="checkbox"> S - <a href="https://www.oodesign.com/single-responsibility-principle.html">Single Responsibility Principle</a> | <a href="https://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html">Single responsibility to each Object</a>
<ul>
<li><a href="https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> O - <a href="https://www.oodesign.com/open-close-principle.html">Open/Closed Principle</a>  | <a href="https://en.wikipedia.org/wiki/Open/closed_principle">On production level Objects are ready for extension but not for modification</a>
<ul>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> L - <a href="https://www.oodesign.com/liskov-s-substitution-principle.html">Liskov Substitution Principle</a> | <a href="https://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle">Base Class and Derived class follow ‘IS A’ Principle</a>
<ul>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> I - <a href="https://www.oodesign.com/interface-segregation-principle.html">Interface segregation principle</a> | clients should not be forced to implement interfaces they don&rsquo;t use
<ul>
<li><a href="https://www.youtube.com/watch?v=3CtAfl7aXAQ">Interface Segregation Principle in 5 minutes (video)</a></li>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> D -<a href="https://www.oodesign.com/dependency-inversion-principle.html">Dependency Inversion principle</a> | Reduce the dependency In composition of objects.
<ul>
<li><a href="https://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important">Why Is The Dependency Inversion Principle And Why Is It Important</a></li>
<li><a href="https://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&amp;hl=en">more flavor</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Union-Find</strong></p>
<ul>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/JssSY/overview">Overview</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations">Naive Implementation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees">Trees</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank">Union By Rank</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression">Path Compression</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional">Analysis Options</a></li>
</ul>
</li>
<li>
<p><strong>More Dynamic Programming</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4-cftqTcdI&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming I: Fibonacci, Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=KLBCUx1is2c&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming II: Text Justification, Blackjack</a></li>
<li><a href="https://www.youtube.com/watch?v=TDo3r5M1LNo&amp;ab_channel=MITOpenCourseWare">6.006: DP III: Parenthesization, Edit Distance, Knapsack</a></li>
<li><a href="https://www.youtube.com/watch?v=i9OAOk0CUQE&amp;ab_channel=MITOpenCourseWare">6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.</a></li>
<li><a href="https://www.youtube.com/watch?v=Tw1k46ywN6E&amp;index=14&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">6.046: Dynamic Programming &amp; Advanced DP</a></li>
<li><a href="https://www.youtube.com/watch?v=NzgFUwOaoIw&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=15">6.046: Dynamic Programming: All-Pairs Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=krZI60lKPek&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=12">6.046: Dynamic Programming (student recitation)</a></li>
</ul>
</li>
<li>
<p><strong>Advanced Graph Processing</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=mUBmcbbJNf4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=27">Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=kQ-UQAzcnzA&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=28">Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees</a></li>
</ul>
</li>
<li>
<p>MIT <strong>Probability</strong> (mathy, and go slowly, which is good for mathy things) (videos):</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=SmFwFdESMHI&amp;index=18&amp;list=PLB7540DEDD482705B">MIT 6.042J - Probability Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=E6FbvM-FGZ8&amp;index=19&amp;list=PLB7540DEDD482705B">MIT 6.042J - Conditional Probability</a></li>
<li><a href="https://www.youtube.com/watch?v=l1BCv3qqW4A&amp;index=20&amp;list=PLB7540DEDD482705B">MIT 6.042J - Independence</a></li>
<li><a href="https://www.youtube.com/watch?v=MOfhhFaQdjw&amp;list=PLB7540DEDD482705B&amp;index=21">MIT 6.042J - Random Variables</a></li>
<li><a href="https://www.youtube.com/watch?v=gGlMSe7uEkA&amp;index=22&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation I</a></li>
<li><a href="https://www.youtube.com/watch?v=oI9fMUqgfxY&amp;index=23&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation II</a></li>
<li><a href="https://www.youtube.com/watch?v=q4mwO2qS2z4&amp;index=24&amp;list=PLB7540DEDD482705B">MIT 6.042J - Large Deviations</a></li>
<li><a href="https://www.youtube.com/watch?v=56iFMY8QW2k&amp;list=PLB7540DEDD482705B&amp;index=25">MIT 6.042J - Random Walks</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=oDniZCmNmNw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=19">Simonson: Approximation Algorithms (video)</a></p>
</li>
<li>
<p><strong>String Matching</strong></p>
<ul>
<li>Rabin-Karp (videos):
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw">Rabin Karps Algorithm</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation">Precomputing</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis">Optimization: Implementation and Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=9">Table Doubling, Karp-Rabin</a></li>
<li><a href="https://www.youtube.com/watch?v=w6nuXg0BISo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=32">Rolling Hashes, Amortized Analysis</a></li>
</ul>
</li>
<li>Knuth-Morris-Pratt (KMP):
<ul>
<li><a href="https://www.youtube.com/watch?v=5i7oKodCRJo">TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm</a></li>
</ul>
</li>
<li>Boyer–Moore string search algorithm
<ul>
<li><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm">Boyer-Moore String Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=QDZpzctPf10">Advanced String Searching Boyer-Moore-Horspool Algorithms (video)</a></li>
</ul>
</li>
<li><a href="https://www.coursera.org/learn/algorithms-on-strings/home/week/1">Coursera: Algorithms on Strings</a>
<ul>
<li>starts off great, but by the time it gets past KMP it gets more complicated than it needs to be</li>
<li>nice explanation of tries</li>
<li>can be skipped</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Sorting</strong></p>
<ul>
<li>Stanford lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=ENp00xylP7c&amp;index=15&amp;list=PLFE6E58F856038C69">Lecture 15 | Programming Abstractions (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=y4M9IVgrVKo&amp;index=16&amp;list=PLFE6E58F856038C69">Lecture 16 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>Shai Simonson, <a href="https://www.aduni.org/">Aduni.org</a>:
<ul>
<li><a href="https://www.youtube.com/watch?v=odNJmw5TOEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=2">Algorithms - Sorting - Lecture 2 (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hj8YKFTFKEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=3">Algorithms - Sorting II - Lecture 3 (video)</a></li>
</ul>
</li>
<li>Steven Skiena lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=jUf-UQ3a0kg&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=8">CSE373 2020 - Mergesort/Quicksort (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=0ksyQKmre84&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=9">CSE373 2020 - Linear Sorting (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="video-series">Video Series</h2>
<p>Sit back and enjoy.</p>
<ul>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">List of individual Dynamic Programming problems (each is short)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0">x86 Architecture, Assembly, Applications (11 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8">MIT 18.06 Linear Algebra, Spring 2005 (35 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL3B08AE665AB9002A">Excellent - MIT Calculus Revisited: Single Variable Calculus</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=22hwcnXIGgk&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=1">Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd">UC Berkeley 61B (Spring 2014): Data Structures (25 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C">UC Berkeley 61B (Fall 2006): Data Structures (39 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_">UC Berkeley 61C: Machine Structures (26 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO">OOSE: Software Dev Using UML and Java (21 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu">MIT 6.004: Computation Structures (49 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq">Carnegie Mellon - Computer Architecture Lectures (39 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;nohtml5=False">MIT 6.006: Intro to Algorithms (47 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=zm2VP0kHl1M&amp;list=PL6535748F59DCA484">MIT 6.033: Computer System Engineering (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi">MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;list=PLB7540DEDD482705B">MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=2P-yW7LQr08&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">MIT 6.046: Design and Analysis of Algorithms (34 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=T0yzrZL1py0&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=1">MIT 6.851: Advanced Data Structures (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c">MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf">Harvard COMPSCI 224: Advanced Algorithms (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT 6.858 Computer Systems Security, Fall 2014</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL9D558D49CA734A02">Stanford: Programming Paradigms (27 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy">Introduction to Cryptography by Christof Paar</a></p>
<ul>
<li><a href="https://www.crypto-textbook.com/">Course Website along with Slides and Problem Sets</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV">Mining Massive Datasets - Stanford University (94 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&amp;view=50&amp;sort=dd">Graph Theory by Sarada Herke (67 videos)</a></p>
</li>
</ul>
<h2 id="computer-science-courses">Computer Science Courses</h2>
<ul>
<li><a href="https://github.com/open-source-society/computer-science">Directory of Online CS Courses</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses">Directory of CS Courses (many with online lectures)</a></li>
</ul>
<h2 id="algorithms-implementation">Algorithms implementation</h2>
<ul>
<li><a href="https://algs4.cs.princeton.edu/code">Multiple Algorithms implementation by Princeton University</a></li>
</ul>
<h2 id="papers">Papers</h2>
<ul>
<li><a href="https://www.cs.cmu.edu/~crary/819-f09/">Love classic papers?</a></li>
<li><a href="https://spinroot.com/courses/summer/Papers/hoare_1978.pdf">1978: Communicating Sequential Processes</a>
<ul>
<li><a href="https://godoc.org/github.com/thomas11/csp">implemented in Go</a></li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">2003: The Google File System</a>
<ul>
<li>replaced by Colossus in 2012</li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">2004: MapReduce: Simplified Data Processing on Large Clusters</a>
<ul>
<li>mostly replaced by Cloud Dataflow?</li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">2006: Bigtable: A Distributed Storage System for Structured Data</a></li>
<li><a href="https://research.google.com/archive/chubby-osdi06.pdf">2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems</a></li>
<li><a href="https://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf">2007: Dynamo: Amazon’s Highly Available Key-value Store</a>
<ul>
<li>The Dynamo paper kicked off the NoSQL revolution</li>
</ul>
</li>
<li><a href="https://www.akkadia.org/drepper/cpumemory.pdf">2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)</a></li>
<li>2012: AddressSanitizer: A Fast Address Sanity Checker:
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf">paper</a></li>
<li><a href="https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany">video</a></li>
</ul>
</li>
<li>2013: Spanner: Google’s Globally-Distributed Database:
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">paper</a></li>
<li><a href="https://www.usenix.org/node/170855">video</a></li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf">2015: Continuous Pipelines at Google</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf">2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf">2015: How Developers Search for Code: A Case Study</a></li>
<li>More papers: <a href="https://github.com/0voice/computer_expert_paper">1,000 papers</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>DP for Beginners</title>
      <link>https://samirpaulb.github.io/posts/dp-for-beginners/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/dp-for-beginners/</guid>
      <description>DP for Beginners</description>
      <content:encoded><![CDATA[<p><strong>Longest Increasing Subsequence variants:</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<p><strong>Partition Subset:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<p><strong>BitMasking:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<p><strong>Longest Common Subsequence Variant:</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<p><strong>Coin Change variant:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<p><strong>Matrix multiplication variant:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<p><strong>Depth First Search + DP:</strong><br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<p><strong>Misc:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
<hr>
<h1 id="sample-solutions-for-each-of-above-problem-type">Sample solutions for each of above problem type:</h1>
<hr>
<p><strong>Longest Increasing Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;LIS(n+1, 1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">				if (nums[i] &gt; nums[j])
</span></span><span class="line"><span class="cl">					LIS[i] = max(LIS[i], 1 + LIS[j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int ans = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			ans = max(ans, LIS[i]);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return ans;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Partition Subset Sum:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartition(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % 2 != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/2;
</span></span><span class="line"><span class="cl">		vector&lt;bool&gt;dp(target+1, false);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = true;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = target; j &gt;= nums[i]; j--) {
</span></span><span class="line"><span class="cl">				dp[j] = dp[j] | dp[j - nums[i]];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[target];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>BitMasking in DP:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int dp[(1&lt;&lt;16) + 2];
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		fill(dp, dp+(1&lt;&lt;16)+2, -1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % k != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = 0;
</span></span><span class="line"><span class="cl">		for (int mask = 0; mask &lt; (1&lt;&lt;n); mask++) {
</span></span><span class="line"><span class="cl">			if (dp[mask] == -1) continue;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">				if (!(mask &amp; (1 &lt;&lt; i)) &amp;&amp; dp[mask] + nums[i] &lt;= target)
</span></span><span class="line"><span class="cl">					dp[mask | (1 &lt;&lt; i)] = (dp[mask] + nums[i]) % target;
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[(1&lt;&lt;n)-1] == 0;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Longest Common Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) {
</span></span><span class="line"><span class="cl">		if (n == 0 || m == 0)
</span></span><span class="line"><span class="cl">			return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;L(n+1, vector&lt;int&gt;(m+1, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt;= n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt;= m; j++) {
</span></span><span class="line"><span class="cl">				if (i == 0 || j == 0)
</span></span><span class="line"><span class="cl">					L[i][j] = 0;
</span></span><span class="line"><span class="cl">				else if (text1[i-1] == text2[j-1])
</span></span><span class="line"><span class="cl">					L[i][j] = 1 + L[i-1][j-1];
</span></span><span class="line"><span class="cl">				else
</span></span><span class="line"><span class="cl">					L[i][j] = max(L[i][j-1], L[i-1][j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return L[n][m];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int longestCommonSubsequence(string text1, string text2) {
</span></span><span class="line"><span class="cl">		int n = text1.size();
</span></span><span class="line"><span class="cl">		int m = text2.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return longestCommonSubsequenceUtil(text1, text2, n, m);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span><span class="lnt" id="hl-4-32"><a class="lnlinks" href="#hl-4-32">32</a>
</span><span class="lnt" id="hl-4-33"><a class="lnlinks" href="#hl-4-33">33</a>
</span><span class="lnt" id="hl-4-34"><a class="lnlinks" href="#hl-4-34">34</a>
</span><span class="lnt" id="hl-4-35"><a class="lnlinks" href="#hl-4-35">35</a>
</span><span class="lnt" id="hl-4-36"><a class="lnlinks" href="#hl-4-36">36</a>
</span><span class="lnt" id="hl-4-37"><a class="lnlinks" href="#hl-4-37">37</a>
</span><span class="lnt" id="hl-4-38"><a class="lnlinks" href="#hl-4-38">38</a>
</span><span class="lnt" id="hl-4-39"><a class="lnlinks" href="#hl-4-39">39</a>
</span><span class="lnt" id="hl-4-40"><a class="lnlinks" href="#hl-4-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minCut(string s) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = s.length();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n];
</span></span><span class="line"><span class="cl">		bool P[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			P[i][i] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n-L+1; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L-1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				if (L == 2) {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]);
</span></span><span class="line"><span class="cl">				} else {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]) &amp;&amp; P[i+1][j-1];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			if (P[0][i])
</span></span><span class="line"><span class="cl">				res[i] = 0;
</span></span><span class="line"><span class="cl">			else {
</span></span><span class="line"><span class="cl">				res[i] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">					if (P[j+1][i] &amp;&amp; res[i] &gt; 1 + res[j])
</span></span><span class="line"><span class="cl">						res[i] = 1+res[j];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[n-1] == INT_MAX ? 1 : res[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Coin Change:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int coinChange(vector&lt;int&gt;&amp; coins, int amount) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = coins.size();
</span></span><span class="line"><span class="cl">		if (n == 0) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;res(amount+1, INT_MAX);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		res[0] = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j =  coins[i]; j &lt;= amount; j++) {
</span></span><span class="line"><span class="cl">				if (res[j-coins[i]] != INT_MAX)
</span></span><span class="line"><span class="cl">					res[j] = min(res[j], 1+res[j-coins[i]]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[amount] != INT_MAX ? res[amount] : -1;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix multiplication:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minScoreTriangulation(vector&lt;int&gt;&amp; A) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = A.size();        
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;dp(n, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+L &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L;
</span></span><span class="line"><span class="cl">				dp[i][j] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int k = i+1; k &lt; j; k++) {
</span></span><span class="line"><span class="cl">					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	vector&lt;vector&lt;int&gt;&gt; matrixBlockSum(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int m = mat.size();
</span></span><span class="line"><span class="cl">		int n = mat[0].size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;sum(m+1, vector&lt;int&gt;(n+1, 0));
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt;= m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 1; j &lt;= n; j++) {
</span></span><span class="line"><span class="cl">				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;res(m, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl">				int r1 = max(0, i-K); int c1 = max(0, j-K);
</span></span><span class="line"><span class="cl">				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);
</span></span><span class="line"><span class="cl">				r1++; r2++;
</span></span><span class="line"><span class="cl">				c1++; c2++;
</span></span><span class="line"><span class="cl">				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">		unordered_map&lt;int, int&gt;hm;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		hm[0] = 1;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			auto mp = hm;
</span></span><span class="line"><span class="cl">			hm.clear();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			for (auto it = mp.begin(); it != mp.end(); it++) {
</span></span><span class="line"><span class="cl">				hm[it-&gt;first + nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">				hm[it-&gt;first - nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return hm[S];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = prices.size();
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;buy(n, 0);
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;sell(n, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		buy[0] = -prices[0], sell[0] = 0;
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);
</span></span><span class="line"><span class="cl">			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return sell[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>Depth First Search +DP:<br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span><span class="lnt" id="hl-10-22"><a class="lnlinks" href="#hl-10-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int mod = 1000000007;
</span></span><span class="line"><span class="cl">	int dfs(int m, int n, int N, int r, int c,  vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) {
</span></span><span class="line"><span class="cl">		if (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n) return 1;
</span></span><span class="line"><span class="cl">		if (N == 0) return 0;
</span></span><span class="line"><span class="cl">		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int moves = 0;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[N][r][c] = moves%mod;
</span></span><span class="line"><span class="cl">		return dp[N][r][c];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findPaths(int m, int n, int N, int i, int j) {
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;dp(N+1, vector&lt;vector&lt;int&gt;&gt;(m+1, vector&lt;int&gt;(n+1, -1)));
</span></span><span class="line"><span class="cl">		return dfs(m, n, N, i, j, dp);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span><span class="lnt" id="hl-11-21"><a class="lnlinks" href="#hl-11-21">21</a>
</span><span class="lnt" id="hl-11-22"><a class="lnlinks" href="#hl-11-22">22</a>
</span><span class="lnt" id="hl-11-23"><a class="lnlinks" href="#hl-11-23">23</a>
</span><span class="lnt" id="hl-11-24"><a class="lnlinks" href="#hl-11-24">24</a>
</span><span class="lnt" id="hl-11-25"><a class="lnlinks" href="#hl-11-25">25</a>
</span><span class="lnt" id="hl-11-26"><a class="lnlinks" href="#hl-11-26">26</a>
</span><span class="lnt" id="hl-11-27"><a class="lnlinks" href="#hl-11-27">27</a>
</span><span class="lnt" id="hl-11-28"><a class="lnlinks" href="#hl-11-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool PredictTheWinner(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			res[i][i] = nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int l = 2; l &lt;= n; l++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+l-1 &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+l-1;
</span></span><span class="line"><span class="cl">				int a = (i+1 &lt;= j-1) ? res[i+1][j-1] : 0;
</span></span><span class="line"><span class="cl">				int b = (i+2 &lt;= j) ? res[i+2][j] : 0;
</span></span><span class="line"><span class="cl">				int c = (i &lt;= j-2) ? res[i][j-2] : 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int total = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			total += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[0][n-1] &gt;= total - res[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Miscellaneous:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Graph For Beginners</title>
      <link>https://samirpaulb.github.io/posts/graph-for-beginners/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/graph-for-beginners/</guid>
      <description>Graph For Beginners</description>
      <content:encoded><![CDATA[<p><strong>Graph Problems For Practice</strong></p>
<p>Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.</p>
<p>List: <a href="https://leetcode.com/list/x1wy4de7">https://leetcode.com/list/x1wy4de7</a></p>
<ol>
<li>
<p><strong>Union Find:</strong></p>
<p>Identify if problems talks about finding groups or components.</p>
<p><a href="https://leetcode.com/problems/friend-circles/">https://leetcode.com/problems/friend-circles/</a><br>
<a href="https://leetcode.com/problems/redundant-connection/">https://leetcode.com/problems/redundant-connection/</a><br>
<a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a><br>
<a href="https://leetcode.com/problems/number-of-operations-to-make-network-connected/">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a><br>
<a href="https://leetcode.com/problems/satisfiability-of-equality-equations/">https://leetcode.com/problems/satisfiability-of-equality-equations/</a><br>
<a href="https://leetcode.com/problems/accounts-merge/">https://leetcode.com/problems/accounts-merge/</a></p>
<p>All the above problems can be solved by Union Find algorithm with minor tweaks.<br>
Below is a standard template for union find problems.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt;parent;
</span></span><span class="line"><span class="cl"> 	int find(int x) {
</span></span><span class="line"><span class="cl"> 		return parent[x] == x ? x : find(parent[x]);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int n = edges.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		parent.resize(n+1, 0);
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt;= n; i++)
</span></span><span class="line"><span class="cl"> 			parent[i] = i;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res(2, 0);
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl"> 			int x = find(edges[i][0]);
</span></span><span class="line"><span class="cl"> 			int y = find(edges[i][1]);
</span></span><span class="line"><span class="cl"> 			if (x != y)
</span></span><span class="line"><span class="cl"> 				parent[y] = x;
</span></span><span class="line"><span class="cl"> 			else {
</span></span><span class="line"><span class="cl"> 				res[0] = edges[i][0];
</span></span><span class="line"><span class="cl"> 				res[1] = edges[i][1];
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Depth First Search</strong></p>
<ol>
<li>
<p><strong>Start DFS from nodes at boundary:</strong><br>
<a href="https://leetcode.com/problems/surrounded-regions/">https://leetcode.com/problems/surrounded-regions/</a><br>
<a href="https://leetcode.com/problems/number-of-enclaves/">https://leetcode.com/problems/number-of-enclaves/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span><span class="lnt" id="hl-1-35"><a class="lnlinks" href="#hl-1-35">35</a>
</span><span class="lnt" id="hl-1-36"><a class="lnlinks" href="#hl-1-36">36</a>
</span><span class="lnt" id="hl-1-37"><a class="lnlinks" href="#hl-1-37">37</a>
</span><span class="lnt" id="hl-1-38"><a class="lnlinks" href="#hl-1-38">38</a>
</span><span class="lnt" id="hl-1-39"><a class="lnlinks" href="#hl-1-39">39</a>
</span><span class="lnt" id="hl-1-40"><a class="lnlinks" href="#hl-1-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	int rows, cols;
</span></span><span class="line"><span class="cl"> 	void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; A, int i, int j) {
</span></span><span class="line"><span class="cl"> 		if (i &lt; 0 || j &lt; 0 || i &gt;= rows || j &gt;= cols)
</span></span><span class="line"><span class="cl"> 			return;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (A[i][j] != 1) 
</span></span><span class="line"><span class="cl"> 			return;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		A[i][j] = -1;
</span></span><span class="line"><span class="cl"> 		dfs(A, i+1, j);
</span></span><span class="line"><span class="cl"> 		dfs(A, i-1, j);
</span></span><span class="line"><span class="cl"> 		dfs(A, i, j+1);
</span></span><span class="line"><span class="cl"> 		dfs(A, i, j-1);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	int numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; A) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (A.empty()) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		rows = A.size();
</span></span><span class="line"><span class="cl"> 		cols = A[0].size();
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl"> 				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)
</span></span><span class="line"><span class="cl"> 					dfs(A, i, j);
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int ans = 0;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl"> 				if (A[i][j] == 1)
</span></span><span class="line"><span class="cl"> 					ans++;
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return ans;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Time taken to reach all nodes or share information to all graph nodes:</strong><br>
<a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	void dfs(unordered_map&lt;int, vector&lt;int&gt;&gt;&amp;hm, int i, vector&lt;int&gt;&amp; informTime, int &amp;res, int curr) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		curr += informTime[i];
</span></span><span class="line"><span class="cl"> 		res = max(res, curr);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = hm[i].begin(); it != hm[i].end(); it++)
</span></span><span class="line"><span class="cl"> 			dfs(hm, *it, informTime, res, curr);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	int numOfMinutes(int n, int headID, vector&lt;int&gt;&amp; manager, vector&lt;int&gt;&amp; informTime) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		unordered_map&lt;int, vector&lt;int&gt;&gt;hm;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl"> 			if (manager[i] != -1) hm[manager[i]].push_back(i);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int res = 0, curr = 0;
</span></span><span class="line"><span class="cl"> 		dfs(hm, headID, informTime, res, curr);
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> };
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>DFS from each unvisited node/Island problems</strong><br>
<a href="https://leetcode.com/problems/number-of-closed-islands/">https://leetcode.com/problems/number-of-closed-islands/</a><br>
<a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a><br>
<a href="https://leetcode.com/problems/keys-and-rooms/">https://leetcode.com/problems/keys-and-rooms/</a><br>
<a href="https://leetcode.com/problems/max-area-of-island/">https://leetcode.com/problems/max-area-of-island/</a><br>
<a href="https://leetcode.com/problems/flood-fill/">https://leetcode.com/problems/flood-fill/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span><span class="lnt" id="hl-3-30"><a class="lnlinks" href="#hl-3-30">30</a>
</span><span class="lnt" id="hl-3-31"><a class="lnlinks" href="#hl-3-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int i, int j, int m, int n) {
</span></span><span class="line"><span class="cl"> 		if (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return;
</span></span><span class="line"><span class="cl"> 		if (grid[i][j] == &#39;0&#39; || visited[i][j]) return;
</span></span><span class="line"><span class="cl"> 		visited[i][j] = true;
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i+1, j, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i, j+1, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i-1, j, m, n);
</span></span><span class="line"><span class="cl"> 		dfs(grid, visited, i, j-1, m, n);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 	int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {
</span></span><span class="line"><span class="cl"> 		if (grid.empty()) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int m = grid.size();
</span></span><span class="line"><span class="cl"> 		int n = grid[0].size();
</span></span><span class="line"><span class="cl"> 		vector&lt;vector&lt;bool&gt;&gt;visited(m, vector&lt;bool&gt;(n, false));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int res = 0;
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; m; i++) {
</span></span><span class="line"><span class="cl"> 			for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl"> 				if (grid[i][j] == &#39;1&#39; &amp;&amp; !visited[i][j]) {
</span></span><span class="line"><span class="cl"> 					dfs(grid, visited, i, j, m, n);
</span></span><span class="line"><span class="cl"> 					res++;
</span></span><span class="line"><span class="cl"> 				}
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> 	};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Cycle Find:</strong><br>
<a href="https://leetcode.com/problems/find-eventual-safe-states/">https://leetcode.com/problems/find-eventual-safe-states/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	bool dfs(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int v, vector&lt;int&gt;&amp; dp) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (dp[v])
</span></span><span class="line"><span class="cl"> 			return dp[v] == 1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		dp[v] = -1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = graph[v].begin(); it != graph[v].end(); it++)
</span></span><span class="line"><span class="cl"> 			if (!dfs(graph, *it, dp))
</span></span><span class="line"><span class="cl"> 				return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		dp[v] = 1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return true;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl"> public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int V = graph.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res;
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;dp(V, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {    
</span></span><span class="line"><span class="cl"> 			if (dfs(graph, i, dp))
</span></span><span class="line"><span class="cl"> 				res.push_back(i);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span></code></pre></td></tr></table>
</div>
</div><p>};</p>
</li>
</ol>
</li>
<li>
<p><strong>Breadth First Search</strong></p>
<ol>
<li>
<p><strong>Shortest Path:</strong><br>
<a href="https://leetcode.com/problems/01-matrix/">https://leetcode.com/problems/01-matrix/</a><br>
<a href="https://leetcode.com/problems/as-far-from-land-as-possible/">https://leetcode.com/problems/as-far-from-land-as-possible/</a><br>
<a href="https://leetcode.com/problems/rotting-oranges/">https://leetcode.com/problems/rotting-oranges/</a><br>
<a href="https://leetcode.com/problems/shortest-path-in-binary-matrix/">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></p>
<p>Start BFS from nodes from which shortest path is asked for.<br>
Below is the sample BFS approach to find the path.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span><span class="lnt" id="hl-5-22"><a class="lnlinks" href="#hl-5-22">22</a>
</span><span class="lnt" id="hl-5-23"><a class="lnlinks" href="#hl-5-23">23</a>
</span><span class="lnt" id="hl-5-24"><a class="lnlinks" href="#hl-5-24">24</a>
</span><span class="lnt" id="hl-5-25"><a class="lnlinks" href="#hl-5-25">25</a>
</span><span class="lnt" id="hl-5-26"><a class="lnlinks" href="#hl-5-26">26</a>
</span><span class="lnt" id="hl-5-27"><a class="lnlinks" href="#hl-5-27">27</a>
</span><span class="lnt" id="hl-5-28"><a class="lnlinks" href="#hl-5-28">28</a>
</span><span class="lnt" id="hl-5-29"><a class="lnlinks" href="#hl-5-29">29</a>
</span><span class="lnt" id="hl-5-30"><a class="lnlinks" href="#hl-5-30">30</a>
</span><span class="lnt" id="hl-5-31"><a class="lnlinks" href="#hl-5-31">31</a>
</span><span class="lnt" id="hl-5-32"><a class="lnlinks" href="#hl-5-32">32</a>
</span><span class="lnt" id="hl-5-33"><a class="lnlinks" href="#hl-5-33">33</a>
</span><span class="lnt" id="hl-5-34"><a class="lnlinks" href="#hl-5-34">34</a>
</span><span class="lnt" id="hl-5-35"><a class="lnlinks" href="#hl-5-35">35</a>
</span><span class="lnt" id="hl-5-36"><a class="lnlinks" href="#hl-5-36">36</a>
</span><span class="lnt" id="hl-5-37"><a class="lnlinks" href="#hl-5-37">37</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">	vector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (matrix.empty()) return matrix;
</span></span><span class="line"><span class="cl">		int rows = matrix.size();
</span></span><span class="line"><span class="cl">		int cols = matrix[0].size();
</span></span><span class="line"><span class="cl">		queue&lt;pair&lt;int, int&gt;&gt;pq;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; rows; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; cols; j++) {
</span></span><span class="line"><span class="cl">				if (matrix[i][j] == 0) {
</span></span><span class="line"><span class="cl">					pq.push({i-1, j}), pq.push({i+1, j}), pq.push({i, j-1}), pq.push({i, j+1}); 
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;bool&gt;&gt;visited(rows, vector&lt;bool&gt;(cols, false));
</span></span><span class="line"><span class="cl">		int steps = 0;
</span></span><span class="line"><span class="cl">		while (!pq.empty()) {
</span></span><span class="line"><span class="cl">			steps++;
</span></span><span class="line"><span class="cl">			int size = pq.size();
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; size; i++) {
</span></span><span class="line"><span class="cl">				auto front = pq.front();
</span></span><span class="line"><span class="cl">				int l = front.first;
</span></span><span class="line"><span class="cl">				int r = front.second;
</span></span><span class="line"><span class="cl">				pq.pop();
</span></span><span class="line"><span class="cl">				if (l &gt;= 0 &amp;&amp; r &gt;= 0 &amp;&amp; l &lt; rows &amp;&amp; r &lt; cols &amp;&amp; !visited[l][r] &amp;&amp; matrix[l][r] == 1) {
</span></span><span class="line"><span class="cl">					visited[l][r] = true;
</span></span><span class="line"><span class="cl">					matrix[l][r] = steps;
</span></span><span class="line"><span class="cl">					pq.push({l-1, r}), pq.push({l+1, r}), pq.push({l, r-1}), pq.push({l, r+1});
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return matrix;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
</li>
<li>
<p><strong>Graph coloring/Bipartition</strong><br>
<a href="https://leetcode.com/problems/possible-bipartition/">https://leetcode.com/problems/possible-bipartition/</a><br>
<a href="https://leetcode.com/problems/is-graph-bipartite/">https://leetcode.com/problems/is-graph-bipartite/</a></p>
<p>Problems asks to check if its possible to divide the graph nodes into 2 groups<br>
Apply BFS for same. Below is a sample graph coloring approach.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span><span class="lnt" id="hl-6-21"><a class="lnlinks" href="#hl-6-21">21</a>
</span><span class="lnt" id="hl-6-22"><a class="lnlinks" href="#hl-6-22">22</a>
</span><span class="lnt" id="hl-6-23"><a class="lnlinks" href="#hl-6-23">23</a>
</span><span class="lnt" id="hl-6-24"><a class="lnlinks" href="#hl-6-24">24</a>
</span><span class="lnt" id="hl-6-25"><a class="lnlinks" href="#hl-6-25">25</a>
</span><span class="lnt" id="hl-6-26"><a class="lnlinks" href="#hl-6-26">26</a>
</span><span class="lnt" id="hl-6-27"><a class="lnlinks" href="#hl-6-27">27</a>
</span><span class="lnt" id="hl-6-28"><a class="lnlinks" href="#hl-6-28">28</a>
</span><span class="lnt" id="hl-6-29"><a class="lnlinks" href="#hl-6-29">29</a>
</span><span class="lnt" id="hl-6-30"><a class="lnlinks" href="#hl-6-30">30</a>
</span><span class="lnt" id="hl-6-31"><a class="lnlinks" href="#hl-6-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 		bool isBipartite(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {
</span></span><span class="line"><span class="cl"> 			int n = graph.size();
</span></span><span class="line"><span class="cl"> 			vector&lt;int&gt;color(n, -1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 			for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl"> 				if (color[i] != -1) continue;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 				color[i] = 1;
</span></span><span class="line"><span class="cl"> 				queue&lt;int&gt;q;
</span></span><span class="line"><span class="cl"> 				q.push(i);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 				while (!q.empty()) {
</span></span><span class="line"><span class="cl"> 					int t = q.front();
</span></span><span class="line"><span class="cl"> 					q.pop();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 					for (int j = 0; j &lt; graph[t].size(); j++) {
</span></span><span class="line"><span class="cl"> 						if (color[graph[t][j]] == -1) {
</span></span><span class="line"><span class="cl"> 							color[graph[t][j]] = 1-color[t];
</span></span><span class="line"><span class="cl"> 							q.push(graph[t][j]);
</span></span><span class="line"><span class="cl"> 						} else if (color[graph[t][j]] == color[t]) {
</span></span><span class="line"><span class="cl"> 							return false;
</span></span><span class="line"><span class="cl"> 						}
</span></span><span class="line"><span class="cl"> 					}
</span></span><span class="line"><span class="cl"> 				}
</span></span><span class="line"><span class="cl"> 			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 			return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl"> 	};
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Topological Sort:</strong><br>
Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0</p>
<p><a href="https://leetcode.com/problems/course-schedule/">https://leetcode.com/problems/course-schedule/</a><br>
<a href="https://leetcode.com/problems/course-schedule-ii/">https://leetcode.com/problems/course-schedule-ii/</a></p>
<p>Below is sample approach. Find if cycle is present, if not apply topological sort.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span><span class="lnt" id="hl-7-30"><a class="lnlinks" href="#hl-7-30">30</a>
</span><span class="lnt" id="hl-7-31"><a class="lnlinks" href="#hl-7-31">31</a>
</span><span class="lnt" id="hl-7-32"><a class="lnlinks" href="#hl-7-32">32</a>
</span><span class="lnt" id="hl-7-33"><a class="lnlinks" href="#hl-7-33">33</a>
</span><span class="lnt" id="hl-7-34"><a class="lnlinks" href="#hl-7-34">34</a>
</span><span class="lnt" id="hl-7-35"><a class="lnlinks" href="#hl-7-35">35</a>
</span><span class="lnt" id="hl-7-36"><a class="lnlinks" href="#hl-7-36">36</a>
</span><span class="lnt" id="hl-7-37"><a class="lnlinks" href="#hl-7-37">37</a>
</span><span class="lnt" id="hl-7-38"><a class="lnlinks" href="#hl-7-38">38</a>
</span><span class="lnt" id="hl-7-39"><a class="lnlinks" href="#hl-7-39">39</a>
</span><span class="lnt" id="hl-7-40"><a class="lnlinks" href="#hl-7-40">40</a>
</span><span class="lnt" id="hl-7-41"><a class="lnlinks" href="#hl-7-41">41</a>
</span><span class="lnt" id="hl-7-42"><a class="lnlinks" href="#hl-7-42">42</a>
</span><span class="lnt" id="hl-7-43"><a class="lnlinks" href="#hl-7-43">43</a>
</span><span class="lnt" id="hl-7-44"><a class="lnlinks" href="#hl-7-44">44</a>
</span><span class="lnt" id="hl-7-45"><a class="lnlinks" href="#hl-7-45">45</a>
</span><span class="lnt" id="hl-7-46"><a class="lnlinks" href="#hl-7-46">46</a>
</span><span class="lnt" id="hl-7-47"><a class="lnlinks" href="#hl-7-47">47</a>
</span><span class="lnt" id="hl-7-48"><a class="lnlinks" href="#hl-7-48">48</a>
</span><span class="lnt" id="hl-7-49"><a class="lnlinks" href="#hl-7-49">49</a>
</span><span class="lnt" id="hl-7-50"><a class="lnlinks" href="#hl-7-50">50</a>
</span><span class="lnt" id="hl-7-51"><a class="lnlinks" href="#hl-7-51">51</a>
</span><span class="lnt" id="hl-7-52"><a class="lnlinks" href="#hl-7-52">52</a>
</span><span class="lnt" id="hl-7-53"><a class="lnlinks" href="#hl-7-53">53</a>
</span><span class="lnt" id="hl-7-54"><a class="lnlinks" href="#hl-7-54">54</a>
</span><span class="lnt" id="hl-7-55"><a class="lnlinks" href="#hl-7-55">55</a>
</span><span class="lnt" id="hl-7-56"><a class="lnlinks" href="#hl-7-56">56</a>
</span><span class="lnt" id="hl-7-57"><a class="lnlinks" href="#hl-7-57">57</a>
</span><span class="lnt" id="hl-7-58"><a class="lnlinks" href="#hl-7-58">58</a>
</span><span class="lnt" id="hl-7-59"><a class="lnlinks" href="#hl-7-59">59</a>
</span><span class="lnt" id="hl-7-60"><a class="lnlinks" href="#hl-7-60">60</a>
</span><span class="lnt" id="hl-7-61"><a class="lnlinks" href="#hl-7-61">61</a>
</span><span class="lnt" id="hl-7-62"><a class="lnlinks" href="#hl-7-62">62</a>
</span><span class="lnt" id="hl-7-63"><a class="lnlinks" href="#hl-7-63">63</a>
</span><span class="lnt" id="hl-7-64"><a class="lnlinks" href="#hl-7-64">64</a>
</span><span class="lnt" id="hl-7-65"><a class="lnlinks" href="#hl-7-65">65</a>
</span><span class="lnt" id="hl-7-66"><a class="lnlinks" href="#hl-7-66">66</a>
</span><span class="lnt" id="hl-7-67"><a class="lnlinks" href="#hl-7-67">67</a>
</span><span class="lnt" id="hl-7-68"><a class="lnlinks" href="#hl-7-68">68</a>
</span><span class="lnt" id="hl-7-69"><a class="lnlinks" href="#hl-7-69">69</a>
</span><span class="lnt" id="hl-7-70"><a class="lnlinks" href="#hl-7-70">70</a>
</span><span class="lnt" id="hl-7-71"><a class="lnlinks" href="#hl-7-71">71</a>
</span><span class="lnt" id="hl-7-72"><a class="lnlinks" href="#hl-7-72">72</a>
</span><span class="lnt" id="hl-7-73"><a class="lnlinks" href="#hl-7-73">73</a>
</span><span class="lnt" id="hl-7-74"><a class="lnlinks" href="#hl-7-74">74</a>
</span><span class="lnt" id="hl-7-75"><a class="lnlinks" href="#hl-7-75">75</a>
</span><span class="lnt" id="hl-7-76"><a class="lnlinks" href="#hl-7-76">76</a>
</span><span class="lnt" id="hl-7-77"><a class="lnlinks" href="#hl-7-77">77</a>
</span><span class="lnt" id="hl-7-78"><a class="lnlinks" href="#hl-7-78">78</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> class Solution {
</span></span><span class="line"><span class="cl"> 	int V;
</span></span><span class="line"><span class="cl"> 	list&lt;int&gt;*adj;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	bool isCyclicUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;bool&gt;&amp;recStack) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		visited[v] = true;
</span></span><span class="line"><span class="cl"> 		recStack[v] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = adj[v].begin(); it != adj[v].end(); it++) {
</span></span><span class="line"><span class="cl"> 			if (!visited[*it] &amp;&amp; isCyclicUtil(*it, visited, recStack))
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 			else if (recStack[*it])
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		recStack[v] = false;
</span></span><span class="line"><span class="cl"> 		return false;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	bool isCyclic() {
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;visited(V, false);
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;recStack(V, false);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (isCyclicUtil(i, visited, recStack))
</span></span><span class="line"><span class="cl"> 				return true;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return false;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	void topologicalSortUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;int&gt;&amp; res) {
</span></span><span class="line"><span class="cl"> 		visited[v] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (auto it = adj[v].begin(); it != adj[v].end(); it++)
</span></span><span class="line"><span class="cl"> 			if (!visited[*it])
</span></span><span class="line"><span class="cl"> 				topologicalSortUtil(*it, visited, res);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		res.push_back(v);
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt;topologicalSort(int v) {
</span></span><span class="line"><span class="cl"> 		vector&lt;int&gt;res;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		vector&lt;bool&gt;visited(V, false);
</span></span><span class="line"><span class="cl"> 		topologicalSortUtil(v, visited, res);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (!visited[i])
</span></span><span class="line"><span class="cl"> 				topologicalSortUtil(i, visited, res);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return res;
</span></span><span class="line"><span class="cl"> 	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 	public:
</span></span><span class="line"><span class="cl"> 	vector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {
</span></span><span class="line"><span class="cl"> 		V = numCourses;
</span></span><span class="line"><span class="cl"> 		adj = new list&lt;int&gt;[V];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		unordered_map&lt;int, vector&lt;int&gt;&gt;hm;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		for (int i = 0; i &lt; prerequisites.size(); i++) {
</span></span><span class="line"><span class="cl"> 			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
</span></span><span class="line"><span class="cl"> 			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		if (isCyclic()) return vector&lt;int&gt;();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		int i = 0;
</span></span><span class="line"><span class="cl"> 		for (i = 0; i &lt; V; i++) {
</span></span><span class="line"><span class="cl"> 			if (hm.find(i) == hm.end())
</span></span><span class="line"><span class="cl"> 				break;
</span></span><span class="line"><span class="cl"> 		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 		return topologicalSort(i);
</span></span><span class="line"><span class="cl"> 	}
</span></span></code></pre></td></tr></table>
</div>
</div><p>};</p>
</li>
<li>
<p><strong>Find Shortest Path (Dijkstra&rsquo;s/Bellman Ford)</strong><br>
<a href="https://leetcode.com/problems/network-delay-time/">https://leetcode.com/problems/network-delay-time/</a></p>
<p><strong>Dijkstras and Bellman Ford:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span><span class="lnt" id="hl-8-45"><a class="lnlinks" href="#hl-8-45">45</a>
</span><span class="lnt" id="hl-8-46"><a class="lnlinks" href="#hl-8-46">46</a>
</span><span class="lnt" id="hl-8-47"><a class="lnlinks" href="#hl-8-47">47</a>
</span><span class="lnt" id="hl-8-48"><a class="lnlinks" href="#hl-8-48">48</a>
</span><span class="lnt" id="hl-8-49"><a class="lnlinks" href="#hl-8-49">49</a>
</span><span class="lnt" id="hl-8-50"><a class="lnlinks" href="#hl-8-50">50</a>
</span><span class="lnt" id="hl-8-51"><a class="lnlinks" href="#hl-8-51">51</a>
</span><span class="lnt" id="hl-8-52"><a class="lnlinks" href="#hl-8-52">52</a>
</span><span class="lnt" id="hl-8-53"><a class="lnlinks" href="#hl-8-53">53</a>
</span><span class="lnt" id="hl-8-54"><a class="lnlinks" href="#hl-8-54">54</a>
</span><span class="lnt" id="hl-8-55"><a class="lnlinks" href="#hl-8-55">55</a>
</span><span class="lnt" id="hl-8-56"><a class="lnlinks" href="#hl-8-56">56</a>
</span><span class="lnt" id="hl-8-57"><a class="lnlinks" href="#hl-8-57">57</a>
</span><span class="lnt" id="hl-8-58"><a class="lnlinks" href="#hl-8-58">58</a>
</span><span class="lnt" id="hl-8-59"><a class="lnlinks" href="#hl-8-59">59</a>
</span><span class="lnt" id="hl-8-60"><a class="lnlinks" href="#hl-8-60">60</a>
</span><span class="lnt" id="hl-8-61"><a class="lnlinks" href="#hl-8-61">61</a>
</span><span class="lnt" id="hl-8-62"><a class="lnlinks" href="#hl-8-62">62</a>
</span><span class="lnt" id="hl-8-63"><a class="lnlinks" href="#hl-8-63">63</a>
</span><span class="lnt" id="hl-8-64"><a class="lnlinks" href="#hl-8-64">64</a>
</span><span class="lnt" id="hl-8-65"><a class="lnlinks" href="#hl-8-65">65</a>
</span><span class="lnt" id="hl-8-66"><a class="lnlinks" href="#hl-8-66">66</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">		int networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt;pq;
</span></span><span class="line"><span class="cl">			vector&lt;int&gt;dist(N+1, INT_MAX);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			pq.push(make_pair(0, K));
</span></span><span class="line"><span class="cl">			dist[K] = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			unordered_map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt;hm;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; times.size(); i++)
</span></span><span class="line"><span class="cl">				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			while (!pq.empty()) {
</span></span><span class="line"><span class="cl">				pair&lt;int, int&gt;p = pq.top();
</span></span><span class="line"><span class="cl">				pq.pop();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				int u = p.second;
</span></span><span class="line"><span class="cl">				for (auto it = hm[u].begin(); it != hm[u].end(); it++) {
</span></span><span class="line"><span class="cl">					int v = it-&gt;first;
</span></span><span class="line"><span class="cl">					int w = it-&gt;second;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					if (dist[v] &gt; dist[u] + w) {
</span></span><span class="line"><span class="cl">						dist[v] = dist[u] + w;
</span></span><span class="line"><span class="cl">						pq.push(make_pair(dist[v], v));
</span></span><span class="line"><span class="cl">					}
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			int res = 0;
</span></span><span class="line"><span class="cl">			for (int i = 1; i &lt;= N; i++)
</span></span><span class="line"><span class="cl">				res = max(res, dist[i]);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			return res == INT_MAX ? -1 : res;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	};
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	class Solution {
</span></span><span class="line"><span class="cl">	public:
</span></span><span class="line"><span class="cl">		int networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			int n = times.size();
</span></span><span class="line"><span class="cl">			if (!n) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			vector&lt;int&gt;dist(N+1, INT_MAX);
</span></span><span class="line"><span class="cl">			int res = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			dist[K] = 0;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; N; i++) {
</span></span><span class="line"><span class="cl">				for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl">					int u = times[j][0];
</span></span><span class="line"><span class="cl">					int v = times[j][1];
</span></span><span class="line"><span class="cl">					int w = times[j][2];
</span></span><span class="line"><span class="cl">					if (dist[u] != INT_MAX &amp;&amp; dist[u] + w &lt; dist[v])
</span></span><span class="line"><span class="cl">						dist[v] = w + dist[u];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			for (int i = 1; i &lt;= N; i++)
</span></span><span class="line"><span class="cl">				res = max(res, dist[i]);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			return res == INT_MAX ? -1 : res;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	}
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:<br>
(Updated on 14th June &lsquo;20)</p>
<p><strong>Union Find:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/friend-circles/">https://leetcode.com/problems/friend-circles/</a></li>
<li><a href="https://leetcode.com/problems/redundant-connection/">https://leetcode.com/problems/redundant-connection/</a></li>
<li><a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></li>
<li><a href="https://leetcode.com/problems/number-of-operations-to-make-network-connected/">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></li>
<li><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/">https://leetcode.com/problems/satisfiability-of-equality-equations/</a></li>
<li><a href="https://leetcode.com/problems/accounts-merge/">https://leetcode.com/problems/accounts-merge/</a></li>
<li><a href="https://leetcode.com/problems/connecting-cities-with-minimum-cost/">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></li>
</ol>
<p><strong>DFS:</strong><br>
DFS from boundary:</p>
<ol>
<li><a href="https://leetcode.com/problems/surrounded-regions/">https://leetcode.com/problems/surrounded-regions/</a></li>
<li><a href="https://leetcode.com/problems/number-of-enclaves/">https://leetcode.com/problems/number-of-enclaves/</a></li>
</ol>
<p>Shortest time:</p>
<ol>
<li><a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></li>
</ol>
<p>Islands Variants</p>
<ol>
<li><a href="https://leetcode.com/problems/number-of-closed-islands/">https://leetcode.com/problems/number-of-closed-islands/</a></li>
<li><a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a></li>
<li><a href="https://leetcode.com/problems/keys-and-rooms/">https://leetcode.com/problems/keys-and-rooms/</a></li>
<li><a href="https://leetcode.com/problems/max-area-of-island/">https://leetcode.com/problems/max-area-of-island/</a></li>
<li><a href="https://leetcode.com/problems/flood-fill/">https://leetcode.com/problems/flood-fill/</a></li>
<li><a href="https://leetcode.com/problems/coloring-a-border/">https://leetcode.com/problems/coloring-a-border/</a></li>
</ol>
<p>Hash/DFS:</p>
<ol>
<li><a href="https://leetcode.com/problems/employee-importance/">https://leetcode.com/problems/employee-importance/</a></li>
<li><a href="https://leetcode.com/problems/find-the-town-judge/">https://leetcode.com/problems/find-the-town-judge/</a></li>
</ol>
<p>Cycle Find:</p>
<ol>
<li><a href="https://leetcode.com/problems/find-eventual-safe-states/">https://leetcode.com/problems/find-eventual-safe-states/</a></li>
</ol>
<p><strong>BFS:</strong><br>
BFS for shortest path:</p>
<ol>
<li><a href="https://leetcode.com/problems/01-matrix/">https://leetcode.com/problems/01-matrix/</a></li>
<li><a href="https://leetcode.com/problems/as-far-from-land-as-possible/">https://leetcode.com/problems/as-far-from-land-as-possible/</a></li>
<li><a href="https://leetcode.com/problems/rotting-oranges/">https://leetcode.com/problems/rotting-oranges/</a></li>
<li><a href="https://leetcode.com/problems/shortest-path-in-binary-matrix/">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></li>
</ol>
<p><strong>Graph coloring:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/possible-bipartition/">https://leetcode.com/problems/possible-bipartition/</a></li>
<li><a href="https://leetcode.com/problems/is-graph-bipartite/">https://leetcode.com/problems/is-graph-bipartite/</a></li>
</ol>
<p><strong>Topological Sort:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/course-schedule-ii/">https://leetcode.com/problems/course-schedule-ii/</a></li>
</ol>
<p><strong>Shortest Path:</strong></p>
<ol>
<li><a href="https://leetcode.com/problems/network-delay-time/">https://leetcode.com/problems/network-delay-time/</a></li>
<li><a href="https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/">https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</a></li>
<li><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
