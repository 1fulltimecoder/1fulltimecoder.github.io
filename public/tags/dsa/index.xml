<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dsa on Samir Paul</title>
    <link>https://samirpaulb.github.io/tags/dsa/</link>
    <description>Recent content in dsa on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/tags/dsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DP for Beginners</title>
      <link>https://samirpaulb.github.io/posts/dp-for-beginners/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/dp-for-beginners/</guid>
      <description>DP for Beginners</description>
      <content:encoded><![CDATA[<p><strong>Longest Increasing Subsequence variants:</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<p><strong>Partition Subset:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<p><strong>BitMasking:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<p><strong>Longest Common Subsequence Variant:</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<p><strong>Coin Change variant:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<p><strong>Matrix multiplication variant:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<p><strong>Depth First Search + DP:</strong><br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<p><strong>Misc:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
<hr>
<h1 id="sample-solutions-for-each-of-above-problem-type">Sample solutions for each of above problem type:</h1>
<hr>
<p><strong>Longest Increasing Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-increasing-subsequence/">https://leetcode.com/problems/longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/largest-divisible-subset/">https://leetcode.com/problems/largest-divisible-subset/</a><br>
<a href="https://leetcode.com/problems/russian-doll-envelopes/">https://leetcode.com/problems/russian-doll-envelopes/</a><br>
<a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br>
<a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br>
<a href="https://leetcode.com/problems/delete-and-earn/">https://leetcode.com/problems/delete-and-earn/</a><br>
<a href="https://leetcode.com/problems/longest-string-chain/">https://leetcode.com/problems/longest-string-chain/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;LIS(n+1, 1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">				if (nums[i] &gt; nums[j])
</span></span><span class="line"><span class="cl">					LIS[i] = max(LIS[i], 1 + LIS[j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int ans = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			ans = max(ans, LIS[i]);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return ans;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Partition Subset Sum:</strong><br>
<a href="https://leetcode.com/problems/partition-equal-subset-sum/">https://leetcode.com/problems/partition-equal-subset-sum/</a><br>
<a href="https://leetcode.com/problems/last-stone-weight-ii/">https://leetcode.com/problems/last-stone-weight-ii/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartition(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % 2 != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/2;
</span></span><span class="line"><span class="cl">		vector&lt;bool&gt;dp(target+1, false);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = true;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = target; j &gt;= nums[i]; j--) {
</span></span><span class="line"><span class="cl">				dp[j] = dp[j] | dp[j - nums[i]];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[target];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>BitMasking in DP:</strong><br>
<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int dp[(1&lt;&lt;16) + 2];
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		fill(dp, dp+(1&lt;&lt;16)+2, -1);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int sum = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			sum += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		if (sum % k != 0) return false;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int target = sum/k;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[0] = 0;
</span></span><span class="line"><span class="cl">		for (int mask = 0; mask &lt; (1&lt;&lt;n); mask++) {
</span></span><span class="line"><span class="cl">			if (dp[mask] == -1) continue;
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">				if (!(mask &amp; (1 &lt;&lt; i)) &amp;&amp; dp[mask] + nums[i] &lt;= target)
</span></span><span class="line"><span class="cl">					dp[mask | (1 &lt;&lt; i)] = (dp[mask] + nums[i]) % target;
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[(1&lt;&lt;n)-1] == 0;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Longest Common Subsequence</strong><br>
<a href="https://leetcode.com/problems/longest-common-subsequence/">https://leetcode.com/problems/longest-common-subsequence/</a><br>
<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a><br>
<a href="https://leetcode.com/problems/distinct-subsequences/">https://leetcode.com/problems/distinct-subsequences/</a><br>
<a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) {
</span></span><span class="line"><span class="cl">		if (n == 0 || m == 0)
</span></span><span class="line"><span class="cl">			return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;L(n+1, vector&lt;int&gt;(m+1, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt;= n; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt;= m; j++) {
</span></span><span class="line"><span class="cl">				if (i == 0 || j == 0)
</span></span><span class="line"><span class="cl">					L[i][j] = 0;
</span></span><span class="line"><span class="cl">				else if (text1[i-1] == text2[j-1])
</span></span><span class="line"><span class="cl">					L[i][j] = 1 + L[i-1][j-1];
</span></span><span class="line"><span class="cl">				else
</span></span><span class="line"><span class="cl">					L[i][j] = max(L[i][j-1], L[i-1][j]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return L[n][m];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int longestCommonSubsequence(string text1, string text2) {
</span></span><span class="line"><span class="cl">		int n = text1.size();
</span></span><span class="line"><span class="cl">		int m = text2.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return longestCommonSubsequenceUtil(text1, text2, n, m);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Palindrome:</strong><br>
<a href="https://leetcode.com/problems/palindrome-partitioning-ii/">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br>
<a href="https://leetcode.com/problems/palindromic-substrings/">https://leetcode.com/problems/palindromic-substrings/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span><span class="lnt" id="hl-4-32"><a class="lnlinks" href="#hl-4-32">32</a>
</span><span class="lnt" id="hl-4-33"><a class="lnlinks" href="#hl-4-33">33</a>
</span><span class="lnt" id="hl-4-34"><a class="lnlinks" href="#hl-4-34">34</a>
</span><span class="lnt" id="hl-4-35"><a class="lnlinks" href="#hl-4-35">35</a>
</span><span class="lnt" id="hl-4-36"><a class="lnlinks" href="#hl-4-36">36</a>
</span><span class="lnt" id="hl-4-37"><a class="lnlinks" href="#hl-4-37">37</a>
</span><span class="lnt" id="hl-4-38"><a class="lnlinks" href="#hl-4-38">38</a>
</span><span class="lnt" id="hl-4-39"><a class="lnlinks" href="#hl-4-39">39</a>
</span><span class="lnt" id="hl-4-40"><a class="lnlinks" href="#hl-4-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minCut(string s) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = s.length();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n];
</span></span><span class="line"><span class="cl">		bool P[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			P[i][i] = true;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i &lt; n-L+1; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L-1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				if (L == 2) {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]);
</span></span><span class="line"><span class="cl">				} else {
</span></span><span class="line"><span class="cl">					P[i][j] = (s[i] == s[j]) &amp;&amp; P[i+1][j-1];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			if (P[0][i])
</span></span><span class="line"><span class="cl">				res[i] = 0;
</span></span><span class="line"><span class="cl">			else {
</span></span><span class="line"><span class="cl">				res[i] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int j = 0; j &lt; i; j++) {
</span></span><span class="line"><span class="cl">					if (P[j+1][i] &amp;&amp; res[i] &gt; 1 + res[j])
</span></span><span class="line"><span class="cl">						res[i] = 1+res[j];
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[n-1] == INT_MAX ? 1 : res[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Coin Change:</strong><br>
<a href="https://leetcode.com/problems/coin-change/">https://leetcode.com/problems/coin-change/</a><br>
<a href="https://leetcode.com/problems/coin-change-2/">https://leetcode.com/problems/coin-change-2/</a><br>
<a href="https://leetcode.com/problems/combination-sum-iv/">https://leetcode.com/problems/combination-sum-iv/</a><br>
<a href="https://leetcode.com/problems/perfect-squares/">https://leetcode.com/problems/perfect-squares/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-for-tickets/">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int coinChange(vector&lt;int&gt;&amp; coins, int amount) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = coins.size();
</span></span><span class="line"><span class="cl">		if (n == 0) return 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;res(amount+1, INT_MAX);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		res[0] = 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			for (int j =  coins[i]; j &lt;= amount; j++) {
</span></span><span class="line"><span class="cl">				if (res[j-coins[i]] != INT_MAX)
</span></span><span class="line"><span class="cl">					res[j] = min(res[j], 1+res[j-coins[i]]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[amount] != INT_MAX ? res[amount] : -1;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix multiplication:</strong><br>
<a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br>
<a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br>
<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int minScoreTriangulation(vector&lt;int&gt;&amp; A) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = A.size();        
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;dp(n, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int L = 2; L &lt;= n; L++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+L &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+L;
</span></span><span class="line"><span class="cl">				dp[i][j] = INT_MAX;
</span></span><span class="line"><span class="cl">				for (int k = i+1; k &lt; j; k++) {
</span></span><span class="line"><span class="cl">					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return dp[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Matrix/2D Array:</strong><br>
<a href="https://leetcode.com/problems/matrix-block-sum/">https://leetcode.com/problems/matrix-block-sum/</a><br>
<a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br>
<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a><br>
<a href="https://leetcode.com/problems/triangle/">https://leetcode.com/problems/triangle/</a><br>
<a href="https://leetcode.com/problems/maximal-square/">https://leetcode.com/problems/maximal-square/</a><br>
<a href="https://leetcode.com/problems/minimum-falling-path-sum/">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	vector&lt;vector&lt;int&gt;&gt; matrixBlockSum(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int K) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int m = mat.size();
</span></span><span class="line"><span class="cl">		int n = mat[0].size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;sum(m+1, vector&lt;int&gt;(n+1, 0));
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt;= m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 1; j &lt;= n; j++) {
</span></span><span class="line"><span class="cl">				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;int&gt;&gt;res(m, vector&lt;int&gt;(n, 0));
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; m; i++) {
</span></span><span class="line"><span class="cl">			for (int j = 0; j &lt; n; j++) {
</span></span><span class="line"><span class="cl">				int r1 = max(0, i-K); int c1 = max(0, j-K);
</span></span><span class="line"><span class="cl">				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);
</span></span><span class="line"><span class="cl">				r1++; r2++;
</span></span><span class="line"><span class="cl">				c1++; c2++;
</span></span><span class="line"><span class="cl">				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Hash + DP:</strong><br>
<a href="https://leetcode.com/problems/target-sum/">https://leetcode.com/problems/target-sum/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-sequence/">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br>
<a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br>
<a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">		unordered_map&lt;int, int&gt;hm;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		hm[0] = 1;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			auto mp = hm;
</span></span><span class="line"><span class="cl">			hm.clear();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			for (auto it = mp.begin(); it != mp.end(); it++) {
</span></span><span class="line"><span class="cl">				hm[it-&gt;first + nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">				hm[it-&gt;first - nums[i]] += it-&gt;second;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return hm[S];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>State machine:</strong><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int n = prices.size();
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;buy(n, 0);
</span></span><span class="line"><span class="cl">		vector&lt;int&gt;sell(n, 0);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		buy[0] = -prices[0], sell[0] = 0;
</span></span><span class="line"><span class="cl">		for (int i = 1; i &lt; n; i++) {
</span></span><span class="line"><span class="cl">			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);
</span></span><span class="line"><span class="cl">			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return sell[n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>Depth First Search +DP:<br>
<a href="https://leetcode.com/problems/out-of-boundary-paths/">https://leetcode.com/problems/out-of-boundary-paths/</a><br>
<a href="https://leetcode.com/problems/knight-probability-in-chessboard/">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span><span class="lnt" id="hl-10-22"><a class="lnlinks" href="#hl-10-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">	int mod = 1000000007;
</span></span><span class="line"><span class="cl">	int dfs(int m, int n, int N, int r, int c,  vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) {
</span></span><span class="line"><span class="cl">		if (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n) return 1;
</span></span><span class="line"><span class="cl">		if (N == 0) return 0;
</span></span><span class="line"><span class="cl">		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int moves = 0;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;
</span></span><span class="line"><span class="cl">		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		dp[N][r][c] = moves%mod;
</span></span><span class="line"><span class="cl">		return dp[N][r][c];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	int findPaths(int m, int n, int N, int i, int j) {
</span></span><span class="line"><span class="cl">		vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;dp(N+1, vector&lt;vector&lt;int&gt;&gt;(m+1, vector&lt;int&gt;(n+1, -1)));
</span></span><span class="line"><span class="cl">		return dfs(m, n, N, i, j, dp);
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Minimax DP:</strong><br>
<a href="https://leetcode.com/problems/predict-the-winner/">https://leetcode.com/problems/predict-the-winner/</a><br>
<a href="https://leetcode.com/problems/stone-game/">https://leetcode.com/problems/stone-game/</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span><span class="lnt" id="hl-11-21"><a class="lnlinks" href="#hl-11-21">21</a>
</span><span class="lnt" id="hl-11-22"><a class="lnlinks" href="#hl-11-22">22</a>
</span><span class="lnt" id="hl-11-23"><a class="lnlinks" href="#hl-11-23">23</a>
</span><span class="lnt" id="hl-11-24"><a class="lnlinks" href="#hl-11-24">24</a>
</span><span class="lnt" id="hl-11-25"><a class="lnlinks" href="#hl-11-25">25</a>
</span><span class="lnt" id="hl-11-26"><a class="lnlinks" href="#hl-11-26">26</a>
</span><span class="lnt" id="hl-11-27"><a class="lnlinks" href="#hl-11-27">27</a>
</span><span class="lnt" id="hl-11-28"><a class="lnlinks" href="#hl-11-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Solution {
</span></span><span class="line"><span class="cl">public:
</span></span><span class="line"><span class="cl">	bool PredictTheWinner(vector&lt;int&gt;&amp; nums) {
</span></span><span class="line"><span class="cl">		int n = nums.size();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int res[n][n];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			res[i][i] = nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		for (int l = 2; l &lt;= n; l++) {
</span></span><span class="line"><span class="cl">			for (int i = 0; i+l-1 &lt; n; i++) {
</span></span><span class="line"><span class="cl">				int j = i+l-1;
</span></span><span class="line"><span class="cl">				int a = (i+1 &lt;= j-1) ? res[i+1][j-1] : 0;
</span></span><span class="line"><span class="cl">				int b = (i+2 &lt;= j) ? res[i+2][j] : 0;
</span></span><span class="line"><span class="cl">				int c = (i &lt;= j-2) ? res[i][j-2] : 0;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		int total = 0;
</span></span><span class="line"><span class="cl">		for (int i = 0; i &lt; n; i++)
</span></span><span class="line"><span class="cl">			total += nums[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		return res[0][n-1] &gt;= total - res[0][n-1];
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Miscellaneous:</strong><br>
<a href="https://leetcode.com/problems/greatest-sum-divisible-by-three/">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br>
<a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a><br>
<a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br>
<a href="https://leetcode.com/problems/longest-turbulent-subarray/">https://leetcode.com/problems/longest-turbulent-subarray/</a><br>
<a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
