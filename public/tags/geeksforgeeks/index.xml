<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>geeksforgeeks on Samir Paul</title>
    <link>https://samirpaulb.github.io/tags/geeksforgeeks/</link>
    <description>Recent content in geeksforgeeks on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/tags/geeksforgeeks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Absolute Value</title>
      <link>https://samirpaulb.github.io/problems/absolute-value/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/absolute-value/</guid>
      <description>Absolute Value - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="1-absolute-value">1. Absolute Value</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">You are given an interger <strong>I</strong>, find&nbsp;the absolute value of the interger <strong>I</strong>.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
I = -32
<strong>Output: </strong>32
<strong>Explanation: 
</strong>The absolute value of -32 is 32.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
I = 45
<strong>Output: </strong>45
<strong>Explanation: 
</strong>The absolute value of 45 is 45 itself.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>absolute() </strong>which takes an integer <strong>I</strong> as input parameter and return the absolute value of <strong>I.</strong></span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space&nbsp;</strong>: O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
-10<sup>6</sup> &lt;= I &lt;= 10<sup>6</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">absolute</span><span class="p">(</span><span class="kt">int</span> <span class="n">I</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nf">abs</span><span class="p">(</span><span class="n">I</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>    <span class="c1">// number of testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span> <span class="c1">// input number of testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">I</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">I</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// print the output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Addition Of Two Numbers</title>
      <link>https://samirpaulb.github.io/problems/addition-of-two-numbers/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/addition-of-two-numbers/</guid>
      <description>Addition Of Two Numbers - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="addition-of-two-numbers">Addition of Two Numbers</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two numbers <strong>A&nbsp;</strong>and <strong>B</strong>. Your task is to return the sum of A and B.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
A = 1, B = 2
<strong>Output:</strong>
3
<strong>Explanation:</strong>
Addition of 1 and 2 is 3.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
A = 10, B = 20
<strong>Output:</strong>
30
<strong>Explanation:</strong>
Addition os 10 and 20 is 30.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong></span></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function addition() which takes two numbers A and B and returns the sum of A and B.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= A, B&nbsp;&lt;= 10<sup>18</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">addition</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">B</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">A</span> <span class="o">&gt;&gt;</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">addition</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Allocate Minimum Number Of Pages</title>
      <link>https://samirpaulb.github.io/problems/allocate-minimum-number-of-pages/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/allocate-minimum-number-of-pages/</guid>
      <description>Allocate Minimum Number Of Pages - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="allocate-minimum-number-of-pages">Allocate minimum number of pages</h1>
<h2 id="hard">Hard</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">You are given <strong>N </strong>number of books. Every <strong>ith</strong> book has<strong> Ai</strong> number of pages.&nbsp;The books are arranged in ascending order.</span><br>
<br>
<span style="font-size:18px">You have to allocate contiguous&nbsp;books to <strong>M </strong>number of students. There can be many ways or permutations to do so. In each permutation, one of the M students will be allocated the maximum number of pages. Out of all these permutations, the task is to find that particular permutation in which the maximum number of pages allocated to a student is the minimum of those in all the other permutations and print this minimum value.</span></p>
<p><span style="font-size:18px">Each book will be allocated to exactly one student. Each student has to be allocated at least one book.</span></p>
<p><span style="font-size:18px">Note: Return <strong>-1</strong> if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
A[] = {12,34,67,90}
M = 2
<strong>Output:</strong>113
<strong>Explanation:</strong>Allocation can be done in 
following ways:{12} and {34, 67, 90} 
Maximum Pages = 191{12, 34} and {67, 90} 
Maximum Pages = 157{12, 34, 67} and {90} 
Maximum Pages =113. Therefore, the minimum 
of these cases is 113, which is selected 
as the output.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
A[] = {15,17,20}
M = 2
<strong>Output:</strong>32
<strong>Explanation: </strong>Allocation is done as
{15,17} and {20}</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function findPages() which takes 2 Integers <strong>N</strong>, and m and an array <strong>A[]</strong> of length <strong>N</strong> as input and returns the expected answer.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity</strong>: O(NlogN)<br>
<strong>Expected Auxilliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup><br>
1 &lt;= A [ i ] &lt;= 10<sup>6</sup><br>
1 &lt;= M &lt;= 10<sup>5</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template in C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to find minimum number of pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">findPages</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="kt">int</span> <span class="n">mp</span> <span class="o">=</span><span class="mi">0</span> <span class="p">,</span><span class="n">ans</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">M</span><span class="o">&gt;</span><span class="n">N</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">mp</span><span class="o">+=</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span>  <span class="n">l</span> <span class="o">=</span><span class="n">A</span><span class="p">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">r</span> <span class="o">=</span> <span class="n">mp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">l</span><span class="o">+</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="n">sum</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">sum</span><span class="o">+=</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&gt;</span><span class="n">mid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">sum</span><span class="o">=</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="n">M</span><span class="p">)</span> <span class="n">l</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">else</span>  <span class="n">r</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">findPages</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Array Pair Sum Divisibility Problem</title>
      <link>https://samirpaulb.github.io/problems/array-pair-sum-divisibility-problem/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/array-pair-sum-divisibility-problem/</guid>
      <description>Array Pair Sum Divisibility Problem - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="array-pair-sum-divisibility-problem">Array Pair Sum Divisibility Problem</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array of integers and a number k, write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1 :</strong></span></p>
<pre><span style="font-size:18px"><strong>Input : </strong>arr = [9, 5, 7, 3], k = 6
<strong>Output: </strong>True
<strong>Explanation: </strong>{(9, 3), (5, 7)} is a 
possible solution. 9 + 3 = 12 is divisible
by 6 and 7 + 5 = 12 is also divisible by 6.

</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input : </strong>arr = [2, 4, 1, 3], k = 4
<strong>Output: </strong>False
<strong>Explanation: </strong>There is no possible solution.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>canPair()</strong>&nbsp;which takes array and k as input parameter and returns true if array can be divided into pairs such that sum of every pair is divisible by k otherwise returns false.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br>
<strong>Expected Space Complexity :&nbsp;</strong>O(n)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= length of array &lt;= 10^5<br>
1 &lt;= elements of array &lt;= 10^5<br>
1 &lt;= k &lt;= 10^5</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">canPair</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">fre</span><span class="p">(</span><span class="mi">100001</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">num</span> <span class="p">:</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">num</span><span class="o">%</span><span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">fre</span><span class="p">[(</span><span class="n">k</span><span class="o">-</span><span class="n">num1</span><span class="p">)</span><span class="o">%</span><span class="n">k</span><span class="p">]</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">fre</span><span class="p">[(</span><span class="n">k</span><span class="o">-</span><span class="n">num1</span><span class="p">)</span><span class="o">%</span><span class="n">k</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">fre</span><span class="p">[</span><span class="n">num1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">f</span> <span class="p">:</span> <span class="n">fre</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">tc</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">canPair</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;True</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;False</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Binary Array Sorting</title>
      <link>https://samirpaulb.github.io/problems/binary-array-sorting/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/binary-array-sorting/</guid>
      <description>Binary Array Sorting - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="binary-array-sorting">Binary Array Sorting</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a binary array <strong>A[]</strong> of size <strong>N</strong>. The task is to arrange the array in increasing order.</span><br>
<span style="font-size:18px"><strong>Note:</strong> The binary array contains only 0&nbsp; and 1.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: 
5
1 0 1 1 0

<strong>Output</strong>: 
0 0 1 1 1

<strong>Explanation</strong>: 
After arranging the elements in 
increasing order, elements will be as 
0 0 1 1 1.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
10
1 0 1 1 1 1 1 0 0 0

<strong>Output</strong>: 
0 0 0 0 1 1 1 1 1 1

<strong>Explanation</strong>: 
After arranging the elements in 
increasing order, elements will be 
0 0 0 0 1 1 1 1 1 1.
</span>
</pre>
<p><strong><span style="font-size:18px">Your Task:&nbsp;</span></strong><span style="font-size:18px">This is a function problem. You only need to complete the function<strong> binSort()&nbsp;</strong>that takes the array&nbsp;<strong>A[] </strong>and it's size <strong>N</strong> as parameters and sorts the array. The <strong>printing </strong>is done <strong>automatically </strong>by the driver code.</span><br>
<br>
<span style="font-size:18px"><strong>Expected Time Complexity</strong>: O(N)<br>
<strong>Expected Auxilliary Space</strong>: O(1)</span><br>
<br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;=&nbsp;N &lt;= 10<sup>6</sup><br>
0 &lt;= A[i] &lt;= 1</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// A Sample C++ program for beginners with Competitive Programming
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// A[]: input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// N: input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//Function to sort the binary array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">binSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">//Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       
</span></span><span class="line"><span class="cl">       <span class="cm">/**************
</span></span></span><span class="line"><span class="cl"><span class="cm">        * No need to print the array
</span></span></span><span class="line"><span class="cl"><span class="cm">        * ************/</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="o">+</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Input the number of testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span> <span class="c1">//Input size of array N
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="n">N</span><span class="p">];</span> 
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span>  <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	      
</span></span><span class="line"><span class="cl">	    <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">obj</span><span class="p">.</span><span class="n">binSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">x</span><span class="p">:</span><span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	      
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Bitwise Operators</title>
      <link>https://samirpaulb.github.io/problems/bitwise-operators/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/bitwise-operators/</guid>
      <description>Bitwise Operators - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="bitwise-operators">Bitwise Operators</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Bitwise operators are useful when we want to work with bits. Here, we'll take a look at them.</span></p>
<p><span style="font-size:18px">Given three positive integers <strong>a</strong>, <strong>b</strong> and <strong>c</strong>. Your task is to perform some bitwise operations on them as given below:<br>
<strong>1.</strong> d = a ^ a<br>
<strong>2. </strong>e = c ^ b<br>
<strong>3.</strong> f = a &amp; b<br>
<strong>4.</strong> g = c | (a ^ a)<br>
<strong>5.</strong>&nbsp;h&nbsp;= ~e<br>
<strong>Note: ^ </strong>is for xor. The working of bitwise operators can be found <a href="https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/">here</a>.</span></p>
<p><span style="font-size:18px"><strong>Example:</strong></span></p>
<div style="background:#eee;border:1px solid #ccc;padding:5px 10px;"><span style="font-size:18px"><strong>Input:</strong><br>
a = 4<br>
b = 8<br>
c = 2<br>
<strong>Output:</strong><br>
0<br>
10<br>
0<br>
2<br>
-11</span></div>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= A, B, C &lt;= 10<sup>6</sup></span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Video:</span></strong></p>
<p><iframe frameborder="0" height="315" src="https://www.youtube.com/embed/WFy9SFJsAWQ" width="560"></iframe></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Function Prototype
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">bitWiseOperation</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Function to perform bitwise manipulations
</span></span></span><span class="line"><span class="cl"><span class="c1">// a, b and c are input integers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">bitWiseOperation</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">a</span><span class="o">^</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="n">c</span><span class="o">^</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">c</span> <span class="o">|</span> <span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="o">~</span><span class="n">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">g</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Driver code to test above function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">bitWiseOperation</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Black And White</title>
      <link>https://samirpaulb.github.io/problems/black-and-white/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/black-and-white/</guid>
      <description>Black And White - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="black-and-white">Black and White</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given&nbsp;the chessboard dimensions. Find out the number of ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span></p>
<p><span style="font-size:18px"><strong>Note:</strong><br>
The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), or two squares vertically and one square horizontally (L shaped). The knights attack each other if one can reach the other in one move.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">N = 2, M = 2
<strong>Output: </strong>12 
<strong>Explanation</strong>: There are 12 ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span>

</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">N = 2, M = 3
<strong>Output: </strong>26
<strong>Explanation</strong>: There are 26 ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span>
</pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Your task is to complete the function <strong>numOfWays()&nbsp;</strong>which takes the chessboard dimensions N and M as inputs and returns the number of ways we can place 2 Knights on this chessboard such that they cannot attack each other. Since this number can be very large, return it modulo 10<sup>9</sup>+7.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N*M).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1 &lt;= N&nbsp;* M &lt;= 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="kt">long</span> <span class="nf">numOfWays</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">numOfWays</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Function to find out the number of ways we can place a black and a 
</span></span></span><span class="line"><span class="cl"><span class="c1">//white Knight on this chessboard such that they cannot attack each other.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">long</span> <span class="kt">long</span> <span class="nf">numOfWays</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// write code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="mf">1e9</span><span class="o">+</span><span class="mi">7</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">a1</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">a2</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">,</span> <span class="n">a4</span> <span class="o">=</span><span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ans</span><span class="o">+=</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)(((</span><span class="n">N</span><span class="o">*</span><span class="n">M</span><span class="p">)</span> <span class="o">-</span><span class="n">a1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">M</span><span class="p">))</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">&gt;=</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">M</span><span class="o">&gt;=</span><span class="mi">3</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="o">-=</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)((</span><span class="n">N</span><span class="o">-</span><span class="n">a1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">a4</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span><span class="o">-</span><span class="n">a2</span><span class="p">))</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">&gt;=</span><span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">M</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="o">-=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)((</span><span class="n">N</span><span class="o">-</span><span class="n">a2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">a4</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span><span class="o">-</span><span class="n">a1</span><span class="p">))</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">ans</span><span class="o">%</span><span class="n">mod</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>C&#43;&#43; Data Types</title>
      <link>https://samirpaulb.github.io/problems/cpp-data-types/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/cpp-data-types/</guid>
      <description>C++ Data Types - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="c-data-types">C++ Data Types</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Read a value and store it in the appropriate C++ Data Type.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>
2 h 2.555
<strong>Output:</strong>
2
h
2.555 </span>
<span style="font-size:18px"><strong>Explanation:</strong></span>
<span style="font-size:18px">The three inputs are printed in order.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Your task is to complete each of the given functions&nbsp;<br>
<strong>cppIntType() </strong>: read an integer input, store it in appropriate data type and return it.&nbsp;<br>
<strong>cppCharType() :&nbsp;</strong>read a character&nbsp;input, store it in appropriate data type and return it.&nbsp;<strong>&nbsp;<br>
cppFloatType() :&nbsp;</strong>read a float&nbsp;input, store it in appropriate data type and return it.&nbsp;</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">cppIntType</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="nf">cppCharType</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="nf">cppFloatType</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">float</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">cppIntType</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">cppCharType</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">cppFloatType</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>C&#43;&#43; If Else (Decision Making)</title>
      <link>https://samirpaulb.github.io/problems/cpp-if-else-decision-making/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/cpp-if-else-decision-making/</guid>
      <description>C++ If Else (Decision Making) - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="c-if-else-decision-making">C++ if-else (Decision Making)</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an integer N.&nbsp;Your task is to check if the integer is greater than, less than or equal to 5.<br>
If the integer is greater than 5, then print "Greater than 5" (without quotes).<br>
If the integer is less than 5, then print "Less than 5".<br>
If the integer is equal to 5, then print "Equal&nbsp;to 5".</span><br>
&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">N = 8</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">Greater than 5</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong></span>
<span style="font-size:18px">N = 4</span>
<span style="font-size:18px"><strong>Output:</strong></span>
<span style="font-size:18px">Less than 5</span>
</pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function compareFive() which takes the number N and returns&nbsp;"Greater than 5" if the integer is greater than 5 or "Less than 5" if the integer is less than 5 otherwise print "Equal&nbsp;to 5" if the integer equals to 5.</span></p>
<p><strong><span style="font-size:18px">Note :-&nbsp;</span></strong><span style="font-size:18px">Do not print the next line after the result.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space: </strong>O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 100000</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">compareFive</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="k">return</span> <span class="s">&#34;Greater than 5&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="k">return</span> <span class="s">&#34;Less than 5&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="k">return</span> <span class="s">&#34;Equal to 5&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">compareFive</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>C&#43;&#43; Strings</title>
      <link>https://samirpaulb.github.io/problems/cpp-strings/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/cpp-strings/</guid>
      <description>C++ Strings - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="c-strings">C++ Strings</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two strings&nbsp; S1 and S2 .&nbsp;You have to concatenate both the strings and print the concatenated string.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
S1 = "Geeksfor"
S2 = "Geeks"
<strong>Output:</strong> GeeksforGeeks
<strong>Explanation: </strong>Combined "Geeksfor" and "Geeks"</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
S1 = "Practice"
S2 = "Hard"
<strong>Output:</strong> PracticeHard
<strong>Explanation: </strong>Combined "Practice" and "Hard"</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task: &nbsp;</strong><br>
You dont need to read input or print anything. Complete the function <strong>conCat()</strong>&nbsp;which accepts two strings S1 and S2 as input parameter and returns concatenated string.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity: </strong>O(|S1| + |S2|) .<br>
<strong>Expected Auxiliary Space: </strong>O(|S1| + |S2|) .<br>
where N is the length of a&nbsp;String</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= |S1| , |S2|&nbsp;&lt;= 10<sup>5</sup></span><br>
<span style="font-size:18px">|S| denotes the length of the string S.</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp">#include&lt;string&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">string</span> <span class="nf">conCat</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span> <span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">conCat</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">string</span> <span class="nf">conCat</span><span class="p">(</span><span class="n">string</span> <span class="n">s1</span> <span class="p">,</span> <span class="n">string</span> <span class="n">s2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">s1</span><span class="o">+</span><span class="n">s2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>C&#43;&#43; Switch Case Statement</title>
      <link>https://samirpaulb.github.io/problems/cpp-switch-case-statement/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/cpp-switch-case-statement/</guid>
      <description>C++ Switch Case Statement - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="c-switch-case-statement">C++ Switch Case Statement</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a number N, if the number is between 1 and 10 both inclusive then return the number in words (Lower case English Alphabets) otherwise return&nbsp;"not in range".</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">5</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">five</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">11</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">not in range</span></pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function isInRange() which takes an integer and&nbsp;if the number is between 1 and 10 both inclusive then return the number in words otherwise return&nbsp;"not in range".</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong></span></p>
<p><span style="font-size:18px">1&lt;=N&lt;=10000</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">isInRange</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">switch</span><span class="p">(</span><span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">1</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;one&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">2</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>  <span class="s">&#34;two&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">3</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;three&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">4</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;four&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">5</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;five&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">6</span> <span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;six&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">7</span> <span class="o">:</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;seven&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">8</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;eight&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">9</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;nine&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;ten&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;not in range&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">isInRange</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Check If Array Is Sorted</title>
      <link>https://samirpaulb.github.io/problems/check-if-array-is-sorted/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/check-if-array-is-sorted/</guid>
      <description>Check If Array Is Sorted - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="check-if-array-is-sorted">Check if array is sorted</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>arr[]&nbsp;</strong>of size <strong>N</strong>, check if it is sorted in non-decreasing order or not.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
arr[] = {10, 20, 30, 40, 50}
<strong>Output:</strong> 1
<strong>Explanation:</strong> The given array is sorted.
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 6
arr[] = {90, 80, 100, 70, 40, 30}
<strong>Output:</strong> 0
<strong>Explanation:</strong>&nbsp;The given array is not sorted.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>arraySortedOrNot()</strong>&nbsp;which takes the&nbsp;<strong>arr[]&nbsp;</strong>and N<strong>&nbsp;</strong>as input parameters and returns a <strong>boolean</strong> value (true if it is sorted otherwise false).</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ Arr[i] ≤ 10<sup>6</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">arraySortedOrNot</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//T.C. =&gt; O(N^2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// for(int i = 0; i &lt; n; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     for(int j = i + 1; j &lt; n; j++){
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//         if(arr[j] &lt; arr[i])
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//         return false;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// return true;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="c1">//T.C. =&gt; O(N)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">arraySortedOrNot</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Check If It Is Possible To Convert One String Into Another With Given Constraints</title>
      <link>https://samirpaulb.github.io/problems/check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints/</guid>
      <description>Check If It Is Possible To Convert One String Into Another With Given Constraints - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints">Check if it is possible to convert one string into another with given constraints</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p>Given two strings S and T, which&nbsp;contains three characters i.e <strong>'A', 'B'</strong> and <strong>'#'&nbsp;</strong>only. Check&nbsp;whether it is possible to convert the first string into another string by performing following operations on string first.<br>
1- A can move towards Left only<br>
2- B can move towards Right only<br>
3- Neither A nor B should&nbsp;cross each other<br>
<strong>Note:</strong> Moving i'th character&nbsp;towards Left one step means swap i'th with (i-1)'th charecter [ i-1&gt;=0 ].&nbsp;Moving i'th character&nbsp;towards Right one step means swap i'th with (i+1)'th charecter [ i+1&lt; string's length ].&nbsp;</p>
<p><strong>Example 1:</strong></p>
<pre><strong>Input:</strong>
S=#A#B#B#   
T=A###B#B
<strong>Output:</strong>
1
<strong>Explanation:</strong>
A in S is right to the A in T 
so A of S can move easily towards
the left because there is no B on
its left positions and for first B 
in S is left to the B in T so B 
of T can move easily towards the 
right because there is no A on its
right positions and it is same for 
next B so S can be easily converted
into T.</pre>
<p><strong>Example 2:</strong></p>
<pre><strong>Input:</strong>
S=#A#B# 
T=#B#A#
<strong>Output:</strong>
0
<strong>Explanation:</strong>
Here first A in S is left to the 
A in T and according to the condition,
A cant move towards right,so S cant 
be converted into T.</pre>
<p><br>
<strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>isItPossible() </strong>which takes the two strings S, T and their respective lengths M and N as input parameters and returns 1 if S can be converted into T. Otherwise, it returns 0.</p>
<p><br>
<strong>Expected Time Complexity:&nbsp;</strong>O(M+N) where M is size of string S and N is size of string T.<br>
<strong>Expected Auxillary Space:&nbsp;</strong>O(1)<br>
&nbsp;</p>
<p><strong>Constraints:</strong><br>
1&lt;=M,N&lt;=100000</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">isItPossible</span><span class="p">(</span><span class="n">string</span> <span class="n">S</span><span class="p">,</span> <span class="n">string</span> <span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">M</span><span class="o">!=</span><span class="n">N</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">S1</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="n">S2</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;#&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="n">S1</span><span class="o">+=</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">          <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">T</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;#&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="n">S2</span><span class="o">+=</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">S1</span><span class="o">==</span><span class="n">S2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">S</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">M</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">N</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">isItPossible</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Check If Linked List Is Palindrome</title>
      <link>https://samirpaulb.github.io/problems/check-if-linked-list-is-palindrome/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/check-if-linked-list-is-palindrome/</guid>
      <description>Check If Linked List Is Palindrome - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="check-if-linked-list-is-palindrome">Check if Linked List is Palindrome</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list of size <strong>N</strong> of integers. The task is to check if the given linked list is palindrome or not.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
value[] = {1,2,1}
<strong>Output: </strong>1<strong>
Explanation: </strong>The given linked list is
1 2 1 , which is a palindrome and
Hence, the output is 1.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
value[] = {1,2,3,4}
<strong>Output: </strong>0<strong>
Explanation: </strong>The given linked list
is 1 2 3 4 , which is not a palindrome
and Hence, the output is 0.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function&nbsp;<strong>isPalindrome</strong>() which takes head as reference as the only parameter and returns true or false if linked list is palindrome&nbsp;or not respectively.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity</strong>: O(N)<br>
<strong>Expected Auxialliary Space Usage</strong>: O(1)&nbsp; (ie, you should not use the recursive stack space as well)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N&nbsp;&lt;= 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83">83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84">84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85">85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86">86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87">87</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stack&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">  int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">  struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">  Node(int x) {
</span></span></span><span class="line"><span class="cl"><span class="cm">    data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">    next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to check whether the list is palindrome.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="n">isPalindrome</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Driver program to test above function*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">T</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">firstdata</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>  <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// taking first data of LL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">firstdata</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">firstdata</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// taking remaining data of LL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">obj</span><span class="p">.</span><span class="n">isPalindrome</span><span class="p">(</span><span class="n">head</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Check If Two Arrays Are Equal Or Not</title>
      <link>https://samirpaulb.github.io/problems/check-if-two-arrays-are-equal-or-not/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/check-if-two-arrays-are-equal-or-not/</guid>
      <description>Check If Two Arrays Are Equal Or Not - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="check-if-two-arrays-are-equal-or-not">Check if two arrays are equal or not</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two arrays <strong>A</strong> and <strong>B</strong> of equal size <strong>N</strong>, the task is to find if given arrays are equal or not. Two arrays are said to be equal if both of them contain same set of elements, arrangements (or permutation) of elements may be different though.<br>
<strong>Note :</strong>&nbsp;If there are repetitions, then counts of repeated elements must also be same for two array to be equal.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
A[] = {1,2,5,4,0}
B[] = {2,4,5,0,1}
<strong>Output: </strong>1<strong>
Explanation: </strong>Both the array can be 
rearranged to {0,1,2,4,5}</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
A[] = {1,2,5}
B[] = {2,4,15}
<strong>Output: </strong>0<strong>
Explanation: </strong>A[] and B[] have only 
one common value.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Complete&nbsp;<strong>check() </strong>function which takes both the given array and their size as function arguments and returns <strong>true</strong> if the arrays are equal else <strong>returns false</strong>.The 0 and 1 printing is done by the driver code.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity </strong>: O(N)<br>
<strong>Expected Auxilliary Space</strong> : O(N)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=10<sup>7</sup><br>
1&lt;=A[],B[]&lt;=10<sup>18</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define ll long long 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to check if two arrays are equal or not.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="n">check</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">B</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">A</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">B</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">brr</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// increase the count of elements in first array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// iterate through another array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// and decrement the count of elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// in the map in which frequency of elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// is stored for first array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">brr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">check</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">brr</span><span class="p">,</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Check Whether K Th Bit Is Set Or Not</title>
      <link>https://samirpaulb.github.io/problems/check-whether-k-th-bit-is-set-or-not/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/check-whether-k-th-bit-is-set-or-not/</guid>
      <description>Check Whether K Th Bit Is Set Or Not - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="check-whether-k-th-bit-is-set-or-not">Check whether K-th bit is set or not</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a number <strong>N </strong>and a bit number <strong>K</strong>, check if <strong>K<sup>th</sup></strong> bit of N is <strong>set or not</strong>. A bit is called set if it is 1. Position of set bit&nbsp;'1' should be <strong>indexed starting with 0</strong>&nbsp;from <strong>LSB </strong>side in&nbsp;binary representation of the number.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: N = 4, K = 0
<strong>Output</strong>: No
<strong>Explanation</strong>: Binary representation of 4 is 100, 
in which 0<sup>th</sup> bit from LSB is not set. 
So, return false.</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input</strong>: N = 4, K = 2
<strong>Output</strong>: Yes
<strong>Explanation</strong>: Binary representation of 4 is 100, 
in which 2<sup>nd</sup> bit from LSB is set. 
So, return true.</span></pre>
<p><strong><span style="font-size:18px">Example 3:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input</strong>: N = 500, K = 3
<strong>Output</strong>: No
<strong>Explanation</strong>: Binary representation of 500&nbsp;is 
111110100, in which 3rd bit from LSB is not set. 
So, return false.</span></pre>
<div><br>
<strong><span style="font-size:18px">Your task:</span></strong></div>
<div><span style="font-size:18px">You don't have to read input or print anything. Your task is&nbsp;to complete the <strong>function checkKthbit </strong>that takes <strong>n and k as parameters</strong> and <strong>returns </strong>either <strong>true </strong>(if kth bit is set) or <strong>false</strong>(if kth bit is not set).</span><br>
<br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(LogN).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br>
<br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>9</sup><br>
0 ≤ K ≤ floor(log<sub>2</sub>(N) + 1)</span></div>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Function to check if Kth bit is set or not.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="n">checkKthBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// It can be a one liner logic!! Think of it!!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">k</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Driver Code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">//taking testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//input n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span><span class="c1">//bit number k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">if</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">checkKthBit</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Yes&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">else</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;No&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Complete Binary Tree</title>
      <link>https://samirpaulb.github.io/problems/complete-binary-tree/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/complete-binary-tree/</guid>
      <description>Complete Binary Tree - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="complete-binary-tree">Complete Binary Tree</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not. A complete binary tree&nbsp;is a binary tree in which every level, except possibly the last, is completely filled, and all nodes should be as much close to left as possible</span><span style="font-size:18px">.</span></p>
<pre><span style="font-size:18px">
<strong>Example 1:
Input:</strong>
       1
      / \
     2   3
<strong>Output:</strong>
Complete Binary Tree</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
              1
            /   \
          2      3
           \    /  \
            4  5    6
<strong>Output:</strong>
Not Complete Binary Tree
</span></pre>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=Number of Node&lt;=100</span><br>
<span style="font-size:18px">0 &lt;= Data of a node &lt;= 10<sup>6</sup></span></p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to take input. Just complete the function<strong> isCompleteBT() </strong>that takes root <strong>node </strong>as a parameter and returns <strong>true, </strong>if the tree is Complete else returns <strong>false</strong>.</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span><span class="lnt" id="hl-0-121"><a class="lnlinks" href="#hl-0-121">121</a>
</span><span class="lnt" id="hl-0-122"><a class="lnlinks" href="#hl-0-122">122</a>
</span><span class="lnt" id="hl-0-123"><a class="lnlinks" href="#hl-0-123">123</a>
</span><span class="lnt" id="hl-0-124"><a class="lnlinks" href="#hl-0-124">124</a>
</span><span class="lnt" id="hl-0-125"><a class="lnlinks" href="#hl-0-125">125</a>
</span><span class="lnt" id="hl-0-126"><a class="lnlinks" href="#hl-0-126">126</a>
</span><span class="lnt" id="hl-0-127"><a class="lnlinks" href="#hl-0-127">127</a>
</span><span class="lnt" id="hl-0-128"><a class="lnlinks" href="#hl-0-128">128</a>
</span><span class="lnt" id="hl-0-129"><a class="lnlinks" href="#hl-0-129">129</a>
</span><span class="lnt" id="hl-0-130"><a class="lnlinks" href="#hl-0-130">130</a>
</span><span class="lnt" id="hl-0-131"><a class="lnlinks" href="#hl-0-131">131</a>
</span><span class="lnt" id="hl-0-132"><a class="lnlinks" href="#hl-0-132">132</a>
</span><span class="lnt" id="hl-0-133"><a class="lnlinks" href="#hl-0-133">133</a>
</span><span class="lnt" id="hl-0-134"><a class="lnlinks" href="#hl-0-134">134</a>
</span><span class="lnt" id="hl-0-135"><a class="lnlinks" href="#hl-0-135">135</a>
</span><span class="lnt" id="hl-0-136"><a class="lnlinks" href="#hl-0-136">136</a>
</span><span class="lnt" id="hl-0-137"><a class="lnlinks" href="#hl-0-137">137</a>
</span><span class="lnt" id="hl-0-138"><a class="lnlinks" href="#hl-0-138">138</a>
</span><span class="lnt" id="hl-0-139"><a class="lnlinks" href="#hl-0-139">139</a>
</span><span class="lnt" id="hl-0-140"><a class="lnlinks" href="#hl-0-140">140</a>
</span><span class="lnt" id="hl-0-141"><a class="lnlinks" href="#hl-0-141">141</a>
</span><span class="lnt" id="hl-0-142"><a class="lnlinks" href="#hl-0-142">142</a>
</span><span class="lnt" id="hl-0-143"><a class="lnlinks" href="#hl-0-143">143</a>
</span><span class="lnt" id="hl-0-144"><a class="lnlinks" href="#hl-0-144">144</a>
</span><span class="lnt" id="hl-0-145"><a class="lnlinks" href="#hl-0-145">145</a>
</span><span class="lnt" id="hl-0-146"><a class="lnlinks" href="#hl-0-146">146</a>
</span><span class="lnt" id="hl-0-147"><a class="lnlinks" href="#hl-0-147">147</a>
</span><span class="lnt" id="hl-0-148"><a class="lnlinks" href="#hl-0-148">148</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// A program to check if a given binary tree is complete or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* A binary tree node has data, pointer to left child
</span></span></span><span class="line"><span class="cl"><span class="cm">   and a pointer to right child */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">left</span> <span class="o">=</span> <span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="c1">// Corner Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;N&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Creating vector of strings from input 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// string after spliting by space
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span> <span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Create the root of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">ip</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Push the root to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Starting from the second element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// Get and remove the front of the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">currNode</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the current node&#39;s value from the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">string</span> <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// If the left child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the left child for the current Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// For the right child
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// If the right child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the right child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>    
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">isCompleteBT</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">root</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span><span class="n">q</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">okay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">Node</span><span class="o">*</span> <span class="n">tp</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span><span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span><span class="p">(</span><span class="n">okay</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">              <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">okay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span><span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span><span class="p">(</span><span class="n">okay</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">              <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">okay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">treeString</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span><span class="n">treeString</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">buildTree</span><span class="p">(</span><span class="n">treeString</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">ob</span><span class="p">.</span><span class="n">isCompleteBT</span><span class="p">(</span><span class="n">root</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span> <span class="p">(</span><span class="s">&#34;Complete Binary Tree</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span> <span class="p">(</span><span class="s">&#34;Not Complete Binary Tree</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Convert String To Lowercase</title>
      <link>https://samirpaulb.github.io/problems/convert-string-to-lowercase/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/convert-string-to-lowercase/</guid>
      <description>Convert String To Lowercase - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="convert-string-to-lowercase">Convert String to LowerCase</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a string <strong>S</strong>. The task is to convert characters of string to <strong>lowercase</strong>.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: S</strong> = "ABCddE</span><span style="font-size:18px">"
<strong>Output:</strong> "abcdde</span><span style="font-size:18px">"
<strong>Explanation: </strong>A, B, C and E are converted to</span>
<span style="font-size:18px">a, b, c and E thus&nbsp;all uppercase characters 
of the string converted to lowercase letter.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: S</strong> = "LMNOppQQ</span><span style="font-size:18px">"
<strong>Output:</strong> "lmnoppqq</span><span style="font-size:18px">"
<strong>Explanation: </strong>L, M, N, O, and Q are 
converted to l, m, n, o and q thus&nbsp;
all uppercase characters of the 
string converted to lowercase letter.</span></pre>
<p><span style="font-size:18px"><strong>Your Task: &nbsp;</strong><br>
You dont need to read input or print anything. Complete the function <strong>toLower()&nbsp;</strong>which takes S&nbsp;as input parameter and returns the converted string.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>O(n)<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= |S|&nbsp;&lt;= 1000</span></p>
<p><span style="font-size:18px">Input only contains lowercase/uppercase English alphabets.</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">toLower</span><span class="p">(</span><span class="n">string</span> <span class="n">S</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">97</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">32</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">toLower</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Leaves In Binary Tree</title>
      <link>https://samirpaulb.github.io/problems/count-leaves-in-binary-tree/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-leaves-in-binary-tree/</guid>
      <description>Count Leaves In Binary Tree - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-leaves-in-binary-tree">Count Leaves in Binary Tree</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a Binary Tree of size <strong>N</strong> , You have to count leaves in it. For example, there are two leaves in following&nbsp;tree</span></p>
<p><span style="font-size:18px">&nbsp; &nbsp; &nbsp; &nbsp; 1<br>
&nbsp; &nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br>
&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 39<br>
&nbsp; /<br>
5</span><br>
<br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>
Input:</strong>
Given Tree is 
               4
             /   \
            8     10
           /     /   \
          7     5     1
         /
        3 
<strong>Output:</strong>
3
<strong>Explanation:</strong> 
Three leaves are 3 , 5 and 1.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't have to take input. Complete the function <strong>countLeaves()&nbsp;</strong>that takes <strong>root&nbsp;</strong>node of given tree<strong>&nbsp;</strong>as parameter and <strong>returns </strong>the count of leaves in tree .&nbsp;The <strong>printing </strong>is done by the <strong>driver </strong>code.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;= N &lt;= 10<sup>4</sup></span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given below is used for system's internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console, and should not print anything on stdout/console. The task is to complete the function specified, and not to write the full code.</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span><span class="lnt" id="hl-0-121"><a class="lnlinks" href="#hl-0-121">121</a>
</span><span class="lnt" id="hl-0-122"><a class="lnlinks" href="#hl-0-122">122</a>
</span><span class="lnt" id="hl-0-123"><a class="lnlinks" href="#hl-0-123">123</a>
</span><span class="lnt" id="hl-0-124"><a class="lnlinks" href="#hl-0-124">124</a>
</span><span class="lnt" id="hl-0-125"><a class="lnlinks" href="#hl-0-125">125</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">newNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="c1">// Corner Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;N&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Creating vector of strings from input 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// string after spliting by space
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span> <span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Create the root of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">ip</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Push the root to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// Starting from the second element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// Get and remove the front of the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">currNode</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the current node&#39;s value from the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">string</span> <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// If the left child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the left child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// For the right child
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="c1">// If the right child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the right child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">countLeaves</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">buildTree</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">countLeaves</span><span class="p">(</span><span class="n">root</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* A binary tree node has data, pointer to left child
</span></span></span><span class="line"><span class="cl"><span class="cm">   and a pointer to right child  
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node* left;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node* right;
</span></span></span><span class="line"><span class="cl"><span class="cm">}; */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Should return count of leaves. For example, return
</span></span></span><span class="line"><span class="cl"><span class="cm">    value should be 2 for following tree.
</span></span></span><span class="line"><span class="cl"><span class="cm">         10
</span></span></span><span class="line"><span class="cl"><span class="cm">      /      \ 
</span></span></span><span class="line"><span class="cl"><span class="cm">   20       30 */</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">countLeaves</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">countLeaves</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="n">countLeaves</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Nodes Of Linked List</title>
      <link>https://samirpaulb.github.io/problems/count-nodes-of-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-nodes-of-linked-list/</guid>
      <description>Count Nodes Of Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-nodes-of-linked-list">Count nodes of linked list</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5
<strong>Output: </strong>5<strong>
Explanation: </strong>Count of nodes in the 
linked list is 5, which is its length.</span>
</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1-&gt;0
<strong>Output: </strong>7<strong>
Explanation: </strong>Count of nodes in the
linked list is 7. Hence, the output
is 7.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Your task is to complete the given function <strong>getCount</strong>(), which takes a head reference as an argument and should return the length of the linked list.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity</strong> : O(N)<br>
<strong>Expected Auxilliary Space</strong> : O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup><br>
1 &lt;= value &lt;= 10<sup>3</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp"> 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Link list node */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node* next;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x) {  data = x;  next = NULL; }
</span></span></span><span class="line"><span class="cl"><span class="cm">}; */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to count nodes of a linked list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">getCount</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="c1">//Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">getCount</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Odd Even</title>
      <link>https://samirpaulb.github.io/problems/count-odd-even/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-odd-even/</guid>
      <description>Count Odd Even - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-odd-even">Count Odd Even</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an array <strong>A[]&nbsp;</strong>of <strong>N </strong>elements. The task is to count number of <strong>even </strong>and <strong>odd </strong>elements in the array.</span></p>
<p><span style="font-size:18px"><strong>Example:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
A[] = 1 2 3 4 5
<strong>Output:
</strong>3 2
<strong>Explanation:
</strong>There are 3 odd elements (1, 3, 5)
and 2 even elements (2 and 4).</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Your task is to complete the function <strong>countOddEven</strong>() which should print number of odd and number of even elements in a single line seperated by space.<br>
Print a newline at the end of output.</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>6</sup><br>
1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*Function to count even and odd elements in the array
</span></span></span><span class="line"><span class="cl"><span class="cm">    * arr : Array with its elements
</span></span></span><span class="line"><span class="cl"><span class="cm">    * sizeof_array : number of array elements
</span></span></span><span class="line"><span class="cl"><span class="cm">    * countOdd : variable to count number of odd elements
</span></span></span><span class="line"><span class="cl"><span class="cm">    * countEven : variable to count number of even elements
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">countOddEven</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">sizeof_array</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">even</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sizeof_array</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="n">even</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">           <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sizeof_array</span> <span class="o">-</span> <span class="n">even</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="o">&lt;&lt;</span><span class="n">even</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">// Testcase input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">testcase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">testcase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">testcase</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">sizeof_array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">sizeof_array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">sizeof_array</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">// Array elements input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sizeof_array</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// Calling function to count even and odd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">ob</span><span class="p">.</span><span class="n">countOddEven</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">sizeof_array</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Odd Factors</title>
      <link>https://samirpaulb.github.io/problems/count-odd-factors/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-odd-factors/</guid>
      <description>Count Odd Factors - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-odd-factors">Count Odd Factors</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an integer <strong>N</strong>, count the numbers having<strong>&nbsp;an odd number of factors from 1 to N</strong> (inclusive).</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
<strong>Output:</strong>
2
<strong>Explanation:</strong>
From 1 - 5 only 2 numbers,
1 and 4 are having odd number
of factors.
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 1
<strong>Output:</strong>
1
<strong>Explanation:</strong>
1 have only 1(odd)
factor
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>count()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the total count of numbers&nbsp;from 1 to N having an odd number of factors.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br>
<strong>Expected Space Complexity:</strong> O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
0 &lt;= N &lt;= 10<sup>9</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nf">sqrt</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Of Camel Case Characters</title>
      <link>https://samirpaulb.github.io/problems/count-of-camel-case-characters/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-of-camel-case-characters/</guid>
      <description>Count Of Camel Case Characters - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-of-camel-case-characters">Count of camel case characters</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a string. Count the number of Camel Case characters in it.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
S = "ckjkUUYII"
<strong>Output:</strong> 5
<strong>Explanation</strong>: Camel Case characters present:
U, U, Y, I and I.
</span>
</pre>
<p><span style="font-size:18px">â€‹<strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: 
S = "abcd"
<strong>Output:</strong> 0
<strong>Explanation</strong>: No Camel Case character
present.</span>
</pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countCamelCase()&nbsp;</strong>which takes the string S as input and returns the count of the camel case characters in the string.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=|S|&lt;=10<sup>5</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>   
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">countCamelCase</span> <span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="c1">//code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">90</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    	    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    	<span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">string</span> <span class="n">s</span><span class="p">;</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="n">ob</span><span class="p">.</span><span class="n">countCamelCase</span> <span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Contributed By: Pranay Bansal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Count Total Set Bits</title>
      <link>https://samirpaulb.github.io/problems/count-total-set-bits/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/count-total-set-bits/</guid>
      <description>Count Total Set Bits - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="count-total-set-bits">Count total set bits</h1>
<h2 id="medium">Medium</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">You are given a number<strong> N</strong>. Find the <strong>total count of set bits </strong>for all numbers from 1 to N(both inclusive).</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: N = 4
<strong>Output</strong>: 5
<strong>Explanation</strong>:
For numbers from 1 to 4.
For 1: 0 0 1 = 1 set bits
For 2: 0 1 0 = 1 set bits
For 3: 0 1 1 = 2 set bits
For 4: 1 0 0 = 1 set bits
Therefore, the total set bits is 5.</span>
</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input</strong>: N = 17
<strong>Output</strong>: 35
<strong>Explanation</strong>: From numbers 1 to 17(both inclusive), 
the total number of set bits is 35.</span></pre>
<p><br>
<strong>Your Task:&nbsp;</strong><span style="font-size:18px">The task is to complete the function <strong>countSetBits</strong>() that takes <strong>n as a parameter </strong>and returns the<strong> count of all bits</strong>.<br>
<br>
<strong>Expected Time Complexity:</strong>&nbsp;O(log N).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br>
<br>
<span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1 ≤ N ≤ 10<sup>8</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// n: input to count the number of set bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//Function to return sum of count of set bits in the integers from 1 to n.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max2</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">c</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">countSetBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your logic here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">max2</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">countSetBits</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Driver code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	 <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	 <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">// input testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	 <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="c1">//while testcases exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	 <span class="p">{</span>
</span></span><span class="line"><span class="cl">	       <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	       <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span> <span class="c1">//input n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	       <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">countSetBits</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span><span class="c1">// print the answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	  <span class="p">}</span>
</span></span><span class="line"><span class="cl">	  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Cumulative Frequency Of Count Of Each Element In An Unsorted Array</title>
      <link>https://samirpaulb.github.io/problems/cumulative-frequency-of-count-of-each-element-in-an-unsorted-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/cumulative-frequency-of-count-of-each-element-in-an-unsorted-array/</guid>
      <description>Cumulative Frequency Of Count Of Each Element In An Unsorted Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="cumulative-frequency-of-count-of-each-element-in-an-unsorted-array">Cumulative frequency of count of each element in an unsorted array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array of elements. The task is to calculate the cumulative frequency of each element of the array.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input :</strong> Arr[] = {1, 2, 2, 1, 3, 4}
<strong>Output :</strong> 2 4 5 6
<strong>Explanation:
</strong>Here we have an array arr[] = [1, 3, 2, 
                               1, 2, 4]
Output :1-&gt;2
&nbsp; &nbsp; &nbsp; &nbsp; 2-&gt;4
&nbsp; &nbsp; &nbsp; &nbsp; 3-&gt;5
&nbsp; &nbsp; &nbsp; &nbsp; 4-&gt;6
So, the return array will have [2, 4, 5, 6] 
as an output.

</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input :</strong> Arr[] = {1, 2, 1, 2, 1, 2}
<strong>Output :</strong> 3 6
</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function<strong> countfreq()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong> and return the <strong>array of cumulative frequency values</strong>. The driver code takes care of the printing.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(NLOG(N)).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ A[i] ≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">countFreq</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="c1">// Complete the function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">m</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">it</span><span class="p">:</span><span class="n">m</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span><span class="o">+=</span><span class="n">it</span><span class="p">.</span><span class="n">second</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">v</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">countFreq</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">i</span><span class="p">:</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Data Type</title>
      <link>https://samirpaulb.github.io/problems/data-type/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/data-type/</guid>
      <description>Data Type - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="data-type">Data Type</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Geek is learning a new programming language. As data type forms the most fundamental part of a language, Geek is learning them with focus and needs your help. Given a data type, help Geek in finding the size of it in byte.</span></p>
<p><span style="font-size:18px">Data Type - <strong>Character, Integer, Long, Float and Double</strong></span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> Character</span>
<span style="font-size:18px"><strong>Output:</strong> 1</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> Integer</span>
<span style="font-size:18px"><strong>Output:</strong> 4</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong></span></p>
<p><span style="font-size:18px">Complete the function <strong>dataTypeSize()</strong> which takes a string as input and returns&nbsp;the size of the data type represented by the given string in byte unit.</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// {Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">dataTypeSize</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">str</span> <span class="o">==</span> <span class="s">&#34;Character&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="o">==</span> <span class="s">&#34;Integer&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="o">==</span> <span class="s">&#34;Long&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="o">==</span> <span class="s">&#34;Float&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">str</span> <span class="o">==</span> <span class="s">&#34;Double&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">dataTypeSize</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Delete A Node In Single Linked List</title>
      <link>https://samirpaulb.github.io/problems/delete-a-node-in-single-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/delete-a-node-in-single-linked-list/</guid>
      <description>Delete A Node In Single Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="delete-a-node-in-single-linked-list">Delete a Node in Single Linked List</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list and an integer x.Delete x<sup>th</sup> node from the&nbsp;singly&nbsp;linked list. </span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span><span style="font-size:18px"><strong> </strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>1 -&gt; 3 -&gt; 4 
&nbsp;     </span> <span style="font-size:18px">x = 3</span>
<span style="font-size:18px"><strong>Output: </strong>1 -&gt; 3</span>
<span style="font-size:18px"><strong>Explanation:
</strong></span><span style="font-size:18px">After deleting the node at 3rd
</span><span style="font-size:18px">position (1-base indexing), the
</span><span style="font-size:18px">linked list is as 1 -&gt; 3. </span>
</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input: </strong>1 -&gt; 5 -&gt; 2 -&gt; 9 </span>
<span style="font-size:18px">x = 2<strong>
Output: </strong>1 -&gt; 2 -&gt; 9
<strong>Explanation: </strong></span>
<span style="font-size:18px">After deleting the node at 2nd</span>
<span style="font-size:18px">position (1-based indexing), the</span>
<span style="font-size:18px">linked list is as 1 -&gt; 2 -&gt; 9.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your task:&nbsp;</strong>Your task is to complete the method <strong>deleteNode()</strong> which takes two arguments: the address of the head of the linked list and an integer x. The function returns the head of the modified linked list.</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= T &lt;= 300<br>
2 &lt;= N &lt;= 100<br>
1 &lt;= x &lt;= N</span><br>
&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83">83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84">84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85">85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86">86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87">87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88">88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89">89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90">90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91">91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92">92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93">93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94">94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95">95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96">96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97">97</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// C program to find n&#39;th Node in linked list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">append</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">**</span> <span class="n">head_ref</span><span class="p">,</span> <span class="k">struct</span> <span class="nc">Node</span> <span class="o">**</span><span class="n">tail_ref</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="kt">int</span> <span class="n">new_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">new_node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">new_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">head_ref</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="o">*</span><span class="n">head_ref</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="o">*</span><span class="n">tail_ref</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">tail_ref</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Function to get the middle of the linked list*/</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="nf">deleteNode</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span><span class="kt">int</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="p">(</span><span class="n">head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Driver program to test above function*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>  <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">head</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tail</span><span class="p">,</span> <span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">kk</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">kk</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="n">kk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node 
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* next;
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x){
</span></span></span><span class="line"><span class="cl"><span class="cm">        data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">        next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">    }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*You are required to complete below method*/</span>
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">deleteNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Delete Middle Of Linked List</title>
      <link>https://samirpaulb.github.io/problems/delete-middle-of-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/delete-middle-of-linked-list/</guid>
      <description>Delete Middle Of Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="delete-middle-of-linked-list">Delete Middle of Linked List</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list, delete <strong>middle&nbsp;</strong>of the linked list. For example, if given linked list is 1-&gt;2-&gt;<strong>3</strong>-&gt;4-&gt;5 then linked list should be modified to 1-&gt;2-&gt;4-&gt;5.<br>
If there are <strong>even</strong> nodes, then there would be <strong>two middle </strong>nodes, we need to delete the second middle element. For example, if given linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 then it should be modified to 1-&gt;2-&gt;3-&gt;5-&gt;6.</span><br>
<span style="font-size:18px">If the input linked list is NULL or has 1 node, then it should return NULL</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5
<strong>Output: </strong>1 2 4 5</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1
<strong>Output: </strong>2 4 6 5 1</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function <strong>deleteMid</strong>() which should delete the middle element from the linked list and&nbsp;return the head&nbsp;of the modified linked list.&nbsp;If the linked list is empty then it should return NULL.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 1000<br>
1 &lt;= value &lt;= 1000</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83">83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84">84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85">85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86">86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87">87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88">88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89">89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90">90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91">91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92">92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93">93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94">94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95">95</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp"> 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Function to get the middle of the linked list*/</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="nf">deleteMid</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">		<span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">	<span class="p">}</span>  
</span></span><span class="line"><span class="cl">	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">head</span> <span class="o">=</span> <span class="n">deleteMid</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node:
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* next;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x){
</span></span></span><span class="line"><span class="cl"><span class="cm">        data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">        next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">    }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Deletes middle of linked list and returns head of the modified list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">deleteMid</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Your Code Here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Delete Without Head Pointer</title>
      <link>https://samirpaulb.github.io/problems/delete-without-head-pointer/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/delete-without-head-pointer/</guid>
      <description>Delete Without Head Pointer - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="delete-without-head-pointer">Delete without head pointer</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">You are given a pointer/ reference to the node which is to be deleted from the&nbsp;linked list of <strong>N&nbsp;</strong>nodes. The task is to delete the node. Pointer/ reference to head node is not given.&nbsp;</span><br>
<span style="font-size:18px"><strong>Note:</strong> No head reference is given to you. It is&nbsp;guaranteed&nbsp;that the node to be deleted is<strong>&nbsp;</strong>not a tail node<strong>&nbsp;</strong>in the linked list.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 2
value[] = {1,2}
node = 1
<strong>Output: </strong>2<strong>
Explanation: </strong>After deleting 1 from the
linked list, we have remaining nodes
as 2.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
value[] = {10,20,4,30}
node = 20
<strong>Output: </strong>10 4 30<strong>
Explanation: </strong>After deleting 20 from
the linked list, we have remaining
nodes as 10, 4 and 30.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You only need to complete the <strong>function deleteNode </strong>that takes <strong>reference </strong>to the node that needs to be <strong>deleted</strong>. The <strong>printing </strong>is done <strong>automatically </strong>by the<strong> driver code</strong>.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity</strong> : O(1)<br>
<strong>Expected Auxilliary Space</strong> : O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
2 &lt;= N &lt;= 10<sup>3</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Node</span> <span class="o">*</span><span class="nf">findNode</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">search_for</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">search_for</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">insert</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">=</span><span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Function to print linked list */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">  int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">  struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">  Node(int x) {
</span></span></span><span class="line"><span class="cl"><span class="cm">    data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">    next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">}*head;
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to delete a node without any reference to head pointer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">deleteNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">del</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">del</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">del</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">del</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Drier program to test above function*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* Start with the empty list */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">insert</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span> <span class="o">*</span><span class="n">del</span> <span class="o">=</span> <span class="n">findNode</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">del</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">del</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ob</span><span class="p">.</span><span class="n">deleteNode</span><span class="p">(</span><span class="n">del</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Display Longest Name</title>
      <link>https://samirpaulb.github.io/problems/display-longest-name/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/display-longest-name/</guid>
      <description>Display Longest Name - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="display-longest-name">Display longest name</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a list of names, display the longest name.</span></p>
<p><br>
<span style="font-size:18px"><strong>Example:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
names[] = { "Geek", "Geeks", "Geeksfor",
  "GeeksforGeek", "GeeksforGeeks" }</span>

<span style="font-size:18px"><strong>Output:</strong>
GeeksforGeeks</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>longest()</strong>&nbsp;which takes the array <strong>names[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and <strong>returns</strong> the Longest name in the list of names.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1 &lt;= N &lt;= 100</span><br>
<span style="font-size:18px">1 &lt;= |length of name| &lt;= 1000</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">longest</span><span class="p">(</span><span class="n">string</span> <span class="n">names</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="n">string</span> <span class="n">res</span> <span class="o">=</span> <span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">       <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="k">if</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">res</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">           <span class="n">res</span> <span class="o">=</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">string</span> <span class="n">names</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">longest</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Distance Of Nearest Cell Having 1</title>
      <link>https://samirpaulb.github.io/problems/distance-of-nearest-cell-having-1/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/distance-of-nearest-cell-having-1/</guid>
      <description>Distance Of Nearest Cell Having 1 - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="distance-of-nearest-cell-having-1">Distance of nearest cell having 1</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a binary grid of <strong>n*m</strong>. Find the distance of the nearest 1 in the grid&nbsp;for each cell.<br>
The distance is calculated as&nbsp;<strong>|i<sub>1</sub>&nbsp; - i<sub>2</sub>| + |j<sub>1</sub>&nbsp;- j<sub>2</sub>|</strong>, where i<sub>1</sub>, j<sub>1</sub>&nbsp;are the row number and column number of the current cell, and i<sub>2</sub>, j<sub>2</sub>&nbsp;are the row number and column number of the nearest cell having value 1.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>grid = {{0,1,1,0},{1,1,0,0},{0,0,1,1}}
<strong>Output: </strong>{{1,0,0,1},{0,0,1,1},{1,1,0,0}}
<strong>Explanation: </strong>The grid is-
0 1 1 0&nbsp;
1 1 0 0&nbsp;
0 0 1 1&nbsp;
0's at (0,0), (0,3), (1,2), (1,3), (2,0) and
(2,1) are at a distance of 1 from 1's at (0,1),
(0,2), (0,2), (2,3), (1,0) and (1,1)
respectively.
<img alt="" src="https://media.geeksforgeeks.org/wp-content/uploads/20221107154436/WhatsAppImage20221107at34408PM.jpeg" style="height:168px; width:198px"></span>

</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>grid = {{1,0,1},{1,1,0},{1,0,0}}
<strong>Output: </strong>{{0,1,0},{0,0,1},{0,1,2}}
<strong>Explanation:</strong></span><span style="font-size:18px">&nbsp;The grid is-
1 0 1
1 1 0
1 0 0
0's at (0,1), (1,2), (2,1) and (2,2) are at a 
distance of 1, 1, 1 and 2 from 1's at (0,0),
(0,2), (2,0) and (1,1) respectively.
<img alt="" src="https://media.geeksforgeeks.org/wp-content/uploads/20221107155306/WhatsAppImage20221107at35249PM.jpeg" style="height:153px; width:152px"></span>

</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Yout Task:</strong><br>
You don't need to read or print anything, Your task is to complete the function&nbsp;<strong>nearest()&nbsp;</strong>which takes the grid as an input parameter and returns&nbsp;a matrix of the same dimensions where the value at index (i, j) in the resultant matrix signifies the minimum distance of 1 in the matrix from grid[i][j].</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m)<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(n*m)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ n, m ≤ 500</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">            <span class="kt">bool</span> <span class="n">isValid</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to find distance of nearest 1 in the grid for each cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">nearest</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">grid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	    <span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	            <span class="k">if</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	                <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	            <span class="p">}</span>
</span></span><span class="line"><span class="cl">	        <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">	    <span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	            <span class="kt">int</span> <span class="n">newX</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	            <span class="kt">int</span> <span class="n">newY</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	            <span class="k">if</span><span class="p">(</span><span class="n">isValid</span><span class="p">(</span><span class="n">newX</span><span class="p">,</span> <span class="n">newY</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span>  <span class="n">m</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ans</span><span class="p">[</span><span class="n">newX</span><span class="p">][</span><span class="n">newY</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	                <span class="n">ans</span><span class="p">[</span><span class="n">newX</span><span class="p">][</span><span class="n">newY</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">newX</span><span class="p">,</span> <span class="n">newY</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	            <span class="p">}</span>
</span></span><span class="line"><span class="cl">	        <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">tc</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">grid</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">nearest</span><span class="p">(</span><span class="n">grid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span><span class="p">:</span> <span class="n">ans</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">j</span><span class="p">:</span> <span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Factorial</title>
      <link>https://samirpaulb.github.io/problems/factorial/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/factorial/</guid>
      <description>Factorial - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="factorial">Factorial</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a positive integer,&nbsp;<strong>N</strong>. Find the factorial of <strong>N</strong>.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
<strong>Output:</strong>
120
<strong>Explanation:</strong>
5*4*3*2*1 = 120</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 4
<strong>Output:</strong>
24
<strong>Explanation:</strong>
4*3*2*1 = 24
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>factorial()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the factorial&nbsp;of N.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Space Complexity:</strong> O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
0 &lt;= N &lt;= 18</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">N</span><span class="o">*</span><span class="nf">factorial</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">factorial</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find Minimum And Maximum Element In An Array</title>
      <link>https://samirpaulb.github.io/problems/find-minimum-and-maximum-element-in-an-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-minimum-and-maximum-element-in-an-array/</guid>
      <description>Find Minimum And Maximum Element In An Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-minimum-and-maximum-element-in-an-array">Find minimum and maximum element in an array</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an array<strong> A</strong> of size <strong>N</strong> of integers. Your task is to find the <strong>minimum and maximum </strong>elements in the&nbsp;array.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 6
A[] = {3, 2, 1, 56, 10000, 167}
<strong>Output:</strong>
min = 1, max =  10000</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
A[]  = {1, 345, 234, 21, 56789}
<strong>Output:</strong>
min = 1, max = 56789</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>getMinMax()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the <strong>minimum and maximum</strong> element of the&nbsp;array.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup><br>
1 &lt;= A<sub>i</sub> &lt;=10<sup>12</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define ll long long
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">pair</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">getMinMax</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ll</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pp</span> <span class="o">=</span> <span class="n">getMinMax</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pp</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">pp</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pair</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">getMinMax</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">mine</span> <span class="o">=</span> <span class="mi">1000000000001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">maxe</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// max 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxe</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">maxe</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// main 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">mine</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">mine</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ans</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">mine</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ans</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">maxe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find Patterns</title>
      <link>https://samirpaulb.github.io/problems/find-patterns/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-patterns/</guid>
      <description>Find Patterns - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-patterns">Find patterns</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two&nbsp;strings S and&nbsp;W. Find the number of times W appears as a subsequence of&nbsp;string S where every character of string S can be included in forming at most one subsequence.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1: </strong> </span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> </span>
 <span style="font-size:18px">S = "abcdrtbwerrcokokokd" </span>
 <span style="font-size:18px">W = "bcd" </span>
<span style="font-size:18px"><strong>Output:</strong> </span>
 <span style="font-size:18px">2</span>
<span style="font-size:18px"><strong>Explanation:</strong> </span>
<span style="font-size:18px">The two subsequences of string W are</span>
<span style="font-size:18px">{ S<sub>1</sub></span><span style="font-size:18px"> , S<sub>2</sub></span><span style="font-size:18px"> , S<sub>3</sub></span><span style="font-size:18px"> } and { S<sub>6</sub></span><sub> </sub><span style="font-size:18px">, S<sub>11</sub></span><span style="font-size:18px"> , S</span><sub>18</sub><span style="font-size:18px"> }</span>
<span style="font-size:18px">(Assuming 0- based indexing).</span>
</pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 2: </span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong> </span>
<span style="font-size:18px">S = "ascfret" </span>
<span style="font-size:18px">W = "qwer" </span>
<span style="font-size:18px"><strong>Output:</strong> </span>
<span style="font-size:18px">0</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">No valid subsequences are possible.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>numberOfSubsequences()</strong>&nbsp;which takes the string S and string W<strong>&nbsp;</strong>as input parameters&nbsp;and returns the number of subsequences of string W in string S.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=|S|&lt;=1000<br>
1&lt;=|W|&lt;=|S|</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">numberOfSubsequences</span><span class="p">(</span><span class="n">string</span> <span class="n">S</span><span class="p">,</span> <span class="n">string</span> <span class="n">W</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">cunt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">       <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">S</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">                   
</span></span><span class="line"><span class="cl">                       <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                       <span class="n">i</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                       
</span></span><span class="line"><span class="cl">                        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                       <span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="err">&#39;</span><span class="o">-</span><span class="mi">1</span><span class="err">&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="n">W</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="n">W</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="n">cunt</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="n">cunt</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">S</span><span class="p">,</span><span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">S</span> <span class="o">&gt;&gt;</span> <span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">numberOfSubsequences</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">W</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find The Element That Appears Once</title>
      <link>https://samirpaulb.github.io/problems/find-the-element-that-appears-once/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-the-element-that-appears-once/</guid>
      <description>Find The Element That Appears Once - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-the-element-that-appears-once">Find the element that appears once</h1>
<h2 id="medium">Medium</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a sorted array <strong>A[]</strong> of <strong>N&nbsp;</strong>positive integers having all the numbers occurring exactly twice, except&nbsp;for one number which will occur only once. Find the number occurring only once.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
A = {1, 1, 2, 5, 5}<strong>
Output: </strong>2
<strong>Explanation: 
</strong>Since 2 occurs once, while
other numbers occur twice, 
2 is the answer.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 7
A = {2, 2, 5, 5, 20, 30, 30}
<strong>Output: </strong>20
<strong>Explanation:
</strong>Since 20 occurs once, while
other numbers occur twice, 
20 is the answer.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>search()&nbsp;</strong>which takes two&nbsp;arguments(array A and integer N) and returns the number occurring only once.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(Log(N)).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints</strong><br>
0 &lt; &nbsp; <strong>N</strong>&nbsp; &lt;= 10^6<br>
0 &lt;= <strong>A[i]</strong> &lt;= 10^9</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>	
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">search</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">//code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">^</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Driver program
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ob</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find The Element That Appears Once In Sorted Array</title>
      <link>https://samirpaulb.github.io/problems/find-the-element-that-appears-once-in-sorted-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-the-element-that-appears-once-in-sorted-array/</guid>
      <description>Find The Element That Appears Once In Sorted Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-the-element-that-appears-once-in-sorted-array">Find the element that appears once in sorted array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted array arr[] of size N. Find the element that appears only once in the array. All other elements appear exactly twice.&nbsp;</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 11
arr[] = {1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65}
<strong>Output:</strong> 4
<strong>Explanation:</strong> 4 is the only element that 
appears exactly once.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task: &nbsp;</strong><br>
You don't need to read input or print anything. Complete the function<strong> findOnce() </strong>which takes sorted array and its size as its input parameter and returns the element that appears only once.&nbsp;</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(log N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&nbsp;&lt;= N &lt;= 10<sup>5</sup><br>
-10<sup>5</sup>&nbsp;&lt;= arr[i] &lt;=&nbsp;10<sup>5</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Driver code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">findOnce</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="o">^=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">findOnce</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find The Frequency</title>
      <link>https://samirpaulb.github.io/problems/find-the-frequency/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-the-frequency/</guid>
      <description>Find The Frequency - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-the-frequency">Find the Frequency</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a vector of <strong>N</strong> positive integers and an integer <strong>X</strong>. The task is to find the <strong>frequency </strong>of X in vector.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1: </strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
vector = {1, 1, 1, 1, 1}
X = 1
<strong>Output: </strong>
5
<strong>Explanation: </strong>Frequency of 1 is 5.</span>
</pre>
<p><span style="font-size:18px"><strong>Your&nbsp;Task:</strong><br>
Your task is to complete the function <strong>findFrequency</strong>() which should count the frequency of X and return it.</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/*Function to find frequency of x
</span></span></span><span class="line"><span class="cl"><span class="cm">* x : element whose frequency is to be found
</span></span></span><span class="line"><span class="cl"><span class="cm">* v : input vector
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">findFrequency</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">//Brute force approcah
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// int count = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// for(int i = 0 ; i &lt; v.size(); i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     if(v[i] == x)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     count++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// return count;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">//using map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="n">mp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">mp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">testcase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">testcase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">testcase</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">// Declaring vector 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        
</span></span><span class="line"><span class="cl">	    <span class="c1">// Taking vector element input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">// element whose frequency to be find
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">findFrequency</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find The Median</title>
      <link>https://samirpaulb.github.io/problems/find-the-median/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-the-median/</guid>
      <description>Find The Median - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-the-median">Find the median</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array arr[] of N integers, calculate the median</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N =<strong> </strong>5
arr[] = 90 100 78 89 67
<strong>Output: </strong>89</span>
<span style="font-size:18px"><strong>Explanation: </strong>After sorting the array 
middle element is the median</span> 

</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N =<strong> </strong>4
arr[] = 56 67 30 79
<strong>Output: </strong></span><span style="font-size:18px">61</span>
<span style="font-size:18px"><strong>Explanation: </strong>In case of even number of 
elements, average of two middle elements 
is the median.</span>

</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>find_median()</strong>&nbsp;which takes the array as input parameter and returns the floor value of the median.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(n * log(n))<br>
<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= Length of Array &lt;= 100<br>
1 &lt;= Elements of Array &lt;= 100</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">find_median</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">		    <span class="c1">// Code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		    <span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">		    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		        <span class="k">return</span> <span class="n">v</span><span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">		    <span class="p">}</span>
</span></span><span class="line"><span class="cl">		    <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		        <span class="k">return</span> <span class="nf">floor</span><span class="p">((</span><span class="n">v</span><span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">)]</span><span class="o">+</span><span class="n">v</span><span class="p">[</span><span class="n">floor</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		    <span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    	<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">find_median</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Find Triplets With Zero Sum</title>
      <link>https://samirpaulb.github.io/problems/find-triplets-with-zero-sum/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/find-triplets-with-zero-sum/</guid>
      <description>Find Triplets With Zero Sum - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="find-triplets-with-zero-sum">Find triplets with zero sum</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size: 18px;">Given an array <strong>arr[]&nbsp;</strong>of&nbsp;<strong>n</strong> integers. Check whether it contains a triplet that sums up to zero.&nbsp;<br></span></p>
<p><span style="font-size: 18px;"><strong>Note: </strong>Return 1, if there is at least one triplet following the condition else return 0.</span></p>
<p><span style="font-size: 18px;"><strong>Example 1:</strong></span></p>
<pre><span style="font-size: 18px;"><strong>Input</strong>: n = 5, arr[] = {0, -1, 2, -3, 1}
<strong>Output</strong>: 1
<strong>Explanation</strong>: 0, -1 and 1 forms a triplet
with sum equal to 0.</span></pre>
<p><span style="font-size: 18px;"><strong>Example 2:</strong></span></p>
<pre><span style="font-size: 18px;"><strong>Input</strong>: n = 3, arr[] = {1, 2, 3}
<strong>Output</strong>: 0
<strong>Explanation</strong>: No triplet with zero sum exists. </span></pre>
<p><br><strong><span style="font-size: 18px;">Your Task:</span></strong><br><span style="font-size: 18px;">You don't need to read input or print anything. Your task is to complete the boolean&nbsp;function&nbsp;<strong>findTriplets()</strong>&nbsp;which takes the array arr[] and the size of the array (n)&nbsp;as inputs and print 1 if the function returns true else print 0 if the function returns false.&nbsp;</span><br><br><span style="font-size: 18px;"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)</span><br><span style="font-size: 18px;"><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span><br><br><span style="font-size: 18px;"><strong>Constrains:</strong><br>1 &lt;= n&nbsp;&lt;= 10<sup>4</sup></span><br><span style="font-size: 18px;">-10<sup>6</sup></span><span style="font-size: 18px;">&nbsp;&lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p></div>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Finding Middle Element In A Linked List</title>
      <link>https://samirpaulb.github.io/problems/finding-middle-element-in-a-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/finding-middle-element-in-a-linked-list/</guid>
      <description>Finding Middle Element In A Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="finding-middle-element-in-a-linked-list">Finding middle element in a linked list</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list of <strong>N</strong> nodes.<br>
The task is to find the <strong>middle</strong>&nbsp;of the linked list. For example, if the&nbsp;linked list is<br>
<strong>1-&gt; 2-&gt;3-&gt;4-&gt;5</strong>,<strong>&nbsp;</strong>then the middle node of the list is&nbsp;<strong>3</strong>.<br>
If there are&nbsp;two middle nodes(in case, when&nbsp;<strong>N</strong>&nbsp;is even),&nbsp;print the <strong>second middle</strong> element.<br>
For example, if the linked list given is <strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</strong>, then the middle node of the list is <strong>4</strong>.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong><strong><span style="font-size:18px">
</span></strong><span style="font-size:18px">LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5
<strong>Output: </strong>3 
<strong>Explanation:</strong> 
Middle of linked list is 3.</span>
</pre>
<p><strong><span style="font-size:18px">Example 2:&nbsp;</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong><strong><span style="font-size:18px">
</span></strong><span style="font-size:18px">LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1
<strong>Output: </strong>7 
<strong>Explanation:</strong> 
Middle of linked list is 7.</span>
</pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function<span style="font-size:18px"> </span><strong>getMiddle</strong>() which takes a head reference as the only argument and should return the data at the middle node of the linked list.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 5000</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83">83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84">84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85">85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86">86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87">87</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>  
</span></span><span class="line"><span class="cl">    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Link list Node 
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node* next;
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x){
</span></span></span><span class="line"><span class="cl"><span class="cm">        data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">        next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">    }
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">}; */</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* Should return data of middle node. If linked list is empty, then  -1*/</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">getMiddle</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">getMiddle</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>First And Last Occurrences Of X</title>
      <link>https://samirpaulb.github.io/problems/first-and-last-occurrences-of-x/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/first-and-last-occurrences-of-x/</guid>
      <description>First And Last Occurrences Of X - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="first-and-last-occurrences-of-x">First and last occurrences of x</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted array <strong>arr</strong> containing <strong>n</strong> elements with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element <strong>x</strong> in the given array.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
n=9, x=5
arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }
<strong>Output:</strong>  2 5
<strong>Explanation</strong>: First occurrence of 5 is at index 2 and last
&nbsp;            occurrence of 5 is at index 5. 
</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>n=9, x=7
arr[] = { 1, 3, 5, 5, 5, 5, 7, 123, 125 }
<strong>Output:</strong>  6 6 

</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Since, this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>find</strong>() that takes <strong>array arr, integer n and integer x</strong> as parameters and returns the required answer.<br>
<strong>Note:</strong> If the number <strong>x</strong> is not found in the array just return both index as -1.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(logN)<br>
<strong>Expected Auxiliary Space:</strong> O(1).</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>7</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span> <span class="p">,</span> <span class="kt">int</span> <span class="n">x</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span>  <span class="n">x</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="n">ans</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ans</span><span class="p">[</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">],</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Gcd Of Two Numbers</title>
      <link>https://samirpaulb.github.io/problems/gcd-of-two-numbers/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/gcd-of-two-numbers/</guid>
      <description>Gcd Of Two Numbers - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="gcd-of-two-numbers">GCD of two numbers</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given two positive integers A and B, find GCD of A and B.</span></p>
<p><br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> A = 3, B = 6
<strong>Output:</strong> 3
<strong>Explanation:</strong> GCD of 3 and 6 is 3</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> A = 1, B = 1
<strong>Output:</strong> 1
<strong>Explanation:</strong> GCD of 1 and 1 is 1</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task: &nbsp;</strong><br>
You don't need to read input or print anything. Complete the function <strong>gcd()</strong> which takes two positive integers as input parameters and returns an integer.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(log(min(A, B)))<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1) </span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ A, B ≤ 10<sup>9</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">gcd</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">B</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">	<span class="p">{</span> 
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">if</span><span class="p">(</span><span class="n">B</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span> <span class="o">%</span> <span class="n">B</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">A</span> <span class="o">&gt;&gt;</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       	<span class="n">cout</span> <span class="o">&lt;&lt;</span>  <span class="n">ob</span><span class="p">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Generate Ip Addresses</title>
      <link>https://samirpaulb.github.io/problems/generate-ip-addresses/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/generate-ip-addresses/</guid>
      <description>Generate Ip Addresses - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="generate-ip-addresses">Generate IP Addresses</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a string <strong>S</strong>&nbsp;containing only digits, Your task is to complete the function <strong>genIp()&nbsp;</strong>which returns a vector containing all possible combinations&nbsp;of <strong>valid</strong> IPv4 IP addresses and takes only a string <strong>S</strong>&nbsp;as its only argument.<br>
<strong>Note: </strong>Order doesn't matter. A <strong>valid</strong> IP address must be in the form of A.B.C.D, where A, B, C, and D are numbers from 0-255. The numbers cannot be 0 prefixed unless they are 0.<br>
<br>
<br>
For string 11211 the IP address possible are&nbsp;<br>
1.1.2.11<br>
1.1.21.1<br>
1.12.1.1<br>
11.2.1.1</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>S = 1111
<strong>Output: </strong>1.1.1.1
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
S = 55
<strong>Output:</strong> -1</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong></span></p>
<p><span style="font-size:18px">Your task is to complete the function <strong>genIp()&nbsp;</strong>which returns a vector containing all possible combinations&nbsp;of valid IPv4 IP addresses&nbsp;or <strong>-1 if no such IP address could be generated</strong> through the input string <strong>S</strong>,&nbsp;the only argument to the function.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N * N * N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(N * N * N * N)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=16<br>
here, N = length of S.<br>
S only contains digits(i.e. 0-9)</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*You are required to complete this method*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">isValid</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">sub</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">sub</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">stoi</span><span class="p">(</span><span class="n">sub</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">255</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">backtrack</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">current</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">current</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span> <span class="n">current</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span> <span class="n">current</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span> <span class="n">current</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">min</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()));</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">isValid</span><span class="p">(</span><span class="n">sub</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">sub</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">backtrack</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">current</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">genIp</span><span class="p">(</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">backtrack</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">current</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/*generating naively*/</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">str</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">genIp</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">str</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">u</span> <span class="p">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">u</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>K Largest Elements</title>
      <link>https://samirpaulb.github.io/problems/k-largest-elements/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/k-largest-elements/</guid>
      <description>K Largest Elements - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="k-largest-elements">K largest elements</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an array of N positive integers, print k largest elements from the array.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5, k = 2
arr[] = {12,5,787,1,23}
<strong>Output: </strong>787 23<strong>
Explanation: </strong>First largest element in
the array is 787 and the second largest
is 23.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 7, k = 3
arr[] = {1,23,12,9,30,2,50}
<strong>Output: </strong>50 30 23<strong>
Explanation: </strong>Three Largest element in
the array are 50, 30 and 23.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Complete the function <strong>kLargest()</strong> that takes the array, N and K as input parameters and returns a list of k largest element in descending order.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N log K)<br>
<strong>Expected Auxiliary Space:</strong> O(K)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>4</sup><br>
K ≤ N<br>
1 ≤ array[i] ≤ 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to return k largest elements from an array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">kLargest</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr</span> <span class="o">+</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">kLargest</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Largest Element In Array</title>
      <link>https://samirpaulb.github.io/problems/largest-element-in-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/largest-element-in-array/</guid>
      <description>Largest Element In Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="largest-element-in-array">Largest Element in Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>A[] </strong>of size <strong>n</strong>. The task is to find the largest element in it.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
n = 5
A[] = {1, 8, 7, 56, 90}
<strong>Output:</strong>
90
<strong>Explanation:</strong>
The largest element of given array is 90.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
n = 7
A[] = {1, 2, 0, 3, 2, 4, 5}
<strong>Output:</strong>
5
<strong>Explanation:</strong>
The largest element of given array is 5.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>largest()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>n&nbsp;</strong>as inputs and returns the maximum element in the array.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= n&lt;= 10<sup>3</sup><br>
0 &lt;= A[i] &lt;= 10<sup>3</sup><br>
Array may contain duplicate elements.&nbsp;</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">largest</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">largest</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Leaders In An Array</title>
      <link>https://samirpaulb.github.io/problems/leaders-in-an-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/leaders-in-an-array/</guid>
      <description>Leaders In An Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="leaders-in-an-array">Leaders in an array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array A of positive integers. Your task is to find the leaders in the array.&nbsp;An element of array is leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.&nbsp;</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>n = 6
A[] = {16,17,4,3,5,2}
<strong>Output: </strong>17 5 2<strong>
Explanation: </strong>The first leader is 17 
as it is greater than all the elements
to its right.&nbsp; Similarly, the next 
leader is 5. The right most element 
is always a leader so it is also 
included.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>n = 5
A[] = {1,2,3,4,0}
<strong>Output: </strong>4 0
</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.&nbsp;The task is to complete the function <strong>leader</strong>() which takes array A and n&nbsp;as input parameters and&nbsp;returns an array of leaders in order of their appearance.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong></span><span style="font-size:18px">&nbsp;O(n)</span><br>
<span style="font-size:18px"><strong>Expected Auxiliary Space:</strong>&nbsp;O(n)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= n&nbsp;&lt;= 10<sup>7</sup><br>
0 &lt;= A<sub>i</sub> &lt;= 10<sup>7</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// C++ program to remove recurring digits from
</span></span></span><span class="line"><span class="cl"><span class="c1">// a given number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to find the leaders in the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">leaders</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">reverse</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">long</span> <span class="kt">long</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span><span class="c1">//testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span><span class="c1">//total size of array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//inserting elements in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//calling leaders() function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">leaders</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//printing elements of the vector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="n">it</span><span class="o">!=</span><span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="n">it</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Left Most And Right Most Index</title>
      <link>https://samirpaulb.github.io/problems/left-most-and-right-most-index/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/left-most-and-right-most-index/</guid>
      <description>Left Most And Right Most Index - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="left-most-and-right-most-index">Left most and right most index</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element <strong>X</strong> in the given array.</span></p>
<p><strong><span style="font-size:18px">Note: </span></strong><span style="font-size:18px">If the element is not present in the array <strong>return {-1,-1} as pair</strong>.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 9
v[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}
X = 5</span>
<span style="font-size:18px"><strong>Output:</strong>
2 5</span>
<span style="font-size:18px"><strong>Explanation:
</strong>Index of first occurrence of 5 is 2
and index of last occurrence of 5 is 5.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 9
v[] = {1, 3, 5, 5, 5, 5, 7, 123, 125}
X = 7
<strong>Output:</strong>
6 6</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>indexes()</strong>&nbsp;which takes the array <strong>v[]</strong><strong>&nbsp;</strong>and an integer <strong>X&nbsp;</strong>as inputs and returns &nbsp;the first and last occurrence of the element <strong>X</strong>. If the element is not present in the array <strong>return {-1,-1} as pair</strong>.<br>
<br>
Can you solve the problem in expected time complexity?</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(Log(N))<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ v[i], X ≤ 10<sup>18</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">long</span><span class="p">,</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">indexes</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">{</span><span class="n">first</span><span class="p">,</span> <span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span><span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">long</span><span class="p">,</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">pair</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">indexes</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">first</span><span class="o">==</span><span class="n">pair</span><span class="p">.</span><span class="n">second</span> <span class="n">and</span> <span class="n">pair</span><span class="p">.</span><span class="n">first</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">pair</span><span class="p">.</span><span class="n">first</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="o">&lt;&lt;</span><span class="n">pair</span><span class="p">.</span><span class="n">second</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Left View Of Binary Tree</title>
      <link>https://samirpaulb.github.io/problems/left-view-of-binary-tree/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/left-view-of-binary-tree/</guid>
      <description>Left View Of Binary Tree - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="left-view-of-binary-tree">Left View of Binary Tree</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function <strong>leftView()</strong>, which accepts root of the tree as argument.</span></p>
<p><span style="font-size:18px">Left view of following tree is 1 2 4 8.</span></p>
<p><span style="font-size:18px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \<br>
&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3<br>
&nbsp;&nbsp; /&nbsp;&nbsp; &nbsp; \ &nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \<br>
&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 7<br>
&nbsp;&nbsp; \<br>
&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp; &nbsp;</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>&nbsp;  1
&nbsp;/&nbsp; \
3&nbsp; &nbsp; 2
<strong>Output: </strong>1 3<strong>
</strong></span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong><img alt="" src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190221103723/leftview.jpg" style="height:272px; width:285px">
<strong>Output: </strong>10 20 40
</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You just have to <strong>complete </strong>the function <strong>leftView() </strong>that returns an array containing the nodes that are in&nbsp;the left view. The newline is automatically appended by the driver code.</span><br>
<span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
0 &lt;= Number of nodes &lt;= 100<br>
1 &lt;= Data of a node &lt;= 1000</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span><span class="lnt" id="hl-0-121"><a class="lnlinks" href="#hl-0-121">121</a>
</span><span class="lnt" id="hl-0-122"><a class="lnlinks" href="#hl-0-122">122</a>
</span><span class="lnt" id="hl-0-123"><a class="lnlinks" href="#hl-0-123">123</a>
</span><span class="lnt" id="hl-0-124"><a class="lnlinks" href="#hl-0-124">124</a>
</span><span class="lnt" id="hl-0-125"><a class="lnlinks" href="#hl-0-125">125</a>
</span><span class="lnt" id="hl-0-126"><a class="lnlinks" href="#hl-0-126">126</a>
</span><span class="lnt" id="hl-0-127"><a class="lnlinks" href="#hl-0-127">127</a>
</span><span class="lnt" id="hl-0-128"><a class="lnlinks" href="#hl-0-128">128</a>
</span><span class="lnt" id="hl-0-129"><a class="lnlinks" href="#hl-0-129">129</a>
</span><span class="lnt" id="hl-0-130"><a class="lnlinks" href="#hl-0-130">130</a>
</span><span class="lnt" id="hl-0-131"><a class="lnlinks" href="#hl-0-131">131</a>
</span><span class="lnt" id="hl-0-132"><a class="lnlinks" href="#hl-0-132">132</a>
</span><span class="lnt" id="hl-0-133"><a class="lnlinks" href="#hl-0-133">133</a>
</span><span class="lnt" id="hl-0-134"><a class="lnlinks" href="#hl-0-134">134</a>
</span><span class="lnt" id="hl-0-135"><a class="lnlinks" href="#hl-0-135">135</a>
</span><span class="lnt" id="hl-0-136"><a class="lnlinks" href="#hl-0-136">136</a>
</span><span class="lnt" id="hl-0-137"><a class="lnlinks" href="#hl-0-137">137</a>
</span><span class="lnt" id="hl-0-138"><a class="lnlinks" href="#hl-0-138">138</a>
</span><span class="lnt" id="hl-0-139"><a class="lnlinks" href="#hl-0-139">139</a>
</span><span class="lnt" id="hl-0-140"><a class="lnlinks" href="#hl-0-140">140</a>
</span><span class="lnt" id="hl-0-141"><a class="lnlinks" href="#hl-0-141">141</a>
</span><span class="lnt" id="hl-0-142"><a class="lnlinks" href="#hl-0-142">142</a>
</span><span class="lnt" id="hl-0-143"><a class="lnlinks" href="#hl-0-143">143</a>
</span><span class="lnt" id="hl-0-144"><a class="lnlinks" href="#hl-0-144">144</a>
</span><span class="lnt" id="hl-0-145"><a class="lnlinks" href="#hl-0-145">145</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Tree Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">leftView</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Utility function to create a new Tree Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">newNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Function to Build Tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Corner Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;N&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Creating vector of strings from input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// string after spliting by space
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span> <span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// for(string i:ip)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     cout&lt;&lt;i&lt;&lt;&#34; &#34;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// cout&lt;&lt;endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Create the root of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">ip</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Push the root to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Starting from the second element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get and remove the front of the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">currNode</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the current node&#39;s value from the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">string</span> <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the left child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the left child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// For the right child
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the right child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the right child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">buildTree</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">leftView</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* A binary tree node
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* left;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* right;
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x){
</span></span></span><span class="line"><span class="cl"><span class="cm">        data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">        left = right = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">    }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> <span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ans</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span><span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">     <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">level</span><span class="p">)</span> <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Function to return a list containing elements of left view of the binary tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">leftView</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Max Sum Subarray Of Size K</title>
      <link>https://samirpaulb.github.io/problems/max-sum-subarray-of-size-k/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/max-sum-subarray-of-size-k/</guid>
      <description>Max Sum Subarray Of Size K - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="max-sum-subarray-of-size-k">Max Sum Subarray of size K</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array of integers Arr of size <strong>N</strong> and a number <strong>K</strong>. Return&nbsp;the maximum sum of a subarray of size K.</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">N = 4, K = 2
Arr = [100, 200, 300, 400]</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">700</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">Arr<sub>3 </sub> + Arr<sub>4</sub> =700,</span>
<span style="font-size:18px">which is maximum.</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">N = 4, K = 4</span>
<span style="font-size:18px">Arr = [100, 200, 300, 400]</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">1000</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">Arr<sub>1</sub> + Arr<sub>2</sub> + Arr<sub>3 </sub> 
+ Arr<sub>4</sub> =1000,</span>
<span style="font-size:18px">which is maximum.</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function maximumSumSubarray() which takes the integer k, vector Arr with size N,&nbsp;containing the elements of the array and returns the&nbsp;maximum sum of a subarray of size K.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span><br>
&nbsp;</p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=10<sup>6</sup></span><br>
<span style="font-size:18px">1&lt;=K&lt;=N</span><br>
&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">maximumSumSubarray</span><span class="p">(</span><span class="kt">int</span> <span class="n">K</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">Arr</span> <span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">long</span> <span class="n">max_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">curr_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">K</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr_sum</span> <span class="o">+=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">max_sum</span> <span class="o">=</span> <span class="n">curr_sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">K</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr_sum</span> <span class="o">+=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">Arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">K</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">max_sum</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">max_sum</span><span class="p">,</span> <span class="n">curr_sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">max_sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">K</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">K</span><span class="p">;;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">Arr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">Arr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">maximumSumSubarray</span><span class="p">(</span><span class="n">K</span><span class="p">,</span><span class="n">Arr</span><span class="p">,</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Median Of 2 Sorted Arrays Of Different Sizes</title>
      <link>https://samirpaulb.github.io/problems/median-of-2-sorted-arrays-of-different-sizes/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/median-of-2-sorted-arrays-of-different-sizes/</guid>
      <description>Median Of 2 Sorted Arrays Of Different Sizes - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="median-of-2-sorted-arrays-of-different-sizes">Median of 2 Sorted Arrays of Different Sizes</h1>
<h2 id="hard">Hard</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two sorted arrays array1 and array2 of size <strong>m</strong> and<strong> n</strong>&nbsp;respectively. Find the median of the two sorted arrays.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>m = 3, n = 4
array1[] = {1,5,9}
array2[] = {2,3,6,7}
<strong>Output: </strong>5<strong>
Explanation: </strong>The middle&nbsp;element for
{1,2,3,5,6,7,9} is 5</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>m = 2, n = 4
array1[] = {4,6}
array2[] = {1,2,3,5}
<strong>Output: </strong>3.5</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function <strong>MedianOfArrays()</strong> that takes array1 and array2 as input and returns their median.&nbsp;<br>
<br>
Can you solve the problem in expected time complexity?</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(min(log n, log m)).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O((n+m)/2).</span></p>
<p><span style="font-size:18px"><strong>Constraints:&nbsp;</strong><br>
0 ≤ m,n ≤ 10<sup>4</sup><br>
1 ≤ array1[i], array2[i] ≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">MedianOfArrays</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">array1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">array2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">MedianOfArrays</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">array1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">array2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//Using Binary Search
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">array2</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">array1</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="k">return</span> <span class="n">MedianOfArrays</span><span class="p">(</span><span class="n">array2</span><span class="p">,</span> <span class="n">array1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">array1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">array2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">cut1</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">cut2</span> <span class="o">=</span> <span class="p">(</span><span class="n">n1</span><span class="o">+</span><span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="n">cut1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">left1</span> <span class="o">=</span> <span class="n">cut1</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="nl">INT_MIN</span> <span class="p">:</span> <span class="n">array1</span><span class="p">[</span><span class="n">cut1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">left2</span> <span class="o">=</span> <span class="n">cut2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="nl">INT_MIN</span> <span class="p">:</span> <span class="n">array2</span><span class="p">[</span><span class="n">cut2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">right1</span> <span class="o">=</span> <span class="n">cut1</span> <span class="o">==</span> <span class="n">n1</span> <span class="o">?</span> <span class="nl">INT_MAX</span> <span class="p">:</span> <span class="n">array1</span><span class="p">[</span><span class="n">cut1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">right2</span> <span class="o">=</span> <span class="n">cut2</span> <span class="o">==</span> <span class="n">n2</span> <span class="o">?</span> <span class="nl">INT_MAX</span> <span class="p">:</span> <span class="n">array2</span><span class="p">[</span><span class="n">cut2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">left1</span> <span class="o">&lt;=</span> <span class="n">right2</span> <span class="o">&amp;&amp;</span> <span class="n">left2</span> <span class="o">&lt;=</span> <span class="n">right1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">((</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">(</span><span class="n">max</span><span class="p">(</span><span class="n">left1</span><span class="p">,</span> <span class="n">left2</span><span class="p">)</span> <span class="o">+</span> <span class="n">min</span><span class="p">(</span><span class="n">right1</span><span class="p">,</span> <span class="n">right2</span><span class="p">))</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> 
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">left1</span><span class="p">,</span> <span class="n">left2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">left1</span> <span class="o">&gt;</span> <span class="n">right2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">high</span> <span class="o">=</span> <span class="n">cut1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">low</span> <span class="o">=</span> <span class="n">cut1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">array1</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">array2</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ob</span><span class="p">.</span><span class="n">MedianOfArrays</span><span class="p">(</span><span class="n">array1</span><span class="p">,</span> <span class="n">array2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Merge Sort For Linked List</title>
      <link>https://samirpaulb.github.io/problems/merge-sort-for-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/merge-sort-for-linked-list/</guid>
      <description>Merge Sort For Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="merge-sort-for-linked-list">Merge Sort for Linked List</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given Pointer/Reference to the head of the linked list, the task is to <strong>Sort the given linked list using Merge Sort</strong>.</span><br>
<span style="font-size:18px"><strong>Note:</strong>&nbsp;If the length of linked list is odd, then the&nbsp;extra node should go in the first list while splitting.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
value[]  = {3,5,2,4,1}
<strong>Output: </strong>1 2 3 4 5<strong>
Explanation: </strong>After sorting the given
linked list, the resultant matrix
will be 1-&gt;2-&gt;3-&gt;4-&gt;5.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
value[]  = {9,15,0}
<strong>Output: </strong>0 9 15<strong>
Explanation: </strong>After sorting the given
linked list , resultant will be
0-&gt;9-&gt;15.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
<strong>For C++ and Python:</strong> The task is to complete the function <strong>mergeSort</strong>() which sort the linked list using merge sort function.<br>
<strong>For Java:&nbsp;</strong>The task is to complete the function <strong>mergeSort</strong>() and return the node which can be used to print the sorted linked list.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N*Log(N))<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span><span class="lnt" id="hl-0-121"><a class="lnlinks" href="#hl-0-121">121</a>
</span><span class="lnt" id="hl-0-122"><a class="lnlinks" href="#hl-0-122">122</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Structure of the linked list node is as
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node 
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* next;
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x) { data = x;  next = NULL; }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="o">*</span> <span class="n">Mid</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Node</span><span class="o">*</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">Node</span><span class="o">*</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="k">while</span><span class="p">(</span><span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">slow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="o">*</span> <span class="nf">mergeSortedList</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">p1</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">p2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">p1</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">p2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="p">(</span><span class="n">p1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="nl">p2</span> <span class="p">:</span> <span class="n">p1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="n">Node</span><span class="o">*</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">p2</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span><span class="p">(</span><span class="n">p1</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="n">p1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">              <span class="n">p2</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">p2</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="nl">p1</span> <span class="p">:</span> <span class="n">p2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">ans</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to sort the given linked list using Merge Sort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">Mid</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">newHead</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">leftHalf</span> <span class="o">=</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">rightHalf</span> <span class="o">=</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">newHead</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mergeSortedList</span><span class="p">(</span><span class="n">leftHalf</span><span class="p">,</span> <span class="n">rightHalf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">**</span> <span class="n">head_ref</span><span class="p">,</span> <span class="kt">int</span> <span class="n">new_data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">new_node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">new_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">new_node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">head_ref</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">head_ref</span><span class="p">)</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">test</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">test</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">test</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">n</span><span class="p">,</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">tmp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">mergeSort</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printList</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Merge Two Sorted Linked Lists</title>
      <link>https://samirpaulb.github.io/problems/merge-two-sorted-linked-lists/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/merge-two-sorted-linked-lists/</guid>
      <description>Merge Two Sorted Linked Lists - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="merge-two-sorted-linked-lists">Merge two sorted linked lists</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given two sorted linked lists consisting of <strong>N and M</strong>&nbsp;nodes respectively. The task is to merge both of the list (in-place) and return head of the merged list.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4, M = 3 
valueN[] = {5,10,15,40}
valueM[] = {2,3,20}
<strong>Output: </strong>2 3 5 10 15 20 40<strong>
Explanation: </strong>After merging the two linked
lists, we have merged list as 2, 3, 5,
10, 15, 20, 40.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 2, M = 2
valueN[] = {1,1}
valueM[] = {2,4}
<strong>Output:</strong>1 1 2 4<strong>
Explanation: </strong>After merging the given two
linked list , we have 1, 1, 2, 4 as
output.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function <strong>sortedMerge</strong>() which takes references to the heads of two linked lists as the arguments and returns the head of merged linked list.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity</strong> : O(n+m)<br>
<strong>Expected Auxilliary Space</strong> : O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N, M &lt;= 10<sup>4</sup><br>
0 &lt;= Node's data &lt;= 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">sortedMerge</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Function to print Nodes in a given linked list */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Driver program to test above function*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">tail1</span> <span class="o">=</span> <span class="n">head1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail1</span> <span class="o">=</span> <span class="n">tail1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">tail2</span> <span class="o">=</span> <span class="n">head2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail2</span> <span class="o">=</span> <span class="n">tail2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">sortedMerge</span><span class="p">(</span><span class="n">head1</span><span class="p">,</span> <span class="n">head2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">  int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">  struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">  
</span></span></span><span class="line"><span class="cl"><span class="cm">  Node(int x) {
</span></span></span><span class="line"><span class="cl"><span class="cm">    data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">    next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">//Function to merge two sorted linked list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">sortedMerge</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">head1</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">head2</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">head1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">head2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">head1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">dummyNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">dummyNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">head1</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">head2</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">head1</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;=</span> <span class="n">head2</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">head1</span> <span class="o">=</span> <span class="n">head1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">head2</span> <span class="o">=</span> <span class="n">head2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head1</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head2</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dummyNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Move All Zeroes To End Of Array</title>
      <link>https://samirpaulb.github.io/problems/move-all-zeroes-to-end-of-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/move-all-zeroes-to-end-of-array/</guid>
      <description>Move All Zeroes To End Of Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="move-all-zeroes-to-end-of-array">Move all zeroes to end of array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>arr[]</strong> of <strong>N</strong> positive integers. Push all the zeros of the given array to the right&nbsp;end of the array&nbsp;while maitaining the order of non-zero elements.</span></p>
<p><br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
Arr[] = {3, 5, 0, 0, 4}
<strong>Output:</strong> 3 5 4 0 0
<strong>Explanation:</strong> The non-zero elements
preserve their order while the 0
elements are moved to the right.
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
Arr[] = {0, 0, 0, 4}
<strong>Output:</strong> 4 0 0 0
<strong>Explanation:</strong>&nbsp;4 is the only non-zero
element and it gets moved to the left.
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Complete the function <strong>pushZerosToEnd()</strong>&nbsp;which takes the&nbsp;array <strong>arr[] </strong>and its size&nbsp;<strong>n</strong>&nbsp;as input parameters&nbsp;and modifies arr[] in-place such that all the zeroes are moved to the&nbsp;right.&nbsp;&nbsp;</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N&nbsp;≤ 10<sup>5</sup><br>
0 ≤ arr<sub>i</sub> ≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="n">pushZerosToEnd</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">count</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	        <span class="n">count</span><span class="o">++</span><span class="p">;</span>    
</span></span><span class="line"><span class="cl">	        <span class="p">}</span> 
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ob</span><span class="p">.</span><span class="n">pushZerosToEnd</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Natural Sum</title>
      <link>https://samirpaulb.github.io/problems/natural-sum/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/natural-sum/</guid>
      <description>Natural Sum - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="natural-sum">Natural Sum</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given N, find s such that sum of first s natural number is N.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N = 10
<strong>Output: </strong>4
<strong>Explanation:</strong>&nbsp;Sum of first 4 natural
number is 1 + 2 + 3 + 4 = 10.     </span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N = 17
<strong>Output: </strong>-1
<strong>Explanaion: </strong>There is no such number.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read or print anyhting. Your task is to complete the function&nbsp;<strong>find()</strong>&nbsp;which takes N as input parameter and returns&nbsp;s. If not possible return -1.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(log(N))<br>
<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br>
<br>
<strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>9</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">   	<span class="kt">int</span> <span class="n">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">   	    <span class="c1">// Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   	    <span class="kt">float</span> <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">8</span><span class="o">*</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   	    <span class="k">if</span><span class="p">(</span><span class="n">ans</span> <span class="o">==</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">ans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   	    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   	    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   	<span class="p">}</span>    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">tc</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>  
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Nth Fibonacci Number</title>
      <link>https://samirpaulb.github.io/problems/nth-fibonacci-number/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/nth-fibonacci-number/</guid>
      <description>Nth Fibonacci Number - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="nth-fibonacci-number">Nth Fibonacci Number</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a positive integer n, find the nth fibonacci number.&nbsp;Since the answer can be very large, return&nbsp;the answer modulo 1000000007.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: n = 2
<strong>Output:</strong>&nbsp;1&nbsp;
<strong>Explanation</strong>: 1 is the 2nd number
of fibonacci series.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>n = 5
<strong>Output:&nbsp;</strong>5
<strong>Explanation</strong>: 5 is the 5th number
of fibonacci series.
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You dont need to read input or print anything. Complete the function <strong>nthFibonacci()&nbsp;</strong>which takes n&nbsp;as input parameter and returns nth fibonacci number.<br>
<br>
<strong>Expected Time Complexity:</strong> O(n)<br>
<strong>Expected Auxiliary Space:</strong> O(n)<br>
<br>
<strong>Constraints:</strong><br>
1&lt;= n&nbsp;&lt;=1000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">nthFibonacci</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="mi">1000000007</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="n">mod</span> <span class="o">+</span> <span class="n">b</span> <span class="o">%</span> <span class="n">mod</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">b</span> <span class="o">=</span> <span class="n">curr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">curr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">nthFibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Number Of Divisors</title>
      <link>https://samirpaulb.github.io/problems/number-of-divisors/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/number-of-divisors/</guid>
      <description>Number Of Divisors - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="number-of-divisors">Number of divisors</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given&nbsp;an integer <strong>N,</strong> find&nbsp;the number of divisors of N that are divisible by 3.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input : </strong>6
<strong>Output: </strong>2
<strong>Explanation: </strong>1, 2, 3, 6 are divisors 
of 6 out of which 3 and 6 are divisible 
by 3.
</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>10
<strong>Output: </strong>0
<strong>Explanation: </strong>1, 2, 5 and 10 are divisors 
of 10 but none of them are divisible by 3.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong></span></p>
<p><span style="font-size:18px">You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>count_divisors()</strong>&nbsp;which takes N as input parameter and returns count of divisor which are divisible by 3.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(sqrt(N))<br>
<strong>Expected Space Complexity: </strong>O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">count_divisors</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">		    <span class="c1">//Code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span><span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">3</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">     <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="p">{</span><span class="n">count</span><span class="o">++</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">count_divisors</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Odd Or Even</title>
      <link>https://samirpaulb.github.io/problems/odd-or-even/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/odd-or-even/</guid>
      <description>Odd Or Even - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="odd-or-even">Odd or Even</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a positive integer N, determine whether it is odd or even.</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">N = 1</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">odd</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">The output is self-</span>
<span style="font-size:18px">explanatory.</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">N = 2</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">even</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">The output is self-</span>
<span style="font-size:18px">explanatory.</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function oddEven() which takes the integer N and return "even" is number is even and "odd" if the number is odd.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
0 &lt;= N &lt;= 10000</span></p>
<p>&nbsp;</p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">oddEven</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="s">&#34;even&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="s">&#34;odd&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">oddEven</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>   <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Palindrome</title>
      <link>https://samirpaulb.github.io/problems/palindrome/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/palindrome/</guid>
      <description>Palindrome - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="palindrome">Palindrome</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an integer, check whether it is a palindrome or not.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>n = 55555
<strong>Output: </strong>Yes</span>
</pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>n = 123
<strong>Output: </strong>No</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>is_palindrome()&nbsp;</strong>which takes the number as input parameter and returns "Yes" if it is palindrome otherwise returns "No"(Without quotes).</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(x)<br>
<strong>Expected Space Complexity:&nbsp;</strong>O(x)&nbsp;where x is number of digits in n.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= n &lt;= 1000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">string</span> <span class="n">is_palindrome</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">		    <span class="c1">// Code here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		    <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		        <span class="kt">int</span> <span class="n">lastDigit</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">lastDigit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		    <span class="p">}</span>
</span></span><span class="line"><span class="cl">		    <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		    <span class="k">return</span> <span class="s">&#34;Yes&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		    <span class="k">else</span> 
</span></span><span class="line"><span class="cl">		    <span class="k">return</span> <span class="s">&#34;No&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    	<span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">is_palindrome</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Peak Element</title>
      <link>https://samirpaulb.github.io/problems/peak-element/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/peak-element/</guid>
      <description>Peak Element - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="peak-element">Peak element</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">An element is called a peak element if its value&nbsp;is not smaller than the value of&nbsp;its adjacent elements(if they exists).<br>
Given an array <strong>arr[]</strong> of size&nbsp;<strong>N</strong>,&nbsp;<strong>Return the index of any one of its&nbsp;peak elements</strong>.<br>
<strong>Note:&nbsp;</strong>The generated output will always be&nbsp;1 if the index that you&nbsp;return is correct. Otherwise output will be 0.&nbsp;</span></p>
<p><br>
<strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input: 
</span></strong><span style="font-size:18px">N = 3
arr[] = {1,2,3}
</span><strong><span style="font-size:18px">Possible Answer: </span></strong><span style="font-size:18px">2
<strong>Generated Output:</strong> 1
<strong>Explanation:</strong> index 2 is 3.
It is the peak element as it is 
greater than its neighbour 2.
If 2 is returned then the generated output will be 1 else 0.</span>
</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">N = 2
arr[] = {3,4}
</span><strong><span style="font-size:18px">Possible Answer: </span></strong><span style="font-size:18px">1
<strong>Output: </strong>1<strong>
Explanation: </strong>4 (at index 1) is the 
peak element as it is greater than 
its only neighbour element 3.
</span><span style="font-size:18px">If 1 is returned then the generated output will be 1 else 0.</span>
</pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">You don't have to read&nbsp;input or print anything. Complete the function <strong>peakElement</strong>() which takes the array arr[] and its size N as input parameters and return the&nbsp;index of any one of its peak elements.<br>
<br>
Can you solve the problem in expected time complexity?</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(log N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ A[] ≤ 10<sup>6</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83">83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84">84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85">85</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* The function should return the index of any
</span></span></span><span class="line"><span class="cl"><span class="cm">   peak element present in the array */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// arr: input array
</span></span></span><span class="line"><span class="cl"><span class="c1">// n: size of array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">peakElement</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">// Brute force(linear search)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">//if(n == 1) return 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       
</span></span><span class="line"><span class="cl">       <span class="c1">//if(arr[0] &gt;= arr[1]) return 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       
</span></span><span class="line"><span class="cl">       <span class="c1">//if(arr[n - 1] &gt;= arr[n - 2]) return (n - 1);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       
</span></span><span class="line"><span class="cl">       <span class="c1">//for(int i = 1; i &lt; n - 1 ; i++){
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">//       if(arr[i] &gt;= arr[i -1] &amp;&amp; arr[i] &gt;= arr[i + 1])
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">//    return i;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">//}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       
</span></span><span class="line"><span class="cl">       <span class="c1">// Optimal Approach(Binary Search)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">       <span class="k">while</span><span class="p">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">           <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl">           <span class="n">s</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">           <span class="k">else</span> <span class="n">e</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">			<span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">bool</span> <span class="n">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">A</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span> <span class="n">peakElement</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="o">&lt;</span><span class="mi">0</span> <span class="n">and</span> <span class="n">A</span><span class="o">&gt;=</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">    		<span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">1</span> <span class="n">and</span> <span class="n">A</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    		    <span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="o">==</span><span class="mi">0</span> <span class="n">and</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    		    <span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">and</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    		    <span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">A</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">a</span><span class="p">[</span><span class="n">A</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="n">and</span> <span class="n">a</span><span class="p">[</span><span class="n">A</span><span class="p">]</span><span class="o">&gt;=</span> <span class="n">a</span><span class="p">[</span><span class="n">A</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    		    <span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="k">else</span>
</span></span><span class="line"><span class="cl">    		    <span class="n">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">f</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Power Of Numbers</title>
      <link>https://samirpaulb.github.io/problems/power-of-numbers/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/power-of-numbers/</guid>
      <description>Power Of Numbers - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="power-of-numbers">Power Of Numbers</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a number and its reverse. Find that number raised to the power of its own reverse.<br>
<strong>Note:</strong> As answers can be very large, print the result modulo <strong>10<sup>9</sup> + 7</strong>.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 2
<strong>Output: </strong>4<strong>
Explanation: </strong>The reverse of 2 is 2
and after raising power of 2 by 2 
we get 4 which gives remainder as 
4 by dividing 1000000007.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 12
<strong>Output: </strong>864354781<strong>
Explanation: </strong>The reverse of 12 is 21
and 12<sup>21&nbsp;</sup>, when divided by 1000000007 
gives remainder as 864354781.</span></pre>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">You don't need to read input or print anything. You just need to complete the <strong>function pow()&nbsp;</strong>that takes two parameters <strong>N and R</strong>&nbsp;denoting the input number and its reverse and returns <strong>power </strong>of (N to R)mod(<strong>10<sup>9</sup> + 7</strong>).</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(LogN).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(LogN).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>9</sup></span></p>
<p>&nbsp;</p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp"># define mod 1000000007
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//You need to complete this fucntion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="n">power</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="kt">int</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">//Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">R</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">long</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="n">R</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">           <span class="n">ans</span> <span class="o">=</span> <span class="n">power</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl">           <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ans</span> <span class="o">*</span> <span class="n">ans</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000000007</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="k">else</span>
</span></span><span class="line"><span class="cl">       <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="n">ans</span> <span class="o">=</span> <span class="n">N</span> <span class="o">%</span> <span class="mi">1000000007</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">           <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ans</span> <span class="o">*</span> <span class="n">power</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">R</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000000007</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000000007</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="p">((</span><span class="n">ans</span> <span class="o">+</span> <span class="mi">1000000007</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000000007</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// compute reverse of a number 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">long</span> <span class="kt">long</span> <span class="nf">rev</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="n">rev_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">while</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">      <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="n">rev_num</span> <span class="o">=</span> <span class="n">rev_num</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">n</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">}</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rev_num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span><span class="c1">//testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span><span class="c1">//input N
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">R</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// reverse the given number n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">R</span> <span class="o">=</span> <span class="n">rev</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//power of the number to it&#39;s reverse
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span><span class="n">ob</span><span class="p">.</span><span class="n">power</span><span class="p">(</span><span class="n">N</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Power Set</title>
      <link>https://samirpaulb.github.io/problems/power-set/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/power-set/</guid>
      <description>Power Set - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="power-set">Power Set</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a string S, Find&nbsp;all the possible subsequences&nbsp;of the String in lexicographically-sorted order.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input : </strong>str = "abc"
<strong>Output: </strong>a ab abc ac b bc c
<strong>Explanation : </strong>There are 7 subsequences that 
can be formed from abc.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>str = "aa"
<strong>Output: </strong>a a aa
<strong>Explanation : </strong>There are 3 subsequences that 
can be formed from aa.</span>
</pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.&nbsp;</span><span style="font-size:18px">Your task is to complete the function&nbsp;<strong>AllPossibleStrings()&nbsp;</strong>which takes S as the input parameter and returns a list of all possible substrings(non-empty) that can be formed from S in lexicographically-sorted order.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(2<sup>n</sup>) where n is the length of the String<br>
<strong>Expected Space Complexity:&nbsp;</strong>O(n * 2<sup>n</sup>)</span><br>
&nbsp;</p>
<p><strong><span style="font-size:18px">Constraints:&nbsp;</span></strong><br>
<span style="font-size:18px">1 &lt;= Length of String &lt;= 16</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">AllPossibleStrings</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		    <span class="c1">// Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		        <span class="n">string</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		        <span class="n">temp</span><span class="o">+=</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		    <span class="p">}</span>
</span></span><span class="line"><span class="cl">		    <span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">		    <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">tc</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">AllPossibleStrings</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Prime Number</title>
      <link>https://samirpaulb.github.io/problems/prime-number/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/prime-number/</guid>
      <description>Prime Number - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="prime-number">Prime Number</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">For a given number <strong>N</strong> check if it is prime or not. A prime number is a number which is only<strong> divisible by 1 and itself</strong>.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
<strong>Output:</strong>
1
<strong>Explanation:</strong>
5 has 2 factors 1 and 5 only.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 25
<strong>Output:</strong>
0
<strong>Explanation:</strong>
25 has 3 factors 1, 5, 25
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>isPrime()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, 1 if N is a prime number or 0 otherwise.</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br>
<strong>Expected Space Complexity:</strong> O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>9</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">isPrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">N</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">N</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">isPrime</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Print 1 To N Without Loop</title>
      <link>https://samirpaulb.github.io/problems/print-1-to-n-without-loop/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/print-1-to-n-without-loop/</guid>
      <description>Print 1 To N Without Loop - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="print-1-to-n-without-loop">Print 1 To N Without Loop</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Print numbers from <strong>1 to N</strong> without the help of loops.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 10
<strong>Output: </strong>1 2 3 4 5 6 7 8 9 10
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
<strong>Output: </strong>1 2 3 4 5</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">This is a function problem. You only need to complete the <strong>function printNos()&nbsp;</strong>that takes <strong>N as parameter</strong> and prints number from <strong>1 to N</strong> recursively. Don't print newline, it will be added by the driver code.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(N) (Recursive).</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Complete this function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">printNos</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printNos</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">N</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Driver program to test printNos */</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">//taking testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//input N
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//calling printNos() function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ob</span><span class="p">.</span><span class="n">printNos</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Print 1 To N Without Using Loops</title>
      <link>https://samirpaulb.github.io/problems/print-1-to-n-without-using-loops/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/print-1-to-n-without-using-loops/</guid>
      <description>Print 1 To N Without Using Loops - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="print-1-to-n-without-using-loops">Print 1 to n without using loops</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">You are given an integer <strong>N</strong>.&nbsp;Print numbers from 1 to N without the help of loops.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
<strong>Output:</strong>
1 2 3 4 5
<strong>Explanation:</strong>
We have to print numbers from 1 to 5.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 10
<strong>Output:</strong>
1 2 3 4 5 6 7 8 9 10
<strong>Explanation:</strong>
We have to print numbers from 1 to 10.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input. Your task is to complete the function&nbsp;printTillN()&nbsp;which takes an integer N as an input parameter and&nbsp;print numbers from 1 to N&nbsp;space-separated integers without the help of loops.<br>
Note: print newline character at the end.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 1000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">printTillN</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Write Your Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printTillN</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">N</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ob</span><span class="p">.</span><span class="n">printTillN</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Print Elements Of Array</title>
      <link>https://samirpaulb.github.io/problems/print-elements-of-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/print-elements-of-array/</guid>
      <description>Print Elements Of Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="print-elements-of-array">Print Elements of Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>Arr</strong>&nbsp;of size <strong>N</strong>, print all its elements.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
Arr[] = {1, 2, 3, 4, 5}
<strong>Output:</strong> 1 2 3 4&nbsp;5
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
Arr[] = {2, 3, 5, 5}
<strong>Output:</strong> 2 3 5 5
</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Complete the function <strong>printArray()</strong>&nbsp;which takes an array <strong>arr,</strong>&nbsp;single&nbsp;integer&nbsp;<strong>n,</strong>&nbsp;as input parameters and prints the value of the array space separated.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup><br>
1 &lt;= Arr[i] &lt;= 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Just print the space seperated array elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">void</span> <span class="n">printArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ob</span><span class="p">.</span><span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Print Leaf Nodes From Preorder Traversal Of Bst</title>
      <link>https://samirpaulb.github.io/problems/print-leaf-nodes-from-preorder-traversal-of-bst/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/print-leaf-nodes-from-preorder-traversal-of-bst/</guid>
      <description>Print Leaf Nodes From Preorder Traversal Of Bst - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="print-leaf-nodes-from-preorder-traversal-of-bst">Print leaf nodes from preorder traversal of BST</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a preorder traversal of a BST, find&nbsp;the leaf nodes of the tree without building the tree.</span></p>
<p><br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 2
arr = {2,1}
<strong>Output:</strong> {1}
<strong>Explaination:</strong> 1 is the only leaf node.
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 3
Arr = {3, 2, 4}
<strong>Output:</strong> {2, 4}
<strong>Explaination:</strong> 2, 4 are the leaf nodes.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>leafNodes()</strong>&nbsp;which takes the array a<strong>rr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns&nbsp;the leaf nodes of the tree.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(N)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>3</sup><br>
1 ≤ arr[i]&nbsp;≤ 10<sup>3</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">leafNodes</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">bool</span> <span class="n">valid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">                        <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                        <span class="n">valid</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">valid</span><span class="p">)</span> <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="o">=</span><span class="n">ob</span><span class="p">.</span><span class="n">leafNodes</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Quick Left Rotation</title>
      <link>https://samirpaulb.github.io/problems/quick-left-rotation/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/quick-left-rotation/</guid>
      <description>Quick Left Rotation - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="quick-left-rotation">Quick Left Rotation</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>arr[] </strong>of size <strong>N</strong> and an integer <strong>K</strong>, the task is to left rotate the array <strong>K</strong> indexes</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N = 7, K = 2
arr[] = {1, 2, 3, 4, 5, 6, 7}
<strong>Output:</strong> 3 4 5 6 7 1 2
<strong>Explanation</strong>: Rotation of the above 
array by 2 will make the output array .</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span><span style="font-size:18px"><strong> </strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>N = 6, K = 12
arr[] = {1, 2, 3, 4, 5, 6}
<strong>Output:</strong> 1 2 3 4 5 6

</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>leftRotate</strong>() that takes array<strong> arr, </strong>integer<strong> K </strong>and integer<strong> N</strong> as parameters and rotate the given array by d value.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N).<br>
<strong>Expected Auxiliary Space:</strong> O(1).</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="n">leftRotate</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">	<span class="p">{</span> 
</span></span><span class="line"><span class="cl">	   <span class="c1">// Your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	   <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	   <span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	       <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	   <span class="p">}</span>
</span></span><span class="line"><span class="cl">	   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	       <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	   <span class="p">}</span>
</span></span><span class="line"><span class="cl">	   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	       <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">	   <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> 
</span></span><span class="line"><span class="cl">		 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   	
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	        <span class="c1">// um[a[i]]++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ob</span><span class="p">.</span><span class="n">leftRotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	     
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rearrange Array Alternately</title>
      <link>https://samirpaulb.github.io/problems/rearrange-array-alternately/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/rearrange-array-alternately/</guid>
      <description>Rearrange Array Alternately - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="rearrange-array-alternately">Rearrange Array Alternately</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p>Given a <strong>sorted</strong> array of <strong>positive</strong> integers. Your task is to rearrange&nbsp;the array elements alternatively i.e first element should be max value, second should be min value, third should be second max, fourth should be second min and so on.<br>
<strong>Note:&nbsp;</strong>Modify the original array itself. Do it without using any extra space. You do not have to return anything.</p>
<p><strong>Example 1:</strong></p>
<pre><strong>Input:
</strong>n = 6
arr[] = {1,2,3,4,5,6}
<strong>Output: </strong>6 1 5 2 4 3<strong>
Explanation: </strong>Max element = 6, min = 1, 
second max = 5, second min = 2, and 
so on... Modified array is : 6 1 5 2 4 3.</pre>
<p><strong>Example 2:</strong></p>
<pre><strong>Input:
</strong>n = 11
arr[]={10,20,30,40,50,60,70,80,90,100,110}
<strong>Output:</strong>110 10 100 20 90 30 80 40 70 50 60<strong>
Explanation: </strong>Max element = 110, min = 10, 
second max = 100, second min = 20, and 
so on... Modified array is : 
110 10 100 20 90 30 80 40 70 50 60.
</pre>
<p><strong>Your&nbsp;Task:</strong><br>
The task is to complete the function <strong>rearrange</strong>() which rearranges elements as explained above. Printing of the modified array will be handled by driver code.</p>
<p><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</p>
<p><strong>Constraints:</strong><br>
1 &lt;= n &lt;= 10^6<br>
1 &lt;= arr[i] &lt;= 10^7</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// C++ program to rearrange an array in minimum 
</span></span></span><span class="line"><span class="cl"><span class="c1">// maximum form 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// This function wants you to modify the given input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// array and no need to return anything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// arr: input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// n: size of array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//Function to rearrange  the array elements alternately.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">rearrange</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    	
</span></span><span class="line"><span class="cl">    	<span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span><span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Driver program to test above function 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">//testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//size of array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//adding elements to the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//calling rearrange() function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ob</span><span class="p">.</span><span class="n">rearrange</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">//printing the elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">		    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Remove All Occurences Of Duplicates In A Linked List</title>
      <link>https://samirpaulb.github.io/problems/remove-all-occurences-of-duplicates-in-a-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/remove-all-occurences-of-duplicates-in-a-linked-list/</guid>
      <description>Remove All Occurences Of Duplicates In A Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="remove-all-occurences-of-duplicates-in-a-linked-list">Remove all occurences of duplicates in a linked list</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted linked list, delete all nodes that have duplicate numbers (all occurrences), leaving only numbers that appear once in the original list.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong></span>
<span style="font-size:18px">N = 8</span>
<span style="font-size:18px">Linked List = 23-&gt;28-&gt;28-&gt;35-&gt;49-&gt;49-&gt;53-&gt;53</span>
<span style="font-size:18px"><strong>Output:</strong> 
23 35</span>
<span style="font-size:18px"><strong>Explanation:</strong></span>
<span style="font-size:18px">The duplicate numbers are 28, 49 and 53 which 
are removed from the list.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong></span>
<span style="font-size:18px">N =<strong> </strong>6</span>
<span style="font-size:18px">Linked List =<strong> </strong>11-&gt;11-&gt;11-&gt;11-&gt;75-&gt;75</span>
<span style="font-size:18px"><strong>Output: 
</strong>Empty list</span>
<span style="font-size:18px"><strong>Explanation:</strong></span>
<span style="font-size:18px">All the nodes in the linked list have 
duplicates. </span><span style="font-size:18px">Hence the resultant list 
would be empty.</span></pre>
<div><span style="font-size:18px"><strong>Your task:</strong></span></div>
<div><span style="font-size:18px">You don't have to read input or print anything. Your task is to complete the function <strong>removeAllDuplicates()</strong>&nbsp;which takes the head of the linked list,&nbsp;removes&nbsp;all the occurences of duplicates in the linked list and returns the head of the modified linked list.</span></div>
<div>&nbsp;</div>
<div><span style="font-size:18px"><strong>Expected Time Complexity: </strong>O(N)</span></div>
<div><span style="font-size:18px"><strong>Expected Auxiliary Space: </strong>O(1)</span></div>
<div>&nbsp;</div>
<div><span style="font-size:18px"><strong>Constraints:</strong></span></div>
<div><span style="font-size:18px">1 ≤ N&nbsp;≤ 10^5</span></div>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/* Linked List node structure
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">	int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">	struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">removeAllDuplicates</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">mp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">Node</span> <span class="o">*</span> <span class="n">tptr</span><span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">Node</span> <span class="o">*</span> <span class="n">temp</span><span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="k">while</span><span class="p">(</span><span class="n">tptr</span><span class="p">){</span> <span class="n">mp</span><span class="p">[</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">]</span><span class="o">++</span><span class="p">;</span><span class="n">cnt</span><span class="o">++</span><span class="p">;</span> <span class="n">tptr</span><span class="o">=</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">x</span><span class="p">:</span> <span class="n">mp</span><span class="p">){</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">second</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="n">k</span><span class="o">++</span><span class="p">;</span><span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">first</span><span class="p">);}}</span>
</span></span><span class="line"><span class="cl">       <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">newk</span><span class="o">=</span><span class="n">abs</span><span class="p">(</span><span class="n">cnt</span><span class="o">-</span><span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">Node</span> <span class="o">*</span> <span class="n">save</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">while</span><span class="p">(</span><span class="n">newk</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">temp</span><span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">save</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">head</span><span class="o">=</span><span class="n">save</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">delete</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="n">head</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span> <span class="k">return</span> <span class="n">head</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">       <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="n">tptr</span><span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="k">while</span><span class="p">(</span><span class="n">tptr</span><span class="p">)</span> <span class="p">{</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">=</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">tptr</span><span class="o">=</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Function to print linked list */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Driver program to test above functions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="n">head</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">head</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">removeAllDuplicates</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Remove Duplicate Element From Sorted Linked List</title>
      <link>https://samirpaulb.github.io/problems/remove-duplicate-element-from-sorted-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/remove-duplicate-element-from-sorted-linked-list/</guid>
      <description>Remove Duplicate Element From Sorted Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="remove-duplicate-element-from-sorted-linked-list">Remove duplicate element from sorted Linked List</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a singly linked list consisting of <strong>N</strong> nodes. The task is to remove duplicates (nodes with duplicate values) from the given list (if exists).</span><br>
<span style="font-size:18px"><strong>Note:</strong> Try not to use extra space. Expected time complexity is <strong>O(N)</strong>. The nodes are arranged in a <strong>sorted </strong>way.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>LinkedList: 2-&gt;2-&gt;4-&gt;5
<strong>Output: </strong>2 4 5<strong>
Explanation: </strong>In the given linked list 
2 -&gt;2 -&gt; 4-&gt; 5, only 2 occurs more 
than 1 time.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>LinkedList: 2-&gt;2-&gt;2-&gt;2-&gt;2
<strong>Output: </strong>2<strong>
Explanation: </strong>In the given linked list 
2 -&gt;2 -&gt;2 -&gt;2 -&gt;2, 2 is the only element
and is repeated 5 times.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function&nbsp;<strong>removeDuplicates</strong>() which should remove the duplicates from linked list and return the head of the linkedlist.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity</strong> : O(N)<br>
<strong>Expected Auxilliary Space</strong> : O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= Number of nodes &lt;= 10<sup>4</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72">72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73">73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74">74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75">75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76">76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77">77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78">78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79">79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80">80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81">81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82">82</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">Node</span><span class="o">*</span> <span class="nf">removeDuplicates</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">K</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">K</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">K</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">head</span><span class="o">=</span><span class="n">temp</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">Node</span> <span class="o">*</span><span class="n">result</span>  <span class="o">=</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">  int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">  struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">  Node(int x) {
</span></span></span><span class="line"><span class="cl"><span class="cm">    data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">    next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">};*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Function to remove duplicates from sorted linked list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span> <span class="o">*</span><span class="nf">removeDuplicates</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="k">while</span><span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Remove Duplicate Elements From Sorted Array</title>
      <link>https://samirpaulb.github.io/problems/remove-duplicate-elements-from-sorted-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/remove-duplicate-elements-from-sorted-array/</guid>
      <description>Remove Duplicate Elements From Sorted Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="remove-duplicate-elements-from-sorted-array">Remove duplicate elements from sorted Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted array<strong> A[]</strong> of size <strong>N</strong>, delete all the duplicated elements from A[]. Modify the array such that if there are X distinct elements in it&nbsp;then the first X positions of the array should be filled with them in increasing order and return the number of distinct elements in the array.</span><br>
<br>
<span style="font-size:18px"><strong>Note: </strong><br>
1.<strong>&nbsp;</strong>Don't use set or HashMap to solve the problem.<br>
2. You must return the number of distinct elements(X) in the array, the generated output will print all the elements of the modified array from index 0 to X-1.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
Array = {2, 2, 2, 2, 2}
<strong>Output:</strong> {2}
<strong>Explanation:</strong> After removing all the duplicates 
only one instance of 2 will remain.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 3
Array = {1, 2, 2}
<strong>Output:</strong> {1, 2}</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task: &nbsp;</strong><br>
You don't need to read input or print anything. Complete the function <strong>remove_duplicate()</strong> which takes the array A[] and its size N as input parameters and modifies it in place to delete all the duplicates. The function must return an integer X denoting the new modified size of the array.&nbsp;</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity: </strong>O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>4</sup><br>
1 ≤ A[i] ≤ 10<sup>6</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">remove_duplicate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// T.C =&gt; O(N)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// S.C. =&gt; O(N)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// int temp[n];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// temp[0] = a[0];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// int res =  1;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// for(int i = 1; i &lt; n; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     if(temp[res-1] != a[i]){
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//         temp[res] = a[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//         res++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// for(int i = 0; i &lt; n; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//     a[i] = temp[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// return res;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="c1">// T.C =&gt; O(N)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// S.C. =&gt; O(1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">a</span><span class="p">[</span><span class="n">res</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">                <span class="n">a</span><span class="p">[</span><span class="n">res</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">res</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">remove_duplicate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Remove Duplicates From An Unsorted Linked List</title>
      <link>https://samirpaulb.github.io/problems/remove-duplicates-from-an-unsorted-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/remove-duplicates-from-an-unsorted-linked-list/</guid>
      <description>Remove Duplicates From An Unsorted Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="remove-duplicates-from-an-unsorted-linked-list">Remove duplicates from an unsorted linked list</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size: 18px;">Given an unsorted linked list of <strong>N</strong> nodes. The task is to remove duplicate&nbsp;elements from this&nbsp;unsorted Linked List. When a value appears in multiple nodes, the node which appeared first should be kept, all others duplicates are to be removed.</span></p>
<p><span style="font-size: 18px;"><strong>Example 1:</strong></span></p>
<pre><span style="font-size: 18px;"><strong>Input:
</strong>N = 4
value[] = {5,2,2,4}
<strong>Output: </strong>5 2 4<strong>
Explanation:</strong>Given linked list elements are
5-&gt;2-&gt;2-&gt;4, in which 2 is repeated only.
So, we will delete the extra repeated
elements 2 from the linked list and the
resultant linked list will contain 5-&gt;2-&gt;4</span>
</pre>
<p><span style="font-size: 18px;"><strong>Example 2:</strong></span></p>
<pre><span style="font-size: 18px;"><strong>Input:
</strong>N = 5
value[] = {2,2,2,2,2}
<strong>Output: </strong>2<strong>
Explanation:</strong>Given linked list elements are
2-&gt;2-&gt;2-&gt;2-&gt;2, in which 2 is repeated. So,
we will delete the extra repeated elements
2 from the linked list and the resultant
linked list will contain only 2.</span></pre>
<p><span style="font-size: 18px;"><strong>Your Task:</strong><br>You have to complete the method&nbsp;<strong>removeDuplicates</strong>() which takes <strong>1</strong>&nbsp;argument: the <strong>head</strong> of the linked list. &nbsp;Your function should&nbsp;return a pointer to a linked list with no duplicate element.</span></p>
<p><span style="font-size: 18px;"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>
<p><span style="font-size: 18px;"><strong>Constraints:</strong><br>1 &lt;= size of linked lists &lt;= 10<sup>6</sup></span><br><span style="font-size: 18px;">0 &lt;= numbers in list &lt;= 10</span><sup>4</sup></p>
<p>&nbsp;</p></div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span><span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">temp</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The structure of linked list is the following
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node {
</span></span></span><span class="line"><span class="cl"><span class="cm">  int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">  struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">  Node(int x) {
</span></span></span><span class="line"><span class="cl"><span class="cm">    data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">    next = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">};
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to remove duplicates from unsorted linked list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span> <span class="o">*</span> <span class="n">removeDuplicates</span><span class="p">(</span> <span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="c1">// your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">m</span><span class="p">[</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">Node</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">while</span><span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">             <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="n">free</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">             <span class="n">m</span><span class="p">[</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="n">prev</span> <span class="o">=</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="n">current</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// your code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">K</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">K</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">K</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">head</span><span class="o">=</span><span class="n">temp</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="n">temp</span><span class="o">=</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	    <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Node</span> <span class="o">*</span><span class="n">result</span>  <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">print</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Reverse A Linked List</title>
      <link>https://samirpaulb.github.io/problems/reverse-a-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/reverse-a-linked-list/</guid>
      <description>Reverse A Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="reverse-a-linked-list">Reverse a linked list</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a linked list of <strong>N </strong>nodes. The task is to reverse this list.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6
<strong>Output: </strong>6 5 4 3 2 1<strong>
Explanation: </strong>After reversing the list, 
elements are 6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1.</span>
</pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">LinkedList: 2-&gt;7-&gt;8-&gt;9-&gt;10
<strong>Output: </strong>10 9 8 7 2<strong>
Explanation: </strong>After reversing the list,
elements are&nbsp;10-&gt;9-&gt;8-&gt;7-&gt;2.</span></pre>
<p><span style="font-size:18px"><strong>Your&nbsp;Task:</strong><br>
The task is to complete the function <strong>reverseList</strong>() with&nbsp;head reference as the only argument and should return new head after reversing the list.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>4</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++// C program to find n&#39;th Node in linked list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Link list Node */</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* Linked List Node structure:
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node *next;
</span></span></span><span class="line"><span class="cl"><span class="cm">}
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to reverse a linked list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">struct</span> <span class="nc">Node</span><span class="o">*</span> <span class="n">reverseList</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// return head of reversed list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">prev</span> <span class="o">=</span> <span class="n">current</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">printList</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">temp</span>  <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Driver program to test above function*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">firstdata</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>  <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">firstdata</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">firstdata</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span> <span class="n">reverseList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">printList</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Reverse A String</title>
      <link>https://samirpaulb.github.io/problems/reverse-a-string/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/reverse-a-string/</guid>
      <description>Reverse A String - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="reverse-a-string">Reverse a String</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a String S , print the reverse of the string as output.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: S = "GeeksforGeeks</span><span style="font-size:18px">"
<strong>Output:</strong>&nbsp;"skeeGrofskeeG</span><span style="font-size:18px">"&nbsp;
<strong>Explanation</strong>: Element at first is at last and
last is at first, second is at second last and 
second last is at second position and so on .
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>S = "ReversE"
<strong>Output:&nbsp;</strong>"EsreveR"
<strong>Explanation</strong>: "E" at first and "R" at last and
"e" at second last and "s" at second and
so on .</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You dont need to read input or print anything. Complete the function <strong>revStr</strong><strong>()&nbsp;</strong>which takes S&nbsp;as input parameter and returns the reversed string .<br>
<br>
<strong>Expected Time Complexity:</strong> O(|S|)<br>
<strong>Expected Auxiliary Space:</strong> O(|S|)<br>
<br>
<strong>Constraints:</strong><br>
1&lt;= |S|&nbsp;&lt;=1000</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">revStr</span><span class="p">(</span><span class="n">string</span> <span class="n">S</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// reverse(S.begin(), S.end());
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// return S;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="p">(</span><span class="n">S</span><span class="p">[</span><span class="n">s</span><span class="p">],</span> <span class="n">S</span><span class="p">[</span><span class="n">e</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">e</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">S</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">revStr</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Reverse An Array</title>
      <link>https://samirpaulb.github.io/problems/reverse-an-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/reverse-an-array/</guid>
      <description>Reverse An Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="reverse-an-array">Reverse an Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>A</strong> of size <strong>N</strong>, print the reverse of it.</span></p>
<p><span style="font-size:18px"><strong>Example:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
1
4
1 2 3 4</span>
<span style="font-size:18px"><strong>Output:</strong>
4 3 2 1</span></pre>
<p><span style="font-size:18px"><strong>Input:</strong></span><br>
<span style="font-size:18px">First line contains an integer denoting the test cases <strong>'T'</strong>. T testcases follow. Each testcase contains two lines of input. First line contains <strong>N</strong> the size of the array <strong>A</strong>. The second line contains the elements of the array.</span></p>
<p><span style="font-size:18px"><strong>Output:</strong><br>
For each testcase, in a new line, print the array in reverse order. </span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= T &lt;= 100</span><br>
<span style="font-size:18px">1 &lt;= N &lt;=100</span><br>
<span style="font-size:18px">0 &lt;= A<sub>i</sub> &lt;= 100</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Right View Of Binary Tree</title>
      <link>https://samirpaulb.github.io/problems/right-view-of-binary-tree/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/right-view-of-binary-tree/</guid>
      <description>Right View Of Binary Tree - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="right-view-of-binary-tree">Right View of Binary Tree</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a Binary Tree, find&nbsp;<strong>Right view</strong> of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from <strong>right </strong>side.</span></p>
<p><span style="font-size:18px">Right view of following tree is 1 3 7 8.</span></p>
<p><span style="font-size:18px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \<br>
&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3<br>
&nbsp;&nbsp; /&nbsp;&nbsp; \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \<br>
&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 7<br>
&nbsp;&nbsp;&nbsp; \<br>
&nbsp;&nbsp;&nbsp;&nbsp; 8</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>&nbsp; &nbsp; &nbsp; &nbsp;1
 &nbsp; &nbsp;/&nbsp;&nbsp;&nbsp; \
 &nbsp;&nbsp;3 &nbsp;&nbsp;&nbsp;&nbsp; 2
<strong>Output: </strong>1 2
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10
 &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\
 &nbsp;20&nbsp; &nbsp;&nbsp; 30
 /&nbsp;&nbsp; \
40&nbsp; 60 
<strong>Output: </strong>10 30 60
</span></pre>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">Just complete the <strong>function rightView()&nbsp;</strong>that takes <strong>node </strong>as <strong>parameter </strong>and returns&nbsp;the right view as a list.&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(Height of the Tree).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1 ≤ Number of nodes ≤ 10<sup>5</sup></span><br>
<span style="font-size:18px">1 ≤ Data of a node ≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span><span class="lnt" id="hl-0-105"><a class="lnlinks" href="#hl-0-105">105</a>
</span><span class="lnt" id="hl-0-106"><a class="lnlinks" href="#hl-0-106">106</a>
</span><span class="lnt" id="hl-0-107"><a class="lnlinks" href="#hl-0-107">107</a>
</span><span class="lnt" id="hl-0-108"><a class="lnlinks" href="#hl-0-108">108</a>
</span><span class="lnt" id="hl-0-109"><a class="lnlinks" href="#hl-0-109">109</a>
</span><span class="lnt" id="hl-0-110"><a class="lnlinks" href="#hl-0-110">110</a>
</span><span class="lnt" id="hl-0-111"><a class="lnlinks" href="#hl-0-111">111</a>
</span><span class="lnt" id="hl-0-112"><a class="lnlinks" href="#hl-0-112">112</a>
</span><span class="lnt" id="hl-0-113"><a class="lnlinks" href="#hl-0-113">113</a>
</span><span class="lnt" id="hl-0-114"><a class="lnlinks" href="#hl-0-114">114</a>
</span><span class="lnt" id="hl-0-115"><a class="lnlinks" href="#hl-0-115">115</a>
</span><span class="lnt" id="hl-0-116"><a class="lnlinks" href="#hl-0-116">116</a>
</span><span class="lnt" id="hl-0-117"><a class="lnlinks" href="#hl-0-117">117</a>
</span><span class="lnt" id="hl-0-118"><a class="lnlinks" href="#hl-0-118">118</a>
</span><span class="lnt" id="hl-0-119"><a class="lnlinks" href="#hl-0-119">119</a>
</span><span class="lnt" id="hl-0-120"><a class="lnlinks" href="#hl-0-120">120</a>
</span><span class="lnt" id="hl-0-121"><a class="lnlinks" href="#hl-0-121">121</a>
</span><span class="lnt" id="hl-0-122"><a class="lnlinks" href="#hl-0-122">122</a>
</span><span class="lnt" id="hl-0-123"><a class="lnlinks" href="#hl-0-123">123</a>
</span><span class="lnt" id="hl-0-124"><a class="lnlinks" href="#hl-0-124">124</a>
</span><span class="lnt" id="hl-0-125"><a class="lnlinks" href="#hl-0-125">125</a>
</span><span class="lnt" id="hl-0-126"><a class="lnlinks" href="#hl-0-126">126</a>
</span><span class="lnt" id="hl-0-127"><a class="lnlinks" href="#hl-0-127">127</a>
</span><span class="lnt" id="hl-0-128"><a class="lnlinks" href="#hl-0-128">128</a>
</span><span class="lnt" id="hl-0-129"><a class="lnlinks" href="#hl-0-129">129</a>
</span><span class="lnt" id="hl-0-130"><a class="lnlinks" href="#hl-0-130">130</a>
</span><span class="lnt" id="hl-0-131"><a class="lnlinks" href="#hl-0-131">131</a>
</span><span class="lnt" id="hl-0-132"><a class="lnlinks" href="#hl-0-132">132</a>
</span><span class="lnt" id="hl-0-133"><a class="lnlinks" href="#hl-0-133">133</a>
</span><span class="lnt" id="hl-0-134"><a class="lnlinks" href="#hl-0-134">134</a>
</span><span class="lnt" id="hl-0-135"><a class="lnlinks" href="#hl-0-135">135</a>
</span><span class="lnt" id="hl-0-136"><a class="lnlinks" href="#hl-0-136">136</a>
</span><span class="lnt" id="hl-0-137"><a class="lnlinks" href="#hl-0-137">137</a>
</span><span class="lnt" id="hl-0-138"><a class="lnlinks" href="#hl-0-138">138</a>
</span><span class="lnt" id="hl-0-139"><a class="lnlinks" href="#hl-0-139">139</a>
</span><span class="lnt" id="hl-0-140"><a class="lnlinks" href="#hl-0-140">140</a>
</span><span class="lnt" id="hl-0-141"><a class="lnlinks" href="#hl-0-141">141</a>
</span><span class="lnt" id="hl-0-142"><a class="lnlinks" href="#hl-0-142">142</a>
</span><span class="lnt" id="hl-0-143"><a class="lnlinks" href="#hl-0-143">143</a>
</span><span class="lnt" id="hl-0-144"><a class="lnlinks" href="#hl-0-144">144</a>
</span><span class="lnt" id="hl-0-145"><a class="lnlinks" href="#hl-0-145">145</a>
</span><span class="lnt" id="hl-0-146"><a class="lnlinks" href="#hl-0-146">146</a>
</span><span class="lnt" id="hl-0-147"><a class="lnlinks" href="#hl-0-147">147</a>
</span><span class="lnt" id="hl-0-148"><a class="lnlinks" href="#hl-0-148">148</a>
</span><span class="lnt" id="hl-0-149"><a class="lnlinks" href="#hl-0-149">149</a>
</span><span class="lnt" id="hl-0-150"><a class="lnlinks" href="#hl-0-150">150</a>
</span><span class="lnt" id="hl-0-151"><a class="lnlinks" href="#hl-0-151">151</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Tree Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Utility function to create a new Tree Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">newNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/* A binary tree node has data, pointer to left child
</span></span></span><span class="line"><span class="cl"><span class="cm">   and a pointer to right child 
</span></span></span><span class="line"><span class="cl"><span class="cm">struct Node
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    int data;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* left;
</span></span></span><span class="line"><span class="cl"><span class="cm">    struct Node* right;
</span></span></span><span class="line"><span class="cl"><span class="cm">    
</span></span></span><span class="line"><span class="cl"><span class="cm">    Node(int x){
</span></span></span><span class="line"><span class="cl"><span class="cm">        data = x;
</span></span></span><span class="line"><span class="cl"><span class="cm">        left = right = NULL;
</span></span></span><span class="line"><span class="cl"><span class="cm">    }
</span></span></span><span class="line"><span class="cl"><span class="cm">}; */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Should return  right view of tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ans</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">level</span><span class="p">)</span> <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to return list containing elements of right view of binary tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">rightView</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// Your Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Function to Build Tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Corner Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;N&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Creating vector of strings from input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// string after spliting by space
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span> <span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Create the root of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">ip</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Push the root to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Starting from the second element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get and remove the front of the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Node</span><span class="o">*</span> <span class="n">currNode</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the current node&#39;s value from the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">string</span> <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the left child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the left child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// For the right child
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">ip</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">currVal</span> <span class="o">=</span> <span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the right child is not null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">currVal</span> <span class="o">!=</span> <span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create the right child for the current node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">(</span><span class="n">stoi</span><span class="p">(</span><span class="n">currVal</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Push it to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">currNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span>  <span class="n">tc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span><span class="n">tc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="o">=</span><span class="n">stoi</span><span class="p">(</span><span class="n">tc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">buildTree</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">rightView</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">vec</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rope Cutting</title>
      <link>https://samirpaulb.github.io/problems/rope-cutting/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/rope-cutting/</guid>
      <description>Rope Cutting - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="rope-cutting">Rope Cutting</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">You are given <strong>N</strong> ropes. A cut operation is performed on ropes such that all of them are reduced by the length of the smallest rope. Display the number of ropes left after every cut operation until the length of each rope is zero.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input :</strong> arr[ ] = {5, 1, 1, 2, 3, 5} </span>
<span style="font-size:18px"><strong>Output :</strong> 4 3 2 </span>
<span style="font-size:18px"><strong>Explanation:</strong> In the first operation, the 
minimum ropes are 1 So, we reduce length 1 
from all of them after reducing we left with 
4 ropes and we do the same for rest. </span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input :</strong> arr[ ] = {5, 1, 6, 9, 8, 11, 2, 
                               2, 6, 5} <strong>
Output :</strong>  9 7 5 3 2 1</span></pre>
<p><br>
<br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>RopeCutting()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n),</strong>&nbsp;and return the number of ropes that are left after each operation with space if&nbsp;no ropes left after one operation, in this case, return&nbsp;0. The driver code takes care of the printing.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N*LOG(N)).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span></p>
<p><span style="font-size:18px">1 ≤ N ≤ 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp">#include&lt;stdio.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">RopeCutting</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Complete the function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">length</span> <span class="o">=</span> <span class="n">length</span> <span class="o">-</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       	<span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">       	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       	   <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">v</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">RopeCutting</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">v</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rotate Array</title>
      <link>https://samirpaulb.github.io/problems/rotate-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/rotate-array/</guid>
      <description>Rotate Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="rotate-array">Rotate Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an unsorted array <strong>arr[]</strong> of size <strong>N.</strong>&nbsp;Rotate the array to the left (counter-clockwise direction) by <strong>D</strong> steps, where&nbsp;<strong>D</strong>&nbsp;is a positive integer.&nbsp;</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5, D = 2
arr[] = {1,2,3,4,5}
<strong>Output: </strong>3 4 5 1 2<strong>
</strong><strong>Explanation: </strong>1 2 3 4 5&nbsp; when rotated
by 2 elements, it becomes 3 4 5 1 2.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 10, D = 3
arr[] = {2,4,6,8,10,12,14,16,18,20}
<strong>Output: </strong>8 10 12 14 16 18 20 2 4 6<strong>
Explanation: </strong>2 4 6 8 10 12 14 16 18 20&nbsp;
when rotated by 3 elements, it becomes 
8 10 12 14 16 18 20 2 4 6.</span>
</pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your&nbsp;Task:</strong><br>
Complete the function <strong>rotateArr</strong>() which takes the array, D and N as input parameters and&nbsp;rotates the array by D elements. The array must be modified in-place without using extra space.&nbsp;</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10</span><sup><span style="font-size:15px">6</span></sup><br>
<span style="font-size:18px">1 &lt;= D &lt;= 10<sup>6</sup></span><br>
<span style="font-size:18px">0 &lt;=&nbsp;arr[i] &lt;= 10</span><sup>5</sup></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">  1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">  2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">  3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">  4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">  5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">  6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">  7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">  8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9">  9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10"> 10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11"> 11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12"> 12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13"> 13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14"> 14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15"> 15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16"> 16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17"> 17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18"> 18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19"> 19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20"> 20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21"> 21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22"> 22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23"> 23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24"> 24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25"> 25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26"> 26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27"> 27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28"> 28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29"> 29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30"> 30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31"> 31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32"> 32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33"> 33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34"> 34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35"> 35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36"> 36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37"> 37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38"> 38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39"> 39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40"> 40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41"> 41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42"> 42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43"> 43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44"> 44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45"> 45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46"> 46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47"> 47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48"> 48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49"> 49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50"> 50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51"> 51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52"> 52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53"> 53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54"> 54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55"> 55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56"> 56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57"> 57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58"> 58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59"> 59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60"> 60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61"> 61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62"> 62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63"> 63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64"> 64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65"> 65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66"> 66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67"> 67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68"> 68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69"> 69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70"> 70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71"> 71</a>
</span><span class="lnt" id="hl-0-72"><a class="lnlinks" href="#hl-0-72"> 72</a>
</span><span class="lnt" id="hl-0-73"><a class="lnlinks" href="#hl-0-73"> 73</a>
</span><span class="lnt" id="hl-0-74"><a class="lnlinks" href="#hl-0-74"> 74</a>
</span><span class="lnt" id="hl-0-75"><a class="lnlinks" href="#hl-0-75"> 75</a>
</span><span class="lnt" id="hl-0-76"><a class="lnlinks" href="#hl-0-76"> 76</a>
</span><span class="lnt" id="hl-0-77"><a class="lnlinks" href="#hl-0-77"> 77</a>
</span><span class="lnt" id="hl-0-78"><a class="lnlinks" href="#hl-0-78"> 78</a>
</span><span class="lnt" id="hl-0-79"><a class="lnlinks" href="#hl-0-79"> 79</a>
</span><span class="lnt" id="hl-0-80"><a class="lnlinks" href="#hl-0-80"> 80</a>
</span><span class="lnt" id="hl-0-81"><a class="lnlinks" href="#hl-0-81"> 81</a>
</span><span class="lnt" id="hl-0-82"><a class="lnlinks" href="#hl-0-82"> 82</a>
</span><span class="lnt" id="hl-0-83"><a class="lnlinks" href="#hl-0-83"> 83</a>
</span><span class="lnt" id="hl-0-84"><a class="lnlinks" href="#hl-0-84"> 84</a>
</span><span class="lnt" id="hl-0-85"><a class="lnlinks" href="#hl-0-85"> 85</a>
</span><span class="lnt" id="hl-0-86"><a class="lnlinks" href="#hl-0-86"> 86</a>
</span><span class="lnt" id="hl-0-87"><a class="lnlinks" href="#hl-0-87"> 87</a>
</span><span class="lnt" id="hl-0-88"><a class="lnlinks" href="#hl-0-88"> 88</a>
</span><span class="lnt" id="hl-0-89"><a class="lnlinks" href="#hl-0-89"> 89</a>
</span><span class="lnt" id="hl-0-90"><a class="lnlinks" href="#hl-0-90"> 90</a>
</span><span class="lnt" id="hl-0-91"><a class="lnlinks" href="#hl-0-91"> 91</a>
</span><span class="lnt" id="hl-0-92"><a class="lnlinks" href="#hl-0-92"> 92</a>
</span><span class="lnt" id="hl-0-93"><a class="lnlinks" href="#hl-0-93"> 93</a>
</span><span class="lnt" id="hl-0-94"><a class="lnlinks" href="#hl-0-94"> 94</a>
</span><span class="lnt" id="hl-0-95"><a class="lnlinks" href="#hl-0-95"> 95</a>
</span><span class="lnt" id="hl-0-96"><a class="lnlinks" href="#hl-0-96"> 96</a>
</span><span class="lnt" id="hl-0-97"><a class="lnlinks" href="#hl-0-97"> 97</a>
</span><span class="lnt" id="hl-0-98"><a class="lnlinks" href="#hl-0-98"> 98</a>
</span><span class="lnt" id="hl-0-99"><a class="lnlinks" href="#hl-0-99"> 99</a>
</span><span class="lnt" id="hl-0-100"><a class="lnlinks" href="#hl-0-100">100</a>
</span><span class="lnt" id="hl-0-101"><a class="lnlinks" href="#hl-0-101">101</a>
</span><span class="lnt" id="hl-0-102"><a class="lnlinks" href="#hl-0-102">102</a>
</span><span class="lnt" id="hl-0-103"><a class="lnlinks" href="#hl-0-103">103</a>
</span><span class="lnt" id="hl-0-104"><a class="lnlinks" href="#hl-0-104">104</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// void lRotateByOne(int arr[], int n) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int temp = arr[0];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for(int i = 1; i &lt; n; i++) 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         arr[i-1] = arr[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     arr[n-1] = temp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">// //Function to rotate an array by d elements in counter-clockwise direction. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// void rotateArr(int arr[], int d, int n){
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     // code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for(int i =0; i &lt; d; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         lRotateByOne(arr, n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="cm">/*==========================================================================*/</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to rotate an array by d elements in counter-clockwise direction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// void rotateArr(int arr[], int d, int n) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     // code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     T.C. =&gt; O(N)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     S.C. =&gt; O(d)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     int temp[d];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for(int i = 0; i &lt; d; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         temp[i] = arr[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for(int i = d; i &lt; n; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         arr[i-d] = arr[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     for(int i = 0; i &lt; d; i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         arr[n-d+i] = temp[i];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="cm">/*==========================================================================*/</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to rotate an array by d elements in counter-clockwise direction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// void rotateArr(int arr[], int d, int n) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//       // code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//       reverse(arr, 0, d-1);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//       reverse(arr, d, n-1);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//       reverse(arr, 0, n-1);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// void reverse(int arr[], int low, int high) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     while(low &lt; high) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         swap(arr[low], arr[high]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         low++;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//         high--;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">rotateArr</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">];</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">             <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>  
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//taking testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">//input n and d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">//inserting elements in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">//calling rotateArr() function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">ob</span><span class="p">.</span><span class="n">rotateArr</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    <span class="c1">//printing the elements of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rotation</title>
      <link>https://samirpaulb.github.io/problems/rotation/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/rotation/</guid>
      <description>Rotation - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="rotation">Rotation</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an ascending&nbsp;sorted rotated&nbsp;array&nbsp;<strong>Arr&nbsp;</strong>of distinct integers&nbsp;of size <strong>N</strong>. The array is right rotated <strong>K</strong>&nbsp;times. Find the value of <strong>K</strong>.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
Arr[] = {5, 1, 2, 3, 4}
<strong>Output:</strong> 1
<strong>Explanation:</strong> The given array is 5 1 2 3 4. 
The original sorted array is 1 2 3 4 5. 
We can see that the array was rotated 
1 times to the right.
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5
Arr[] = {1, 2, 3, 4, 5}
<strong>Output:</strong> 0
<strong>Explanation:</strong>&nbsp;The given array is not rotated.
</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Complete the function <strong>findKRotation()</strong>&nbsp;which takes array <strong>arr</strong> and size&nbsp;<strong>n</strong>,&nbsp;as input parameters&nbsp;and returns an integer representing the answer.&nbsp;You don't to print answer or take inputs.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(log(N))<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;=10<sup>5</sup><br>
1 &lt;= Arr<sub>i</sub> &lt;= 10<sup>7</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>	
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">findKRotation</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">minIndex</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	        <span class="n">minIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">minIndex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">findKRotation</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Search An Element In An Array</title>
      <link>https://samirpaulb.github.io/problems/search-an-element-in-an-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/search-an-element-in-an-array/</guid>
      <description>Search An Element In An Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="search-an-element-in-an-array">Search an Element in an array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an integer array and another integer element. The task is to find if the given element is present in array or not.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>n = 4
arr[] = {1,2,3,4}
x = 3
<strong>Output: </strong>2<strong>
Explanation: </strong>There is one test case 
with array as {1, 2, 3 4} and element 
to be searched as 3.&nbsp; Since 3 is 
present at index 2, output is 2.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>n = 5
arr[] = {1,2,3,4,5}
x = 5
<strong>Output: </strong>4<strong>
Explanation: </strong>For array elements 
{1,2,3,4,5} element to be searched 
is 5 and it is at index 4. So, the 
output is 4.</span>
</pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function <strong>search</strong>() which takes the array arr[], its size N and the element X as inputs and returns the index of first occurrence of X in the given array. If the element X does not exist in the array, the function should return -1.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).&nbsp;</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= n&nbsp;&lt;= 10<sup>6</sup><br>
0 &lt;= arr[i] &lt;= 10<sup>6</sup><br>
0 &lt;= x&nbsp;&lt;= 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Function to search x in arr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// arr: input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// X: element to be searched for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">search</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">testcases</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">testcases</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">testcases</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">sizeOfArray</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">sizeOfArray</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">sizeOfArray</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">sizeOfArray</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ob</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">sizeOfArray</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//Linear search
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Search An Element In Sorted And Rotated Array</title>
      <link>https://samirpaulb.github.io/problems/search-an-element-in-sorted-and-rotated-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/search-an-element-in-sorted-and-rotated-array/</guid>
      <description>Search An Element In Sorted And Rotated Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="search-an-element-in-sorted-and-rotated-array">Search an element in sorted and rotated array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a sorted and rotated array <strong>A </strong>of N distinct elements which are rotated at some point, and given an element <strong>K</strong>. The task is to find the index of the given element K in array A.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 9
A[] = {5,6,7,8,9,10,1,2,3}
K = 10
<strong>Output: </strong>5<strong>
Explanation: </strong>10 is found at index 5.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
A[] = {3,1,2}
K = 1
<strong>Output: </strong>1</span></pre>
<p><span style="font-size:18px"><strong>User Task:</strong><br>
Complete <strong>Search()&nbsp;</strong>function and return&nbsp;the index of the element K if found in the array.&nbsp;If the element is not present, then return -1.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(log N).<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>7</sup><br>
0 ≤ A<sub>i</sub> ≤ 10<sup>8</sup><br>
1 ≤ K ≤ 10<sup>8</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span><span class="lnt" id="hl-0-67"><a class="lnlinks" href="#hl-0-67">67</a>
</span><span class="lnt" id="hl-0-68"><a class="lnlinks" href="#hl-0-68">68</a>
</span><span class="lnt" id="hl-0-69"><a class="lnlinks" href="#hl-0-69">69</a>
</span><span class="lnt" id="hl-0-70"><a class="lnlinks" href="#hl-0-70">70</a>
</span><span class="lnt" id="hl-0-71"><a class="lnlinks" href="#hl-0-71">71</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Search</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">,</span><span class="kt">int</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User code will be pasted here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">target</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">target</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Search</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span><span class="n">target</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// vec : given vector of elements
</span></span></span><span class="line"><span class="cl"><span class="c1">// K : given value whose index we need to find 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">Search</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">,</span> <span class="kt">int</span> <span class="n">K</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">//Naive Solution(linear Search)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//for(int i = 0; i &lt; vec.size(); i++) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//    if(vec[i] == K)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//    return i;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//return -1;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">//Efficient Approach(Binary Search)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;=</span> <span class="n">h</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">h</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">K</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">vec</span><span class="p">[</span><span class="n">mid</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">K</span> <span class="o">&gt;=</span> <span class="n">vec</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">K</span> <span class="o">&lt;=</span> <span class="n">vec</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">h</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">K</span> <span class="o">&gt;=</span> <span class="n">vec</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">K</span> <span class="o">&lt;=</span> <span class="n">vec</span><span class="p">[</span><span class="n">h</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">h</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Search In Linked List</title>
      <link>https://samirpaulb.github.io/problems/search-in-linked-list/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/search-in-linked-list/</guid>
      <description>Search In Linked List - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="search-in-linked-list">Search in Linked List</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a linked list of <strong>n</strong> nodes and a<strong> key</strong> , the task is to check if the key&nbsp;is present in the linked list or&nbsp;not.</span></p>
<p><strong><span style="font-size:18px">Example:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">n = 4<strong><span style="font-size:18px">
</span></strong>1-&gt;2-&gt;3-&gt;4
Key = 3
<strong>Output:
</strong>True
<strong>Explanation:</strong>
3 is present in Linked List, so the function returns true.</span></pre>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">Your task is to complete the given function <strong>searchKey</strong>(), which takes a <strong>head </strong>reference and <strong>key</strong> as Input&nbsp;and returns true or false boolean value by checking the key is present or not in the linked list.</span></p>
<p><span style="font-size:18px"><strong>Constraint:</strong><br>
1 &lt;= n &lt;= 10<sup>5</sup><br>
1 &lt;= key &lt;= 10<sup>5</sup></span></p>
<p><strong><span style="font-size:18px">Expected Time Complexity: </span></strong><span style="font-size:18px">O(n)</span><br>
<strong><span style="font-size:18px">Expected Space Complexity: </span></strong><span style="font-size:18px">O(1)</span></p>
</div>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Second Largest</title>
      <link>https://samirpaulb.github.io/problems/second-largest/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/second-largest/</guid>
      <description>Second Largest - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="second-largest">Second Largest</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array <strong>Arr</strong> of size <strong>N</strong>, print second largest element from an array.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> 
N = 6
Arr[] = {12, 35, 1, 10, 34, 1}
<strong>Output:</strong> 34
<strong>Explanation: </strong>The largest element of the 
array is 35 and the second largest element
is 34.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong> 
N = 3
Arr[] = {10, 5, 10}
<strong>Output:</strong> 5
<strong>Explanation: </strong>The largest element of 
the array is 10 and the second 
largest element is 5.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>print2largest()</strong>&nbsp;which takes the&nbsp;array of&nbsp;integers&nbsp;<strong>arr&nbsp;</strong>and&nbsp;<strong>n</strong><strong>&nbsp;</strong>as parameters and returns an integer denoting the answer. If 2nd largest element doesn't exist&nbsp;then return -1.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ Arr<sub>i </sub>≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>	
</span></span><span class="line"><span class="cl">	<span class="c1">// Function returns the second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// largest elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">print2largest</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">	            <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	        <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">print2largest</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sieve Of Eratosthenes</title>
      <link>https://samirpaulb.github.io/problems/sieve-of-eratosthenes/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sieve-of-eratosthenes/</guid>
      <description>Sieve Of Eratosthenes - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sieve-of-eratosthenes">Sieve of Eratosthenes</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a number <strong>N</strong>, calculate the prime numbers up to N using Sieve of Eratosthenes.&nbsp;&nbsp;</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">N = 10</span>

<strong><span style="font-size:18px">Output:
</span></strong><span style="font-size:18px">2 3 5 7</span>

<strong><span style="font-size:18px">Explanation:
</span></strong><span style="font-size:18px">Prime numbers less than equal to N 
are 2 3 5 and 7.</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:
</span></strong><span style="font-size:18px">N = 35</span>

<span style="font-size:18px"><strong>Output:</strong>
2 3 5 7 11 13 17 19 23 29 31</span>

<span style="font-size:18px"><strong>Explanation:</strong>
Prime numbers less than equal to 35 are
2 3 5 7 11 13 17 19 23 29 and 31.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sieveOfEratosthenes</strong><strong>()</strong>&nbsp;which takes an integer N as an input parameter and return&nbsp;the list of prime numbers less than equal to N.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(NloglogN)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1&lt;= N &lt;= 10<sup>4</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sieveOfEratosthenes</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Write Your Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">primes</span>  <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">sieveOfEratosthenes</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">prime</span> <span class="p">:</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">prime</span> <span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Simple Interest</title>
      <link>https://samirpaulb.github.io/problems/simple-interest/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/simple-interest/</guid>
      <description>Simple Interest - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="simple-interest">Simple Interest</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given three integers P,R and T, denoting Principal, Rate of Interest and Time period respectively.Compute the simple Interest.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
P=100
R=20
T=2
<strong>Output:</strong>
40.00
<strong>Explanation:</strong>
The simple interest on 100 at a rate
of 20% across 2 time periods is 40.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
P=999
R=9
T=9
<strong>Output:</strong>
809.19
<strong>Explanation:</strong>
The simple interest on 999 at a rate 
of 9% across 9 time periods is 809.19</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.Your Task is to complete the function <strong>simpleInterest()</strong> which takes three integers P,R and T and returns the simple interest.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>O(1)<br>
<strong>Expected Auxillary Space:</strong>O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=P&lt;=10<sup>5</sup><br>
1&lt;=R,T&lt;=100</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">simpleInterest</span><span class="p">(</span><span class="kt">int</span> <span class="n">P</span><span class="p">,</span> <span class="kt">int</span> <span class="n">R</span><span class="p">,</span> <span class="kt">int</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="p">((</span><span class="n">P</span><span class="o">*</span><span class="n">T</span><span class="o">*</span><span class="n">R</span><span class="p">)</span><span class="o">/</span><span class="mf">100.00</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">P</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">P</span> <span class="o">&gt;&gt;</span> <span class="n">R</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fixed</span> <span class="o">&lt;&lt;</span> <span class="n">setprecision</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">simpleInterest</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sort An Array Of 0S, 1S And 2S</title>
      <link>https://samirpaulb.github.io/problems/sort-an-array-of-0s-1s-and-2s/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sort-an-array-of-0s-1s-and-2s/</guid>
      <description>Sort An Array Of 0S, 1S And 2S - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sort-an-array-of-0s-1s-and-2s">Sort an array of 0s, 1s and 2s</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.</span></p>
<p><br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>
N = 5
arr[]= {0 2 1 2 0}
<strong>Output:</strong>
0 0 1 2 2
<strong>Explanation:</strong>
0s 1s and 2s are segregated 
into ascending order.</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input: </strong>
N = 3
arr[] = {0 1 0}
<strong>Output:</strong>
0 0 1
<strong>Explanation:</strong>
0s 1s and 2s are segregated 
into ascending order.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>sort012() </strong>that takes an array arr and N as input parameters and <strong>sorts the array in-place. </strong></span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity: </strong>O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10^6<br>
0 &lt;= A[i] &lt;= 2</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">sort012</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">mid</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">switch</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If element is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="o">++</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="o">++</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="o">--</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ob</span><span class="p">.</span><span class="n">sort012</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sort String</title>
      <link>https://samirpaulb.github.io/problems/sort-string/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sort-string/</guid>
      <description>Sort String - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sort-string">Sort String</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:20px">Given a string of lowercase characters from ‘a’ – ‘z’. We need to write a program to print the characters of this string in sorted order.</span></p>
<p><span style="font-size:20px"><strong>Input:</strong><br>
The first line contains an integer T, denoting number of test cases. Then T test case follows. First line of each test case contains a string S each.<br>
<br>
<strong>Output:</strong><br>
For each test case, print the string S in sorted order.<br>
<br>
<strong>Constraints:</strong><br>
1&lt;=T&lt;=100</span><br>
<span style="font-size:20px">1&lt;=|S|&lt;=4*10^4</span><br>
<span style="font-size:20px">String S will contains lowercase character from 'a'-'z<br>
<br>
<strong>Example:</strong></span><br>
<span style="font-size:20px"><strong>Input:</strong><br>
2<br>
bbccdefbbaa </span><br>
<span style="font-size:20px">geeksforgeeks</span><br>
<span style="font-size:20px"><strong>Output :</strong></span><br>
<span style="font-size:20px">aabbbbccdef<br>
eeeefggkkorss</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include&lt;iostream&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//cout&lt;&lt;&#34;I am a Software Engineer&#34;&lt;&lt;endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="n">sort</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">	    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sort The Array</title>
      <link>https://samirpaulb.github.io/problems/sort-the-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sort-the-array/</guid>
      <description>Sort The Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sort-the-array">Sort The Array</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a random set of numbers, Print them in sorted order.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 4
arr[] = {1, 5, 3, 2}
<strong>Output:</strong> {1, 2, 3, 5}
<strong>Explanation</strong>: After sorting array will 
be like {1, 2, 3, 5}.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 2
arr[] = {3, 1}
<strong>Output:</strong> {1, 3}
<strong>Explanation</strong>: After sorting array will
be like {3, 1}.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>sortArr()</strong>&nbsp;which takes the list of integers and the size N<strong>&nbsp;</strong>as inputs and returns the modified list.<br>
<br>
<strong>Expected Time Complexity:</strong>&nbsp;O(N * log N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N, A[i] ≤ 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sortArr</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//complete the function here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">s</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">v</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">sortArr</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sort The String In Descending Order</title>
      <link>https://samirpaulb.github.io/problems/sort-the-string-in-descending-order/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sort-the-string-in-descending-order/</guid>
      <description>Sort The String In Descending Order - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sort-the-string-in-descending-order">Sort the string in descending order</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a string <strong>str&nbsp;</strong>containing only lower case alphabets, the task is to sort it in lexicographically-descending order. </span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input: </strong>str = "geeks"
<strong>Output:</strong> "skgee"
<strong>Explanation</strong>: It's the lexicographically</span>-
<span style="font-size:18px">descending order.</span>
</pre>
<p><span style="font-size:18px">â€‹<strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>: str = "for"
<strong>Output:</strong> "rof"
<strong>Explanation</strong>: "rof" is in
lexicographically-descending order.</span>
</pre>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>ReverseSort()</strong>&nbsp;which takes the string str<strong>&nbsp;</strong>as inputs and returns the modified string.<br>
<br>
<strong>Expected Time Complexity:</strong>&nbsp;O(|str|)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br>
<br>
<strong>Constraints:</strong><br>
1 ≤ |str| ≤ 10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">string</span> <span class="nf">ReverseSort</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ReverseSort</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">string</span> <span class="nf">ReverseSort</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//complete the function here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sort</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">rbegin</span><span class="p">(),</span> <span class="n">str</span><span class="p">.</span><span class="n">rend</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Square Root Of A Number</title>
      <link>https://samirpaulb.github.io/problems/square-root-of-a-number/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/square-root-of-a-number/</guid>
      <description>Square Root Of A Number - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="square-root-of-a-number">Square root of a number</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an integer <strong>x,</strong>&nbsp;find the square root of x. If <strong>x</strong> is not a perfect square, then return floor(√x).</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>x = 5
<strong>Output: </strong>2<strong>
Explanation: </strong>Since, 5 is not a perfect 
square, floor of square_root of 5 is 2.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>x = 4
<strong>Output: </strong>2<strong>
Explanation: </strong>Since, 4 is a perfect 
square, so its square root is 2.</span></pre>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.&nbsp;The task is to complete the function <strong>floorSqrt</strong>() which takes x as the input parameter and&nbsp;return its square root.<br>
<strong>Note: </strong>Try Solving the question without using the sqrt function.&nbsp;The value of x&gt;=0.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(log N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong></span><br>
<span style="font-size:18px">1 ≤ x ≤ 10<sup>7</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// Function to find square root
</span></span></span><span class="line"><span class="cl"><span class="c1">// x: element to find square root
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">floorSqrt</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code goes here  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span>  <span class="n">ans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="o">*</span><span class="n">m</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">s</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">e</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span><span class="p">.</span><span class="n">floorSqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>   
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Stock Buy And Sell</title>
      <link>https://samirpaulb.github.io/problems/stock-buy-and-sell/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/stock-buy-and-sell/</guid>
      <description>Stock Buy And Sell - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="stock-buy-and-sell">Stock buy and sell</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">The cost of stock on each day is given in an array <strong>A</strong>[] of size <strong>N</strong>. Find all the segments of days on which you buy and sell the stock so that in between those days your profit is maximum.<br>
<br>
<strong>Note:</strong></span>&nbsp;<span style="font-size:18px">Since there can be multiple solutions</span>, <span style="font-size:18px">the driver code will print 1 if your answer is correct, otherwise, it will return 0. In case there's no profit the driver code will print the string "<strong>No Profit</strong>" for a correct solution.<br>
<br>
<strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 7
A[] = {100,180,260,310,40,535,695}
<strong>Output:</strong>
1
<strong>Explanation:
</strong>One possible solution is (0 3) (4 6)
We can buy stock on day 0,
and sell it on 3rd day, which will 
give us maximum profit. Now, we buy 
stock on day 4 and sell it on day 6.</span>
</pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
A[] = {4,2,2,2,4}
<strong>Output:</strong>
1
<strong>Explanation:
</strong>There are multiple possible solutions.
one of them is (3 4)<strong>
</strong>We can buy stock on day 3,
and sell it on 4th day, which will 
give us maximum profit.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
The task is to complete the function <strong>stockBuySell()</strong> which takes an array A[] and N as input parameters and finds the days of buying and selling stock. The function must return a 2D list of integers containing all the buy-sell pairs i.e. first value of pair will represent the day on which you buy&nbsp;the stock and second value represent the day on which you sell that stock. If there is No Profit, return an empty list. </span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(N)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
2 ≤&nbsp;N ≤&nbsp;10<sup>6</sup><br>
0 ≤&nbsp;A[i] ≤&nbsp;10<sup>6</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span><span class="lnt" id="hl-0-55"><a class="lnlinks" href="#hl-0-55">55</a>
</span><span class="lnt" id="hl-0-56"><a class="lnlinks" href="#hl-0-56">56</a>
</span><span class="lnt" id="hl-0-57"><a class="lnlinks" href="#hl-0-57">57</a>
</span><span class="lnt" id="hl-0-58"><a class="lnlinks" href="#hl-0-58">58</a>
</span><span class="lnt" id="hl-0-59"><a class="lnlinks" href="#hl-0-59">59</a>
</span><span class="lnt" id="hl-0-60"><a class="lnlinks" href="#hl-0-60">60</a>
</span><span class="lnt" id="hl-0-61"><a class="lnlinks" href="#hl-0-61">61</a>
</span><span class="lnt" id="hl-0-62"><a class="lnlinks" href="#hl-0-62">62</a>
</span><span class="lnt" id="hl-0-63"><a class="lnlinks" href="#hl-0-63">63</a>
</span><span class="lnt" id="hl-0-64"><a class="lnlinks" href="#hl-0-64">64</a>
</span><span class="lnt" id="hl-0-65"><a class="lnlinks" href="#hl-0-65">65</a>
</span><span class="lnt" id="hl-0-66"><a class="lnlinks" href="#hl-0-66">66</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to find the days of buying and selling stock for max profit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">stockBuySell</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">check</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span><span class="o">-</span><span class="n">A</span><span class="p">[</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="n">p</span><span class="p">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">A</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">stockBuySell</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">+=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;No Profit&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">check</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">A</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sum Of Array</title>
      <link>https://samirpaulb.github.io/problems/sum-of-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sum-of-array/</guid>
      <description>Sum Of Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sum-of-array">Sum of Array</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an integer array <strong>Arr[] </strong>of size <strong>N</strong>. The task is to find sum of it.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4
Arr[] = {1, 2, 3, 4}
<strong>Output:</strong> 10
<strong>Explanation:</strong> 1 + 2 + 3 + 4 = 10.
</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
Arr[] = {1, 3, 3}
<strong>Output:</strong> 7
<strong>Explanation:</strong>&nbsp;1 + 3 + 3 = 7.
</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
Complete the function <strong>sum()</strong>&nbsp;which takes&nbsp;array&nbsp;<strong>arr&nbsp;</strong>and single&nbsp;integer&nbsp;<strong>n</strong>,&nbsp;as input parameters&nbsp;and returns an integer denoting the answer.&nbsp;You don't to print answer or take inputs.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N &lt;= 10<sup>5</sup><br>
1 &lt;= Arr[i] &lt;= 10<sup>4</sup></span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// function to return sum of elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// in an array of size n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	        <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sum Of Digits</title>
      <link>https://samirpaulb.github.io/problems/sum-of-digits/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sum-of-digits/</guid>
      <description>Sum Of Digits - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sum-of-digits">Sum Of Digits</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a number,&nbsp;<strong>N</strong>. Find the sum of all the digits of N</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 12<strong>
Output:
</strong>3<strong>
Explanation:</strong>
Sum of 12's digits:
1 + 2 = 3</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 23<strong>
Output
</strong>5<strong>
Explanation:
</strong>Sum of 23's digits:
2 + 3 = 5
</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function <strong>sumOfDigits()</strong>&nbsp;which takes&nbsp;an integer&nbsp;<strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, total sum of digits of N.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(log<sub>10</sub>N)<br>
<strong>Expected Space Complexity:</strong> O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=10<sup>5</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sumOfDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">lastDigit</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">lastDigit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">sumOfDigits</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sum Of Fifth Powers Of The First N Natural Numbers</title>
      <link>https://samirpaulb.github.io/problems/sum-of-fifth-powers-of-the-first-n-natural-numbers/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sum-of-fifth-powers-of-the-first-n-natural-numbers/</guid>
      <description>Sum Of Fifth Powers Of The First N Natural Numbers - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sum-of-fifth-powers-of-the-first-n-natural-numbers">Sum of fifth powers of the first n natural numbers</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a number N.Find the sum of fifth powers of natural numbers till N i.e. 1<sup>5</sup>+2<sup>5</sup>+3<sup>5</sup>+..+N<sup>5</sup>.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N=2
<strong>Output:</strong>
33
<strong>Explanation:</strong>
The sum is calculated as 1<sup>5</sup>+2<sup>5</sup>=1+32=33.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N=3
<strong>Output:</strong>
276
<strong>Explanation:</strong>
The sum is calculated as 1<sup>5</sup>+2<sup>5</sup>+3<sup>5</sup>
=1+32+243=276.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.Your task is to complete the function <strong>sumOfFifthPowers()</strong> which takes an integer N as input parameter and returns the sum of the fifth powers of Natural numbers till N.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>O(1)<br>
<strong>Expected Auxillary Space:</strong>O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=1000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="n">sumOfFifthPowers</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">sumOfFifthPowers</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sum Of First N Terms</title>
      <link>https://samirpaulb.github.io/problems/sum-of-first-n-terms/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sum-of-first-n-terms/</guid>
      <description>Sum Of First N Terms - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sum-of-first-n-terms">Sum of first n terms</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given and integer N.Calculate&nbsp;the sum of series 1<sup>3</sup> + 2<sup>3</sup> + 3<sup>3</sup> + 4<sup>3</sup> + …&nbsp;till N-th term.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N=5
<strong>Output:</strong>
225
<strong>Explanation:</strong>
1<sup>3</sup>+2<sup>3</sup>+3<sup>3</sup>+4<sup>3</sup>+5<sup>3</sup>=225</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N=7
<strong>Output:</strong>
784
<strong>Explanation:</strong>
1<sup>3</sup>+2<sup>3</sup>+3<sup>3</sup>+4<sup>3</sup>+5<sup>3</sup>+6<sup>3</sup>+7<sup>3</sup>=784</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything.Your task is to complete the function <strong>sumOfSeries()</strong> which takes the integer N as parameter and returns the sum of the cubes of the first N natural numbers.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong>O(1)<br>
<strong>Expected Auxillary Space:</strong>O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1&lt;=N&lt;=50000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">// Initial template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">// User function template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="kt">long</span> <span class="n">sumOfSeries</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">long</span> <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">N</span> <span class="o">*</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span> <span class="o">*</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">sumOfSeries</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Sum Of Primes</title>
      <link>https://samirpaulb.github.io/problems/sum-of-primes/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/sum-of-primes/</guid>
      <description>Sum Of Primes - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="sum-of-primes">Sum of primes</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Your task is to calculate sum&nbsp; of primes present as digits of given number N.</span></p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong> 333
<strong>Output:</strong> 9
<strong>Explaination:</strong> 3 is a prime number. It 
is present 3 times. So 3+3+3 = 9.</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong> 686
<strong>Output:</strong> 0
<strong>Explaination:</strong> Neither 6 nor 8 is a 
prime number.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:</strong><br>
You do not need to read input or print anything. Your task is to complete the function <strong>primeSum()</strong> which takes N as input parameter and returns the sum of all the prime digits present in the number N.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(logN)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 5*10<sup>4</sup>&nbsp; &nbsp;</span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span><span class="lnt" id="hl-0-53"><a class="lnlinks" href="#hl-0-53">53</a>
</span><span class="lnt" id="hl-0-54"><a class="lnlinks" href="#hl-0-54">54</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="nf">isPrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">primeSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">N</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">isPrime</span><span class="p">(</span><span class="n">temp</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span><span class="o">+=</span><span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">N</span><span class="o">/=</span><span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ob</span><span class="p">.</span><span class="n">primeSum</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>The Nth Fibonnaci</title>
      <link>https://samirpaulb.github.io/problems/the-nth-fibonnaci/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/the-nth-fibonnaci/</guid>
      <description>The Nth Fibonnaci - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="the-nth-fibonnaci">The Nth Fibonnaci</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given a positive integer <strong>N</strong>, find the last digit of the <strong>N<sup>th</sup></strong> term from the Fibonacci series.</span></p>
<p><span style="font-size:18px"><strong>Note:&nbsp;</strong>For N=0 you have to return 0.</span><br>
&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 5
<strong>Output:</strong>
5
<strong>Explanation:</strong>
5th Fibonacci number is 5</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 14
<strong>Output:</strong>
7
<strong>Explanation:</strong>
14th Fibonacci number is 377
It's last digit is 7</span>
</pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>fib()</strong>&nbsp;which takes an integer N<strong>&nbsp;</strong>as input parameter&nbsp;and returns the last digit of Nth Fibonacci number.</span><br>
<br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Space Complexity:</strong> O(1)</span><br>
&nbsp;</p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
0 &lt;= N &lt;= 1000</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">fib</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">fib</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Tower Of Hanoi</title>
      <link>https://samirpaulb.github.io/problems/tower-of-hanoi/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/tower-of-hanoi/</guid>
      <description>Tower Of Hanoi - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="tower-of-hanoi">Tower Of Hanoi</h1>
<h2 id="medium">Medium</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">The <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi" target="_blank">tower of Hanoi</a></span> <span style="font-size:18px">is a famous puzzle where we have three rods and <strong>N</strong> disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of discs <strong>N</strong>. Initially, these discs are in the rod 1. You need to print all the steps of discs movement so that all the discs reach the 3<sup>rd</sup> rod. Also, you need to find the total moves.<br>
<strong>Note: </strong>The discs are arranged such that the<strong> top disc is numbered 1 </strong>and the<strong> bottom-most disc is numbered N</strong>. Also, all the discs have <strong>different sizes</strong> and a bigger disc <strong>cannot</strong> be put on the top of a smaller disc. Refer the provided link to get a better clarity about the puzzle.</span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 2
<strong>Output:
</strong>move disk 1 from rod 1 to rod 2
move disk 2 from rod 1 to rod 3
move disk 1 from rod 2 to rod 3
3<strong>
Explanation: </strong>For N=2&nbsp;, steps will be
as follows in the example and total
3 steps will be taken.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 3
<strong>Output:
</strong>move disk 1 from rod 1 to rod 3
move disk 2 from rod 1 to rod 2
move disk 1 from rod 3 to rod 2
move disk 3 from rod 1 to rod 3
move disk 1 from rod 2 to rod 1
move disk 2 from rod 2 to rod 3
move disk 1 from rod 1 to rod 3
7<strong>
Explanation: </strong>For N=3 , steps will be
as follows in the example and total
7 steps will be taken.</span>
</pre>
<p><strong><span style="font-size:18px">Your Task:</span></strong><br>
<span style="font-size:18px">You don't need to read input or print anything. You only need to complete the function <strong>toh()</strong> that takes following parameters: <strong>N</strong> (number of discs),&nbsp;<strong>from</strong> (The rod number from which we move the disc), <strong>to</strong> (The rod number to which we move the disc),&nbsp;<strong>aux</strong> (The rod that is used as an auxiliary rod)&nbsp;and prints the required moves inside function body (See the example for the format of the output) as well as return the count of total moves made.&nbsp;The total number of moves are printed by the driver code.<br>
<strong>Please take care of the case of the letters.</strong></span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(2<sup>N</sup>).<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>
<p><strong><span style="font-size:18px">Constraints:</span></strong><br>
<span style="font-size:18px">1 &lt;= N &lt;= 16</span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// You need to complete this function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// avoid space at the starting of the string in &#34;move disk.....&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">toh</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aux</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Your code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;move disk &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">N</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; from rod &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">from</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; to rod &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">to</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">a</span> <span class="o">=</span> <span class="n">toh</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">aux</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;move disk &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">N</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; from rod &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">from</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; to rod &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">to</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="n">toh</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">aux</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span><span class="c1">//testcases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span><span class="c1">//taking input N
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="c1">//calling toh() function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">toh</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Position this line where user code will be pasted.  // } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Trailing Zeroes In Factorial</title>
      <link>https://samirpaulb.github.io/problems/trailing-zeroes-in-factorial/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/trailing-zeroes-in-factorial/</guid>
      <description>Trailing Zeroes In Factorial - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="trailing-zeroes-in-factorial">Trailing zeroes in factorial</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">For an integer <strong>N</strong>&nbsp;find the number of trailing zeroes in <strong>N!.</strong></span></p>
<p><span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 5</span>
<span style="font-size:18px"><strong>Output:
</strong>1</span>
<span style="font-size:18px"><strong>Explanation:
</strong>5! = 120 so the number of trailing zero is 1.</span></pre>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><span style="font-size:18px"><strong>Input:
</strong>N = 4</span>
<span style="font-size:18px"><strong>Output:
</strong></span><span style="font-size:18px">0</span>
<span style="font-size:18px"><strong>Explanation:
</strong>4! = 24 so the number of trailing zero is 0.</span></pre>
<p><span style="font-size:18px"><strong>Your Task:&nbsp;&nbsp;</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>trailingZeroes()</strong>&nbsp;which take an integer N as an input parameter and returns the count of trailing zeroes in the N!.</span></p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong>&nbsp;O(logN)<br>
<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>
<p><span style="font-size:18px"><strong>Constraints:</strong><br>
1 &lt;= N&nbsp;&lt;= 10<sup>9</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">trailingZeroes</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Write Your Code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">N</span> <span class="o">/</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span>  <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">trailingZeroes</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Triplet Sum In Array</title>
      <link>https://samirpaulb.github.io/problems/triplet-sum-in-array/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/triplet-sum-in-array/</guid>
      <description>Triplet Sum In Array - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="triplet-sum-in-array">Triplet Sum in Array</h1>
<h2 id="medium">Medium</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X. </span></p>
<p><br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
<strong>Output</strong>:
1
<strong>Explanation</strong>:
The triplet {1, 4, 8} in 
the array sums up to 13.</span></pre>
<p><span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input</strong>:
n = 5, X = 10
arr[] = [1 2 4 3 6]
<strong>Output</strong>:
1
<strong>Explanation</strong>:
The triplet {1, 3, 6} in 
the array sums up to 10.</span>
</pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>find3Numbers()</strong>&nbsp;which takes the array arr[], the size of the array (n) and the sum (X) as inputs and returns True if there exists a triplet in the array arr[] which sums up to X and False otherwise.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br>
<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ n ≤ 10<sup>3</sup><br>
1 ≤ A[i] ≤ 10<sup>5</sup></span></p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Function to find if there exists a triplet in the 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//array A[] which sums up to X.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="n">find3Numbers</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//Your Code Here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">A</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">X</span> <span class="o">-</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="k">while</span><span class="p">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">==</span> <span class="n">t</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span> <span class="n">e</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">X</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">X</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">A</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span>  <span class="n">ob</span><span class="p">.</span><span class="n">find3Numbers</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Two Numbers With Odd Occurrences</title>
      <link>https://samirpaulb.github.io/problems/two-numbers-with-odd-occurrences/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/two-numbers-with-odd-occurrences/</guid>
      <description>Two Numbers With Odd Occurrences - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="two-numbers-with-odd-occurrences">Two numbers with odd occurrences</h1>
<h2 id="easy">Easy</h2>
<div class="problem-statement">
                <p></p><p><span style="font-size:18px">Given an unsorted array,&nbsp;<strong>arr</strong>[] of size <strong>N</strong> and that contains <strong>even </strong>number of occurrences for all numbers except two numbers. Find the two numbers in decreasing order which has odd occurrences.</span><br>
<br>
<span style="font-size:18px"><strong>Example 1:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 8
Arr = {4, 2, 4, 5, 2, 3, 3, 1}
<strong>Output:</strong> {5, 1} 
<strong>Explaination:</strong> 5 and 1 have odd occurrences.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Example 2:</strong></span></p>
<pre><span style="font-size:18px"><strong>Input:</strong>
N = 6
Arr = {1 7 5 5 4 4}
<strong>Output:</strong> {7, 1}
<strong>Explaination:</strong> 7 and 1 have odd occurrences.</span></pre>
<p><br>
<span style="font-size:18px"><strong>Your Task:</strong><br>
You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>twoOddNum()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns the two numbers in decreasing order which have odd occurrences.</span></p>
<p><br>
<span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(N)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p><br>
<span style="font-size:18px"><strong>Constraints:</strong><br>
1 ≤ N ≤ 10<sup>5</sup><br>
1 ≤ Arr<sub>i</sub>&nbsp;≤ 10<sup>8</sup></span></p>
 <p></p>
            </div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span><span class="lnt" id="hl-0-32"><a class="lnlinks" href="#hl-0-32">32</a>
</span><span class="lnt" id="hl-0-33"><a class="lnlinks" href="#hl-0-33">33</a>
</span><span class="lnt" id="hl-0-34"><a class="lnlinks" href="#hl-0-34">34</a>
</span><span class="lnt" id="hl-0-35"><a class="lnlinks" href="#hl-0-35">35</a>
</span><span class="lnt" id="hl-0-36"><a class="lnlinks" href="#hl-0-36">36</a>
</span><span class="lnt" id="hl-0-37"><a class="lnlinks" href="#hl-0-37">37</a>
</span><span class="lnt" id="hl-0-38"><a class="lnlinks" href="#hl-0-38">38</a>
</span><span class="lnt" id="hl-0-39"><a class="lnlinks" href="#hl-0-39">39</a>
</span><span class="lnt" id="hl-0-40"><a class="lnlinks" href="#hl-0-40">40</a>
</span><span class="lnt" id="hl-0-41"><a class="lnlinks" href="#hl-0-41">41</a>
</span><span class="lnt" id="hl-0-42"><a class="lnlinks" href="#hl-0-42">42</a>
</span><span class="lnt" id="hl-0-43"><a class="lnlinks" href="#hl-0-43">43</a>
</span><span class="lnt" id="hl-0-44"><a class="lnlinks" href="#hl-0-44">44</a>
</span><span class="lnt" id="hl-0-45"><a class="lnlinks" href="#hl-0-45">45</a>
</span><span class="lnt" id="hl-0-46"><a class="lnlinks" href="#hl-0-46">46</a>
</span><span class="lnt" id="hl-0-47"><a class="lnlinks" href="#hl-0-47">47</a>
</span><span class="lnt" id="hl-0-48"><a class="lnlinks" href="#hl-0-48">48</a>
</span><span class="lnt" id="hl-0-49"><a class="lnlinks" href="#hl-0-49">49</a>
</span><span class="lnt" id="hl-0-50"><a class="lnlinks" href="#hl-0-50">50</a>
</span><span class="lnt" id="hl-0-51"><a class="lnlinks" href="#hl-0-51">51</a>
</span><span class="lnt" id="hl-0-52"><a class="lnlinks" href="#hl-0-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1">//Initial Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1">//User function Template for C++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">twoOddNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">Arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">res1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">res2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">XOR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="n">XOR</span> <span class="o">=</span> <span class="n">XOR</span><span class="o">^</span><span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">rightMostBit</span> <span class="o">=</span> <span class="n">XOR</span> <span class="o">&amp;</span> <span class="o">~</span> <span class="p">(</span><span class="n">XOR</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="k">if</span><span class="p">((</span><span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">rightMostBit</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="n">res1</span> <span class="o">=</span> <span class="n">res1</span><span class="o">^</span><span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">           <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="n">res2</span> <span class="o">=</span> <span class="n">res2</span><span class="o">^</span><span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">           <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">res1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">res2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">rbegin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">rend</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// { Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">Arr</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ans</span><span class="o">=</span><span class="n">ob</span><span class="p">.</span><span class="n">twoOddNum</span><span class="p">(</span><span class="n">Arr</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Vowel Or Not</title>
      <link>https://samirpaulb.github.io/problems/vowel-or-not/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/problems/vowel-or-not/</guid>
      <description>Vowel Or Not - GeeksforGeeks Solution Explained</description>
      <content:encoded><![CDATA[<h1 id="vowel-or-not">Vowel or Not</h1>
<h2 id="easy">Easy</h2>
<div class="problems_problem_content__Xm_eO"><p><span style="font-size:18px">Given a English alphabet <strong>c</strong>, Write a program to check whether a character is a vowel or not.</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 1:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">c = 'a'</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">YES</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">'a' is a vowel.</span></pre>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Example 2:</span></strong></p>
<pre><strong><span style="font-size:18px">Input:</span></strong>
<span style="font-size:18px">c = 'Z'</span>
<strong><span style="font-size:18px">Output:</span></strong>
<span style="font-size:18px">NO</span>
<strong><span style="font-size:18px">Explanation:</span></strong>
<span style="font-size:18px">'Z' is not a vowel.</span></pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size:18px">Your Task:</span></strong></p>
<p><span style="font-size:18px">You don't need to read input or print anything. Your task is to complete the function isVowel() which takes a character c and returns 'YES' or 'NO'.</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Expected Time Complexity:</strong> O(1)<br>
<strong>Expected Auxiliary Space:</strong> O(1)</span></p>
<p>&nbsp;</p>
<p><span style="font-size:18px"><strong>Note: c is either lowercase or uppercase English alphabetic character</strong><br>
<br>
<strong>Constraints:</strong></span></p>
<p><span style="font-size:18px">c belongs to English Alphabets.</span></p>
<p>&nbsp;</p>
</div>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span><span class="lnt" id="hl-0-23"><a class="lnlinks" href="#hl-0-23">23</a>
</span><span class="lnt" id="hl-0-24"><a class="lnlinks" href="#hl-0-24">24</a>
</span><span class="lnt" id="hl-0-25"><a class="lnlinks" href="#hl-0-25">25</a>
</span><span class="lnt" id="hl-0-26"><a class="lnlinks" href="#hl-0-26">26</a>
</span><span class="lnt" id="hl-0-27"><a class="lnlinks" href="#hl-0-27">27</a>
</span><span class="lnt" id="hl-0-28"><a class="lnlinks" href="#hl-0-28">28</a>
</span><span class="lnt" id="hl-0-29"><a class="lnlinks" href="#hl-0-29">29</a>
</span><span class="lnt" id="hl-0-30"><a class="lnlinks" href="#hl-0-30">30</a>
</span><span class="lnt" id="hl-0-31"><a class="lnlinks" href="#hl-0-31">31</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include&lt;bits/stdc++.h&gt; 
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Solution</span><span class="p">{</span>   
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">isVowel</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// code here 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;e&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;E&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;i&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;I&#39;</span>  <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;o&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;O&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;U&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;YES&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;NO&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//{ Driver Code Starts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Solution</span> <span class="n">ob</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ob</span><span class="p">.</span><span class="n">isVowel</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// } Driver Code Ends
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>
