<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Samir Paul</title>
    <link>https://samirpaulb.github.io/tags/python/</link>
    <description>Recent content in python on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://spcdn.pages.dev/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://samirpaulb.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real-Time VoiceüéôÔ∏è Translatorüîä</title>
      <link>https://samirpaulb.github.io/posts/real-time-voice-translator/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/real-time-voice-translator/</guid>
      <description>Real-Time Voice Translator</description>
      <content:encoded><![CDATA[<p><b>Repository Link: <a href="https://github.com/SamirPaulb/real-time-voice-translator">github.com/SamirPaulb/real-time-voice-translator</a></b></p>
<h2 id="abstract">Abstract</h2>
<p><em>Cross-lingual communication is a challenging task that requires accurate translation and natural and expressive speech. Existing solutions often rely on intermediate text representations, which introduce latency and lose the prosodic features of the original speech. In this paper, we present Real-Time Voice Translator, a machine learning project that aims to overcome these limitations by using deep neural networks to directly translate voice from one language to another in real-time. Our project is a desktop application that supports Windows, Linux, and Mac operating systems. It allows users to select the languages they want to translate between and start speaking. The application listens to the user&rsquo;s voice and provides instant translations in real time while preserving the tone and emotion of the speaker. The application can also translate conversations between two or more people, enabling natural and fluent cross-lingual interactions. We evaluate our project on various metrics, such as translation quality, speech quality, latency, and user satisfaction. We demonstrate that our project achieves high performance and provides a seamless and natural experience of cross-lingual communication. We also discuss the future perspectives of our project, such as using voice cloning features to mimic the speaker&rsquo;s voice in the target language and enhancing the emotional preservation of the translated speech. We believe that our project has the potential to revolutionize the field of cross-lingual communication and open new possibilities for cross-cultural exchange and collaboration.</em></p>
<p><strong>Index Terms</strong>: <code>Real-Time Voice Translation</code>, <code>Deep Learning</code>, <code>Voice Tone and Emotion Preservation</code>, <code>Desktop Application</code>.</p>
<h2 id="introduction">Introduction</h2>
<p>Imagine bridging language barriers in real time, preserving emotional nuances and fostering genuine cross-cultural understanding. Real-Time Voice Translator (RTVT) unlocks this possibility, utilizing deep learning to translate spoken words instantly, while faithfully mirroring the speaker&rsquo;s tone and intent. This open-source, desktop application empowers seamless communication across languages, fostering empathy, collaboration, and a more connected world. This research unveils the technical backbone and transformative potential of RTVT, a tool poised to redefine how we interact and collaborate beyond linguistic borders.</p>
<h2 id="studies-and-findings">Studies and Findings</h2>
<p>The allure of instantaneous, seamless speech-to-speech translation across languages is undeniable. Research in end-to-end models like Google&rsquo;s Translatotron, directly mapping speech spectrograms, offers a glimpse into this future. However, the realities of limited language compatibility and lingering technical hurdles made such an approach unsuitable for this real-time voice translator project.</p>
<p>Drawing inspiration from established technologies, we embraced a hybrid approach, meticulously dissecting the translation process into speech-to-text, text-to-text translation, and finally, text-to-speech synthesis. This multi-step journey, while potentially a tad slower than its end-to-end counterparts, unlocked several key advantages. Firstly, it provided access to a vast pool of existing text translation models, vastly expanding the supported language pairs. Secondly, it paved the way for incorporating transliteration features, a valuable tool for bridging the gap between written and spoken forms of a language.</p>
<p>This decision wasn&rsquo;t merely a practical compromise; it was a deliberate move towards a more robust and adaptable framework. While sacrificing the immediacy of spectrogram-based models, we gained a translation engine capable of tackling a wider range of languages and scenarios. As the field of speech-to-speech translation continues to evolve, this hybrid approach offers a stable platform for ongoing development, promising to bring the dream of real-time, cross-lingual communication ever closer to reality.</p>
<h2 id="speech-translation-model">Speech Translation Model</h2>
<p>The Speech Translation Model (STM) orchestrates a series of interconnected processes to achieve real-time, cross-lingual voice communication. Here&rsquo;s a breakdown of its core steps:</p>
<ol>
<li><strong>Voice Input and Automatic Speech Recognition (ASR)</strong>:</li>
</ol>
<ul>
<li>
<p>The journey begins with capturing the user&rsquo;s spoken utterance in the source language.</p>
</li>
<li>
<p>ASR technology meticulously analyzes the audio signal, mapping its acoustic features to linguistic units.</p>
</li>
<li>
<p>The intricate task of identifying phonemes, words, and their boundaries within continuous speech is performed with remarkable accuracy.</p>
</li>
</ul>
<ol start="2">
<li><strong>Input Voice to Text Conversion</strong>:</li>
</ol>
<ul>
<li>
<p>The ASR process culminates in a textual representation of the spoken input, ready for further linguistic transformations.</p>
</li>
<li>
<p>This stage ensures that the model has a structured foundation for subsequent translation and transliteration operations.</p>
</li>
</ul>
<ol start="3">
<li><strong>Transliteration for Textual Adaptation</strong>:</li>
</ol>
<ul>
<li>
<p>To bridge the gap between different writing systems and enhance translation accuracy, transliteration steps in.</p>
</li>
<li>
<p>It meticulously maps the characters of the source language text to their closest equivalents in the target language.</p>
</li>
<li>
<p>This process seamlessly adapts language-specific nuances, ensuring a smooth transition between written forms.</p>
</li>
</ul>
<ol start="4">
<li><strong>Translation of Transliterated Text</strong>:</li>
</ol>
<ul>
<li>
<p>With the text carefully adapted for the target language, the translation engine takes centre stage.</p>
</li>
<li>
<p>Leveraging sophisticated machine translation algorithms, it deciphers the meaning of the source text and artfully reconstructs it in the target language.</p>
</li>
<li>
<p>The model navigates the complexities of grammar, syntax, and semantics, striving for fluency and accuracy in the translated output.</p>
</li>
</ul>
<ol start="5">
<li><strong>Text-to-Speech Synthesis</strong>:</li>
</ol>
<ul>
<li>
<p>The translated text now embarks on a journey back into the auditory realm.</p>
</li>
<li>
<p>Text-to-Speech (TTS) technology meticulously transforms written words into a natural-sounding speech signal.</p>
</li>
<li>
<p>This stage meticulously recreates the nuances of human intonation, rhythm, and pronunciation, breathing life into the translated message.</p>
</li>
</ul>
<ol start="6">
<li><strong>Voice Output</strong>:</li>
</ol>
<ul>
<li>
<p>The final step unveils the translated utterance in the target language, spoken aloud for the listener.</p>
</li>
<li>
<p>The model gracefully renders the translated text as intelligible speech, completing the cross-lingual communication loop.</p>
</li>
<li>
<p>solid foundation for subsequent translation.</p>
</li>
<li>
<p>deep-translator: This versatile library offers a comprehensive suite of translation capabilities, ensuring linguistic accuracy and fluency across a diverse range of language pairs.</p>
</li>
<li>
<p>google-transliteration-api: This API elegantly handled the task of transliteration, adapting text between different writing systems, fostering a seamless transition between languages.</p>
</li>
<li>
<p>cx-Freeze: This tool enabled the packaging of the STM into standalone executable applications for Windows, Linux, and macOS, significantly broadening its accessibility and potential user base.</p>
</li>
</ul>
<p><strong>Program Flow:</strong>
<img loading="lazy" src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/73dd62d6-798d-4129-aff3-16d6d932a817" alt="Program Flow"  />
</p>
<ul>
<li>
<p><strong>Voice Input</strong>: The journey begins with capturing the user&rsquo;s spoken utterance in the source language, meticulously handled by pyaudio.</p>
</li>
<li>
<p><strong>Automatic Speech Recognition</strong>: SpeechRecognition diligently analyzes the audio signal, converting it into text for further processing.</p>
</li>
<li>
<p><strong>Transliteration</strong>: The google-transliteration-api gracefully adapts the text to the target language&rsquo;s writing system, ensuring optimal translation accuracy.</p>
</li>
<li>
<p><strong>Translation</strong>: deep-translator leverages sophisticated translation algorithms to decipher the meaning of the source text and reconstruct it in the target language, preserving linguistic nuances.</p>
</li>
<li>
<p><strong>Text-to-Speech Synthesis</strong>: gTTS meticulously transforms the translated text into a natural-sounding speech signal, breathing life into the translated message.</p>
</li>
<li>
<p><strong>Voice Output</strong>: playsound delivers the translated utterance in the target language, completing the cross-lingual communication loop.</p>
</li>
</ul>
<h2 id="installation-and-usage">Installation and Usage</h2>
<h3 id="dependencies">Dependencies</h3>
<pre><code>&lt;=Python3.11, gTTS, pyaudio, playsound==1.2.2, deep-translator, SpeechRecognition, google-transliteration-api, cx-Freeze
</code></pre>
<h3 id="getting-started">Getting started</h3>
<ol>
<li>
<p>Clone <a href="https://github.com/SamirPaulb/real-time-voice-translator">this project</a> and create virtualenv (recommended) and activate virtualenv.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Create virtualenv
</span></span><span class="line"><span class="cl">python -m venv env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Linux/MacOS
</span></span><span class="line"><span class="cl">source env/bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Windows
</span></span><span class="line"><span class="cl">env\Scripts\activate
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Install require dependencies.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install --upgrade wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Run code and speech (have fun).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="install-windowslinuxmac-application">Install Windows/Linux/Mac Application</h3>
<p><a href="https://github.com/SamirPaulb/real-time-voice-translator/releases/latest"><img src="https://user-images.githubusercontent.com/132539454/278971282-8d676023-a03a-463c-8e55-3f0afe6e3e58.svg" alt="DOWNLOAD"></a></p>
<p>I am using <a href="https://github.com/marcelotduarte/cx_Freeze/tree/main">cx_Freeze</a> to build executable file of this app. The build settings can be changed by modifying the <a href="https://github.com/SamirPaulb/real-time-voice-translator/blob/main/setup.py">setup.py</a> file.</p>
<h5 id="build-installer-containing-all-the-files">Build installer containing all the files:</h5>
<ul>
<li>Windows: <code>python setup.py bdist_msi</code></li>
<li>Linux: <code>python setup.py bdist_rpm</code></li>
<li>Mac: <code>python setup.py bdist_mac</code></li>
</ul>
<h3 id="gui">GUI</h3>
<p><a href="#"><img src="https://github.com/SamirPaulb/real-time-voice-translator/assets/77569653/f96a4115-a88f-4096-9a00-954b8527d872" alt="App GUI"></a></p>
<h2 id="conclusion">Conclusion</h2>
<p>Real-Time Voice Translator shatters language barriers with its deep learning-powered hybrid approach. Beyond accurate translations, it captures the essence of human speech, fostering genuine cross-cultural understanding. This research unveils its robust framework, adaptable design, and potential for future advancements like voice cloning and emotion preservation. Real-Time Voice Translator intuitive interface and cross-platform compatibility empower diverse users to navigate the world with ease. More than just a tool, it&rsquo;s a bridge of empathy and collaboration, one voice at a time. By embracing Real-Time Voice Translator, we step closer to a world where communication transcends borders, uniting cultures and shaping a more connected future.</p>
<h2 id="future-work">Future Work</h2>
<p>While this project currently delivers impressive real-time translations, the future holds even greater potential for capturing the full spectrum of human communication. Sentiment and emotion analysis models like EmoNet and SyntaxNet offer exciting possibilities for preserving the speaker&rsquo;s intended meaning beyond mere words. Integrating these tools could allow Real-Time Voice Translator to translate expressions of joy, anger, or sarcasm with nuanced accuracy, fostering deeper cross-cultural understanding.</p>
<p>Open-source toolkits like PaddleSpeech and espnet, known for their advanced speech-processing capabilities, could further enhance the translation process. Their deep learning frameworks offer the potential for improvements in speech recognition, natural language understanding, and text-to-speech synthesis. Additionally, incorporating SoftVC VITS Singing Voice Conversion technology could unlock fascinating avenues for translating emotional melodies and vocal inflections, adding a truly human touch to translated speech.</p>
<p>We&rsquo;re actively exploring the integration of OpenAI&rsquo;s Whisper ASR model, renowned for its speech recognition accuracy, and ElevenLabs&rsquo; natural-sounding speech APIs. These advancements promise to elevate the user experience, delivering translated speech that seamlessly captures the speaker&rsquo;s original voice quality and emotional tone. Finally, accent softening models like Tomato.ai could be implemented to reduce speaker-specific characteristics in the translated speech, ensuring clearer and more universal comprehension.</p>
<p>By embracing these cutting-edge technologies and pursuing continuous research, Real-Time Voice Translator aims to transcend the limitations of traditional translation. Our vision is to create a tool that not only bridges languages but also bridges hearts, fostering a world where emotions and intentions resonate across all barriers.</p>
<h2 id="references">References</h2>
<ol>
<li>
<p>Cambria, Erik, and Jamin Shi. &ldquo;Semantic sentiment analysis.&rdquo; IEEE Transactions on Affective Computing 7.4 (2015): 266-279.</p>
</li>
<li>
<p>Socher, Richard, et al. &ldquo;Recursive deep learning for sentiment analysis.&rdquo; Proceedings of the 28th International Conference on Machine Learning. ACM, 2013.</p>
</li>
<li>
<p><a href="https://github.com/PaddlePaddle/PaddleSpeech">PaddlePaddle Team</a>. paddlepaddle speech recognition ON PaddlePaddle paddlepaddle.org.cn.</p>
</li>
<li>
<p>ESPNet Working Group. &ldquo;ESPnet.&rdquo; GitHub Pages, github.com.</p>
</li>
<li>
<p>Hsu, Wei-Ning, et al. &ldquo;SoftVC: High-fidelity TTS with Mel-Style Transfer.&rdquo; arXiv preprint arXiv:2301.04765 (2023).</p>
</li>
<li>
<p>OpenAI <a href="https://github.com/openai/whisper">Whisper</a>: Open-Source Speech Recognition.</p>
</li>
<li>
<p>ElevenLabs. &ldquo;ElevenLabs.&rdquo; eleventlabs.io.</p>
</li>
<li>
<p>Tomato.ai. &ldquo;Tomato.ai&rdquo;.</p>
</li>
<li>
<p>Mohri, Mehryar, et al. &ldquo;Foundations of machine learning.&rdquo; MIT press, 2018.</p>
</li>
</ol>
<hr>
<p>This post is licensed under a <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>. Distribution and adaptation are permitted under the terms of the license, with appropriate attribution required. All rights not expressly granted are reserved. For further information, please visit <a href="https://www.dmca.com/r/jkzgz6y">dmca.com/r/jkzgz6y</a>.</p>
<p><a href="https://www.dmca.com/r/jkzgz6y"><img loading="lazy" src="https://www.dmca.com/Badges/dmca-badge-w250-5x1-06.png" alt="DMCA.com Protection Status"  />
</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>PyShooter Python Game</title>
      <link>https://samirpaulb.github.io/posts/pyshooter/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/pyshooter/</guid>
      <description>PyShooter Python two-dimensional shooter game</description>
      <content:encoded><![CDATA[<p><a href="https://www.python.org"><img loading="lazy" src="https://img.shields.io/badge/language-python-blue.svg?style=flat" alt="Language"  />
</a>
<a href="https://www.pygame.org/news.html"><img loading="lazy" src="https://img.shields.io/badge/module-pygame-brightgreen.svg?style=flat" alt="Module"  />
</a></p>
<p>PyShooter is a two-dimensional shooter game in which the player runs horizontally and fires at enemies.</p>
<h5 id="repository-httpsgithubcomsamirpaulbpyshooterhttpsgithubcomsamirpaulbpyshooter">Repository: <a href="https://github.com/SamirPaulb/PyShooter">https://github.com/SamirPaulb/PyShooter</a></h5>
<h2 id="demo">Demo:</h2>
<iframe width="100%" height="420" src="https://www.youtube.com/embed/rg-49OTHZVY" loading="lazy" title="PyShooter - Samir Paul - YouTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="true"></iframe>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/214920668-ef657089-b71f-43c8-8011-a202a09f5531.mp4" loading="lazy" width="100%" height = "500" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<p>Vimeo: <a href="https://vimeo.com/809728956">https://vimeo.com/809728956</a></p>
<!---
<a href="https://www.youtube.com/watch?v=rg-49OTHZVY">
<img src="https://raw.githubusercontent.com/SamirPaul1/assets/main/pygame-youtube-video-thumbnail.jpg" alt="PyShooter Demo YouTube" width="700" height="370">
</a>
-->
<h2 id="how-to-play">How To Play</h2>
<ul>
<li>If you don&rsquo;t have <a href="https://www.python.org/downloads/">Python</a> or <a href="https://www.pygame.org/download.shtml">Pygame</a> installed, you can simply double click the .exe file to play the game.
<strong>Note:</strong> <em>The .exe file needs to stay in the same directory as the sounds, images, and font folders.</em></li>
</ul>
<p>Install Pygame <code>pip install pygame</code></p>
<ul>
<li>If you have the correct version of Python and Pygame installed, you can run the program in the command prompt / terminal.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> PyShooter
</span></span><span class="line"><span class="cl">python main.py
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>Credits for assets used:</p>
<ol>
<li><a href="https://erayzesen.itch.io/pixel-platformer">https://erayzesen.itch.io/pixel-platformer</a></li>
<li><a href="https://secrethideout.itch.io/team-wars-platformer-battle">https://secrethideout.itch.io/team-wars-platformer-battle</a></li>
<li><a href="https://soundimage.org/fantasywonder">https://soundimage.org/fantasywonder</a></li>
<li><a href="https://gushh.net/blog/free-game-sprites-explosion-3">https://gushh.net/blog/free-game-sprites-explosion-3</a></li>
<li><a href="https://mtk.itch.io/grenades-16x16">https://mtk.itch.io/grenades-16x16</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>List of Python Frameworks Libraries Software and Resources</title>
      <link>https://samirpaulb.github.io/posts/list-of-python-frameworks-libraries-software-and-resources/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/list-of-python-frameworks-libraries-software-and-resources/</guid>
      <description>List of Python Frameworks Libraries Software and Resources</description>
      <content:encoded><![CDATA[<blockquote>
<p>A curated list of awesome Python frameworks, libraries, software and resources.</p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> Awesome Python
<ul>
<li><a href="#admin-panels">Admin Panels</a></li>
<li><a href="#algorithms-and-design-patterns">Algorithms and Design Patterns</a></li>
<li><a href="#asgi-servers">ASGI Servers</a></li>
<li><a href="#asynchronous-programming">Asynchronous Programming</a></li>
<li><a href="#audio">Audio</a></li>
<li><a href="#authentication">Authentication</a></li>
<li><a href="#build-tools">Build Tools</a></li>
<li><a href="#built-in-classes-enhancement">Built-in Classes Enhancement</a></li>
<li><a href="#caching">Caching</a></li>
<li><a href="#chatops-tools">ChatOps Tools</a></li>
<li><a href="#cms">CMS</a></li>
<li><a href="#code-analysis">Code Analysis</a></li>
<li><a href="#command-line-interface-development">Command-line Interface Development</a></li>
<li><a href="#command-line-tools">Command-line Tools</a></li>
<li><a href="#compatibility">Compatibility</a></li>
<li><a href="#computer-vision">Computer Vision</a></li>
<li><a href="#concurrency-and-parallelism">Concurrency and Parallelism</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#data-analysis">Data Analysis</a></li>
<li><a href="#data-validation">Data Validation</a></li>
<li><a href="#data-visualization">Data Visualization</a></li>
<li><a href="#database-drivers">Database Drivers</a></li>
<li><a href="#database">Database</a></li>
<li><a href="#date-and-time">Date and Time</a></li>
<li><a href="#debugging-tools">Debugging Tools</a></li>
<li><a href="#deep-learning">Deep Learning</a></li>
<li><a href="#devops-tools">DevOps Tools</a></li>
<li><a href="#distributed-computing">Distributed Computing</a></li>
<li><a href="#distribution">Distribution</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#downloader">Downloader</a></li>
<li><a href="#e-commerce">E-commerce</a></li>
<li><a href="#editor-plugins-and-ides">Editor Plugins and IDEs</a></li>
<li><a href="#email">Email</a></li>
<li><a href="#enterprise-application-integrations">Enterprise Application Integrations</a></li>
<li><a href="#environment-management">Environment Management</a></li>
<li><a href="#files">Files</a></li>
<li><a href="#foreign-function-interface">Foreign Function Interface</a></li>
<li><a href="#forms">Forms</a></li>
<li><a href="#functional-programming">Functional Programming</a></li>
<li><a href="#game-development">Game Development</a></li>
<li><a href="#geolocation">Geolocation</a></li>
<li><a href="#gui-development">GUI Development</a></li>
<li><a href="#hardware">Hardware</a></li>
<li><a href="#html-manipulation">HTML Manipulation</a></li>
<li><a href="#http-clients">HTTP Clients</a></li>
<li><a href="#image-processing">Image Processing</a></li>
<li><a href="#implementations">Implementations</a></li>
<li><a href="#interactive-interpreter">Interactive Interpreter</a></li>
<li><a href="#internationalization">Internationalization</a></li>
<li><a href="#job-scheduler">Job Scheduler</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#machine-learning">Machine Learning</a></li>
<li><a href="#miscellaneous">Miscellaneous</a></li>
<li><a href="#natural-language-processing">Natural Language Processing</a></li>
<li><a href="#network-virtualization">Network Virtualization</a></li>
<li><a href="#news-feed">News Feed</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#package-management">Package Management</a></li>
<li><a href="#package-repositories">Package Repositories</a></li>
<li><a href="#penetration-testing">Penetration testing</a></li>
<li><a href="#permissions">Permissions</a></li>
<li><a href="#processes">Processes</a></li>
<li><a href="#recommender-systems">Recommender Systems</a></li>
<li><a href="#refactoring">Refactoring</a></li>
<li><a href="#restful-api">RESTful API</a></li>
<li><a href="#robotics">Robotics</a></li>
<li><a href="#rpc-servers">RPC Servers</a></li>
<li><a href="#science">Science</a></li>
<li><a href="#search">Search</a></li>
<li><a href="#serialization">Serialization</a></li>
<li><a href="#serverless-frameworks">Serverless Frameworks</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#specific-formats-processing">Specific Formats Processing</a></li>
<li><a href="#static-site-generator">Static Site Generator</a></li>
<li><a href="#tagging">Tagging</a></li>
<li><a href="#task-queues">Task Queues</a></li>
<li><a href="#template-engine">Template Engine</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#text-processing">Text Processing</a></li>
<li><a href="#third-party-apis">Third-party APIs</a></li>
<li><a href="#url-manipulation">URL Manipulation</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#web-asset-management">Web Asset Management</a></li>
<li><a href="#web-content-extracting">Web Content Extracting</a></li>
<li><a href="#web-crawling">Web Crawling</a></li>
<li><a href="#web-frameworks">Web Frameworks</a></li>
<li><a href="#websocket">WebSocket</a></li>
<li><a href="#wsgi-servers">WSGI Servers</a></li>
</ul>
</li>
<li><a href="#resources">Resources</a>
<ul>
<li><a href="#books">Books</a></li>
<li><a href="#newsletters">Newsletters</a></li>
<li><a href="#podcasts">Podcasts</a></li>
<li><a href="#websites">Websites</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<hr>
<h2 id="admin-panels">Admin Panels</h2>
<p><em>Libraries for administrative interfaces.</em></p>
<ul>
<li><a href="https://github.com/ajenti/ajenti">ajenti</a> - The admin panel your servers deserve.</li>
<li><a href="https://grappelliproject.com/">django-grappelli</a> - A jazzy skin for the Django Admin-Interface.</li>
<li><a href="https://github.com/geex-arts/django-jet">django-jet</a> - Modern responsive template for the Django admin interface with improved functionality.</li>
<li><a href="https://djangosuit.com/">django-suit</a> - Alternative Django Admin-Interface (free only for Non-commercial use).</li>
<li><a href="https://github.com/sshwsfc/xadmin">django-xadmin</a> - Drop-in replacement of Django admin comes with lots of goodies.</li>
<li><a href="https://github.com/flask-admin/flask-admin">flask-admin</a> - Simple and extensible administrative interface framework for Flask.</li>
<li><a href="https://github.com/mher/flower">flower</a> - Real-time monitor and web admin for Celery.</li>
<li><a href="https://github.com/jet-admin/jet-bridge">jet-bridge</a> - Admin panel framework for any application with nice UI (ex Jet Django).</li>
<li><a href="https://github.com/wooey/wooey">wooey</a> - A Django app which creates automatic web UIs for Python scripts.</li>
</ul>
<h2 id="algorithms-and-design-patterns">Algorithms and Design Patterns</h2>
<p><em>Python implementation of data structures, algorithms and design patterns. Also see <a href="https://github.com/tayllan/awesome-algorithms">awesome-algorithms</a>.</em></p>
<ul>
<li>Algorithms
<ul>
<li><a href="https://github.com/keon/algorithms">algorithms</a> - Minimal examples of data structures and algorithms.</li>
<li><a href="https://github.com/prabhupant/python-ds">python-ds</a> - A collection of data structure and algorithms for coding interviews.</li>
<li><a href="https://github.com/grantjenks/python-sortedcontainers">sortedcontainers</a> - Fast and pure-Python implementation of sorted collections.</li>
<li><a href="https://github.com/TheAlgorithms/Python">TheAlgorithms</a> - All Algorithms implemented in Python.</li>
</ul>
</li>
<li>Design Patterns
<ul>
<li><a href="https://github.com/tylerlaberge/PyPattyrn">PyPattyrn</a> - A simple yet effective library for implementing common design patterns.</li>
<li><a href="https://github.com/faif/python-patterns">python-patterns</a> - A collection of design patterns in Python.</li>
<li><a href="https://github.com/pytransitions/transitions">transitions</a> - A lightweight, object-oriented finite state machine implementation.</li>
</ul>
</li>
</ul>
<h2 id="asgi-servers">ASGI Servers</h2>
<p><em><a href="https://asgi.readthedocs.io/en/latest/">ASGI</a>-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/django/daphne">daphne</a> - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li>
<li><a href="https://github.com/encode/uvicorn">uvicorn</a> - A lightning-fast ASGI server implementation, using uvloop and httptools.</li>
</ul>
<h2 id="asynchronous-programming">Asynchronous Programming</h2>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio.html">asyncio</a> - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.
<ul>
<li><a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a></li>
</ul>
</li>
<li><a href="https://github.com/python-trio/trio">trio</a> - A friendly library for async concurrency and I/O.</li>
<li><a href="https://twistedmatrix.com/trac/">Twisted</a> - An event-driven networking engine.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast asyncio event loop.</li>
</ul>
<h2 id="audio">Audio</h2>
<p><em>Libraries for manipulating audio and its metadata.</em></p>
<ul>
<li>Audio
<ul>
<li><a href="https://github.com/beetbox/audioread">audioread</a> - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li>
<li><a href="https://github.com/worldveil/dejavu">dejavu</a> - Audio fingerprinting and recognition.</li>
<li><a href="https://github.com/keunwoochoi/kapre">kapre</a> - Keras Audio Preprocessors.</li>
<li><a href="https://github.com/librosa/librosa">librosa</a> - Python library for audio and music analysis.</li>
<li><a href="https://github.com/sergree/matchering">matchering</a> - A library for automated reference audio mastering.</li>
<li><a href="https://bspaans.github.io/python-mingus/">mingus</a> - An advanced music theory and notation package with MIDI file and playback support.</li>
<li><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a> - Audio feature extraction, classification, segmentation and applications.</li>
<li><a href="https://github.com/jiaaro/pydub">pydub</a> - Manipulate audio with a simple and easy high level interface.</li>
<li><a href="https://github.com/Parisson/TimeSide">TimeSide</a> - Open web audio processing framework.</li>
</ul>
</li>
<li>Metadata
<ul>
<li><a href="https://github.com/beetbox/beets">beets</a> - A music library manager and <a href="https://musicbrainz.org/">MusicBrainz</a> tagger.</li>
<li><a href="https://github.com/nicfit/eyeD3">eyeD3</a> - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li>
<li><a href="https://github.com/quodlibet/mutagen">mutagen</a> - A Python module to handle audio metadata.</li>
<li><a href="https://github.com/devsnd/tinytag">tinytag</a> - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li>
</ul>
</li>
</ul>
<h2 id="authentication">Authentication</h2>
<p><em>Libraries for implementing authentications schemes.</em></p>
<ul>
<li>OAuth
<ul>
<li><a href="https://github.com/lepture/authlib">authlib</a> - JavaScript Object Signing and Encryption draft implementation.</li>
<li><a href="https://github.com/pennersr/django-allauth">django-allauth</a> - Authentication app for Django that &ldquo;just works.&rdquo;</li>
<li><a href="https://github.com/evonove/django-oauth-toolkit">django-oauth-toolkit</a> - OAuth 2 goodies for Django.</li>
<li><a href="https://github.com/idan/oauthlib">oauthlib</a> - A generic and thorough implementation of the OAuth request-signing logic.</li>
<li><a href="https://github.com/joestump/python-oauth2">python-oauth2</a> - A fully tested, abstract interface to creating OAuth clients and servers.</li>
<li><a href="https://github.com/omab/python-social-auth">python-social-auth</a> - An easy-to-setup social authentication mechanism.</li>
</ul>
</li>
<li>JWT
<ul>
<li><a href="https://github.com/jpadilla/pyjwt">pyjwt</a> - JSON Web Token implementation in Python.</li>
<li><a href="https://github.com/mpdavis/python-jose/">python-jose</a> - A JOSE implementation in Python.</li>
<li><a href="https://github.com/davedoesdev/python-jwt">python-jwt</a> - A module for generating and verifying JSON Web Tokens.</li>
</ul>
</li>
</ul>
<h2 id="build-tools">Build Tools</h2>
<p><em>Compile software from source code.</em></p>
<ul>
<li><a href="https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">BitBake</a> - A make-like build tool for embedded Linux.</li>
<li><a href="https://www.buildout.org/en/latest/">buildout</a> - A build system for creating, assembling and deploying applications from multiple parts.</li>
<li><a href="https://github.com/platformio/platformio-core">PlatformIO</a> - A console tool to build code with different development platforms.</li>
<li><a href="https://github.com/pybuilder/pybuilder">pybuilder</a> - A continuous build tool written in pure Python.</li>
<li><a href="https://www.scons.org/">SCons</a> - A software construction tool.</li>
</ul>
<h2 id="built-in-classes-enhancement">Built-in Classes Enhancement</h2>
<p><em>Libraries for enhancing Python built-in classes.</em></p>
<ul>
<li><a href="https://github.com/python-attrs/attrs">attrs</a> - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li>
<li><a href="https://github.com/jab/bidict">bidict</a> - Efficient, Pythonic bidirectional map data structures and related functionality..</li>
<li><a href="https://github.com/cdgriffith/Box">Box</a> - Python dictionaries with advanced dot notation access.</li>
<li><a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> - (Python standard library) Data classes.</li>
<li><a href="https://github.com/carlosescri/DottedDict">DottedDict</a> - A library that provides a method of accessing lists and dicts with a dotted path notation.</li>
</ul>
<h2 id="cms">CMS</h2>
<p><em>Content Management Systems.</em></p>
<ul>
<li><a href="https://www.django-cms.org/en/">django-cms</a> - An Open source enterprise CMS based on the Django.</li>
<li><a href="https://github.com/feincms/feincms">feincms</a> - One of the most advanced Content Management Systems built on Django.</li>
<li><a href="https://github.com/indico/indico">indico</a> - A feature-rich event management system, made @ <a href="https://en.wikipedia.org/wiki/CERN">CERN</a>.</li>
<li><a href="https://github.com/Kotti/Kotti">Kotti</a> - A high-level, Pythonic web application framework built on Pyramid.</li>
<li><a href="https://github.com/stephenmcd/mezzanine">mezzanine</a> - A powerful, consistent, and flexible content management platform.</li>
<li><a href="https://plone.org/">plone</a> - A CMS built on top of the open source application server Zope.</li>
<li><a href="https://github.com/rochacbruno/quokka">quokka</a> - Flexible, extensible, small CMS powered by Flask and MongoDB.</li>
<li><a href="https://wagtail.io/">wagtail</a> - A Django content management system.</li>
</ul>
<h2 id="caching">Caching</h2>
<p><em>Libraries for caching data.</em></p>
<ul>
<li><a href="https://github.com/bbangert/beaker">beaker</a> - A WSGI middleware for sessions and caching.</li>
<li><a href="https://github.com/django-cache-machine/django-cache-machine">django-cache-machine</a> - Automatic caching and invalidation for Django models.</li>
<li><a href="https://github.com/Suor/django-cacheops">django-cacheops</a> - A slick ORM cache with automatic granular event-driven invalidation.</li>
<li><a href="https://dogpilecache.readthedocs.io/en/latest/">dogpile.cache</a> - dogpile.cache is a next generation replacement for Beaker made by the same authors.</li>
<li><a href="https://pypi.org/project/HermesCache/">HermesCache</a> - Python caching library with tag-based invalidation and dogpile effect prevention.</li>
<li><a href="https://github.com/lericson/pylibmc">pylibmc</a> - A Python wrapper around the <a href="https://libmemcached.org/libMemcached.html">libmemcached</a> interface.</li>
<li><a href="https://www.grantjenks.com/docs/diskcache/">python-diskcache</a> - SQLite and file backed cache backend with faster lookups than memcached and redis.</li>
</ul>
<h2 id="chatops-tools">ChatOps Tools</h2>
<p><em>Libraries for chatbot development.</em></p>
<ul>
<li><a href="https://github.com/errbotio/errbot/">errbot</a> - The easiest and most popular chatbot to implement ChatOps.</li>
</ul>
<h2 id="code-analysis">Code Analysis</h2>
<p><em>Tools of static analysis, linters and code quality checkers. Also see <a href="https://github.com/mre/awesome-static-analysis">awesome-static-analysis</a>.</em></p>
<ul>
<li>Code Analysis
<ul>
<li><a href="https://github.com/coala/coala/">coala</a> - Language independent and easily extendable code analysis application.</li>
<li><a href="https://github.com/scottrogowski/code2flow">code2flow</a> - Turn your Python and JavaScript code into DOT flowcharts.</li>
<li><a href="https://github.com/PyCQA/prospector">prospector</a> - A tool to analyse Python code.</li>
<li><a href="https://github.com/gak/pycallgraph">pycallgraph</a> - A library that visualises the flow (call graph) of your Python application.</li>
<li><a href="https://github.com/jendrikseipp/vulture">vulture</a> - A tool for finding and analysing dead Python code.</li>
</ul>
</li>
<li>Code Linters
<ul>
<li><a href="https://pypi.org/project/flake8/">flake8</a> - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.
<ul>
<li><a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions">awesome-flake8-extensions</a></li>
</ul>
</li>
<li><a href="https://github.com/klen/pylama">pylama</a> - A code audit tool for Python and JavaScript.</li>
<li><a href="https://www.pylint.org/">pylint</a> - A fully customizable source code analyzer.</li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide">wemake-python-styleguide</a> - The strictest and most opinionated python linter ever.</li>
</ul>
</li>
<li>Code Formatters
<ul>
<li><a href="https://github.com/python/black">black</a> - The uncompromising Python code formatter.</li>
<li><a href="https://github.com/timothycrosley/isort">isort</a> - A Python utility / library to sort imports.</li>
<li><a href="https://github.com/google/yapf">yapf</a> - Yet another Python code formatter from Google.</li>
</ul>
</li>
<li>Static Type Checkers, also see <a href="https://github.com/typeddjango/awesome-python-typing">awesome-python-typing</a>
<ul>
<li><a href="https://mypy-lang.org/">mypy</a> - Check variable types during compile time.</li>
<li><a href="https://github.com/facebook/pyre-check">pyre-check</a> - Performant type checking.</li>
<li><a href="https://github.com/python/typeshed">typeshed</a> - Collection of library stubs for Python, with static types.</li>
</ul>
</li>
<li>Static Type Annotations Generators
<ul>
<li><a href="https://github.com/Instagram/MonkeyType">MonkeyType</a> - A system for Python that generates static type annotations by collecting runtime types.</li>
<li><a href="https://github.com/dropbox/pyannotate">pyannotate</a> - Auto-generate PEP-484 annotations.</li>
<li><a href="https://github.com/google/pytype">pytype</a> - Pytype checks and infers types for Python code - without requiring type annotations.</li>
</ul>
</li>
</ul>
<h2 id="command-line-interface-development">Command-line Interface Development</h2>
<p><em>Libraries for building command-line applications.</em></p>
<ul>
<li>Command-line Application Development
<ul>
<li><a href="https://builtoncement.com/">cement</a> - CLI Application Framework for Python.</li>
<li><a href="https://click.pocoo.org/dev/">click</a> - A package for creating beautiful command line interfaces in a composable way.</li>
<li><a href="https://docs.openstack.org/developer/cliff/">cliff</a> - A framework for creating command-line programs with multi-level commands.</li>
<li><a href="https://docopt.org/">docopt</a> - Pythonic command line arguments parser.</li>
<li><a href="https://github.com/google/python-fire">python-fire</a> - A library for creating command line interfaces from absolutely any Python object.</li>
<li><a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> - A library for building powerful interactive command lines.</li>
</ul>
</li>
<li>Terminal Rendering
<ul>
<li><a href="https://github.com/rsalmei/alive-progress">alive-progress</a> - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li>
<li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a> - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li>
<li><a href="https://github.com/glamp/bashplotlib">bashplotlib</a> - Making basic plots in the terminal.</li>
<li><a href="https://pypi.org/project/colorama/">colorama</a> - Cross-platform colored terminal text.</li>
<li><a href="https://github.com/willmcgugan/rich">rich</a> - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li>
<li><a href="https://github.com/tqdm/tqdm">tqdm</a> - Fast, extensible progress bar for loops and CLI.</li>
</ul>
</li>
</ul>
<h2 id="command-line-tools">Command-line Tools</h2>
<p><em>Useful CLI-based tools for productivity.</em></p>
<ul>
<li>Productivity Tools
<ul>
<li><a href="https://github.com/pykong/copier">copier</a> - A library and command-line utility for rendering projects templates.</li>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> - A command-line utility that creates projects from cookiecutters (project templates).</li>
<li><a href="https://github.com/sloria/doitlive">doitlive</a> - A tool for live presentations in the terminal.</li>
<li><a href="https://github.com/gleitz/howdoi">howdoi</a> - Instant coding answers via the command line.</li>
<li><a href="https://github.com/pyinvoke/invoke#readme">Invoke</a> - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li>
<li><a href="https://github.com/facebook/PathPicker">PathPicker</a> - Select files out of bash output.</li>
<li><a href="https://github.com/mooz/percol">percol</a> - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li>
<li><a href="https://github.com/nvbn/thefuck">thefuck</a> - Correcting your previous console command.</li>
<li><a href="https://github.com/tony/tmuxp">tmuxp</a> - A <a href="https://github.com/tmux/tmux">tmux</a> session manager.</li>
<li><a href="https://github.com/timofurrer/try">try</a> - A dead simple CLI to try out python packages - it&rsquo;s never been easier.</li>
</ul>
</li>
<li>CLI Enhancements
<ul>
<li><a href="https://github.com/jakubroztocil/httpie">httpie</a> - A command line HTTP client, a user-friendly cURL replacement.</li>
<li><a href="https://github.com/laixintao/iredis">iredis</a> - Redis CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/cloudnativelabs/kube-shell">kube-shell</a> - An integrated shell for working with the Kubernetes CLI.</li>
<li><a href="https://github.com/dbcli/litecli">litecli</a> - SQLite CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/mycli">mycli</a> - MySQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/pgcli">pgcli</a> - PostgreSQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/donnemartin/saws">saws</a> - A Supercharged <a href="https://github.com/aws/aws-cli">aws-cli</a>.</li>
</ul>
</li>
</ul>
<h2 id="compatibility">Compatibility</h2>
<p><em>Libraries for migrating from Python 2 to 3.</em></p>
<ul>
<li><a href="https://python-future.org/index.html">python-future</a> - The missing compatibility layer between Python 2 and Python 3.</li>
<li><a href="https://github.com/PyCQA/modernize">modernize</a> - Modernizes Python code for eventual Python 3 migration.</li>
<li><a href="https://pypi.org/project/six/">six</a> - Python 2 and 3 compatibility utilities.</li>
</ul>
<h2 id="computer-vision">Computer Vision</h2>
<p><em>Libraries for Computer Vision.</em></p>
<ul>
<li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a> - Ready-to-use OCR with 40+ languages supported.</li>
<li><a href="https://github.com/ageitgey/face_recognition">Face Recognition</a> - Simple facial recognition library.</li>
<li><a href="https://github.com/kornia/kornia/">Kornia</a> - Open Source Differentiable Computer Vision Library for PyTorch.</li>
<li><a href="https://opencv.org/">OpenCV</a> - Open Source Computer Vision Library.</li>
<li><a href="https://github.com/madmaze/pytesseract">pytesseract</a> - A wrapper for <a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a>.</li>
<li><a href="https://github.com/sightmachine/SimpleCV">SimpleCV</a> - An open source framework for building computer vision applications.</li>
<li><a href="https://github.com/sirfz/tesserocr">tesserocr</a> - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li>
</ul>
<h2 id="concurrency-and-parallelism">Concurrency and Parallelism</h2>
<p><em>Libraries for concurrent and parallel execution. Also see <a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a>.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a> - (Python standard library) A high-level interface for asynchronously executing callables.</li>
<li><a href="https://eventlet.net/">eventlet</a> - Asynchronous framework with WSGI support.</li>
<li><a href="https://www.gevent.org/">gevent</a> - A coroutine-based Python networking library that uses <a href="https://github.com/python-greenlet/greenlet">greenlet</a>.</li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html">multiprocessing</a> - (Python standard library) Process-based parallelism.</li>
<li><a href="https://github.com/soravux/scoop">scoop</a> - Scalable Concurrent Operations in Python.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast implementation of <code>asyncio</code> event loop on top of <code>libuv</code>.</li>
</ul>
<h2 id="configuration">Configuration</h2>
<p><em>Libraries for storing and parsing configuration options.</em></p>
<ul>
<li><a href="https://github.com/DiffSK/configobj">configobj</a> - INI file parser with validation.</li>
<li><a href="https://docs.python.org/3/library/configparser.html">configparser</a> - (Python standard library) INI file parser.</li>
<li><a href="https://github.com/facebookresearch/hydra">hydra</a> - Hydra is a framework for elegantly configuring complex applications.</li>
<li><a href="https://profig.readthedocs.io/en/latest/">profig</a> - Config from multiple formats with value conversion.</li>
<li><a href="https://github.com/henriquebastos/python-decouple">python-decouple</a> - Strict separation of settings from code.</li>
</ul>
<h2 id="cryptography">Cryptography</h2>
<ul>
<li><a href="https://cryptography.io/en/latest/">cryptography</a> - A package designed to expose cryptographic primitives and recipes to Python developers.</li>
<li><a href="https://github.com/paramiko/paramiko">paramiko</a> - The leading native Python SSHv2 protocol library.</li>
<li><a href="https://passlib.readthedocs.io/en/stable/">passlib</a> - Secure password storage/hashing library, very high level.</li>
<li><a href="https://github.com/pyca/pynacl">pynacl</a> - Python binding to the Networking and Cryptography (NaCl) library.</li>
</ul>
<h2 id="data-analysis">Data Analysis</h2>
<p><em>Libraries for data analyzing.</em></p>
<ul>
<li><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> - Pandas on AWS.</li>
<li><a href="https://github.com/blaze/blaze">Blaze</a> - NumPy and Pandas interface to Big Data.</li>
<li><a href="https://github.com/mining/mining">Open Mining</a> - Business Intelligence (BI) in Pandas interface.</li>
<li><a href="https://github.com/ironmussa/Optimus">Optimus</a> - Agile Data Science Workflows made easy with PySpark.</li>
<li><a href="https://orange.biolab.si/">Orange</a> - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li>
<li><a href="https://pandas.pydata.org/">Pandas</a> - A library providing high-performance, easy-to-use data structures and data analysis tools.</li>
</ul>
<h2 id="data-validation">Data Validation</h2>
<p><em>Libraries for validating data. Used for forms in many cases.</em></p>
<ul>
<li><a href="https://github.com/pyeve/cerberus">Cerberus</a> - A lightweight and extensible data validation library.</li>
<li><a href="https://docs.pylonsproject.org/projects/colander/en/latest/">colander</a> - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li>
<li><a href="https://github.com/Julian/jsonschema">jsonschema</a> - An implementation of <a href="https://json-schema.org/">JSON Schema</a> for Python.</li>
<li><a href="https://github.com/keleshev/schema">schema</a> - A library for validating Python data structures.</li>
<li><a href="https://github.com/schematics/schematics">Schematics</a> - Data Structure Validation.</li>
<li><a href="https://github.com/podio/valideer">valideer</a> - Lightweight extensible data validation and adaptation library.</li>
<li><a href="https://github.com/alecthomas/voluptuous">voluptuous</a> - A Python data validation library.</li>
</ul>
<h2 id="data-visualization">Data Visualization</h2>
<p><em>Libraries for visualizing data. Also see <a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>.</em></p>
<ul>
<li><a href="https://github.com/altair-viz/altair">Altair</a> - Declarative statistical visualization library for Python.</li>
<li><a href="https://github.com/bokeh/bokeh">Bokeh</a> - Interactive Web Plotting for Python.</li>
<li><a href="https://github.com/bloomberg/bqplot">bqplot</a> - Interactive Plotting Library for the Jupyter Notebook.</li>
<li><a href="https://github.com/SciTools/cartopy">Cartopy</a> - A cartographic python library with matplotlib support.</li>
<li><a href="https://plot.ly/products/dash/">Dash</a> - Built on top of Flask, React and Plotly aimed at analytical web applications.
<ul>
<li><a href="https://github.com/Acrotrend/awesome-dash">awesome-dash</a></li>
</ul>
</li>
<li><a href="https://github.com/mingrammer/diagrams">diagrams</a> - Diagram as Code.</li>
<li><a href="https://matplotlib.org/">Matplotlib</a> - A Python 2D plotting library.</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a> - A grammar of graphics for Python based on ggplot2.</li>
<li><a href="https://www.pygal.org/en/latest/">Pygal</a> - A Python SVG Charts Creator.</li>
<li><a href="https://pypi.org/project/pygraphviz/">PyGraphviz</a> - Python interface to <a href="https://www.graphviz.org/">Graphviz</a>.</li>
<li><a href="https://www.pyqtgraph.org/">PyQtGraph</a> - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li>
<li><a href="https://github.com/mwaskom/seaborn">Seaborn</a> - Statistical data visualization using Matplotlib.</li>
<li><a href="https://github.com/vispy/vispy">VisPy</a> - High-performance scientific visualization based on OpenGL.</li>
</ul>
<h2 id="database">Database</h2>
<p><em>Databases implemented in Python.</em></p>
<ul>
<li><a href="https://github.com/patx/pickledb">pickleDB</a> - A simple and lightweight key-value store for Python.</li>
<li><a href="https://github.com/msiemens/tinydb">tinydb</a> - A tiny, document-oriented database.</li>
<li><a href="https://github.com/zopefoundation/ZODB">ZODB</a> - A native object database for Python. A key-value and object graph database.</li>
</ul>
<h2 id="database-drivers">Database Drivers</h2>
<p><em>Libraries for connecting and operating databases.</em></p>
<ul>
<li>MySQL - <a href="https://shlomi-noach.github.io/awesome-mysql/">awesome-mysql</a>
<ul>
<li><a href="https://github.com/PyMySQL/mysqlclient-python">mysqlclient</a> - MySQL connector with Python 3 support (<a href="https://sourceforge.net/projects/mysql-python/">mysql-python</a> fork).</li>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> - A pure Python MySQL driver compatible to mysql-python.</li>
</ul>
</li>
<li>PostgreSQL - <a href="https://github.com/dhamaniasad/awesome-postgres">awesome-postgres</a>
<ul>
<li><a href="https://initd.org/psycopg/">psycopg2</a> - The most popular PostgreSQL adapter for Python.</li>
<li><a href="https://github.com/gmr/queries">queries</a> - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li>
</ul>
</li>
<li>SQlite - <a href="https://github.com/planetopendata/awesome-sqlite">awesome-sqlite</a>
<ul>
<li><a href="https://docs.python.org/3/library/sqlite3.html">sqlite3</a> - (Python standard library) SQlite interface compliant with DB-API 2.0</li>
<li><a href="https://github.com/plasticityai/supersqlite">SuperSQLite</a> - A supercharged SQLite library built on top of <a href="https://github.com/rogerbinns/apsw">apsw</a>.</li>
</ul>
</li>
<li>Other Relational Databases
<ul>
<li><a href="https://pymssql.readthedocs.io/en/latest/">pymssql</a> - A simple database interface to Microsoft SQL Server.</li>
<li><a href="https://github.com/mymarilyn/clickhouse-driver">clickhouse-driver</a> - Python driver with native interface for ClickHouse.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/datastax/python-driver">cassandra-driver</a> - The Python Driver for Apache Cassandra.</li>
<li><a href="https://github.com/wbolster/happybase">happybase</a> - A developer-friendly library for Apache HBase.</li>
<li><a href="https://github.com/dpkp/kafka-python">kafka-python</a> - The Python client for Apache Kafka.</li>
<li><a href="https://py2neo.org/">py2neo</a> - A client library and toolkit for working with Neo4j.</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> - The official Python client for MongoDB.</li>
<li><a href="https://github.com/andymccurdy/redis-py">redis-py</a> - The Python client for Redis.</li>
</ul>
</li>
<li>Asynchronous Clients
<ul>
<li><a href="https://github.com/mongodb/motor">motor</a> - The async Python driver for MongoDB.</li>
</ul>
</li>
</ul>
<h2 id="date-and-time">Date and Time</h2>
<p><em>Libraries for working with dates and times.</em></p>
<ul>
<li><a href="https://arrow.readthedocs.io/en/latest/">Arrow</a> - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li>
<li><a href="https://github.com/KoffeinFlummi/Chronyk">Chronyk</a> - A Python 3 library for parsing human-written times and dates.</li>
<li><a href="https://github.com/dateutil/dateutil">dateutil</a> - Extensions to the standard Python <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module.</li>
<li><a href="https://github.com/myusuf3/delorean/">delorean</a> - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li>
<li><a href="https://github.com/timofurrer/maya">maya</a> - Datetimes for Humans.</li>
<li><a href="https://github.com/zachwill/moment">moment</a> - A Python library for dealing with dates/times. Inspired by <a href="https://momentjs.com/">Moment.js</a>.</li>
<li><a href="https://github.com/sdispater/pendulum">Pendulum</a> - Python datetimes made easy.</li>
<li><a href="https://github.com/shinux/PyTime">PyTime</a> - An easy-to-use Python module which aims to operate date/time/datetime by string.</li>
<li><a href="https://launchpad.net/pytz">pytz</a> - World timezone definitions, modern and historical. Brings the <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a> into Python.</li>
<li><a href="https://github.com/dirn/When.py">when.py</a> - Providing user-friendly functions to help perform common date and time actions.</li>
</ul>
<h2 id="debugging-tools">Debugging Tools</h2>
<p><em>Libraries for debugging code.</em></p>
<ul>
<li>pdb-like Debugger
<ul>
<li><a href="https://github.com/gotcha/ipdb">ipdb</a> - IPython-enabled <a href="https://docs.python.org/3/library/pdb.html">pdb</a>.</li>
<li><a href="https://github.com/antocuni/pdb">pdb++</a> - Another drop-in replacement for pdb.</li>
<li><a href="https://github.com/inducer/pudb">pudb</a> - A full-screen, console-based Python debugger.</li>
<li><a href="https://github.com/Kozea/wdb">wdb</a> - An improbable web debugger through WebSockets.</li>
</ul>
</li>
<li>Tracing
<ul>
<li><a href="https://github.com/khamidou/lptrace">lptrace</a> - <a href="https://man7.org/linux/man-pages/man1/strace.1.html">strace</a> for Python programs.</li>
<li><a href="https://github.com/ionelmc/python-manhole">manhole</a> - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li>
<li><a href="https://github.com/google/pyringe">pyringe</a> - Debugger capable of attaching to and injecting code into Python processes.</li>
<li><a href="https://github.com/ionelmc/python-hunter">python-hunter</a> - A flexible code tracing toolkit.</li>
</ul>
</li>
<li>Profiler
<ul>
<li><a href="https://github.com/rkern/line_profiler">line_profiler</a> - Line-by-line profiling.</li>
<li><a href="https://github.com/fabianp/memory_profiler">memory_profiler</a> - Monitor Memory usage of Python code.</li>
<li><a href="https://github.com/benfred/py-spy">py-spy</a> - A sampling profiler for Python programs. Written in Rust.</li>
<li><a href="https://github.com/uber/pyflame">pyflame</a> - A ptracing profiler For Python.</li>
<li><a href="https://github.com/nvdv/vprof">vprof</a> - Visual Python profiler.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/jazzband/django-debug-toolbar">django-debug-toolbar</a> - Display various debug information for Django.</li>
<li><a href="https://github.com/dcramer/django-devserver">django-devserver</a> - A drop-in replacement for Django&rsquo;s runserver.</li>
<li><a href="https://github.com/mgood/flask-debugtoolbar">flask-debugtoolbar</a> - A port of the django-debug-toolbar to flask.</li>
<li><a href="https://github.com/gruns/icecream">icecream</a> - Inspect variables, expressions, and program execution with a single, simple function call.</li>
<li><a href="https://github.com/eliben/pyelftools">pyelftools</a> - Parsing and analyzing ELF files and DWARF debugging information.</li>
</ul>
</li>
</ul>
<h2 id="deep-learning">Deep Learning</h2>
<p><em>Frameworks for Neural Networks and Deep Learning. Also see <a href="https://github.com/ChristosChristofidis/awesome-deep-learning">awesome-deep-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/BVLC/caffe">caffe</a> - A fast open framework for deep learning..</li>
<li><a href="https://github.com/keras-team/keras">keras</a> - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li>
<li><a href="https://github.com/dmlc/mxnet">mxnet</a> - A deep learning framework designed for both efficiency and flexibility.</li>
<li><a href="https://github.com/pytorch/pytorch">pytorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li>
<li><a href="https://github.com/SerpentAI/SerpentAI">SerpentAI</a> - Game agent framework. Use any video game as a deep learning sandbox.</li>
<li><a href="https://github.com/tensorflow/tensorflow">tensorflow</a> - The most popular Deep Learning framework created by Google.</li>
<li><a href="https://github.com/Theano/Theano">Theano</a> - A library for fast numerical computation.</li>
</ul>
<h2 id="devops-tools">DevOps Tools</h2>
<p><em>Software and libraries for DevOps.</em></p>
<ul>
<li>Configuration Management
<ul>
<li><a href="https://github.com/ansible/ansible">ansible</a> - A radically simple IT automation platform.</li>
<li><a href="https://cloudinit.readthedocs.io/en/latest/">cloudinit</a> - A multi-distribution package that handles early initialization of a cloud instance.</li>
<li><a href="https://www.openstack.org/">OpenStack</a> - Open source software for building private and public clouds.</li>
<li><a href="https://github.com/Fizzadar/pyinfra">pyinfra</a> - A versatile CLI tools and python libraries to automate infrastructure.</li>
<li><a href="https://github.com/saltstack/salt">saltstack</a> - Infrastructure automation and management system.</li>
</ul>
</li>
<li>SSH-style Deployment
<ul>
<li><a href="https://github.com/sebastien/cuisine">cuisine</a> - Chef-like functionality for Fabric.</li>
<li><a href="https://github.com/fabric/fabric">fabric</a> - A simple, Pythonic tool for remote execution and deployment.</li>
<li><a href="https://github.com/fabtools/fabtools">fabtools</a> - Tools for writing awesome Fabric files.</li>
</ul>
</li>
<li>Process Management
<ul>
<li><a href="https://github.com/nickstenning/honcho">honcho</a> - A Python clone of <a href="https://github.com/ddollar/foreman">Foreman</a>, for managing Procfile-based applications.</li>
<li><a href="https://github.com/Supervisor/supervisor">supervisor</a> - Supervisor process control system for UNIX.</li>
</ul>
</li>
<li>Monitoring
<ul>
<li><a href="https://github.com/giampaolo/psutil">psutil</a> - A cross-platform process and system utilities module.</li>
</ul>
</li>
<li>Backup
<ul>
<li><a href="https://www.borgbackup.org/">BorgBackup</a> - A deduplicating archiver with compression and encryption.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://docs.docker.com/compose/">docker-compose</a> - Fast, isolated development environments using <a href="https://www.docker.com/">Docker</a>.</li>
</ul>
</li>
</ul>
<h2 id="distributed-computing">Distributed Computing</h2>
<p><em>Frameworks and libraries for Distributed Computing.</em></p>
<ul>
<li>Batch Processing
<ul>
<li><a href="https://github.com/dask/dask">dask</a> - A flexible parallel computing library for analytic computing.</li>
<li><a href="https://github.com/spotify/luigi">luigi</a> - A module that helps you build complex pipelines of batch jobs.</li>
<li><a href="https://github.com/Yelp/mrjob">mrjob</a> - Run MapReduce jobs on Hadoop or Amazon Web Services.</li>
<li><a href="https://pypi.org/project/pyspark/">PySpark</a> - <a href="https://spark.apache.org/">Apache Spark</a> Python API.</li>
<li><a href="https://github.com/ray-project/ray/">Ray</a> - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li>
</ul>
</li>
<li>Stream Processing
<ul>
<li><a href="https://github.com/robinhood/faust">faust</a> - A stream processing library, porting the ideas from <a href="https://kafka.apache.org/documentation/streams/">Kafka Streams</a> to Python.</li>
<li><a href="https://github.com/Parsely/streamparse">streamparse</a> - Run Python code against real-time streams of data via <a href="https://storm.apache.org/">Apache Storm</a>.</li>
</ul>
</li>
</ul>
<h2 id="distribution">Distribution</h2>
<p><em>Libraries to create packaged executables for release distribution.</em></p>
<ul>
<li><a href="https://github.com/spotify/dh-virtualenv">dh-virtualenv</a> - Build and distribute a virtualenv as a Debian package.</li>
<li><a href="https://nuitka.net/">Nuitka</a> - Compile scripts, modules, packages to an executable or extension module.</li>
<li><a href="https://pythonhosted.org/py2app/">py2app</a> - Freezes Python scripts (Mac OS X).</li>
<li><a href="https://www.py2exe.org/">py2exe</a> - Freezes Python scripts (Windows).</li>
<li><a href="https://github.com/dashingsoft/pyarmor">pyarmor</a> - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li>
<li><a href="https://github.com/pyinstaller/pyinstaller">PyInstaller</a> - Converts Python programs into stand-alone executables (cross-platform).</li>
<li><a href="https://pynsist.readthedocs.io/en/latest/">pynsist</a> - A tool to build Windows installers, installers bundle Python itself.</li>
<li><a href="https://github.com/linkedin/shiv">shiv</a> - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li>
</ul>
<h2 id="documentation">Documentation</h2>
<p><em>Libraries for generating project documentation.</em></p>
<ul>
<li><a href="https://github.com/sphinx-doc/sphinx/">sphinx</a> - Python Documentation generator.
<ul>
<li><a href="https://github.com/yoloseem/awesome-sphinxdoc">awesome-sphinxdoc</a></li>
</ul>
</li>
<li><a href="https://github.com/mitmproxy/pdoc">pdoc</a> - Epydoc replacement to auto generate API documentation for Python libraries.</li>
<li><a href="https://github.com/pycco-docs/pycco">pycco</a> - The literate-programming-style documentation generator.</li>
</ul>
<h2 id="downloader">Downloader</h2>
<p><em>Libraries for downloading.</em></p>
<ul>
<li><a href="https://github.com/jindaxiang/akshare">akshare</a> - A financial data interface library, built for human beings!</li>
<li><a href="https://github.com/s3tools/s3cmd">s3cmd</a> - A command line tool for managing Amazon S3 and CloudFront.</li>
<li><a href="https://github.com/bloomreach/s4cmd">s4cmd</a> - Super S3 command line tool, good for higher performance.</li>
<li><a href="https://you-get.org/">you-get</a> - A YouTube/Youku/Niconico video downloader written in Python 3.</li>
<li><a href="https://rg3.github.io/youtube-dl/">youtube-dl</a> - A small command-line program to download videos from YouTube.</li>
</ul>
<h2 id="e-commerce">E-commerce</h2>
<p><em>Frameworks and libraries for e-commerce and payments.</em></p>
<ul>
<li><a href="https://github.com/lxneng/alipay">alipay</a> - Unofficial Alipay API for Python.</li>
<li><a href="https://github.com/stephenmcd/cartridge">Cartridge</a> - A shopping cart app built using the Mezzanine.</li>
<li><a href="https://oscarcommerce.com/">django-oscar</a> - An open-source e-commerce framework for Django.</li>
<li><a href="https://github.com/awesto/django-shop">django-shop</a> - A Django based shop system.</li>
<li><a href="https://github.com/MicroPyramid/forex-python">forex-python</a> - Foreign exchange rates, Bitcoin price index and currency conversion.</li>
<li><a href="https://github.com/agiliq/merchant">merchant</a> - A Django app to accept payments from various payment processors.</li>
<li><a href="https://github.com/carlospalol/money">money</a> - <code>Money</code> class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.</li>
<li><a href="https://github.com/Alir3z4/python-currencies">python-currencies</a> - Display money format and its filthy currencies.</li>
<li><a href="https://getsaleor.com/">saleor</a> - An e-commerce storefront for Django.</li>
<li><a href="https://www.shuup.com/en/">shoop</a> - An open source E-Commerce platform based on Django.</li>
</ul>
<h2 id="editor-plugins-and-ides">Editor Plugins and IDEs</h2>
<ul>
<li>Emacs
<ul>
<li><a href="https://github.com/jorgenschaefer/elpy">elpy</a> - Emacs Python Development Environment.</li>
</ul>
</li>
<li>Sublime Text
<ul>
<li><a href="https://github.com/DamnWidget/anaconda">anaconda</a> - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li>
<li><a href="https://github.com/srusskih/SublimeJEDI">SublimeJEDI</a> - A Sublime Text plugin to the awesome auto-complete library Jedi.</li>
</ul>
</li>
<li>Vim
<ul>
<li><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a> - Vim bindings for the Jedi auto-completion library for Python.</li>
<li><a href="https://github.com/python-mode/python-mode">python-mode</a> - An all in one plugin for turning Vim into a Python IDE.</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> - Includes <a href="https://github.com/davidhalter/jedi">Jedi</a>-based completion engine for Python.</li>
</ul>
</li>
<li>Visual Studio
<ul>
<li><a href="https://github.com/Microsoft/PTVS">PTVS</a> - Python Tools for Visual Studio.</li>
</ul>
</li>
<li>Visual Studio Code
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a> - The official VSCode extension with rich support for Python.</li>
</ul>
</li>
<li>IDE
<ul>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a> - Commercial Python IDE by JetBrains. Has free community edition available.</li>
<li><a href="https://github.com/spyder-ide/spyder">spyder</a> - Open Source Python IDE.</li>
</ul>
</li>
</ul>
<h2 id="email">Email</h2>
<p><em>Libraries for sending and parsing email.</em></p>
<ul>
<li>Mail Servers
<ul>
<li><a href="https://github.com/modoboa/modoboa">modoboa</a> - A mail hosting and management platform including a modern Web UI.</li>
<li><a href="https://github.com/moggers87/salmon">salmon</a> - A Python Mail Server.</li>
</ul>
</li>
<li>Clients
<ul>
<li><a href="https://github.com/martinrusev/imbox">imbox</a> - Python IMAP for Humans.</li>
<li><a href="https://github.com/kootenpv/yagmail">yagmail</a> - Yet another Gmail/SMTP client.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/mailgun/flanker">flanker</a> - An email address and Mime parsing library.</li>
<li><a href="https://github.com/marrow/mailer">mailer</a> - High-performance extensible mail delivery framework.</li>
</ul>
</li>
</ul>
<h2 id="enterprise-application-integrations">Enterprise Application Integrations</h2>
<p><em>Platforms and tools for systems integrations in enterprise environments</em></p>
<ul>
<li><a href="https://zato.io">Zato</a> - ESB, SOA, REST, APIs and Cloud Integrations in Python.</li>
</ul>
<h2 id="environment-management">Environment Management</h2>
<p><em>Libraries for Python version and virtual environment management.</em></p>
<ul>
<li><a href="https://github.com/pyenv/pyenv">pyenv</a> - Simple Python version management.</li>
<li><a href="https://github.com/pypa/virtualenv">virtualenv</a> - A tool to create isolated Python environments.</li>
</ul>
<h2 id="files">Files</h2>
<p><em>Libraries for file manipulation and MIME type detection.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/mimetypes.html">mimetypes</a> - (Python standard library) Map filenames to MIME types.</li>
<li><a href="https://github.com/jaraco/path.py">path.py</a> - A module wrapper for <a href="https://docs.python.org/3/library/os.path.html">os.path</a>.</li>
<li><a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> - (Python standard library) An cross-platform, object-oriented path library.</li>
<li><a href="https://github.com/pyfilesystem/pyfilesystem2">PyFilesystem2</a> - Python&rsquo;s filesystem abstraction layer.</li>
<li><a href="https://github.com/ahupp/python-magic">python-magic</a> - A Python interface to the libmagic file type identification library.</li>
<li><a href="https://github.com/mikeorr/Unipath">Unipath</a> - An object-oriented approach to file/directory operations.</li>
<li><a href="https://github.com/gorakhargosh/watchdog">watchdog</a> - API and shell utilities to monitor file system events.</li>
</ul>
<h2 id="foreign-function-interface">Foreign Function Interface</h2>
<p><em>Libraries for providing foreign function interface.</em></p>
<ul>
<li><a href="https://pypi.org/project/cffi/">cffi</a> - Foreign Function Interface for Python calling C code.</li>
<li><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a> - (Python standard library) Foreign Function Interface for Python calling C code.</li>
<li><a href="https://mathema.tician.de/software/pycuda/">PyCUDA</a> - A Python wrapper for Nvidia&rsquo;s CUDA API.</li>
<li><a href="https://www.swig.org/Doc1.3/Python.html">SWIG</a> - Simplified Wrapper and Interface Generator.</li>
</ul>
<h2 id="forms">Forms</h2>
<p><em>Libraries for working with forms.</em></p>
<ul>
<li><a href="https://github.com/Pylons/deform">Deform</a> - Python HTML form generation library influenced by the formish form generation library.</li>
<li><a href="https://github.com/dyve/django-bootstrap3">django-bootstrap3</a> - Bootstrap 3 integration with Django.</li>
<li><a href="https://github.com/zostera/django-bootstrap4">django-bootstrap4</a> - Bootstrap 4 integration with Django.</li>
<li><a href="https://github.com/django-crispy-forms/django-crispy-forms">django-crispy-forms</a> - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li>
<li><a href="https://github.com/WiserTogether/django-remote-forms">django-remote-forms</a> - A platform independent Django form serializer.</li>
<li><a href="https://github.com/wtforms/wtforms">WTForms</a> - A flexible forms validation and rendering library.</li>
</ul>
<h2 id="functional-programming">Functional Programming</h2>
<p><em>Functional Programming with Python.</em></p>
<ul>
<li><a href="https://github.com/evhub/coconut">Coconut</a> - A variant of Python built for simple, elegant, Pythonic functional programming.</li>
<li><a href="https://github.com/pytoolz/cytoolz/">CyToolz</a> - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li>
<li><a href="https://github.com/kachayev/fn.py">fn.py</a> - Functional programming in Python: implementation of missing features to enjoy FP.</li>
<li><a href="https://github.com/Suor/funcy">funcy</a> - A fancy and practical functional tools.</li>
<li><a href="https://github.com/erikrose/more-itertools">more-itertools</a> - More routines for operating on iterables, beyond <code>itertools</code>.</li>
<li><a href="https://github.com/dry-python/returns">returns</a> - A set of type-safe monads, transformers, and composition utilities.</li>
<li><a href="https://github.com/pytoolz/toolz">Toolz</a> - A collection of functional utilities for iterators, functions, and dictionaries.</li>
</ul>
<h2 id="gui-development">GUI Development</h2>
<p><em>Libraries for working with graphical user interface applications.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/curses.html">curses</a> - Built-in wrapper for <a href="https://www.gnu.org/software/ncurses/">ncurses</a> used to create terminal GUI applications.</li>
<li><a href="https://github.com/ChrisKnott/Eel">Eel</a> - A library for making simple Electron-like offline HTML/JS GUI apps.</li>
<li><a href="https://github.com/nucleic/enaml">enaml</a> - Creating beautiful user-interfaces with Declarative Syntax like QML.</li>
<li><a href="https://github.com/zoofIO/flexx">Flexx</a> - Flexx is a pure Python toolkit for creating GUI&rsquo;s, that uses web technology for its rendering.</li>
<li><a href="https://github.com/chriskiehl/Gooey">Gooey</a> - Turn command line programs into a full GUI application with one line.</li>
<li><a href="https://kivy.org/">kivy</a> - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li>
<li><a href="https://github.com/pyglet/pyglet">pyglet</a> - A cross-platform windowing and multimedia library for Python.</li>
<li><a href="https://wiki.gnome.org/Projects/PyGObject">PyGObject</a> - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li>
<li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a> - Python bindings for the <a href="https://www.qt.io/">Qt</a> cross-platform application and UI framework.</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> - Wrapper for tkinter, Qt, WxPython and Remi.</li>
<li><a href="https://github.com/r0x0r/pywebview/">pywebview</a> - A lightweight cross-platform native wrapper around a webview component.</li>
<li><a href="https://wiki.python.org/moin/TkInter">Tkinter</a> - Tkinter is Python&rsquo;s de-facto standard GUI package.</li>
<li><a href="https://github.com/pybee/toga">Toga</a> - A Python native, OS native GUI toolkit.</li>
<li><a href="https://urwid.org/">urwid</a> - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li>
<li><a href="https://wxpython.org/">wxPython</a> - A blending of the wxWidgets C++ class library with the Python.</li>
<li><a href="https://github.com/RaylockLLC/DearPyGui/">DearPyGui</a> - A Simple GPU accelerated Python GUI framework</li>
</ul>
<h2 id="graphql">GraphQL</h2>
<p><em>Libraries for working with GraphQL.</em></p>
<ul>
<li><a href="https://github.com/graphql-python/graphene/">graphene</a> - GraphQL framework for Python.</li>
<li><a href="https://github.com/tartiflette/tartiflette-aiohttp/">tartiflette-aiohttp</a> - An <code>aiohttp</code>-based wrapper for Tartiflette to expose GraphQL APIs over HTTP.</li>
<li><a href="https://github.com/tartiflette/tartiflette-asgi/">tartiflette-asgi</a> - ASGI support for the Tartiflette GraphQL engine.</li>
<li><a href="https://tartiflette.io">tartiflette</a> - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio.</li>
</ul>
<h2 id="game-development">Game Development</h2>
<p><em>Awesome game development libraries.</em></p>
<ul>
<li><a href="https://api.arcade.academy/en/latest/">Arcade</a> - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li>
<li><a href="https://cocos2d.org/">Cocos2d</a> - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li>
<li><a href="https://www.harfang3d.com">Harfang3D</a> - Python framework for 3D, VR and game development.</li>
<li><a href="https://www.panda3d.org/">Panda3D</a> - 3D game engine developed by Disney.</li>
<li><a href="https://www.pygame.org/news.html">Pygame</a> - Pygame is a set of Python modules designed for writing games.</li>
<li><a href="https://www.ogre3d.org/tikiwiki/PyOgre">PyOgre</a> - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li>
<li><a href="https://pyopengl.sourceforge.net/">PyOpenGL</a> - Python ctypes bindings for OpenGL and it&rsquo;s related APIs.</li>
<li><a href="https://pysdl2.readthedocs.io">PySDL2</a> - A ctypes based wrapper for the SDL2 library.</li>
<li><a href="https://www.renpy.org/">RenPy</a> - A Visual Novel engine.</li>
</ul>
<h2 id="geolocation">Geolocation</h2>
<p><em>Libraries for geocoding addresses and working with latitudes and longitudes.</em></p>
<ul>
<li><a href="https://github.com/SmileyChris/django-countries">django-countries</a> - A Django app that provides a country field for models and forms.</li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">GeoDjango</a> - A world-class geographic web framework.</li>
<li><a href="https://github.com/maxmind/geoip-api-python">GeoIP</a> - Python API for MaxMind GeoIP Legacy Database.</li>
<li><a href="https://github.com/frewsxcv/python-geojson">geojson</a> - Python bindings and utilities for GeoJSON.</li>
<li><a href="https://github.com/geopy/geopy">geopy</a> - Python Geocoding Toolbox.</li>
</ul>
<h2 id="html-manipulation">HTML Manipulation</h2>
<p><em>Libraries for working with HTML and XML.</em></p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li>
<li><a href="https://github.com/mozilla/bleach">bleach</a> - A whitelist-based HTML sanitization and text linkification library.</li>
<li><a href="https://pypi.org/project/cssutils/">cssutils</a> - A CSS library for Python.</li>
<li><a href="https://github.com/html5lib/html5lib-python">html5lib</a> - A standards-compliant library for parsing and serializing HTML documents and fragments.</li>
<li><a href="https://lxml.de/">lxml</a> - A very fast, easy-to-use and versatile library for handling HTML and XML.</li>
<li><a href="https://github.com/pallets/markupsafe">MarkupSafe</a> - Implements a XML/HTML/XHTML Markup safe string for Python.</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a> - A jQuery-like library for parsing HTML.</li>
<li><a href="https://github.com/stchris/untangle">untangle</a> - Converts XML documents to Python objects for easy access.</li>
<li><a href="https://weasyprint.org">WeasyPrint</a> - A visual rendering engine for HTML and CSS that can export to PDF.</li>
<li><a href="https://xmldataset.readthedocs.io/en/latest/">xmldataset</a> - Simple XML Parsing.</li>
<li><a href="https://github.com/martinblech/xmltodict">xmltodict</a> - Working with XML feel like you are working with JSON.</li>
</ul>
<h2 id="http-clients">HTTP Clients</h2>
<p><em>Libraries for working with HTTP.</em></p>
<ul>
<li><a href="https://github.com/spyoungtech/grequests">grequests</a> - requests + gevent for asynchronous HTTP requests.</li>
<li><a href="https://github.com/httplib2/httplib2">httplib2</a> - Comprehensive HTTP client library.</li>
<li><a href="https://github.com/encode/httpx">httpx</a> - A next generation HTTP client for Python.</li>
<li><a href="https://github.com/psf/requests">requests</a> - HTTP Requests for Humans.</li>
<li><a href="https://github.com/twisted/treq">treq</a> - Python requests like API built on top of Twisted&rsquo;s HTTP client.</li>
<li><a href="https://github.com/shazow/urllib3">urllib3</a> - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li>
</ul>
<h2 id="hardware">Hardware</h2>
<p><em>Libraries for programming with hardware.</em></p>
<ul>
<li><a href="https://inotool.org/">ino</a> - Command line toolkit for working with <a href="https://www.arduino.cc/">Arduino</a>.</li>
<li><a href="https://github.com/boppreh/keyboard">keyboard</a> - Hook and simulate global keyboard events on Windows and Linux.</li>
<li><a href="https://github.com/boppreh/mouse">mouse</a> - Hook and simulate global mouse events on Windows and Linux.</li>
<li><a href="https://www.pingo.io/">Pingo</a> - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li>
<li><a href="https://github.com/SavinaRoja/PyUserInput">PyUserInput</a> - A module for cross-platform control of the mouse and keyboard.</li>
<li><a href="https://github.com/secdev/scapy">scapy</a> - A brilliant packet manipulation library.</li>
</ul>
<h2 id="image-processing">Image Processing</h2>
<p><em>Libraries for manipulating images.</em></p>
<ul>
<li><a href="https://github.com/rossgoodwin/hmap">hmap</a> - Image histogram remapping.</li>
<li><a href="https://sourceforge.net/projects/imgseek/">imgSeek</a> - A project for searching a collection of images using visual similarity.</li>
<li><a href="https://github.com/hhatto/nude.py">nude.py</a> - Nudity detection.</li>
<li><a href="https://github.com/daboth/pagan">pagan</a> - Retro identicon (Avatar) generation based on input string and hash.</li>
<li><a href="https://github.com/python-pillow/Pillow">pillow</a> - Pillow is the friendly <a href="https://www.pythonware.com/products/pil/">PIL</a> fork.</li>
<li><a href="https://github.com/WhyNotHugo/python-barcode">python-barcode</a> - Create barcodes in Python with no extra dependencies.</li>
<li><a href="https://github.com/ajkumar25/pygram">pygram</a> - Instagram-like image filters.</li>
<li><a href="https://github.com/pymatting/pymatting">PyMatting</a> - A library for alpha matting.</li>
<li><a href="https://github.com/lincolnloop/python-qrcode">python-qrcode</a> - A pure Python QR Code generator.</li>
<li><a href="https://github.com/dylanaraps/pywal">pywal</a> - A tool that generates color schemes from images.</li>
<li><a href="https://github.com/libvips/pyvips">pyvips</a> - A fast image processing library with low memory needs.</li>
<li><a href="https://github.com/fogleman/Quads">Quads</a> - Computer art based on quadtrees.</li>
<li><a href="https://scikit-image.org/">scikit-image</a> - A Python library for (scientific) image processing.</li>
<li><a href="https://github.com/thumbor/thumbor">thumbor</a> - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li>
<li><a href="https://github.com/dahlia/wand">wand</a> - Python bindings for <a href="https://www.imagemagick.org/script/magick-wand.php">MagickWand</a>, C API for ImageMagick.</li>
</ul>
<h2 id="implementations">Implementations</h2>
<p><em>Implementations of Python.</em></p>
<ul>
<li><a href="https://github.com/metawilm/cl-python">CLPython</a> - Implementation of the Python programming language written in Common Lisp.</li>
<li><a href="https://github.com/python/cpython">CPython</a> - <strong>Default, most widely used implementation of the Python programming language written in C.</strong></li>
<li><a href="https://cython.org/">Cython</a> - Optimizing Static Compiler for Python.</li>
<li><a href="https://github.com/google/grumpy">Grumpy</a> - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li>
<li><a href="https://github.com/IronLanguages/ironpython3">IronPython</a> - Implementation of the Python programming language written in C#.</li>
<li><a href="https://hg.python.org/jython">Jython</a> - Implementation of Python programming language written in Java for the JVM.</li>
<li><a href="https://github.com/micropython/micropython">MicroPython</a> - A lean and efficient Python programming language implementation.</li>
<li><a href="https://numba.pydata.org/">Numba</a> - Python JIT compiler to LLVM aimed at scientific Python.</li>
<li><a href="https://github.com/Maratyszcza/PeachPy">PeachPy</a> - x86-64 assembler embedded in Python.</li>
<li><a href="https://github.com/Microsoft/Pyjion">Pyjion</a> - A JIT for Python based upon CoreCLR.</li>
<li><a href="https://foss.heptapod.net/pypy/pypy">PyPy</a> - A very fast and compliant implementation of the Python language.</li>
<li><a href="https://github.com/dropbox/pyston">Pyston</a> - A Python implementation using JIT techniques.</li>
<li><a href="https://github.com/stackless-dev/stackless">Stackless Python</a> - An enhanced version of the Python programming language.</li>
</ul>
<h2 id="interactive-interpreter">Interactive Interpreter</h2>
<p><em>Interactive Python interpreters (REPL).</em></p>
<ul>
<li><a href="https://github.com/bpython/bpython">bpython</a> - A fancy interface to the Python interpreter.</li>
<li><a href="https://jupyter.org">Jupyter Notebook (IPython)</a> - A rich toolkit to help you make the most out of using Python interactively.
<ul>
<li><a href="https://github.com/markusschanta/awesome-jupyter">awesome-jupyter</a></li>
</ul>
</li>
<li><a href="https://github.com/jonathanslenders/ptpython">ptpython</a> - Advanced Python REPL built on top of the <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>.</li>
</ul>
<h2 id="internationalization">Internationalization</h2>
<p><em>Libraries for working with i18n.</em></p>
<ul>
<li><a href="https://babel.pocoo.org/en/latest/">Babel</a> - An internationalization library for Python.</li>
<li><a href="https://github.com/ovalhub/pyicu">PyICU</a> - A wrapper of International Components for Unicode C++ library (<a href="https://site.icu-project.org/">ICU</a>).</li>
</ul>
<h2 id="job-scheduler">Job Scheduler</h2>
<p><em>Libraries for scheduling jobs.</em></p>
<ul>
<li><a href="https://airflow.apache.org/">Airflow</a> - Airflow is a platform to programmatically author, schedule and monitor workflows.</li>
<li><a href="https://apscheduler.readthedocs.io/en/latest/">APScheduler</a> - A light but powerful in-process task scheduler that lets you schedule functions.</li>
<li><a href="https://github.com/thauber/django-schedule">django-schedule</a> - A calendaring app for Django.</li>
<li><a href="https://pydoit.org/">doit</a> - A task runner and build tool.</li>
<li><a href="https://github.com/gunnery/gunnery">gunnery</a> - Multipurpose task execution tool for distributed systems with web-based interface.</li>
<li><a href="https://joblib.readthedocs.io/">Joblib</a> - A set of tools to provide lightweight pipelining in Python.</li>
<li><a href="https://github.com/fengsp/plan">Plan</a> - Writing crontab file in Python like a charm.</li>
<li><a href="https://github.com/PrefectHQ/prefect">Prefect</a> - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li>
<li><a href="https://github.com/dbader/schedule">schedule</a> - Python job scheduling for humans.</li>
<li><a href="https://github.com/knipknap/SpiffWorkflow">Spiff</a> - A powerful workflow engine implemented in pure Python.</li>
<li><a href="https://docs.openstack.org/developer/taskflow/">TaskFlow</a> - A Python library that helps to make task execution easy, consistent and reliable.</li>
</ul>
<h2 id="logging">Logging</h2>
<p><em>Libraries for generating and working with logs.</em></p>
<ul>
<li><a href="https://logbook.readthedocs.io/en/stable/">logbook</a> - Logging replacement for Python.</li>
<li><a href="https://docs.python.org/3/library/logging.html">logging</a> - (Python standard library) Logging facility for Python.</li>
<li><a href="https://github.com/Delgan/loguru">loguru</a> - Library which aims to bring enjoyable logging in Python.</li>
<li><a href="https://github.com/getsentry/sentry-python">sentry-python</a> - Sentry SDK for Python.</li>
<li><a href="https://www.structlog.org/en/stable/">structlog</a> - Structured logging made easy.</li>
</ul>
<h2 id="machine-learning">Machine Learning</h2>
<p><em>Libraries for Machine Learning. Also see <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/openai/gym">gym</a> - A toolkit for developing and comparing reinforcement learning algorithms.</li>
<li><a href="https://github.com/h2oai/h2o-3">H2O</a> - Open Source Fast Scalable Machine Learning Platform.</li>
<li><a href="https://github.com/benhamner/Metrics">Metrics</a> - Machine learning evaluation metrics.</li>
<li><a href="https://github.com/numenta/nupic">NuPIC</a> - Numenta Platform for Intelligent Computing.</li>
<li><a href="https://scikit-learn.org/">scikit-learn</a> - The most popular Python library for Machine Learning.</li>
<li><a href="https://spark.apache.org/docs/latest/ml-guide.html">Spark ML</a> - <a href="https://spark.apache.org/">Apache Spark</a>&rsquo;s scalable Machine Learning library.</li>
<li><a href="https://github.com/josephreisinger/vowpal_porpoise">vowpal_porpoise</a> - A lightweight Python wrapper for <a href="https://github.com/JohnLangford/vowpal_wabbit/">Vowpal Wabbit</a>.</li>
<li><a href="https://github.com/dmlc/xgboost">xgboost</a> - A scalable, portable, and distributed gradient boosting library.</li>
<li><a href="https://github.com/mindsdb/mindsdb">MindsDB</a> - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li>
</ul>
<h2 id="microsoft-windows">Microsoft Windows</h2>
<p><em>Python programming on Microsoft Windows.</em></p>
<ul>
<li><a href="https://python-xy.github.io/">Python(x,y)</a> - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li>
<li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a> - Unofficial Windows binaries for Python extension packages.</li>
<li><a href="https://github.com/pythonnet/pythonnet">PythonNet</a> - Python Integration with the .NET Common Language Runtime (CLR).</li>
<li><a href="https://github.com/mhammond/pywin32">PyWin32</a> - Python Extensions for Windows.</li>
<li><a href="https://winpython.github.io/">WinPython</a> - Portable development environment for Windows 7/8.</li>
</ul>
<h2 id="miscellaneous">Miscellaneous</h2>
<p><em>Useful libraries or tools that don&rsquo;t fit in the categories above.</em></p>
<ul>
<li><a href="https://github.com/jek/blinker">blinker</a> - A fast Python in-process signal/event dispatching system.</li>
<li><a href="https://github.com/mahmoud/boltons">boltons</a> - A set of pure-Python utilities.</li>
<li><a href="https://github.com/pallets/itsdangerous">itsdangerous</a> - Various helpers to pass trusted data to untrusted environments.</li>
<li><a href="https://github.com/magenta/magenta">magenta</a> - A tool to generate music and art using artificial intelligence.</li>
<li><a href="https://github.com/mitsuhiko/pluginbase">pluginbase</a> - A simple but flexible plugin system for Python.</li>
<li><a href="https://www.tryton.org/">tryton</a> - A general purpose business framework.</li>
</ul>
<h2 id="natural-language-processing">Natural Language Processing</h2>
<p><em>Libraries for working with human languages.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a> - Topic Modeling for Humans.</li>
<li><a href="https://github.com/saffsd/langid.py">langid.py</a> - Stand-alone language identification system.</li>
<li><a href="https://www.nltk.org/">nltk</a> - A leading platform for building Python programs to work with human language data.</li>
<li><a href="https://github.com/clips/pattern">pattern</a> - A web mining module.</li>
<li><a href="https://github.com/aboSamoor/polyglot">polyglot</a> - Natural language pipeline supporting hundreds of languages.</li>
<li><a href="https://github.com/facebookresearch/pytext">pytext</a> - A natural language modeling framework based on PyTorch.</li>
<li><a href="https://github.com/PetrochukM/PyTorch-NLP">PyTorch-NLP</a> - A toolkit enabling rapid deep learning NLP prototyping for research.</li>
<li><a href="https://spacy.io/">spacy</a> - A library for industrial-strength natural language processing in Python and Cython.</li>
<li><a href="https://github.com/stanfordnlp/stanza">Stanza</a> - The Stanford NLP Group&rsquo;s official Python library, supporting 60+ languages.</li>
</ul>
</li>
<li>Chinese
<ul>
<li><a href="https://github.com/fighting41love/funNLP">funNLP</a> - A collection of tools and datasets for Chinese NLP.</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a> - The most popular Chinese text segmentation library.</li>
<li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a> - A toolkit for Chinese word segmentation in various domains.</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> - A library for processing Chinese text.</li>
</ul>
</li>
</ul>
<h2 id="network-virtualization">Network Virtualization</h2>
<p><em>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</em></p>
<ul>
<li><a href="https://github.com/mininet/mininet">mininet</a> - A popular network emulator and API written in Python.</li>
<li><a href="https://github.com/napalm-automation/napalm">napalm</a> - Cross-vendor API to manipulate network devices.</li>
<li><a href="https://github.com/noxrepo/pox">pox</a> - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li>
</ul>
<h2 id="news-feed">News Feed</h2>
<p><em>Libraries for building user&rsquo;s activities.</em></p>
<ul>
<li><a href="https://github.com/justquick/django-activity-stream">django-activity-stream</a> - Generating generic activity streams from the actions on your site.</li>
<li><a href="https://github.com/tschellenbach/Stream-Framework">Stream Framework</a> - Building news feed and notification systems using Cassandra and Redis.</li>
</ul>
<h2 id="orm">ORM</h2>
<p><em>Libraries that implement Object-Relational Mapping or data mapping techniques.</em></p>
<ul>
<li>Relational Databases
<ul>
<li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/">Django Models</a> - The Django ORM.</li>
<li><a href="https://www.sqlalchemy.org/">SQLAlchemy</a> - The Python SQL Toolkit and Object Relational Mapper.
<ul>
<li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a></li>
</ul>
</li>
<li><a href="https://github.com/pudo/dataset">dataset</a> - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li>
<li><a href="https://github.com/sdispater/orator">orator</a> -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li>
<li><a href="https://github.com/encode/orm">orm</a> - An async ORM.</li>
<li><a href="https://github.com/coleifer/peewee">peewee</a> - A small, expressive ORM.</li>
<li><a href="https://github.com/ponyorm/pony/">pony</a> - ORM that provides a generator-oriented interface to SQL.</li>
<li><a href="https://github.com/web2py/pydal/">pydal</a> - A pure Python Database Abstraction Layer.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/stephenmcd/hot-redis">hot-redis</a> - Rich Python data types for Redis.</li>
<li><a href="https://github.com/MongoEngine/mongoengine">mongoengine</a> - A Python Object-Document-Mapper for working with MongoDB.</li>
<li><a href="https://github.com/pynamodb/PynamoDB">PynamoDB</a> - A Pythonic interface for <a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a>.</li>
<li><a href="https://github.com/kiddouk/redisco">redisco</a> - A Python Library for Simple Models and Containers Persisted in Redis.</li>
</ul>
</li>
</ul>
<h2 id="package-management">Package Management</h2>
<p><em>Libraries for package and dependency management.</em></p>
<ul>
<li><a href="https://pip.pypa.io/en/stable/">pip</a> - The package installer for Python.
<ul>
<li><a href="https://github.com/jazzband/pip-tools">pip-tools</a> - A set of tools to keep your pinned Python dependencies fresh.</li>
<li><a href="https://pypi.org/">PyPI</a></li>
</ul>
</li>
<li><a href="https://github.com/conda/conda/">conda</a> - Cross-platform, Python-agnostic binary package manager.</li>
<li><a href="https://github.com/sdispater/poetry">poetry</a> - Python dependency management and packaging made easy.</li>
</ul>
<h2 id="package-repositories">Package Repositories</h2>
<p><em>Local PyPI repository server and proxies.</em></p>
<ul>
<li><a href="https://github.com/pypa/bandersnatch/">bandersnatch</a> - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li>
<li><a href="https://github.com/devpi/devpi">devpi</a> - PyPI server and packaging/testing/release tool.</li>
<li><a href="https://github.com/jazzband/localshop">localshop</a> - Local PyPI server (custom packages and auto-mirroring of pypi).</li>
<li><a href="https://github.com/pypa/warehouse">warehouse</a> - Next generation Python Package Repository (PyPI).</li>
</ul>
<h2 id="penetration-testing">Penetration Testing</h2>
<p><em>Frameworks and tools for penetration testing.</em></p>
<ul>
<li><a href="https://github.com/Manisso/fsociety">fsociety</a> - A Penetration testing framework.</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">setoolkit</a> - A toolkit for social engineering.</li>
<li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a> - Automatic SQL injection and database takeover tool.</li>
</ul>
<h2 id="permissions">Permissions</h2>
<p><em>Libraries that allow or deny users access to data or functionality.</em></p>
<ul>
<li><a href="https://github.com/django-guardian/django-guardian">django-guardian</a> - Implementation of per object permissions for Django 1.2+</li>
<li><a href="https://github.com/dfunckt/django-rules">django-rules</a> - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li>
</ul>
<h2 id="processes">Processes</h2>
<p><em>Libraries for starting and communicating with OS processes.</em></p>
<ul>
<li><a href="https://github.com/amitt001/delegator.py">delegator.py</a> - <a href="https://docs.python.org/3/library/subprocess.html">Subprocesses</a> for Humans 2.0.</li>
<li><a href="https://sarge.readthedocs.io/en/latest/">sarge</a> - Yet another wrapper for subprocess.</li>
<li><a href="https://github.com/amoffat/sh">sh</a> - A full-fledged subprocess replacement for Python.</li>
</ul>
<h2 id="recommender-systems">Recommender Systems</h2>
<p><em>Libraries for building recommender systems.</em></p>
<ul>
<li><a href="https://github.com/spotify/annoy">annoy</a> - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li>
<li><a href="https://github.com/ibayer/fastFM">fastFM</a> - A library for Factorization Machines.</li>
<li><a href="https://github.com/benfred/implicit">implicit</a> - A fast Python implementation of collaborative filtering for implicit datasets.</li>
<li><a href="https://github.com/guestwalk/libffm">libffm</a> - A library for Field-aware Factorization Machine (FFM).</li>
<li><a href="https://github.com/lyst/lightfm">lightfm</a> - A Python implementation of a number of popular recommendation algorithms.</li>
<li><a href="https://github.com/maciejkula/spotlight">spotlight</a> - Deep recommender models using PyTorch.</li>
<li><a href="https://github.com/NicolasHug/Surprise">Surprise</a> - A scikit for building and analyzing recommender systems.</li>
<li><a href="https://github.com/jfkirk/tensorrec">tensorrec</a> - A Recommendation Engine Framework in TensorFlow.</li>
</ul>
<h2 id="refactoring">Refactoring</h2>
<p><em>Refactoring tools and libraries for Python</em></p>
<ul>
<li><a href="https://bicyclerepair.sourceforge.net/">Bicycle Repair Man</a> - Bicycle Repair Man, a refactoring tool for Python.</li>
<li><a href="https://pybowler.io/">Bowler</a> - Safe code refactoring for modern Python.</li>
<li><a href="https://github.com/python-rope/rope">Rope</a> -  Rope is a python refactoring library.</li>
</ul>
<h2 id="restful-api">RESTful API</h2>
<p><em>Libraries for building RESTful APIs.</em></p>
<ul>
<li>Django
<ul>
<li><a href="https://www.django-rest-framework.org/">django-rest-framework</a> - A powerful and flexible toolkit to build web APIs.</li>
<li><a href="https://tastypieapi.org/">django-tastypie</a> - Creating delicious APIs for Django apps.</li>
</ul>
</li>
<li>Flask
<ul>
<li><a href="https://github.com/pyeve/eve">eve</a> - REST API framework powered by Flask, MongoDB and good intentions.</li>
<li><a href="https://github.com/flask-api/flask-api">flask-api</a> - Browsable Web APIs for Flask.</li>
<li><a href="https://github.com/flask-restful/flask-restful">flask-restful</a> - Quickly building REST APIs for Flask.</li>
</ul>
</li>
<li>Pyramid
<ul>
<li><a href="https://github.com/Cornices/cornice">cornice</a> - A RESTful framework for Pyramid.</li>
</ul>
</li>
<li>Framework agnostic
<ul>
<li><a href="https://github.com/encode/apistar">apistar</a> - A smart Web API framework, designed for Python 3.</li>
<li><a href="https://github.com/falconry/falcon">falcon</a> - A high-performance framework for building cloud APIs and web app backends.</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a> - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li>
<li><a href="https://github.com/hugapi/hug">hug</a> - A Python 3 framework for cleanly exposing APIs.</li>
<li><a href="https://github.com/jeffknupp/sandman2">sandman2</a> - Automated REST APIs for existing database-driven systems.</li>
<li><a href="https://github.com/huge-success/sanic">sanic</a> - A Python 3.6+ web server and web framework that&rsquo;s written to go fast.</li>
<li><a href="https://vibora.io/">vibora</a> - Fast, efficient and asynchronous Web framework inspired by Flask.</li>
</ul>
</li>
</ul>
<h2 id="robotics">Robotics</h2>
<p><em>Libraries for robotics.</em></p>
<ul>
<li><a href="https://github.com/AtsushiSakai/PythonRobotics">PythonRobotics</a> - This is a compilation of various robotics algorithms with visualizations.</li>
<li><a href="https://wiki.ros.org/rospy">rospy</a> - This is a library for ROS (Robot Operating System).</li>
</ul>
<h2 id="rpc-servers">RPC Servers</h2>
<p><em>RPC-compatible servers.</em></p>
<ul>
<li><a href="https://github.com/tomerfiliba/rpyc">RPyC</a> (Remote Python Call) - A transparent and symmetric RPC library for Python</li>
<li><a href="https://github.com/0rpc/zerorpc-python">zeroRPC</a> - zerorpc is a flexible RPC implementation based on <a href="https://zeromq.org/">ZeroMQ</a> and <a href="https://msgpack.org/">MessagePack</a>.</li>
</ul>
<h2 id="science">Science</h2>
<p><em>Libraries for scientific computing. Also see <a href="https://github.com/TomNicholas/Python-for-Scientists">Python-for-Scientists</a>.</em></p>
<ul>
<li><a href="https://www.astropy.org/">astropy</a> - A community Python library for Astronomy.</li>
<li><a href="https://github.com/chapmanb/bcbio-nextgen">bcbio-nextgen</a> - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li>
<li><a href="https://github.com/chapmanb/bcbb">bccb</a> - Collection of useful code related to biological analysis.</li>
<li><a href="https://biopython.org/wiki/Main_Page">Biopython</a> - Biopython is a set of freely available tools for biological computation.</li>
<li><a href="https://cclib.github.io/">cclib</a> - A library for parsing and interpreting the results of computational chemistry packages.</li>
<li><a href="https://colour-science.org/">Colour</a> - Implementing a comprehensive number of colour theory transformations and algorithms.</li>
<li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - Unsupervised machine learning toolbox for graph structured data.</li>
<li><a href="https://networkx.github.io/">NetworkX</a> - A high-productivity software for complex networks.</li>
<li><a href="https://nipy.org">NIPY</a> - A collection of neuroimaging toolkits.</li>
<li><a href="https://www.numpy.org/">NumPy</a> - A fundamental package for scientific computing with Python.</li>
<li><a href="https://github.com/obspy/obspy/wiki/">ObsPy</a> - A Python toolbox for seismology.</li>
<li><a href="https://openbabel.org/wiki/Main_Page">Open Babel</a> - A chemical toolbox designed to speak the many languages of chemical data.</li>
<li><a href="https://www.pydy.org/">PyDy</a> - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li>
<li><a href="https://github.com/pymc-devs/pymc3">PyMC</a> - Markov Chain Monte Carlo sampling toolkit.</li>
<li><a href="https://qutip.org/">QuTiP</a> - Quantum Toolbox in Python.</li>
<li><a href="https://www.rdkit.org/">RDKit</a> - Cheminformatics and Machine Learning Software.</li>
<li><a href="https://www.scipy.org/">SciPy</a> - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li>
<li><a href="https://gitlab.com/team-simpy/simpy">SimPy</a> -  A process-based discrete-event simulation framework.</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> - Statistical modeling and econometrics in Python.</li>
<li><a href="https://github.com/sympy/sympy">SymPy</a> - A Python library for symbolic mathematics.</li>
<li><a href="https://github.com/quantopian/zipline">Zipline</a> - A Pythonic algorithmic trading library.</li>
</ul>
<h2 id="search">Search</h2>
<p><em>Libraries and software for indexing and performing search queries on data.</em></p>
<ul>
<li><a href="https://github.com/django-haystack/django-haystack">django-haystack</a> - Modular search for Django.</li>
<li><a href="https://github.com/elastic/elasticsearch-dsl-py">elasticsearch-dsl-py</a> - The official high-level Python client for Elasticsearch.</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">elasticsearch-py</a> - The official low-level Python client for <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>.</li>
<li><a href="https://github.com/django-haystack/pysolr">pysolr</a> - A lightweight Python wrapper for <a href="https://lucene.apache.org/solr/">Apache Solr</a>.</li>
<li><a href="https://whoosh.readthedocs.io/en/latest/">whoosh</a> - A fast, pure Python search engine library.</li>
</ul>
<h2 id="serialization">Serialization</h2>
<p><em>Libraries for serializing complex data types</em></p>
<ul>
<li><a href="https://github.com/marshmallow-code/marshmallow">marshmallow</a> - A lightweight library for converting complex objects to and from simple Python datatypes.</li>
<li><a href="https://github.com/TkTech/pysimdjson">pysimdjson</a> - A Python bindings for <a href="https://github.com/lemire/simdjson">simdjson</a>.</li>
<li><a href="https://github.com/python-rapidjson/python-rapidjson">python-rapidjson</a> - A Python wrapper around <a href="https://github.com/Tencent/rapidjson">RapidJSON</a>.</li>
<li><a href="https://github.com/esnme/ultrajson">ultrajson</a> - A fast JSON decoder and encoder written in C with Python bindings.</li>
</ul>
<h2 id="serverless-frameworks">Serverless Frameworks</h2>
<p><em>Frameworks for developing serverless Python code.</em></p>
<ul>
<li><a href="https://github.com/nficano/python-lambda">python-lambda</a> - A toolkit for developing and deploying Python code in AWS Lambda.</li>
<li><a href="https://github.com/Miserlou/Zappa">Zappa</a> - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li>
</ul>
<h2 id="shell">Shell</h2>
<p><em>Shells based on Python.</em></p>
<ul>
<li><a href="https://github.com/xonsh/xonsh/">xonsh</a> - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li>
</ul>
<h2 id="specific-formats-processing">Specific Formats Processing</h2>
<p><em>Libraries for parsing and manipulating specific text formats.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/jazzband/tablib">tablib</a> - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li>
</ul>
</li>
<li>Office
<ul>
<li><a href="https://github.com/elapouya/python-docx-template">docxtpl</a> - Editing a docx document by jinja2 template</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li>
<li><a href="https://github.com/pyexcel/pyexcel">pyexcel</a> - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a> - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li>
<li><a href="https://github.com/scanny/python-pptx">python-pptx</a> - Python library for creating and updating PowerPoint (.pptx) files.</li>
<li><a href="https://github.com/unoconv/unoconv">unoconv</a> - Convert between any document format supported by LibreOffice/OpenOffice.</li>
<li><a href="https://github.com/jmcnamara/XlsxWriter">XlsxWriter</a> - A Python module for creating Excel .xlsx files.</li>
<li><a href="https://github.com/ZoomerAnalytics/xlwings">xlwings</a> - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li>
<li><a href="https://github.com/python-excel/xlwt">xlwt</a> / <a href="https://github.com/python-excel/xlrd">xlrd</a> - Writing and reading data and formatting information from Excel files.</li>
</ul>
</li>
<li>PDF
<ul>
<li><a href="https://github.com/euske/pdfminer">PDFMiner</a> - A tool for extracting information from PDF documents.</li>
<li><a href="https://github.com/mstamy2/PyPDF2">PyPDF2</a> - A library capable of splitting, merging and transforming PDF pages.</li>
<li><a href="https://www.reportlab.com/opensource/">ReportLab</a> - Allowing Rapid creation of rich PDF documents.</li>
</ul>
</li>
<li>Markdown
<ul>
<li><a href="https://github.com/lepture/mistune">Mistune</a> - Fastest and full featured pure Python parsers of Markdown.</li>
<li><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> - A Python implementation of John Gruber‚Äôs Markdown.</li>
</ul>
</li>
<li>YAML
<ul>
<li><a href="https://pyyaml.org/">PyYAML</a> - YAML implementations for Python.</li>
</ul>
</li>
<li>CSV
<ul>
<li><a href="https://github.com/wireservice/csvkit">csvkit</a> - Utilities for converting to and working with CSV.</li>
</ul>
</li>
<li>Archive
<ul>
<li><a href="https://github.com/mitsuhiko/unp">unp</a> - A command line tool that can unpack archives easily.</li>
</ul>
</li>
</ul>
<h2 id="static-site-generator">Static Site Generator</h2>
<p><em>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</em></p>
<ul>
<li><a href="https://github.com/lektor/lektor">lektor</a> - An easy to use static CMS and blog engine.</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocs</a> - Markdown friendly documentation generator.</li>
<li><a href="https://github.com/sunainapai/makesite">makesite</a> - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li>
<li><a href="https://github.com/getnikola/nikola">nikola</a> - A static website and blog generator.</li>
<li><a href="https://github.com/getpelican/pelican">pelican</a> - Static site generator that supports Markdown and reST syntax.</li>
</ul>
<h2 id="tagging">Tagging</h2>
<p><em>Libraries for tagging items.</em></p>
<ul>
<li><a href="https://github.com/jazzband/django-taggit">django-taggit</a> - Simple tagging for Django.</li>
</ul>
<h2 id="task-queues">Task Queues</h2>
<p><em>Libraries for working with task queues.</em></p>
<ul>
<li><a href="https://docs.celeryproject.org/en/stable/">celery</a> - An asynchronous task queue/job queue based on distributed message passing.</li>
<li><a href="https://github.com/Bogdanp/dramatiq">dramatiq</a> - A fast and reliable background task processing library for Python 3.</li>
<li><a href="https://github.com/coleifer/huey">huey</a> - Little multi-threaded task queue.</li>
<li><a href="https://github.com/pricingassistant/mrq">mrq</a> - A distributed worker task queue in Python using Redis &amp; gevent.</li>
<li><a href="https://github.com/rq/rq">rq</a> - Simple job queues for Python.</li>
</ul>
<h2 id="template-engine">Template Engine</h2>
<p><em>Libraries and tools for templating and lexing.</em></p>
<ul>
<li><a href="https://genshi.edgewall.org/">Genshi</a> - Python templating toolkit for generation of web-aware output.</li>
<li><a href="https://github.com/pallets/jinja">Jinja2</a> - A modern and designer friendly templating language.</li>
<li><a href="https://www.makotemplates.org/">Mako</a> - Hyperfast and lightweight templating for the Python platform.</li>
</ul>
<h2 id="testing">Testing</h2>
<p><em>Libraries for testing codebases and generating test data.</em></p>
<ul>
<li>Testing Frameworks
<ul>
<li><a href="https://github.com/HypothesisWorks/hypothesis">hypothesis</a> - Hypothesis is an advanced Quickcheck style property based testing library.</li>
<li><a href="https://github.com/nose-devs/nose2">nose2</a> - The successor to <code>nose</code>, based on `unittest2.</li>
<li><a href="https://docs.pytest.org/en/latest/">pytest</a> - A mature full-featured Python testing tool.</li>
<li><a href="https://github.com/robotframework/robotframework">Robot Framework</a> - A generic test automation framework.</li>
<li><a href="https://docs.python.org/3/library/unittest.html">unittest</a> - (Python standard library) Unit testing framework.</li>
</ul>
</li>
<li>Test Runners
<ul>
<li><a href="https://github.com/CleanCut/green">green</a> - A clean, colorful test runner.</li>
<li><a href="https://nestorsalceda.github.io/mamba/">mamba</a> - The definitive testing tool for Python. Born under the banner of BDD.</li>
<li><a href="https://tox.readthedocs.io/en/latest/">tox</a> - Auto builds and tests distributions in multiple Python versions</li>
</ul>
</li>
<li>GUI / Web Testing
<ul>
<li><a href="https://github.com/locustio/locust">locust</a> - Scalable user load testing tool written in Python.</li>
<li><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a> - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li>
<li><a href="https://github.com/kiwicom/schemathesis">Schemathesis</a> - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li>
<li><a href="https://pypi.org/project/selenium/">Selenium</a> - Python bindings for <a href="https://www.seleniumhq.org/">Selenium</a> WebDriver.</li>
<li><a href="https://github.com/seatgeek/sixpack">sixpack</a> - A language-agnostic A/B Testing framework.</li>
<li><a href="https://github.com/cobrateam/splinter">splinter</a> - Open source tool for testing web applications.</li>
</ul>
</li>
<li>Mock
<ul>
<li><a href="https://pypi.org/project/doublex/">doublex</a> - Powerful test doubles framework for Python.</li>
<li><a href="https://github.com/spulec/freezegun">freezegun</a> - Travel through time by mocking the datetime module.</li>
<li><a href="https://github.com/patrys/httmock">httmock</a> - A mocking library for requests for Python 2.6+ and 3.2+.</li>
<li><a href="https://github.com/gabrielfalcao/HTTPretty">httpretty</a> - HTTP request mock tool for Python.</li>
<li><a href="https://docs.python.org/3/library/unittest.mock.html">mock</a> - (Python standard library) A mocking and patching library.</li>
<li><a href="https://github.com/mindflayer/python-mocket">mocket</a> - A socket mock framework with gevent/asyncio/SSL support.</li>
<li><a href="https://github.com/getsentry/responses">responses</a> - A utility library for mocking out the requests Python library.</li>
<li><a href="https://github.com/kevin1024/vcrpy">VCR.py</a> - Record and replay HTTP interactions on your tests.</li>
</ul>
</li>
<li>Object Factories
<ul>
<li><a href="https://github.com/FactoryBoy/factory_boy">factory_boy</a> - A test fixtures replacement for Python.</li>
<li><a href="https://github.com/klen/mixer">mixer</a> - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li>
<li><a href="https://github.com/vandersonmota/model_mommy">model_mommy</a> - Creating random fixtures for testing in Django.</li>
</ul>
</li>
<li>Code Coverage
<ul>
<li><a href="https://pypi.org/project/coverage/">coverage</a> - Code coverage measurement.</li>
</ul>
</li>
<li>Fake Data
<ul>
<li><a href="https://github.com/emirozer/fake2db">fake2db</a> - Fake database generator.</li>
<li><a href="https://github.com/joke2k/faker">faker</a> - A Python package that generates fake data.</li>
<li><a href="https://github.com/lk-geimfari/mimesis">mimesis</a> - is a Python library that help you generate fake data.</li>
<li><a href="https://pypi.org/project/radar/">radar</a> - Generate random datetime / time.</li>
</ul>
</li>
</ul>
<h2 id="text-processing">Text Processing</h2>
<p><em>Libraries for parsing and manipulating plain texts.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/chardet/chardet">chardet</a> - Python 2/3 compatible character encoding detector.</li>
<li><a href="https://docs.python.org/3/library/difflib.html">difflib</a> - (Python standard library) Helpers for computing deltas.</li>
<li><a href="https://github.com/LuminosoInsight/python-ftfy">ftfy</a> - Makes Unicode text less broken and more consistent automagically.</li>
<li><a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a> - Fuzzy String Matching.</li>
<li><a href="https://github.com/ztane/python-Levenshtein/">Levenshtein</a> - Fast computation of Levenshtein distance and string similarity.</li>
<li><a href="https://github.com/vinta/pangu.py">pangu.py</a> - Paranoid text spacing.</li>
<li><a href="https://github.com/pwaller/pyfiglet">pyfiglet</a> - An implementation of figlet written in Python.</li>
<li><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a> - Convert Chinese hanzi (Êº¢Â≠ó) to pinyin (ÊãºÈü≥).</li>
<li><a href="https://github.com/orsinium/textdistance">textdistance</a> - Compute distance between sequences with 30+ algorithms.</li>
<li><a href="https://pypi.org/project/Unidecode/">unidecode</a> - ASCII transliterations of Unicode text.</li>
</ul>
</li>
<li>Slugify
<ul>
<li><a href="https://github.com/dimka665/awesome-slugify">awesome-slugify</a> - A Python slugify library that can preserve unicode.</li>
<li><a href="https://github.com/un33k/python-slugify">python-slugify</a> - A Python slugify library that translates unicode to ASCII.</li>
<li><a href="https://github.com/mozilla/unicode-slugify">unicode-slugify</a> - A slugifier that generates unicode slugs with Django as a dependency.</li>
</ul>
</li>
<li>Unique identifiers
<ul>
<li><a href="https://github.com/davidaurelio/hashids-python">hashids</a> - Implementation of <a href="https://hashids.org">hashids</a> in Python.</li>
<li><a href="https://github.com/skorokithakis/shortuuid">shortuuid</a> - A generator library for concise, unambiguous and URL-safe UUIDs.</li>
</ul>
</li>
<li>Parser
<ul>
<li><a href="https://github.com/dabeaz/ply">ply</a> - Implementation of lex and yacc parsing tools for Python.</li>
<li><a href="https://pygments.org/">pygments</a> - A generic syntax highlighter.</li>
<li><a href="https://github.com/pyparsing/pyparsing">pyparsing</a> - A general purpose framework for generating parsers.</li>
<li><a href="https://github.com/derek73/python-nameparser">python-nameparser</a> - Parsing human names into their individual components.</li>
<li><a href="https://github.com/daviddrysdale/python-phonenumbers">python-phonenumbers</a> - Parsing, formatting, storing and validating international phone numbers.</li>
<li><a href="https://github.com/selwin/python-user-agents">python-user-agents</a> - Browser user agent parser.</li>
<li><a href="https://github.com/andialbrecht/sqlparse">sqlparse</a> - A non-validating SQL parser.</li>
</ul>
</li>
</ul>
<h2 id="third-party-apis">Third-party APIs</h2>
<p><em>Libraries for accessing third party services APIs. Also see <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>.</em></p>
<ul>
<li><a href="https://libcloud.apache.org/">apache-libcloud</a> - One Python library for all clouds.</li>
<li><a href="https://github.com/boto/boto3">boto3</a> - Python interface to Amazon Web Services.</li>
<li><a href="https://github.com/istrategylabs/django-wordpress">django-wordpress</a> - WordPress models and views for Django.</li>
<li><a href="https://github.com/mobolic/facebook-sdk">facebook-sdk</a> - Facebook Platform Python SDK.</li>
<li><a href="https://github.com/google/google-api-python-client">google-api-python-client</a> - Google APIs Client Library for Python.</li>
<li><a href="https://github.com/burnash/gspread">gspread</a> - Google Spreadsheets Python API.</li>
<li><a href="https://github.com/ryanmcgrath/twython">twython</a> - A Python wrapper for the Twitter API.</li>
</ul>
<h2 id="url-manipulation">URL Manipulation</h2>
<p><em>Libraries for parsing URLs.</em></p>
<ul>
<li><a href="https://github.com/gruns/furl">furl</a> - A small Python library that makes parsing and manipulating URLs easy.</li>
<li><a href="https://github.com/codeinthehole/purl">purl</a> - A simple, immutable URL class with a clean API for interrogation and manipulation.</li>
<li><a href="https://github.com/ellisonleao/pyshorteners">pyshorteners</a> - A pure Python URL shortening lib.</li>
<li><a href="https://github.com/marshmallow-code/webargs">webargs</a> - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li>
</ul>
<h2 id="video">Video</h2>
<p><em>Libraries for manipulating video and GIFs.</em></p>
<ul>
<li><a href="https://zulko.github.io/moviepy/">moviepy</a> - A module for script-based movie editing with many formats, including animated GIFs.</li>
<li><a href="https://github.com/aizvorski/scikit-video">scikit-video</a> - Video processing routines for SciPy.</li>
<li><a href="https://github.com/abhiTronix/vidgear">vidgear</a> - Most Powerful multi-threaded Video Processing framework.</li>
</ul>
<h2 id="web-asset-management">Web Asset Management</h2>
<p><em>Tools for managing, compressing and minifying website assets.</em></p>
<ul>
<li><a href="https://github.com/django-compressor/django-compressor">django-compressor</a> - Compresses linked and inline JavaScript or CSS into a single cached file.</li>
<li><a href="https://github.com/jazzband/django-pipeline">django-pipeline</a> - An asset packaging library for Django.</li>
<li><a href="https://github.com/jschneier/django-storages">django-storages</a> - A collection of custom storage back ends for Django.</li>
<li><a href="https://www.fanstatic.org/en/latest/">fanstatic</a> - Packages, optimizes, and serves static file dependencies as Python packages.</li>
<li><a href="https://wimleers.com/fileconveyor">fileconveyor</a> - A daemon to detect and sync files to CDNs, S3 and FTP.</li>
<li><a href="https://github.com/miracle2k/flask-assets">flask-assets</a> - Helps you integrate webassets into your Flask app.</li>
<li><a href="https://github.com/miracle2k/webassets">webassets</a> - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li>
</ul>
<h2 id="web-content-extracting">Web Content Extracting</h2>
<p><em>Libraries for extracting web contents.</em></p>
<ul>
<li><a href="https://github.com/Alir3z4/html2text">html2text</a> - Convert HTML to Markdown-formatted text.</li>
<li><a href="https://github.com/michaelhelmick/lassie">lassie</a> - Web Content Retrieval for Humans.</li>
<li><a href="https://github.com/coleifer/micawber">micawber</a> - A small library for extracting rich content from URLs.</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> - News extraction, article extraction and content curation in Python.</li>
<li><a href="https://github.com/buriy/python-readability">python-readability</a> - Fast Python port of arc90&rsquo;s readability tool.</li>
<li><a href="https://github.com/psf/requests-html">requests-html</a> - Pythonic HTML Parsing for Humans.</li>
<li><a href="https://github.com/miso-belica/sumy">sumy</a> - A module for automatic summarization of text documents and HTML pages.</li>
<li><a href="https://github.com/deanmalmgren/textract">textract</a> - Extract text from any document, Word, PowerPoint, PDFs, etc.</li>
<li><a href="https://github.com/gaojiuli/toapi">toapi</a> - Every web site provides APIs.</li>
</ul>
<h2 id="web-crawling">Web Crawling</h2>
<p><em>Libraries to automate web scraping.</em></p>
<ul>
<li><a href="https://github.com/chineking/cola">cola</a> - A distributed crawling framework.</li>
<li><a href="https://pythonhosted.org/feedparser/">feedparser</a> - Universal feed parser.</li>
<li><a href="https://github.com/lorien/grab">grab</a> - Site scraping framework.</li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup">MechanicalSoup</a> - A Python library for automating interaction with websites.</li>
<li><a href="https://github.com/scrapinghub/portia">portia</a> - Visual scraping for Scrapy.</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> - A powerful spider system.</li>
<li><a href="https://github.com/jmcarp/robobrowser">robobrowser</a> - A simple, Pythonic library for browsing the web without a standalone web browser.</li>
<li><a href="https://scrapy.org/">scrapy</a> - A fast high-level screen scraping and web crawling framework.</li>
</ul>
<h2 id="web-frameworks">Web Frameworks</h2>
<p><em>Traditional full stack web frameworks. Also see <a href="https://github.com/vinta/awesome-python#restful-api">RESTful API</a>.</em></p>
<ul>
<li>Synchronous
<ul>
<li><a href="https://www.djangoproject.com/">Django</a> - The most popular web framework in Python.
<ul>
<li><a href="https://github.com/shahraizali/awesome-django">awesome-django</a></li>
<li><a href="https://github.com/wsvincent/awesome-django">awesome-django</a></li>
</ul>
</li>
<li><a href="https://flask.pocoo.org/">Flask</a> - A microframework for Python.
<ul>
<li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a></li>
</ul>
</li>
<li><a href="https://pylonsproject.org/">Pyramid</a> - A small, fast, down-to-earth, open source Python web framework.
<ul>
<li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a></li>
</ul>
</li>
<li><a href="https://github.com/MasoniteFramework/masonite">Masonite</a> - The modern and developer centric Python web framework.</li>
</ul>
</li>
<li>Asynchronous
<ul>
<li><a href="https://www.tornadoweb.org/en/latest/">Tornado</a> - A web framework and asynchronous networking library.</li>
</ul>
</li>
</ul>
<h2 id="websocket">WebSocket</h2>
<p><em>Libraries for working with WebSocket.</em></p>
<ul>
<li><a href="https://github.com/crossbario/autobahn-python">autobahn-python</a> - WebSocket &amp; WAMP for Python on Twisted and <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>.</li>
<li><a href="https://github.com/django/channels">channels</a> - Developer-friendly asynchrony for Django.</li>
<li><a href="https://github.com/aaugustin/websockets">websockets</a> - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li>
</ul>
<h2 id="wsgi-servers">WSGI Servers</h2>
<p><em>WSGI-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/jonashaag/bjoern">bjoern</a> - Asynchronous, very fast and written in C.</li>
<li><a href="https://github.com/benoitc/gunicorn">gunicorn</a> - Pre-forked, ported from Ruby&rsquo;s Unicorn project.</li>
<li><a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> - A project aims at developing a full stack for building hosting services, written in C.</li>
<li><a href="https://github.com/Pylons/waitress">waitress</a> - Multi-threaded, powers Pyramid.</li>
<li><a href="https://github.com/pallets/werkzeug">werkzeug</a> - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li>
</ul>
<h1 id="resources">Resources</h1>
<p>Where to discover learning resources or new Python libraries.</p>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/fluent-python/9781491946237/">Fluent Python</a></li>
<li><a href="https://greenteapress.com/wp/think-python-2e/">Think Python</a></li>
</ul>
<h2 id="websites">Websites</h2>
<ul>
<li>Tutorials
<ul>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://www.pythoncheatsheet.org/">Python Cheatsheet</a></li>
<li><a href="https://realpython.com">Real Python</a></li>
<li><a href="https://docs.python-guide.org/">The Hitchhiker‚Äôs Guide to Python</a></li>
<li><a href="https://github.com/huangsam/ultimate-python">Ultimate Python study guide</a></li>
</ul>
</li>
<li>Libraries
<ul>
<li><a href="https://python.libhunt.com/">Awesome Python @LibHunt</a></li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://python.zeef.com/alan.richmond">Python ZEEF</a></li>
<li><a href="https://news.python.sc/">Pythonic News</a></li>
<li><a href="https://github.com/satwikkansal/wtfpython">What the f*ck Python!</a></li>
</ul>
</li>
</ul>
<h2 id="newsletters">Newsletters</h2>
<ul>
<li><a href="https://python.libhunt.com/newsletter">Awesome Python Newsletter</a></li>
<li><a href="https://pycoders.com/">Pycoder&rsquo;s Weekly</a></li>
<li><a href="https://realpython.com/python-tricks/">Python Tricks</a></li>
<li><a href="https://www.pythonweekly.com/">Python Weekly</a></li>
</ul>
<h2 id="podcasts">Podcasts</h2>
<ul>
<li><a href="https://djangochat.com/">Django Chat</a></li>
<li><a href="https://podcastinit.com/">Podcast.__init__</a></li>
<li><a href="https://pythonbytes.fm">Python Bytes</a></li>
<li><a href="https://runninginproduction.com/">Running in Production</a></li>
<li><a href="https://talkpython.fm/">Talk Python To Me</a></li>
<li><a href="https://testandcode.com/">Test and Code</a></li>
<li><a href="https://realpython.com/podcasts/rpp/">The Real Python Podcast</a></li>
</ul>
<h1 id="contributing">Contributing</h1>
<p>Your contributions are always welcome! Please take a look at the <a href="https://github.com/vinta/awesome-python/blob/master/CONTRIBUTING.md">contribution guidelines</a> first.</p>
<p>I will keep some pull requests open if I&rsquo;m not sure whether those libraries are awesome, you could <a href="https://github.com/vinta/awesome-python/pulls">vote for them</a> by adding &#x1f44d; to them. Pull requests will be merged when their votes reach <strong>20</strong>.</p>
<hr>
<p>If you have any question about this opinionated list, do not hesitate to contact me <a href="https://twitter.com/VintaChen">@VintaChen</a> on Twitter or open an issue on GitHub.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python Cheat Sheet for Leetcode</title>
      <link>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://samirpaulb.github.io/posts/python-cheat-sheet-for-leetcode/</guid>
      <description>Python Cheat Sheet for Leetcode</description>
      <content:encoded><![CDATA[<h1 id="basics">Basics</h1>
<ul>
<li>
<p>Data Types</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg" alt="Untitled"  />
</p>
</li>
<li>
<p>Operators and it‚Äôs precendence</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<h1 id="data-structures">Data Structures</h1>
<p><em>Important data structures for Leetcode</em></p>
<h2 id="lists">Lists</h2>
<blockquote>
<p>Lists are used to store multiple items in a single variable</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nums = [1,2,3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums.index(1) # returns index
</span></span><span class="line"><span class="cl">nums.append(1) # appends 1
</span></span><span class="line"><span class="cl">nums.insert(0,10) # inserts 10 at 0th index
</span></span><span class="line"><span class="cl">nums.remove(3) # removes all instances of 3
</span></span><span class="line"><span class="cl">nums.copy(1) # returns copy of the list
</span></span><span class="line"><span class="cl">nums.count(1) # returns no.of times &#39;1&#39; is present in the list
</span></span><span class="line"><span class="cl">nums.extend(someOtherList) # ...
</span></span><span class="line"><span class="cl">nums.pop() # pops last element [which element to pop can also be given as optional argument]
</span></span><span class="line"><span class="cl">nums.reverse() # reverses original list (nums in this case)
</span></span><span class="line"><span class="cl">nums.sort() # sorts list [does NOT return sorted list]
</span></span><span class="line"><span class="cl">#Python&#39;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span><span class="lnt" id="hl-1-27"><a class="lnlinks" href="#hl-1-27">27</a>
</span><span class="lnt" id="hl-1-28"><a class="lnlinks" href="#hl-1-28">28</a>
</span><span class="lnt" id="hl-1-29"><a class="lnlinks" href="#hl-1-29">29</a>
</span><span class="lnt" id="hl-1-30"><a class="lnlinks" href="#hl-1-30">30</a>
</span><span class="lnt" id="hl-1-31"><a class="lnlinks" href="#hl-1-31">31</a>
</span><span class="lnt" id="hl-1-32"><a class="lnlinks" href="#hl-1-32">32</a>
</span><span class="lnt" id="hl-1-33"><a class="lnlinks" href="#hl-1-33">33</a>
</span><span class="lnt" id="hl-1-34"><a class="lnlinks" href="#hl-1-34">34</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">It&#39;s pretty simple really:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop]  # items start through stop-1
</span></span><span class="line"><span class="cl">a[start:]      # items start through the rest of the array
</span></span><span class="line"><span class="cl">a[:stop]       # items from the beginning through stop-1
</span></span><span class="line"><span class="cl">a[:]           # a copy of the whole array
</span></span><span class="line"><span class="cl">There is also the step value, which can be used with any of the above:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step] # start through not past stop, by step
</span></span><span class="line"><span class="cl">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[-1]    # last item in the array
</span></span><span class="line"><span class="cl">a[-2:]   # last two items in the array
</span></span><span class="line"><span class="cl">a[:-2]   # everything except the last two items
</span></span><span class="line"><span class="cl">Similarly, step may be a negative number:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[::-1]    # all items in the array, reversed
</span></span><span class="line"><span class="cl">a[1::-1]   # the first two items, reversed
</span></span><span class="line"><span class="cl">a[:-3:-1]  # the last two items, reversed
</span></span><span class="line"><span class="cl">a[-3::-1]  # everything except the last two items, reversed
</span></span><span class="line"><span class="cl">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relation to slice() object
</span></span><span class="line"><span class="cl">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[start:stop:step]
</span></span><span class="line"><span class="cl">is equivalent to:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a[slice(start, stop, step)]
</span></span><span class="line"><span class="cl">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="dictionary">Dictionary</h2>
<blockquote>
<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dict = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dict.keys() # returns list of keys of dictionary
</span></span><span class="line"><span class="cl">dict.values() # returns list of values of dictionary
</span></span><span class="line"><span class="cl">dict.get(&#39;a&#39;) # returns value for any corresponding key
</span></span><span class="line"><span class="cl">dict.items() # returns [(&#39;a&#39;,1),(&#39;b&#39;,2),(&#39;c&#39;,3)]
</span></span><span class="line"><span class="cl">dict.copy() # returns copy of the dictionary
</span></span><span class="line"><span class="cl"># NOTE : items() Returns view object that will be updated with any future changes to dict
</span></span><span class="line"><span class="cl">dict.pop(KEY) # pops key-value pair with that key
</span></span><span class="line"><span class="cl">dict.popitem() # removes most recent pair added
</span></span><span class="line"><span class="cl">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned
</span></span><span class="line"><span class="cl"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.
</span></span><span class="line"><span class="cl"># If the key does not exist, DEFAULT_VALUE becomes the key&#39;s value. 2nd argument&#39;s default is None.
</span></span><span class="line"><span class="cl">dict.update({KEY:VALUE}) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)
</span></span><span class="line"><span class="cl"># defaultdict ensures that if any element is accessed that is not present in the dictionary
</span></span><span class="line"><span class="cl"># it will be created and error will not be thrown (which happens in normal dictionary)
</span></span><span class="line"><span class="cl"># Also, the new element created will be of argument type, for example in the below line
</span></span><span class="line"><span class="cl"># an element of type &#39;list&#39; will be made for a Key that does not exist
</span></span><span class="line"><span class="cl">myDictionary = defaultdict(list) 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="counter">Counter</h2>
<blockquote>
<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>
</blockquote>
<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import Counter #(capital &#39;C&#39;)
</span></span><span class="line"><span class="cl"># can also be used as &#39;collections.Counter()&#39; in code
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">list1 = [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;y&#39;, &#39;z&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Initialization
</span></span><span class="line"><span class="cl">Counter(list1) # =&gt; Counter({&#39;x&#39;: 4, &#39;y&#39;: 2, &#39;z&#39;: 2})
</span></span><span class="line"><span class="cl">Counter(&#34;Welcome to Guru99 Tutorials!&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39; &#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2.....})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Updating
</span></span><span class="line"><span class="cl">counterObject = collections.Counter(list1)
</span></span><span class="line"><span class="cl">counterObject.keys() = [ &#39;x&#39; , &#39;y&#39; , &#39;z&#39; ]
</span></span><span class="line"><span class="cl">most_common_element = counterObject.most_common(1) # [(&#39;x&#39;, 4)]
</span></span><span class="line"><span class="cl">counterObject.update(&#34;some string&#34;) # =&gt; Counter({&#39;o&#39;: 3, &#39;u&#39;: 3, &#39;e&#39;: 2, &#39;s&#39;: 2})
</span></span><span class="line"><span class="cl">counterObject[&#39;s&#39;] += 1 # Increase/Decrease frequency
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Accessing
</span></span><span class="line"><span class="cl">frequency_of_s = counterObject[&#39;s&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Deleting
</span></span><span class="line"><span class="cl">del couterObject[&#39;s&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="deque">Deque</h2>
<blockquote>
<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from collections import deque
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue = deque([&#39;name&#39;,&#39;age&#39;,&#39;DOB&#39;])
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.append(&#34;append_from_right&#34;) # Append from right
</span></span><span class="line"><span class="cl">queue.pop() # Pop from right
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.appendleft(&#34;fromLeft&#34;) # Append from left
</span></span><span class="line"><span class="cl">queue.popleft() # Pop from left
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.
</span></span><span class="line"><span class="cl">queue.insert(index,element)
</span></span><span class="line"><span class="cl">queue.remove() # removes first occurrance
</span></span><span class="line"><span class="cl">queue.count() # obvious
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">queue.reverse() # reverses order of queue elements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="heapq">Heapq</h2>
<blockquote>
<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library/module.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import heapq # (minHeap by Default)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums = [5, 7, 9, 1, 3]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).
</span></span><span class="line"><span class="cl">heapq.heappush(nums,element) # Push an element into the heap
</span></span><span class="line"><span class="cl">heapq.heappop(nums) # Pop an element from the heap
</span></span><span class="line"><span class="cl">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Other Methods Available in the Library
</span></span><span class="line"><span class="cl"># Used to return the k largest elements from the iterable specified 
</span></span><span class="line"><span class="cl"># The key is a function with that accepts single element from iterable,
</span></span><span class="line"><span class="cl"># and the returned value from that function is then used to rank that element in the heap
</span></span><span class="line"><span class="cl">heapq.nlargest(k, iterable, key = fun)
</span></span><span class="line"><span class="cl">heapq.nsmallest(k, iterable, key = fun)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sets">Sets</h2>
<blockquote>
<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg" alt="Untitled"  />
</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set = {1,2,3}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.add(item)
</span></span><span class="line"><span class="cl">set.remove(item)
</span></span><span class="line"><span class="cl">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not
</span></span><span class="line"><span class="cl">set.pop() # removes random item (since unordered)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.isdisjoint(anotherSet) # returns true if no common elements
</span></span><span class="line"><span class="cl">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
</span></span><span class="line"><span class="cl">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.difference(anotherSet) # returns set containing items ONLY in first set
</span></span><span class="line"><span class="cl">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
</span></span><span class="line"><span class="cl">set.intersection(anotherSet) # returns new set with common elements
</span></span><span class="line"><span class="cl">set.intersection_update(anotherSet) # modifies first set keeping only common elements
</span></span><span class="line"><span class="cl">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
</span></span><span class="line"><span class="cl">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set.union(anotherSet) # ...
</span></span><span class="line"><span class="cl">set.update(anotherSet) # adds anotherSet without duplicate
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="tuples">Tuples</h2>
<blockquote>
<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>
</blockquote>
<ul>
<li>
<p><em>Operations Time Complexities</em></p>
<p>Similar to list</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tuple = (1,2,3,1)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tuple.count(1) # returns occurence of an item
</span></span><span class="line"><span class="cl">tuple.index(1) # returns index of 1 in array
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="strings">Strings</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span><span class="lnt" id="hl-8-37"><a class="lnlinks" href="#hl-8-37">37</a>
</span><span class="lnt" id="hl-8-38"><a class="lnlinks" href="#hl-8-38">38</a>
</span><span class="lnt" id="hl-8-39"><a class="lnlinks" href="#hl-8-39">39</a>
</span><span class="lnt" id="hl-8-40"><a class="lnlinks" href="#hl-8-40">40</a>
</span><span class="lnt" id="hl-8-41"><a class="lnlinks" href="#hl-8-41">41</a>
</span><span class="lnt" id="hl-8-42"><a class="lnlinks" href="#hl-8-42">42</a>
</span><span class="lnt" id="hl-8-43"><a class="lnlinks" href="#hl-8-43">43</a>
</span><span class="lnt" id="hl-8-44"><a class="lnlinks" href="#hl-8-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ** split Function **
</span></span><span class="line"><span class="cl">#The split() method breaks up a string at the specified separator and returns a list of strings.
</span></span><span class="line"><span class="cl">text = &#39;Python is a fun programming language&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># split the text from space
</span></span><span class="line"><span class="cl">print(text.split(&#39; &#39;))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#convert string to list
</span></span><span class="line"><span class="cl">s=&#34;abcd&#34;
</span></span><span class="line"><span class="cl">s=list(s)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Output: [&#39;Python&#39;, &#39;is&#39;, &#39;a&#39;, &#39;fun&#39;, &#39;programming&#39;, &#39;language&#39;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ** count Function **
</span></span><span class="line"><span class="cl">#The count() method returns the number of occurrences of a substring in the given string.
</span></span><span class="line"><span class="cl">#Example
</span></span><span class="line"><span class="cl">message = &#39;python is popular programming language&#39;
</span></span><span class="line"><span class="cl"># number of occurrence of &#39;p&#39;
</span></span><span class="line"><span class="cl">print(&#39;Number of occurrence of p:&#39;, message.count(&#39;p&#39;)) # Output: Number of occurrence of p: 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
</span></span><span class="line"><span class="cl">s = &#39;1242323&#39;
</span></span><span class="line"><span class="cl">print(s.isnumeric()) #Output: True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
</span></span><span class="line"><span class="cl"># check the index of &#39;fun&#39;
</span></span><span class="line"><span class="cl">print(message.find(&#39;fun&#39;)) # Output: 12
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">name = &#34;M3onica Gell22er &#34;
</span></span><span class="line"><span class="cl">print(name.isalnum()) # Output : False
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
</span></span><span class="line"><span class="cl">name = &#34;Monica&#34;
</span></span><span class="line"><span class="cl">print(name.isalpha()) #output true
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#other imp functions
</span></span><span class="line"><span class="cl">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
</span></span><span class="line"><span class="cl">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.
</span></span><span class="line"><span class="cl">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
</span></span><span class="line"><span class="cl">string.islower()
</span></span><span class="line"><span class="cl">string.isdigit()
</span></span><span class="line"><span class="cl">string.isupper()
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="built-in-or-library-functions">Built-in or Library functions</h1>
<ul>
<li>
<p>Functions to iterate over list / other iterable (tuple, dictionaries)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span><span class="lnt" id="hl-9-16"><a class="lnlinks" href="#hl-9-16">16</a>
</span><span class="lnt" id="hl-9-17"><a class="lnlinks" href="#hl-9-17">17</a>
</span><span class="lnt" id="hl-9-18"><a class="lnlinks" href="#hl-9-18">18</a>
</span><span class="lnt" id="hl-9-19"><a class="lnlinks" href="#hl-9-19">19</a>
</span><span class="lnt" id="hl-9-20"><a class="lnlinks" href="#hl-9-20">20</a>
</span><span class="lnt" id="hl-9-21"><a class="lnlinks" href="#hl-9-21">21</a>
</span><span class="lnt" id="hl-9-22"><a class="lnlinks" href="#hl-9-22">22</a>
</span><span class="lnt" id="hl-9-23"><a class="lnlinks" href="#hl-9-23">23</a>
</span><span class="lnt" id="hl-9-24"><a class="lnlinks" href="#hl-9-24">24</a>
</span><span class="lnt" id="hl-9-25"><a class="lnlinks" href="#hl-9-25">25</a>
</span><span class="lnt" id="hl-9-26"><a class="lnlinks" href="#hl-9-26">26</a>
</span><span class="lnt" id="hl-9-27"><a class="lnlinks" href="#hl-9-27">27</a>
</span><span class="lnt" id="hl-9-28"><a class="lnlinks" href="#hl-9-28">28</a>
</span><span class="lnt" id="hl-9-29"><a class="lnlinks" href="#hl-9-29">29</a>
</span><span class="lnt" id="hl-9-30"><a class="lnlinks" href="#hl-9-30">30</a>
</span><span class="lnt" id="hl-9-31"><a class="lnlinks" href="#hl-9-31">31</a>
</span><span class="lnt" id="hl-9-32"><a class="lnlinks" href="#hl-9-32">32</a>
</span><span class="lnt" id="hl-9-33"><a class="lnlinks" href="#hl-9-33">33</a>
</span><span class="lnt" id="hl-9-34"><a class="lnlinks" href="#hl-9-34">34</a>
</span><span class="lnt" id="hl-9-35"><a class="lnlinks" href="#hl-9-35">35</a>
</span><span class="lnt" id="hl-9-36"><a class="lnlinks" href="#hl-9-36">36</a>
</span><span class="lnt" id="hl-9-37"><a class="lnlinks" href="#hl-9-37">37</a>
</span><span class="lnt" id="hl-9-38"><a class="lnlinks" href="#hl-9-38">38</a>
</span><span class="lnt" id="hl-9-39"><a class="lnlinks" href="#hl-9-39">39</a>
</span><span class="lnt" id="hl-9-40"><a class="lnlinks" href="#hl-9-40">40</a>
</span><span class="lnt" id="hl-9-41"><a class="lnlinks" href="#hl-9-41">41</a>
</span><span class="lnt" id="hl-9-42"><a class="lnlinks" href="#hl-9-42">42</a>
</span><span class="lnt" id="hl-9-43"><a class="lnlinks" href="#hl-9-43">43</a>
</span><span class="lnt" id="hl-9-44"><a class="lnlinks" href="#hl-9-44">44</a>
</span><span class="lnt" id="hl-9-45"><a class="lnlinks" href="#hl-9-45">45</a>
</span><span class="lnt" id="hl-9-46"><a class="lnlinks" href="#hl-9-46">46</a>
</span><span class="lnt" id="hl-9-47"><a class="lnlinks" href="#hl-9-47">47</a>
</span><span class="lnt" id="hl-9-48"><a class="lnlinks" href="#hl-9-48">48</a>
</span><span class="lnt" id="hl-9-49"><a class="lnlinks" href="#hl-9-49">49</a>
</span><span class="lnt" id="hl-9-50"><a class="lnlinks" href="#hl-9-50">50</a>
</span><span class="lnt" id="hl-9-51"><a class="lnlinks" href="#hl-9-51">51</a>
</span><span class="lnt" id="hl-9-52"><a class="lnlinks" href="#hl-9-52">52</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">,</span> <span class="n">iter</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="c1">#fun : It is a function to which map passes each element of given iterable.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#iter : It is a iterable which is to be mapped.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">zip</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">elem1</span><span class="p">,</span><span class="n">elem2</span> <span class="ow">in</span> <span class="n">zip</span><span class="p">(</span><span class="n">firstList</span><span class="p">,</span><span class="n">secondList</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># will merge both lists and produce tuples with both elements</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Tuples will stop at shortest list (in case of both lists having different len)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">a = (&#34;John&#34;, &#34;Charles&#34;, &#34;Mike&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">b = (&#34;Jenny&#34;, &#34;Christy&#34;, &#34;Monica&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">x = zip(a, b)
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">#use the tuple() function to display a readable version of the result:
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">print(tuple(x))
</span></span></span><span class="line"><span class="cl"><span class="s1">o/p: ((&#39;John&#39;, &#39;Jenny&#39;), (&#39;Charles&#39;, &#39;Christy&#39;), (&#39;Mike&#39;, &#39;Monica&#39;))
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">any</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span> <span class="p">[</span> <span class="n">OPPOSITE</span> <span class="n">IS</span> <span class="o">=&gt;</span> <span class="o">**</span> <span class="n">all</span><span class="p">()</span> <span class="o">**</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">any</span><span class="p">(</span><span class="n">someList</span><span class="p">)</span> <span class="c1"># returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">list</span><span class="o">|</span><span class="n">tuple</span><span class="p">)</span> <span class="o">**</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># [when you need to attach indexes to lists or tuples ]</span>
</span></span><span class="line"><span class="cl"><span class="n">enumerate</span><span class="p">(</span><span class="n">anyList</span><span class="p">)</span> <span class="c1"># [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] =&gt; [(0, &#39;a&#39;), (1, &#39;b&#39;), (2, &#39;c&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">filter</span><span class="p">(</span><span class="n">function</span><span class="o">|</span><span class="n">list</span><span class="p">)</span> <span class="o">**</span>
</span></span><span class="line"><span class="cl"><span class="n">filter</span><span class="p">(</span><span class="n">myFunction</span><span class="p">,</span><span class="n">list</span><span class="p">)</span> <span class="c1"># returns list with elements that returned true when passed in function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">*****************</span> <span class="n">import</span> <span class="n">bisect</span> <span class="o">***********************</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="n">number</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="p">)</span> <span class="o">**</span> <span class="n">O</span><span class="p">(</span><span class="nb">log</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [ returns the index where the element should be inserted </span>
</span></span><span class="line"><span class="cl"><span class="c1">#		such that sorting order is maintained ]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># [1,2,4] =&gt; 2 coz &#39;3&#39; should be inserted in 2nd index to maintain sorting order</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># they have same arguments. Suppose the element we want to insert is already present</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the sorting list, the bisect_left() will return index left of the existing number</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and the bisect_right() or bisect() will return index right to the existing number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_right(list,number,begin,end) ** </span>
</span></span><span class="line"><span class="cl"><span class="c1"># ** bisect.insort_left(list,number,begin,end)  ** </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">The</span> <span class="n">above</span> <span class="mi">3</span> <span class="n">functions</span> <span class="n">are</span> <span class="n">exact</span> <span class="n">same</span> <span class="n">of</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(),</span> <span class="n">the</span> <span class="n">only</span> <span class="n">difference</span>
</span></span><span class="line"><span class="cl"><span class="n">is</span> <span class="n">that</span> <span class="n">they</span> <span class="k">return</span> <span class="n">the</span> <span class="n">sorted</span> <span class="n">list</span> <span class="n">after</span> <span class="n">inserting</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">index</span><span class="o">.</span> <span class="n">The</span>
</span></span><span class="line"><span class="cl"><span class="n">left</span><span class="p">()</span> <span class="n">right</span><span class="p">()</span> <span class="n">logic</span> <span class="n">is</span> <span class="n">also</span> <span class="n">same</span> <span class="n">as</span> <span class="n">above</span><span class="o">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Getting ASCII value of a character</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2">2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3">3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">** ord(str) **
</span></span><span class="line"><span class="cl"># returns ascii value of the character , Example ord(&#34;a&#34;) = 97
</span></span><span class="line"><span class="cl">** chr(int) ** 
</span></span><span class="line"><span class="cl">#return character of given ascii value , Example chr(97) = &#34;a&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="clean-code-tips">Clean Code Tips</h1>
<ul>
<li>
<p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic üòé</p>
<p>A docstring is short for documentation string.</p>
<p>Python docstrings (documentation strings) are the¬†<a href="https://www.programiz.com/python-programming/string">string</a>¬†literals that appear right after the definition of a function, method, class, or module.</p>
<p>Triple quotes are used while writing docstrings. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span></code></pre></td></tr></table>
</div>
</div><p>Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>
<p>The docstrings are associated with the object as their¬†<code>__doc__</code>¬†attribute.</p>
<p>So, we can access the docstrings of the above function with the following lines of code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2">2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3">3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def double(num):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;Function to double the value&#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    return 2*num
</span></span><span class="line"><span class="cl">print(double.__doc__)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Output</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Function to double the value
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>
<h3 id="definition-and-usage">Definition and Usage</h3>
<p>The¬†<code>assert</code>¬†keyword is used when debugging code.</p>
<p>The¬†<code>assert</code>¬†keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>
<p>You can write a message to be written if the code returns False, check the example below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-14-1"><a class="lnlinks" href="#hl-14-1">1</a>
</span><span class="lnt" id="hl-14-2"><a class="lnlinks" href="#hl-14-2">2</a>
</span><span class="lnt" id="hl-14-3"><a class="lnlinks" href="#hl-14-3">3</a>
</span><span class="lnt" id="hl-14-4"><a class="lnlinks" href="#hl-14-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">x = &#34;hello&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#if condition returns False, AssertionError is raised:
</span></span><span class="line"><span class="cl">assert x == &#34;goodbye&#34;, &#34;x should be &#39;hello&#39;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>
<ul>
<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>
</ul>
</li>
</ul>
<h1 id="miscellaneous">Miscellaneous</h1>
<ul>
<li>
<p>How to take multiple line input in python?</p>
<ul>
<li>Using split() method</li>
<li>Using List comprehension</li>
</ul>
<p><strong>Syntax :</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-15-1"><a class="lnlinks" href="#hl-15-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">input().split(separator, maxsplit)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="example">Example</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-16-1"><a class="lnlinks" href="#hl-16-1"> 1</a>
</span><span class="lnt" id="hl-16-2"><a class="lnlinks" href="#hl-16-2"> 2</a>
</span><span class="lnt" id="hl-16-3"><a class="lnlinks" href="#hl-16-3"> 3</a>
</span><span class="lnt" id="hl-16-4"><a class="lnlinks" href="#hl-16-4"> 4</a>
</span><span class="lnt" id="hl-16-5"><a class="lnlinks" href="#hl-16-5"> 5</a>
</span><span class="lnt" id="hl-16-6"><a class="lnlinks" href="#hl-16-6"> 6</a>
</span><span class="lnt" id="hl-16-7"><a class="lnlinks" href="#hl-16-7"> 7</a>
</span><span class="lnt" id="hl-16-8"><a class="lnlinks" href="#hl-16-8"> 8</a>
</span><span class="lnt" id="hl-16-9"><a class="lnlinks" href="#hl-16-9"> 9</a>
</span><span class="lnt" id="hl-16-10"><a class="lnlinks" href="#hl-16-10">10</a>
</span><span class="lnt" id="hl-16-11"><a class="lnlinks" href="#hl-16-11">11</a>
</span><span class="lnt" id="hl-16-12"><a class="lnlinks" href="#hl-16-12">12</a>
</span><span class="lnt" id="hl-16-13"><a class="lnlinks" href="#hl-16-13">13</a>
</span><span class="lnt" id="hl-16-14"><a class="lnlinks" href="#hl-16-14">14</a>
</span><span class="lnt" id="hl-16-15"><a class="lnlinks" href="#hl-16-15">15</a>
</span><span class="lnt" id="hl-16-16"><a class="lnlinks" href="#hl-16-16">16</a>
</span><span class="lnt" id="hl-16-17"><a class="lnlinks" href="#hl-16-17">17</a>
</span><span class="lnt" id="hl-16-18"><a class="lnlinks" href="#hl-16-18">18</a>
</span><span class="lnt" id="hl-16-19"><a class="lnlinks" href="#hl-16-19">19</a>
</span><span class="lnt" id="hl-16-20"><a class="lnlinks" href="#hl-16-20">20</a>
</span><span class="lnt" id="hl-16-21"><a class="lnlinks" href="#hl-16-21">21</a>
</span><span class="lnt" id="hl-16-22"><a class="lnlinks" href="#hl-16-22">22</a>
</span><span class="lnt" id="hl-16-23"><a class="lnlinks" href="#hl-16-23">23</a>
</span><span class="lnt" id="hl-16-24"><a class="lnlinks" href="#hl-16-24">24</a>
</span><span class="lnt" id="hl-16-25"><a class="lnlinks" href="#hl-16-25">25</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing how to
</span></span><span class="line"><span class="cl"># multiple input using split
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Number of boys: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three inputs at a time
</span></span><span class="line"><span class="cl">x, y, z = input(&#34;Enter a three value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;Total number of students: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Number of boys is : &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Number of girls is : &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">a, b = input(&#34;Enter a two value: &#34;).split()
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(a, b))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl"># and type casting using list() function
</span></span><span class="line"><span class="cl">x = list(map(int, input(&#34;Enter a multiple value: &#34;).split()))
</span></span><span class="line"><span class="cl">print(&#34;List of students: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-17-1"><a class="lnlinks" href="#hl-17-1"> 1</a>
</span><span class="lnt" id="hl-17-2"><a class="lnlinks" href="#hl-17-2"> 2</a>
</span><span class="lnt" id="hl-17-3"><a class="lnlinks" href="#hl-17-3"> 3</a>
</span><span class="lnt" id="hl-17-4"><a class="lnlinks" href="#hl-17-4"> 4</a>
</span><span class="lnt" id="hl-17-5"><a class="lnlinks" href="#hl-17-5"> 5</a>
</span><span class="lnt" id="hl-17-6"><a class="lnlinks" href="#hl-17-6"> 6</a>
</span><span class="lnt" id="hl-17-7"><a class="lnlinks" href="#hl-17-7"> 7</a>
</span><span class="lnt" id="hl-17-8"><a class="lnlinks" href="#hl-17-8"> 8</a>
</span><span class="lnt" id="hl-17-9"><a class="lnlinks" href="#hl-17-9"> 9</a>
</span><span class="lnt" id="hl-17-10"><a class="lnlinks" href="#hl-17-10">10</a>
</span><span class="lnt" id="hl-17-11"><a class="lnlinks" href="#hl-17-11">11</a>
</span><span class="lnt" id="hl-17-12"><a class="lnlinks" href="#hl-17-12">12</a>
</span><span class="lnt" id="hl-17-13"><a class="lnlinks" href="#hl-17-13">13</a>
</span><span class="lnt" id="hl-17-14"><a class="lnlinks" href="#hl-17-14">14</a>
</span><span class="lnt" id="hl-17-15"><a class="lnlinks" href="#hl-17-15">15</a>
</span><span class="lnt" id="hl-17-16"><a class="lnlinks" href="#hl-17-16">16</a>
</span><span class="lnt" id="hl-17-17"><a class="lnlinks" href="#hl-17-17">17</a>
</span><span class="lnt" id="hl-17-18"><a class="lnlinks" href="#hl-17-18">18</a>
</span><span class="lnt" id="hl-17-19"><a class="lnlinks" href="#hl-17-19">19</a>
</span><span class="lnt" id="hl-17-20"><a class="lnlinks" href="#hl-17-20">20</a>
</span><span class="lnt" id="hl-17-21"><a class="lnlinks" href="#hl-17-21">21</a>
</span><span class="lnt" id="hl-17-22"><a class="lnlinks" href="#hl-17-22">22</a>
</span><span class="lnt" id="hl-17-23"><a class="lnlinks" href="#hl-17-23">23</a>
</span><span class="lnt" id="hl-17-24"><a class="lnlinks" href="#hl-17-24">24</a>
</span><span class="lnt" id="hl-17-25"><a class="lnlinks" href="#hl-17-25">25</a>
</span><span class="lnt" id="hl-17-26"><a class="lnlinks" href="#hl-17-26">26</a>
</span><span class="lnt" id="hl-17-27"><a class="lnlinks" href="#hl-17-27">27</a>
</span><span class="lnt" id="hl-17-28"><a class="lnlinks" href="#hl-17-28">28</a>
</span><span class="lnt" id="hl-17-29"><a class="lnlinks" href="#hl-17-29">29</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python program showing
</span></span><span class="line"><span class="cl"># how to take multiple input
</span></span><span class="line"><span class="cl"># using List comprehension
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two input at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking three input at a time
</span></span><span class="line"><span class="cl">x, y, z = [int(x) for x in input(&#34;Enter three value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First Number is: &#34;, x)
</span></span><span class="line"><span class="cl">print(&#34;Second Number is: &#34;, y)
</span></span><span class="line"><span class="cl">print(&#34;Third Number is: &#34;, z)
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking two inputs at a time
</span></span><span class="line"><span class="cl">x, y = [int(x) for x in input(&#34;Enter two value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;First number is {} and second number is {}&#34;.format(x, y))
</span></span><span class="line"><span class="cl">print()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split()]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># taking multiple inputs at a time separated by comma
</span></span><span class="line"><span class="cl">x = [int(x) for x in input(&#34;Enter multiple value: &#34;).split(&#34;,&#34;)]
</span></span><span class="line"><span class="cl">print(&#34;Number of list is: &#34;, x)
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-18-1"><a class="lnlinks" href="#hl-18-1">1</a>
</span><span class="lnt" id="hl-18-2"><a class="lnlinks" href="#hl-18-2">2</a>
</span><span class="lnt" id="hl-18-3"><a class="lnlinks" href="#hl-18-3">3</a>
</span><span class="lnt" id="hl-18-4"><a class="lnlinks" href="#hl-18-4">4</a>
</span><span class="lnt" id="hl-18-5"><a class="lnlinks" href="#hl-18-5">5</a>
</span><span class="lnt" id="hl-18-6"><a class="lnlinks" href="#hl-18-6">6</a>
</span><span class="lnt" id="hl-18-7"><a class="lnlinks" href="#hl-18-7">7</a>
</span><span class="lnt" id="hl-18-8"><a class="lnlinks" href="#hl-18-8">8</a>
</span><span class="lnt" id="hl-18-9"><a class="lnlinks" href="#hl-18-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Syntax :
</span></span><span class="line"><span class="cl">math.log(a,Base)
</span></span><span class="line"><span class="cl">Parameters :a : The numeric value
</span></span><span class="line"><span class="cl">Base :  Base to which the logarithm has to be computed.
</span></span><span class="line"><span class="cl">Return Value :
</span></span><span class="line"><span class="cl">Returns natural log if 1 argument is passed and log with
</span></span><span class="line"><span class="cl">specified base if 2 arguments are passed.
</span></span><span class="line"><span class="cl">Exceptions :
</span></span><span class="line"><span class="cl">Raises ValueError is a negative no. is passed as argument.
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-19-1"><a class="lnlinks" href="#hl-19-1">1</a>
</span><span class="lnt" id="hl-19-2"><a class="lnlinks" href="#hl-19-2">2</a>
</span><span class="lnt" id="hl-19-3"><a class="lnlinks" href="#hl-19-3">3</a>
</span><span class="lnt" id="hl-19-4"><a class="lnlinks" href="#hl-19-4">4</a>
</span><span class="lnt" id="hl-19-5"><a class="lnlinks" href="#hl-19-5">5</a>
</span><span class="lnt" id="hl-19-6"><a class="lnlinks" href="#hl-19-6">6</a>
</span><span class="lnt" id="hl-19-7"><a class="lnlinks" href="#hl-19-7">7</a>
</span><span class="lnt" id="hl-19-8"><a class="lnlinks" href="#hl-19-8">8</a>
</span><span class="lnt" id="hl-19-9"><a class="lnlinks" href="#hl-19-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base e of 14
</span></span><span class="line"><span class="cl">print (&#34;Natural logarithm of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Printing the log base 5 of 14
</span></span><span class="line"><span class="cl">print (&#34;Logarithm base 5 of 14 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.log(14,5))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Finding the ceiling and the floor value
<ul>
<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-20-1"><a class="lnlinks" href="#hl-20-1"> 1</a>
</span><span class="lnt" id="hl-20-2"><a class="lnlinks" href="#hl-20-2"> 2</a>
</span><span class="lnt" id="hl-20-3"><a class="lnlinks" href="#hl-20-3"> 3</a>
</span><span class="lnt" id="hl-20-4"><a class="lnlinks" href="#hl-20-4"> 4</a>
</span><span class="lnt" id="hl-20-5"><a class="lnlinks" href="#hl-20-5"> 5</a>
</span><span class="lnt" id="hl-20-6"><a class="lnlinks" href="#hl-20-6"> 6</a>
</span><span class="lnt" id="hl-20-7"><a class="lnlinks" href="#hl-20-7"> 7</a>
</span><span class="lnt" id="hl-20-8"><a class="lnlinks" href="#hl-20-8"> 8</a>
</span><span class="lnt" id="hl-20-9"><a class="lnlinks" href="#hl-20-9"> 9</a>
</span><span class="lnt" id="hl-20-10"><a class="lnlinks" href="#hl-20-10">10</a>
</span><span class="lnt" id="hl-20-11"><a class="lnlinks" href="#hl-20-11">11</a>
</span><span class="lnt" id="hl-20-12"><a class="lnlinks" href="#hl-20-12">12</a>
</span><span class="lnt" id="hl-20-13"><a class="lnlinks" href="#hl-20-13">13</a>
</span><span class="lnt" id="hl-20-14"><a class="lnlinks" href="#hl-20-14">14</a>
</span><span class="lnt" id="hl-20-15"><a class="lnlinks" href="#hl-20-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Python code to demonstrate the working of
</span></span><span class="line"><span class="cl"># ceil() and floor()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># importing &#34;math&#34; for mathematical operations
</span></span><span class="line"><span class="cl">import math
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">a = 2.3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the ceil of 2.3 (i.e 3)
</span></span><span class="line"><span class="cl">print (&#34;The ceil of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.ceil(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the floor of 2.3 (i.e 2)
</span></span><span class="line"><span class="cl">print (&#34;The floor of 2.3 is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.floor(a))
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Other Important functions</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-21-1"><a class="lnlinks" href="#hl-21-1"> 1</a>
</span><span class="lnt" id="hl-21-2"><a class="lnlinks" href="#hl-21-2"> 2</a>
</span><span class="lnt" id="hl-21-3"><a class="lnlinks" href="#hl-21-3"> 3</a>
</span><span class="lnt" id="hl-21-4"><a class="lnlinks" href="#hl-21-4"> 4</a>
</span><span class="lnt" id="hl-21-5"><a class="lnlinks" href="#hl-21-5"> 5</a>
</span><span class="lnt" id="hl-21-6"><a class="lnlinks" href="#hl-21-6"> 6</a>
</span><span class="lnt" id="hl-21-7"><a class="lnlinks" href="#hl-21-7"> 7</a>
</span><span class="lnt" id="hl-21-8"><a class="lnlinks" href="#hl-21-8"> 8</a>
</span><span class="lnt" id="hl-21-9"><a class="lnlinks" href="#hl-21-9"> 9</a>
</span><span class="lnt" id="hl-21-10"><a class="lnlinks" href="#hl-21-10">10</a>
</span><span class="lnt" id="hl-21-11"><a class="lnlinks" href="#hl-21-11">11</a>
</span><span class="lnt" id="hl-21-12"><a class="lnlinks" href="#hl-21-12">12</a>
</span><span class="lnt" id="hl-21-13"><a class="lnlinks" href="#hl-21-13">13</a>
</span><span class="lnt" id="hl-21-14"><a class="lnlinks" href="#hl-21-14">14</a>
</span><span class="lnt" id="hl-21-15"><a class="lnlinks" href="#hl-21-15">15</a>
</span><span class="lnt" id="hl-21-16"><a class="lnlinks" href="#hl-21-16">16</a>
</span><span class="lnt" id="hl-21-17"><a class="lnlinks" href="#hl-21-17">17</a>
</span><span class="lnt" id="hl-21-18"><a class="lnlinks" href="#hl-21-18">18</a>
</span><span class="lnt" id="hl-21-19"><a class="lnlinks" href="#hl-21-19">19</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#Constants
</span></span><span class="line"><span class="cl"># Print the value of Euler e (2.718281828459045)
</span></span><span class="line"><span class="cl">print (math.e)
</span></span><span class="line"><span class="cl"># Print the value of pi (3.141592653589793)
</span></span><span class="line"><span class="cl">print (math.pi)
</span></span><span class="line"><span class="cl">print (math.gcd(b, a))
</span></span><span class="line"><span class="cl">print (pow(3,4))
</span></span><span class="line"><span class="cl"># print the square root of 4
</span></span><span class="line"><span class="cl">print(math.sqrt(4))
</span></span><span class="line"><span class="cl">a = math.pi/6
</span></span><span class="line"><span class="cl">b = 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from radians to degrees
</span></span><span class="line"><span class="cl">print (&#34;The converted value from radians to degrees is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.degrees(a))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># returning the converted value from degrees to radians
</span></span><span class="line"><span class="cl">print (&#34;The converted value from degrees to radians is : &#34;, end=&#34;&#34;)
</span></span><span class="line"><span class="cl">print (math.radians(b))
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-22-1"><a class="lnlinks" href="#hl-22-1">1</a>
</span><span class="lnt" id="hl-22-2"><a class="lnlinks" href="#hl-22-2">2</a>
</span><span class="lnt" id="hl-22-3"><a class="lnlinks" href="#hl-22-3">3</a>
</span><span class="lnt" id="hl-22-4"><a class="lnlinks" href="#hl-22-4">4</a>
</span><span class="lnt" id="hl-22-5"><a class="lnlinks" href="#hl-22-5">5</a>
</span><span class="lnt" id="hl-22-6"><a class="lnlinks" href="#hl-22-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** bin(int) **
</span></span><span class="line"><span class="cl">bin(anyNumber) # Returns binary version of number
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">** divmod(int,int) **
</span></span><span class="line"><span class="cl">divmod(dividend,divisor) # returns tuple like (quotient, remainder)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-the-custom-comparator-works">How the custom comparator works</h2>
<p>When providing a custom comparator, it should generally return an integer/float value that follows the following pattern (as with most other programming languages and frameworks):</p>
<ul>
<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted¬†<em>before</em>¬†the right item</li>
<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted¬†<em>after</em>¬†the right item</li>
<li>return¬†<code>0</code>¬†when both the left and the right item have the same weight and should be ordered &ldquo;equally&rdquo; without precedence</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-23-1"><a class="lnlinks" href="#hl-23-1"> 1</a>
</span><span class="lnt" id="hl-23-2"><a class="lnlinks" href="#hl-23-2"> 2</a>
</span><span class="lnt" id="hl-23-3"><a class="lnlinks" href="#hl-23-3"> 3</a>
</span><span class="lnt" id="hl-23-4"><a class="lnlinks" href="#hl-23-4"> 4</a>
</span><span class="lnt" id="hl-23-5"><a class="lnlinks" href="#hl-23-5"> 5</a>
</span><span class="lnt" id="hl-23-6"><a class="lnlinks" href="#hl-23-6"> 6</a>
</span><span class="lnt" id="hl-23-7"><a class="lnlinks" href="#hl-23-7"> 7</a>
</span><span class="lnt" id="hl-23-8"><a class="lnlinks" href="#hl-23-8"> 8</a>
</span><span class="lnt" id="hl-23-9"><a class="lnlinks" href="#hl-23-9"> 9</a>
</span><span class="lnt" id="hl-23-10"><a class="lnlinks" href="#hl-23-10">10</a>
</span><span class="lnt" id="hl-23-11"><a class="lnlinks" href="#hl-23-11">11</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">from</span> <span class="n">functools</span> <span class="n">import</span> <span class="n">cmp_to_key</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted</span><span class="p">(</span><span class="n">mylist</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="n">compare</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Example</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">fitness</span><span class="p">(</span><span class="n">item2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>Python integer division behaves differently with -ve numbers ex: -3//2 will give -2 answer instead of -1 so always use int(-3/2) for integer division in problems</p>
</blockquote>
<h1 id="resources">Resources</h1>
<p><a href="https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32">The Modulo Operation (%) With Negative Numbers in Python</a></p>
<h3 id="cheat-sheet-pdf">Cheat Sheet PDF</h3>
<p><a href="https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing"><strong>Click Here</strong></a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
